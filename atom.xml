<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>explorerの博客</title>
  
  
  <link href="http://ccsu.top/atom.xml" rel="self"/>
  
  <link href="http://ccsu.top/"/>
  <updated>2023-04-10T07:51:31.871Z</updated>
  <id>http://ccsu.top/</id>
  
  <author>
    <name>Explorer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://ccsu.top/posts/0/"/>
    <id>http://ccsu.top/posts/0/</id>
    <published>2023-04-10T07:55:27.187Z</published>
    <updated>2023-04-10T07:51:31.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本节思维导图"><a href="#本节思维导图" class="headerlink" title="本节思维导图"></a>本节思维导图</h1><p><img src="https://img-blog.csdnimg.cn/277741932b674f558160c0f85e9a0297.png" loading="lazy"></p><h1 id="一：计算机层次结构"><a href="#一：计算机层次结构" class="headerlink" title="一：计算机层次结构"></a>一：计算机层次结构</h1><h2 id="（1）冯诺依曼机特点"><a href="#（1）冯诺依曼机特点" class="headerlink" title="（1）冯诺依曼机特点"></a>（1）<a href="https://so.csdn.net/so/search?q=%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC&spm=1001.2101.3001.7020">冯诺依曼</a>机特点</h2><p><strong>冯诺依曼机特点如下</strong></p><ol><li>计算机硬件系统由<strong>运算器、存储器、控制器、输入和输出设备</strong> 5 部分组成</li><li><strong>指令和数据</strong>以同等地位存储在<strong>存储器</strong>，并可按<strong>地址</strong>寻访</li><li>指令由<strong>操作码和地址码</strong>组成，操作码用于表示这是一个<strong>什么类型的操作</strong>，地址码用于表示<strong>操作数在存储器中的存放位置</strong></li><li>指令在存储器内<strong>按顺序存放</strong>（一般情况下是这样的，但在特定条件下也可以进行设定）</li><li><strong>早期的冯诺依曼机器以运算器为中心</strong>，输入输出设备通过运算器与存储器传送数据</li></ol><p><img src="https://img-blog.csdnimg.cn/2021071021272932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><ul><li>上图中，<strong>实线是数据线，虚线是控制线</strong>（双向）</li></ul><p><strong>冯诺依曼机缺陷（早期）</strong></p><p>在控制器的指挥下，输入和输出设备输入一些数据交给<a href="https://so.csdn.net/so/search?q=%E8%BF%90%E7%AE%97%E5%99%A8&spm=1001.2101.3001.7020">运算器</a>进行运算，如果产生中间结果，就会传送给存储器，计算完成后最终结果会给输出设备。<strong>可以发现这种层次结构容易受到输入和输出设备的牵制，因为他们的速度相较于运算器太慢了（短板效应）</strong></p><h2 id="（2）现代计算机的组织结构"><a href="#（2）现代计算机的组织结构" class="headerlink" title="（2）现代计算机的组织结构"></a>（2）现代计算机的组织结构</h2><p>为了解决 I&#x2F;O 设备的速度和 CPU 速度差异悬殊的问题，<strong>现如今的计算机则采用以存储器为中心的计算机组织结构</strong>，这种结果使 I&#x2F;O 操作尽可能绕过 CPU，直接<strong>在 I&#x2F;O 设备和存储器之间完成</strong>，以提高系统的整体运行效率</p><p><img src="https://img-blog.csdnimg.cn/202107102132256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><h1 id="二：计算机硬件概述"><a href="#二：计算机硬件概述" class="headerlink" title="二：计算机硬件概述"></a>二：计算机硬件概述</h1><h2 id="（1）存储器（第三章重点学习）"><a href="#（1）存储器（第三章重点学习）" class="headerlink" title="（1）存储器（第三章重点学习）"></a>（1）存储器（第三章重点学习）</h2><h3 id="A：存储器相关基本定义"><a href="#A：存储器相关基本定义" class="headerlink" title="A：存储器相关基本定义"></a>A：存储器相关基本定义</h3><p><strong>存储器相关基本定义：目前我们采用半导体器件来承担存储任务，一个半导体触发器由于有 0 和 1 两个状态，就可以记忆一个二进制代码，关于存储器有如下五个非常重要的概念</strong></p><ul><li><p><strong>存储元</strong>：也可称为存储元件和存储基元，用来存放<strong>一位二进制信息</strong></p></li><li><p><strong>存储单元</strong>：由若干个存储元组成，能存放<strong>多位二进制信息</strong></p></li><li><p><strong>存储体</strong>：许多存储单元可组成存储体，也即<strong>存储矩阵</strong></p></li><li><p><strong>存储字</strong>：每个存储单元中<strong>二进制代码的组合</strong>即为存储字，可代表数值、指令和地址等</p></li><li><p><strong>存储字长</strong>：每个存储单元中<strong>二进制代码的位数</strong>就是存储字长</p></li></ul><p><strong>上述概念可以这样记忆</strong>：主存储器由许多存储单元组成，每个存储单元包含多个存储元，每个存储元存储 1 位二进制代码 0 或 1，故存储单元可存储一串二进制代码，称这串代码为存储字，而这串代码的位数称为存储字长，存储字长一般是一个字节（8 位）或字节的偶数倍</p><h3 id="B：存储器的基本结构"><a href="#B：存储器的基本结构" class="headerlink" title="B：存储器的基本结构"></a>B：存储器的基本结构</h3><p><strong>存储器基本结构：存储器主要分为</strong></p><ul><li><strong>主存（内存）</strong>：CPU <strong>可以直接访问</strong>；主要存放<strong>程序和数据</strong>；是计算机实现 “<strong>存储程序</strong>” 控制的基础；外存中信息必须<strong>加载进主存后</strong> CPU 才可以访问</li><li><strong>辅存（外存）</strong>：CPU <strong>不可以直接访问</strong></li></ul><p><strong>主存的基本构成如下图所示</strong></p><ul><li><strong>存储体 M</strong>：存放<strong>二进制信息</strong></li><li><strong>MAR（地址寄存器）</strong>：存放的是<strong>访存地址</strong>（经过地址译码后找到所选存储单元）</li><li><strong>MDR（数据寄存器）</strong>：存放的是要从存储器中<strong>读入或写入的信息</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/20210707205110657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>内部原理图如下</p><p><img src="https://img-blog.csdnimg.cn/20210707211249847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><h3 id="C：存储器相关小考点"><a href="#C：存储器相关小考点" class="headerlink" title="C：存储器相关小考点"></a>C：存储器相关小考点</h3><p><strong>此部分内容将在【第三章：存储系统】学习，所以看不太懂没有关系，其中一些常考考点汇总如下</strong></p><ul><li>数据在存储体中是<strong>按照地址存储的，每个地址对应一个存储单元</strong></li><li><strong>存储单元数目 &#x3D; 2 M A R 位数 2^{MAR 位数} 2MAR 位数</strong>（如果 MAR 为 10 位，则存储单元数目为 2 10 &#x3D; 1024 2^{10}&#x3D;1024 210&#x3D;1024）。它用于<strong>寻址</strong>，其长度和 PC（程序计数器）长度一致</li><li><strong>MDR 的位数表示存储字长</strong>（例如 MDR 为 16，表示存储字长为 16，也表示 1 个字 (word)&#x3D;16bit）</li><li>注意区分<strong>字（word）和字节（Byte），1 个字节等于 8 个 bit</strong>，而 1 个字的大小取决于机器</li><li><strong>1B&#x3D;1 个字节，1b&#x3D;1 个 bit</strong></li></ul><h2 id="（2）运算器（第五章重点学习）"><a href="#（2）运算器（第五章重点学习）" class="headerlink" title="（2）运算器（第五章重点学习）"></a>（2）运算器（第五章重点学习）</h2><p><strong>运算器：是计算机的执行部件，主要进行</strong></p><ul><li><strong>算数运算</strong>：比如加减乘除</li><li><strong>逻辑运算</strong>：比如与、或、非、异或、比较等等</li></ul><h3 id="A：运算器基本结构"><a href="#A：运算器基本结构" class="headerlink" title="A：运算器基本结构"></a>A：运算器基本结构</h3><p><strong>运算器基本结构：由以下四部分构成</strong></p><ul><li><strong>ALU（算数逻辑单元）</strong>：运算器中造价最为高昂的部分，本质是一对电路</li><li><strong>ACC（累加器）</strong>：辅助 ALU</li><li><strong>MQ（乘商寄存器）</strong>：辅助 ALU</li><li><strong>X（操作数寄存器）</strong>：辅助 ALU</li></ul><p><img src="https://img-blog.csdnimg.cn/20210708211659860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><h3 id="B：运算器过程伪代码描述（了解）"><a href="#B：运算器过程伪代码描述（了解）" class="headerlink" title="B：运算器过程伪代码描述（了解）"></a>B：运算器过程伪代码描述（了解）</h3><p>设 M 为主存中的某一个存储单元，<code>(M)</code>表示取 M 中的数据，<code>-&gt;</code>表示将内容送入寄存器</p><p><strong>加法实现</strong>：假设 ACC 中已经存在一个数，那么首先取 M 的内容送入操作数寄存器 X，即<code>(M)-&gt;X</code>；然后两者相加重新送入寄存器 ACC 中，即<code>(ACC)+(M)-&gt;(ACC)</code></p><p><strong>乘法实现</strong>：假设 ACC 中已经存在一个数，那么首先取 M 的内容送入乘商寄存器 MQ 作为乘数，即<code>(M)-&gt;MQ</code>，再取 ACC 寄存器的内容放入 X 寄存器作为被乘数，即<code>ACC-&gt;X</code>，接着将 ACC 清零，即<code>0-&gt;ACC</code>，然后乘数乘以被乘数，一个送入乘积高位，一个送入乘积低位，即<code>(X)×(MQ)-&gt;ACC//MQ</code></p><p><strong>除法实现</strong>：假设 ACC 中已经存在一个数，首先取 M 的内容送入 X 作为除数，即<code>(M)-&gt;X</code>，ACC 中的内容作为被除数，结果一个放入 MQ 作为整数部分，即<code>(ACC)/(X)-&gt;MQ</code>，另一个放入 ACC 作为余数，即<code>(ACC)%(X)-&gt;ACC</code></p><h2 id="（3）控制器（第四章重点学习）"><a href="#（3）控制器（第四章重点学习）" class="headerlink" title="（3）控制器（第四章重点学习）"></a>（3）控制器（第四章重点学习）</h2><p><strong>运算器：是计算机的指挥中心，由其指挥各部件自动协调地进行工作</strong></p><h3 id="A：指令"><a href="#A：指令" class="headerlink" title="A：指令"></a>A：指令</h3><p><strong>指令：是指指挥机器工作的指示和命令。程序本质就是一系列按照一定顺序排列的指令。人们用程序表达自己的意图，控制器则通过指令指挥机器工作。指令 &#x3D; 操作码 + 地址码</strong></p><ul><li><strong>操作码</strong>：指示计算机要干什么</li><li><strong>地址码</strong>：干这些事情需要的原材料在哪里</li></ul><p><img src="https://img-blog.csdnimg.cn/20210708214333628.png" loading="lazy">  </p><h3 id="B：控制器基本结构"><a href="#B：控制器基本结构" class="headerlink" title="B：控制器基本结构"></a>B：控制器基本结构</h3><p><strong>控制器基本结构：由以下三部分构成</strong></p><ul><li><strong>控制单元（CU）</strong>：分析指令、发出信号、协调操作</li><li><strong>指令寄存器（IR）</strong>：存放<strong>当前要执行的指令</strong>。注意其内容来源于 MDR，因为指令和数据本质是一样的，都被存放在存储器</li><li><strong>程序计数器（PC）</strong>：存放<strong>当前要执行的指令地址</strong>。注意其与 MAR 直接连通，并且可以自动 + 1</li></ul><h3 id="C：控制器过程伪代码描述（了解）"><a href="#C：控制器过程伪代码描述（了解）" class="headerlink" title="C：控制器过程伪代码描述（了解）"></a>C：控制器过程伪代码描述（了解）</h3><p>完成一条指令的过程为：<strong>取指令（PC）-&gt; 分析指令（IR）-&gt; 执行指令（CU）</strong></p><p>具体过程：首先取出指令，即<code>(IR)</code>，接着获取指令的操作码，即<code>OP(IR)</code>，然后获取指令的地址码，即<code>AD(IR)</code>，然后将操作码送入控制单元分析，即<code>OP(IR)-&gt;CU</code>，操作码表示需要干什么，但是干活需要原材料，所以再把指令的地址码送入 MAR，<code>AD(IR)-&gt;MAR</code>, 从 MAR 指示的存储体取出原材料即可。</p><p>结合前面的加法，我们可以写出完整的加法运算的过程的： 首要取加法指令，而指令存储在存储体中，想要取出指令必须要知道的指令的地址，而这个地址就存放在 PC 中，PC 又和 MAR 直接相连，即<code>(PC)-&gt;MAR</code>，于是指令此时被放入了 MDR 中，那么接着将指令放入 IR 中，即<code>(MDR)-&gt;IR</code>, 接着取指令的操作码送入控制单元，即<code>OP(IR)-&gt;CU</code>，然后再把原材料（就是一些操作数）的地址码送入 MAR，即<code>AD(IR)-&gt;MAR</code>。接着就可以进行加法操作了，由于上一步已经将操作数的地址码送入了 MDR 中，所以现在送入操作数寄存器，即<code>(MDR)-&gt;X</code>，然后<code>(ACC)+(X)-&gt;ACC</code>，最后 PC 要自增，即<code>(PC)+1-&gt;PC</code>，表示下一条指令</p><h1 id="精华总结：计算机的工作过程"><a href="#精华总结：计算机的工作过程" class="headerlink" title="精华总结：计算机的工作过程"></a>精华总结：计算机的工作过程</h1><p><strong>接下来以一段简单的 C 语言代码为例展示计算机在背后所做的工作</strong></p><ul><li>以下程序非常简单，声明了 4 个变量并赋值，然后在 main 函数内进行运算</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过编译器编译后，这段程序在主存中就是这样的  </p><p><img src="https://img-blog.csdnimg.cn/20210709205502227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><ul><li>下半部分是定义的变量，上半部分则是对应于高级语言对应的机器指令</li></ul><p>为了方便演示，我们将控制器、运算器和存储体也放在旁</p><p><img src="https://img-blog.csdnimg.cn/2021070920590266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>第一组<br>1：程序开始运行，PC 的值为 0，保存的是第一条指令的地址。然后将 PC 的内容，也就是指令的地址送入到 MAR 中，即 (PC)-&gt;MAR,MAR&#x3D;0。也就是说控制器向存储器指明，我接下来要访问主存 0 号地址处的数据，同时告诉存储器进行读操作 </p><p><img src="https://img-blog.csdnimg.cn/20210709210926709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>2+3：主存储器会根据 MAR 记录的地址信息，到存储体中找出 0 号地址对应的二进制数据，并将其放入到 MDR 中，此时 MDR 中存放了第一条指令。即 M(MAR)-&gt;MDR，此时 MDR&#x3D;000001 0000000101</p><p><img src="https://img-blog.csdnimg.cn/20210709211259622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"><br>4：接着将 MDR 中的指令放入 IR 中，于是控制器就存放了当前要执行的指令。即 (MDR)-&gt;IR，(IR)&#x3D;000001 0000000101 </p><p><img src="https://img-blog.csdnimg.cn/20210709211700524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>5：这条指令的前 6 个比特位是操作码，会被送入到控制单元 CU 中，CU 分析后，得知这是一条取数命令。即 OP(IR)-&gt;CU </p><p><img src="https://img-blog.csdnimg.cn/2021070921204041.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"> </p><p>6：取数指令会将变量 a 的内容放入寄存器 ACC 中。但是现在变量 a 不知道在哪里，所以现在会把指令的地址码送到 MAR 当中，即 (MAR)&#x3D;5 </p><p><img src="https://img-blog.csdnimg.cn/2021070921232482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>7+8：接着主存储器根据 MAR 指明的地址，也就是 a 的地址（5），去存储体中找出 5 号地址的数据，并将其放入 MDR 当中。即 M(MAR)-&gt;MDR,(MDR)&#x3D;0000000000000010，也即 (MDR)&#x3D;2  </p><p><img src="https://img-blog.csdnimg.cn/20210709212637697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>9：接着在控制单元的指挥下，MDR 中的数据就被放入到了 ACC 中。至此第一条指令完成  </p><p><img src="https://img-blog.csdnimg.cn/20210709212801126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>10：最后 PC 自增 1，进行下一条指令，即 (PC)&#x3D;1  </p><p><img src="https://img-blog.csdnimg.cn/20210709213101456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>接下来进行下一组操作  </p><p><img src="https://img-blog.csdnimg.cn/2021070921411568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20210709214129807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"><br>1：程序接着运行，PC 的值为 1，保存的是第二条指令的地址。然后将 PC 的内容，也就是指令的地址送入到 MAR 中，即 (PC)-&gt;MAR,MAR&#x3D;1。也就是说控制器向存储器指明，我接下来要访问主存 1 号地址处的数据，同时告诉存储器进行读操作  </p><p><img src="https://img-blog.csdnimg.cn/20210709214251637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>2+3：主存储器会根据 MAR 记录的地址信息，到存储体中找出 1 号地址对应的二进制数据，并将其放入到 MDR 中，此时 MDR 中存放了第二条指令。即 M(MAR)-&gt;MDR，此时 MDR&#x3D;000100 0000000110  </p><p><img src="https://img-blog.csdnimg.cn/202107092144267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>4：接着将 MDR 中的指令放入 IR 中，于是控制器就存放了当前要执行的指令。即 (MDR)-&gt;IR，(IR)&#x3D;000100 0000000110  </p><p><img src="https://img-blog.csdnimg.cn/20210709214520645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>5：这条指令的前 6 个比特位是操作码，会被送入到控制单元 CU 中，CU 分析后，得知这是一条乘法命令。即 OP(IR)-&gt;CU  </p><p><img src="https://img-blog.csdnimg.cn/20210709214608109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>6：接着把指令的地址码送到 MAR 当中，即 (MAR)&#x3D;6  </p><p><img src="https://img-blog.csdnimg.cn/20210709214735472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>7+8：接着主存储器根据 MAR 指明的地址，也就是 b 的地址（6），去存储体中找出 6 号地址的数据，并将其放入 MDR 当中。即 M(MAR)-&gt;MDR,(MDR)&#x3D;0000000000000011，也即 (MDR)&#x3D;3  </p><p><img src="https://img-blog.csdnimg.cn/20210709214851687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>9：由于是乘法，所以控制单元将 MDR 中的内容送入到乘商寄存器 MQ 中，即 (MDR)-&gt;MQ，此时 (MQ)&#x3D;0000000000000011&#x3D;3  </p><p><img src="https://img-blog.csdnimg.cn/20210709215043208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>10：先把 a 的值放入通用寄存器 X 中，即 (ACC)-&gt;X,(X)&#x3D;2  </p><p><img src="https://img-blog.csdnimg.cn/20210709215126337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy">  </p><p>11：CU 告诉 ALU，让其进行乘法运算。即 (MQ)×(X)-&gt;ACC,(ACC)&#x3D;6。注意如果乘积过大，需要 MQ 辅助存储，也就是最上面讲到过的 (X)×(MQ)-&gt;ACC&#x2F;&#x2F;MQ<br><img src="https://img-blog.csdnimg.cn/20210709215438477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>接着进行下一组操作，具体过程就不详细演示了，步骤如下</p><ul><li><strong>1</strong>:PC 存储 2 号指令的地址，(PC)-&gt;MAR,(MAR)&#x3D;2</li><li><strong>2+3</strong>:M(MAR)-&gt;MDR,(MDR)&#x3D;000011 0000000111</li><li><strong>4</strong>:(MDR)-&gt;IR，(IR)&#x3D;000011 0000000111</li><li><strong>5</strong>:OP(IR)-&gt;CU,CU 分析操作码，得知这是加法执行</li><li><strong>6</strong>:Ad(IR)-&gt;MAR，将指令的地址码送入 MAR,(MAR)&#x3D;7</li><li><strong>7+8</strong>:M(MAR)-&gt;MDR，(MDR)&#x3D;00000000 00000001&#x3D;1</li><li><strong>9</strong>:(MDR)-&gt;x,(X)&#x3D; 00000000 00000001&#x3D;1</li><li><strong>10</strong>:(ACC)+(X)-&gt;ACC,(ACC)-&gt;7，由 ALU 实现加法运算</li></ul><p><img src="https://img-blog.csdnimg.cn/20210710204733164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>接着进行下一组操作</p><ul><li><strong>1</strong>:(PC)-&gt;MAR,(MAR)&#x3D;3</li><li><strong>2+3</strong>:M(MAR)-&gt;MDR,MDR&#x3D;000010 0000001000</li><li><strong>4:</strong>(MDR)-&gt;IR,(IR)000010 0000001000</li><li>**5:**OP(IR)-&gt;CU,CU 分析得知，这是存数指令</li><li><strong>6</strong>:AD(IR)-&gt;MAR,(MAR)&#x3D;8</li><li><strong>7+8</strong>:(ACC)-&gt;MDR,MDR&#x3D;7</li><li><strong>9</strong>:(MDR)-&gt; 地址为 8 的存储单元，导致 y&#x3D;7</li></ul><p><img src="https://img-blog.csdnimg.cn/20210710205412110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTgzMDM0,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>最后再读取到停机指令时，计算机通过中断机制就结束了程序的运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本节思维导图&quot;&gt;&lt;a href=&quot;#本节思维导图&quot; class=&quot;headerlink&quot; title=&quot;本节思维导图&quot;&gt;&lt;/a&gt;本节思维导图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/277741932b674f55</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MQTT协议</title>
    <link href="http://ccsu.top/posts/bd50b816/"/>
    <id>http://ccsu.top/posts/bd50b816/</id>
    <published>2022-06-01T03:45:00.000Z</published>
    <updated>2022-06-01T03:51:05.291Z</updated>
    
    <content type="html"><![CDATA[<p>一.什么是MQTT协议</p><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布&#x2F;订阅（publish&#x2F;subscribe）模式的“轻量级”通讯协议，该协议构建于TCP&#x2F;IP协议上，由IBM在1999年发布。</p><p>MQTT最大优点在于，用极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。</p><p>作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><h1 id="二-MQTT协议特点"><a href="#二-MQTT协议特点" class="headerlink" title="二.MQTT协议特点"></a>二.MQTT协议特点</h1><p>MQTT是一个基于客户端-服务器的消息发布&#x2F;订阅传输协议。</p><p>MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。</p><p>其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p><p>MQTT协议当前版本为，2014年发布的MQTT v3.1.1。除标准版外，还有一个简化版MQTT-SN，该协议主要针对嵌入式设备，这些设备一般工作于TCP&#x2F;IP网络，如：ZigBee。</p><p>MQTT 与 HTTP 一样，MQTT 运行在传输控制协议&#x2F;互联网协议 (TCP&#x2F;IP) 堆栈之上。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220601001652.png" alt="img" loading="lazy"></p><p>MQTT协议当前版本为，2014年发布的<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">MQTT v3.1.1</a>。除标准版外，还有一个简化版<code>MQTT-SN</code>，该协议主要针对嵌入式设备，这些设备一般工作于TCP&#x2F;IP网络，如：ZigBee。</p><p>MQTT协议运行在<code>TCP/IP</code>或其他网络协议，提供有序、无损、双向连接。其特点包括：</p><ol><li><p>使用的发布&#x2F;订阅消息模式，它提供了一对多消息分发，以实现与应用程序的解耦。</p></li><li><p>对负载内容屏蔽的消息传输机制。</p></li><li><p>对传输消息有三种服务质量（QoS）：</p></li><li><ul><li><p><code>最多一次</code>，这一级别会发生消息丢失或重复，消息发布依赖于底层TCP&#x2F;IP网络。即：&lt;&#x3D;1</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220601002046.png" alt="img" loading="lazy"></p></li><li><p><code>至多一次</code>，这一级别会确保消息到达，但消息可能会重复。即：&gt;&#x3D;1</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220601002054.png" alt="img" loading="lazy"></p></li><li><p><code>只有一次</code>，确保消息只有一次到达。即：＝1。在一些要求比较严格的计费系统中，可以使用此级别。为此，带有唯一消息 ID 的消息会存储两次，首先来自发送者，然后是接收者。QoS 级别 2 在网络中具有最高的开销，因为在发送方和接收方之间需要两个流。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220601002100.png" alt="img" loading="lazy"></p></li></ul></li><li><p>数据传输和协议交换的最小化（协议头部只有2字节），以减少网络流量</p></li><li><p>通知机制，异常中断时通知传输双方</p></li></ol><h1 id="三-MQTT协议原理"><a href="#三-MQTT协议原理" class="headerlink" title="三.MQTT协议原理"></a>三.MQTT协议原理</h1><p>1.<code>MQTT</code>协议实现方式</p><p><code>MQTT</code>使用的发布&#x2F;订阅消息模式，它提供了一对多的消息分发机制，从而实现与应用程序的解耦。</p><p>这是一种消息传递模式，<strong>消息不是直接从发送器发送到接收器</strong>（即点对点），而是由<code>MQTT server</code>（或称为 MQTT Broker）分发的。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220601002952.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220601010213.png" alt="image-20220601010212990" loading="lazy"></p><ul><li>实现<code>MQTT</code>协议需要：<code>客户端</code>和<code>服务器端</code></li><li><code>MQTT</code>协议中有三种身份：<code>发布者（Publish）</code>、<code>代理（Broker）</code>（服务器）、<code>订阅者（Subscribe）</code>。其中，消息的<code>发布者</code>和<code>订阅者</code>都是客户端，消息<code>代理</code>是服务器，消息<code>发布者</code>可以同时是<code>订阅者</code>。</li><li>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分<ul><li><code>Topic</code>，可以理解为消息的类型，<code>订阅者</code>订阅（Subscribe）后，就会收到该主题的消息内容（<code>payload</code>）</li><li><code>payload</code>，可以理解为消息的内容，是指<code>订阅者</code>具体要使用的内容</li></ul></li></ul><h1 id="四-MQTT案例"><a href="#四-MQTT案例" class="headerlink" title="四.MQTT案例"></a>四.MQTT案例</h1><p>光伏发电站是发布者（Publisher）。</p><p>主要主题（Topic）级别是”PV”，这个工厂发布两个子级别”sunshine”和”data”；</p><p>“PV&#x2F;sunshine”是一个布尔值（true&#x2F;false，也可以是 1&#x2F;0），充电站需要它来知道是否应该装载电动汽车（仅在阳光普照时 :)）。</p><p>充电站（EVSE）是订阅者，订阅”PV&#x2F;sunshine”从服务器获取信息。</p><p>“PV&#x2F;data” 另一方面，以 kW 为单位传输工厂产生的瞬时功率，并且该主题可以例如通过计算机或平板电脑订阅，以生成一天内传输功率的图表。</p><p>这就是一个简单的MQTT的应用场景，具体如下图所示；</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220601010123.png" alt="img" loading="lazy"></p><h1 id="五-MQTT的优点"><a href="#五-MQTT的优点" class="headerlink" title="五.MQTT的优点"></a>五.MQTT的优点</h1><ol><li>MQTT的独特功能是每个消息头都可以缩短为2个字节。对于HTTP，为每个新请求消息重新建立HTTP连接会产生可观的开销。 MQ和MQTT使用的持久连接可以大大减少这种开销。</li><li>包容不稳定的网络，MQTT和MQ可以从诸如断开连接之类的故障中恢复，无需进一步的代码要求。但是，HTTP本身无法实现此目标，并且客户端必须重试编码，这会增加身份问题。</li><li>低功耗MQTT专为低功耗目标而设计。 HTTP设计未考虑此因素，这会增加功耗。</li><li>在连接数百万个客户端的情况下，在HTTP堆栈中维护数百万个并发连接需要大量工作才能提供支持。尽管这种支持是可行的，但大多数商业产品都经过优化以处理此订单上的持久连接。 IBM提供了IBM MessageSight，这是一种单机架安装服务器，已经过测试，可以通过MQTT处理多达一百万个并发设备。相反，MQ不是为许多同时进行的客户设计的。</li><li>推送通知。您需要能够及时向客户发送通知。为此，您应该使用常规的轮询或推送方法。就电池，系统负载和带宽而言，推送是最佳解决方案。</li><li>客户端平台的差异。 HTTP和MQTT客户端都在许多平台上实现。 MQTT的简单性可帮助您以最少的努力在其他客户端上实施MQTT。</li><li>防火墙容错能力。某些公司防火墙将出站连接限制到某些预定义的端口，这些端口通常仅限于HTTP（端口80），HTTPS（端口443）等，HTTP在这种情况下显然可以工作。 MQTT封装在WebSockets连接中，并显示为HTTP升级请求，因此可以在这种情况下运行。</li></ol><p><strong>补充</strong>：</p><ul><li><strong>mqtt</strong>：一种通信协议，类似人类交谈中的汉语、英语、俄语中的一种语言规范</li><li><strong>MQ</strong>：一种通信通道，也叫消息队列，类似人类交谈中的用电话、email、微信的一种通信方式</li><li><strong>json</strong>：一种内容格式，类似人类交谈中的排比句等方式</li><li><strong>消息</strong>：信息的载体</li><li><strong>消息协议</strong>：为了让消息发送者和消息接收者都能够明白消息所承载的信息（消息发送者需要知道如何构造消息；消息接收者需要知道如何解析消息），它们就需要按照一种统一的格式描述消息，这种统一的格式称之为消息协议。所以，有效的消息一定具有某一种格式；而没有格式的消息是没有意义的。</li><li><strong>消息队列</strong>：消息从发送者到接收者的方式也有两种。<ul><li>一种为即时消息通讯，也就是说消息从一端发出后（消息发送者）立即就可以达到另一端（消息接收者），这种方式的具体实现就是我们已经介绍过的RPC（当然单纯的http通讯也满足这个定义）；</li><li>另一种为延迟消息通讯，即消息从某一端发出后，首先进入一个容器进行临时存储，当达到某种条件后，再由这个容器发送给另一端。 这个容器的一种具体实现就是消息队列，如RabbitMQ。</li></ul></li></ul><p><strong>参考链接</strong>：</p><p><a href="https://itbilu.com/other/relate/4kHBsx_Pg.html">https://itbilu.com/other/relate/4kHBsx_Pg.html</a></p><p><a href="https://blog.csdn.net/u010632165/article/details/118503059">https://blog.csdn.net/u010632165/article/details/118503059</a></p><p><a href="https://blog.csdn.net/hyz529900/article/details/123917756">https://blog.csdn.net/hyz529900/article/details/123917756</a></p><p><a href="https://www.cnblogs.com/111testing/p/11487689.html">https://www.cnblogs.com/111testing/p/11487689.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一.什么是MQTT协议&lt;/p&gt;
&lt;p&gt;MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布&amp;#x2F;订阅（publish&amp;#x2F;subscribe）模式的“轻量级”通讯协议，该协议构建于TCP&amp;#x2</summary>
      
    
    
    
    <category term="MQTT" scheme="http://ccsu.top/categories/MQTT/"/>
    
    
    <category term="MQTT" scheme="http://ccsu.top/tags/MQTT/"/>
    
  </entry>
  
  <entry>
    <title>树莓派4B UART多串口配置通信</title>
    <link href="http://ccsu.top/posts/54ae1768/"/>
    <id>http://ccsu.top/posts/54ae1768/</id>
    <published>2022-04-23T12:18:00.000Z</published>
    <updated>2022-05-25T12:28:59.257Z</updated>
    
    <content type="html"><![CDATA[<p>相比树莓派零、1、2 以及 3 的双串口 UART0（PL011）和 UART1（mini UART），树莓派 4 中新增了 4 个 PL011 串口共计有 6 个 UART，整理此笔记用作记录和配置参考。</p><p>注意，目前搜到的大多数描述树莓派 4 串口的文章，大多数开头都是禁用下蓝牙，这个做法针对树莓派0-3 是必须的，因为本身串口不够用，但对树莓派 4 来说并不需要，因为有额外 4 个串口可以利用，默认配置好的两串口一个用于蓝牙（UART0）另一个是 miniUART 可以保留设置。此方面的文章大多都是一个流程，原因是参考的最初版本是树莓派 3 的设置；树莓派 4 的额外串口设置在树莓派论坛中可以看到相关的介绍，外面的文章不太多。</p><h1 id="1-展示所有串口命令"><a href="#1-展示所有串口命令" class="headerlink" title="1. 展示所有串口命令"></a>1. 展示所有串口命令</h1><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">dtoverlay -a | grep uart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展示 pi4 中所有串口</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pi@raspberrypi:~ $ dtoverlay -a | grep uart  midi-uart0  midi-uart1  miniuart-bt  uart0  uart1  uart2  uart3  uart4  uart5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-查看特定串口信息"><a href="#2-查看特定串口信息" class="headerlink" title="2. 查看特定串口信息"></a>2. 查看特定串口信息</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dtoverlay -h uart2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 UART2 的配置信息等：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pi@raspberrypi:~ $ dtoverlay -h uart2Name:   uart2Info:   Enable uart 2 on GPIOs 0-3Usage:  dtoverlay&#x3D;uart2,&lt;param&gt;Params: ctsrts                  Enable CTS&#x2F;RTS on GPIOs 2-3 (default off)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关信息会展现 GPIOs 与新的 UART 串口的分配：0-3 对应 UART2， 4-7 对应 UART3，8-11 对应 UART 4，以及 12-15 对应 GUIO 5</p><p>关于 4 个针脚中后两位对应的 CTS&#x2F;RTS，可参考： <a href="https://blog.csdn.net/zeroboundary/article/details/8966586">https://blog.csdn.net/zeroboundary/article/details/8966586</a></p><h1 id="3-配置开启串口-UART2-5"><a href="#3-配置开启串口-UART2-5" class="headerlink" title="3. 配置开启串口 UART2-5"></a>3. 配置开启串口 UART2-5</h1><p>执行编辑 config.txt 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /boot/config.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件结尾添加如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">dtoverlay&#x3D;uart2dtoverlay&#x3D;uart3dtoverlay&#x3D;uart4dtoverlay&#x3D;uart5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保存（Write Out）并退出（Exit）</p><p>重启后查看是否生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> /dev/ttyAMA*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果显示如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pi@raspberrypi:~ $ ls &#x2F;dev&#x2F;ttyAMA*&#x2F;dev&#x2F;ttyAMA0  &#x2F;dev&#x2F;ttyAMA1  &#x2F;dev&#x2F;ttyAMA2  &#x2F;dev&#x2F;ttyAMA3  &#x2F;dev&#x2F;ttyAMA4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>各 UART 串口与 GPIO 对应关系：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">GPIO14 &#x3D; TXD0 -&gt; ttyAMA0GPIO0  &#x3D; TXD2 -&gt; ttyAMA1GPIO4  &#x3D; TXD3 -&gt; ttyAMA2GPIO8  &#x3D; TXD4 -&gt; ttyAMA3GPIO12 &#x3D; TXD5 -&gt; ttyAMA4GPIO15 &#x3D; RXD0 -&gt; ttyAMA0GPIO1  &#x3D; RXD2 -&gt; ttyAMA1GPIO5  &#x3D; RXD3 -&gt; ttyAMA2GPIO9  &#x3D; RXD4 -&gt; ttyAMA3GPIO13 &#x3D; RXD5 -&gt; ttyAMA4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h1><h3 id="串口自发自收测试"><a href="#串口自发自收测试" class="headerlink" title="串口自发自收测试"></a>串口自发自收测试</h3><p>现在我们先测试 UART2 是否启用成功，比较简单的测试方式是将其 TXD 和 RXD 相连，自发自收。</p><p>根据上方对应关系，UART2 对应 TXD2 和 RXD2，对应 GPIO0 和 GPIO1，对应 ttyAMA1</p><p>注：UART0 对应的 ttyAMA0，UART1 对应的 ttyS0，UART2 到 UART5 对应的 ttyAMA1 到 ttyAMA4。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220525202856.png" alt="树莓派 gpio 针脚" loading="lazy"></p><p>找到对应的 GPIO0 和 GPIO1 针脚连起来：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409093839.png" alt="image-20220409093839015" loading="lazy"></p><p>在树莓派端命令行进入 Python3 环境，通过如下模块和命令自发自收：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pi@raspberrypi:~ $ python3Python 3.7.3 (default, Jul 25 2020, 13:03:44) [GCC 8.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import serial&gt;&gt;&gt; ted &#x3D; serial.Serial(port&#x3D;&quot;&#x2F;dev&#x2F;ttyAMA1&quot;, baudrate&#x3D;9600)&gt;&gt;&gt; ted.write(&quot;Hello World&quot;.encode(&quot;gbk&quot;))11&gt;&gt;&gt; ted.read(11)b&#39;Hello World&#39;&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，我们可以继续用跳线帽将 GPIO4 和 5 相连测试 UART3；GPIO8 和 9 相连测试 UART4； GPIO12 和 13 相连测试 UART5。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pi@raspberrypi:~ $ python3Python 3.7.3 (default, Jul 25 2020, 13:03:44) [GCC 8.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import serial&gt;&gt;&gt; ted &#x3D; serial.Serial(port&#x3D;&quot;&#x2F;dev&#x2F;ttyAMA1&quot;, baudrate&#x3D;9600)&gt;&gt;&gt; ted.write(&quot;Hello World&quot;.encode(&quot;gbk&quot;))11&gt;&gt;&gt; ted.read(11)b&#39;Hello World&#39;&gt;&gt;&gt; ted3 &#x3D; serial.Serial(port&#x3D;&quot;&#x2F;dev&#x2F;ttyAMA2&quot;, baudrate&#x3D;9600)&gt;&gt;&gt; ted3.write(&quot;Hello No.3&quot;.encode(&quot;gbk&quot;))10&gt;&gt;&gt; ted3.read(10)b&#39;Hello No.3&#39;&gt;&gt;&gt; ted4 &#x3D; serial.Serial(port&#x3D;&quot;&#x2F;dev&#x2F;ttyAMA3&quot;, baudrate&#x3D;9600)&gt;&gt;&gt; ted4.write(&quot;Hello No.4&quot;.encode(&quot;gbk&quot;))10&gt;&gt;&gt; ted4.read(10)b&#39;Hello No.4&#39;&gt;&gt;&gt; ted5 &#x3D; serial.Serial(port&#x3D;&quot;&#x2F;dev&#x2F;ttyAMA4&quot;, baudrate&#x3D;9600)&gt;&gt;&gt; ted5.write(&quot;Hello No.5&quot;.encode(&quot;gbk&quot;))10&gt;&gt;&gt; ted5.read(10)b&#39;Hello No.5&#39;&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="串口间通信测试"><a href="#串口间通信测试" class="headerlink" title="串口间通信测试"></a>串口间通信测试</h3><p>接下来测试 UART2 和 UART3 间的通信，将 TXD2 连接 RXD3 即 GPIO0 与 GPIO5 相连；将 TXD3 与 RXD2 连接即 GPIO4 与 GPIO1 相连。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">GPIO0  &#x3D; TXD2 -&gt; ttyAMA1GPIO4  &#x3D; TXD3 -&gt; ttyAMA2GPIO1  &#x3D; RXD2 -&gt; ttyAMA1GPIO5  &#x3D; RXD3 -&gt; ttyAMA2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pi@raspberrypi:~ $ python3Python 3.7.3 (default, Jul 25 2020, 13:03:44) [GCC 8.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import serial&gt;&gt;&gt; ted &#x3D; serial.Serial(port&#x3D;&quot;&#x2F;dev&#x2F;ttyAMA1&quot;, baudrate&#x3D;9600)&gt;&gt;&gt; ted3 &#x3D; serial.Serial(port&#x3D;&quot;&#x2F;dev&#x2F;ttyAMA2&quot;, baudrate&#x3D;9600)&gt;&gt;&gt; ted.write(&quot;Msg from UART2...&quot;.encode(&quot;gbk&quot;))17&gt;&gt;&gt; ted3.read(17)b&#39;Msg from UART2...&#39;&gt;&gt;&gt; ted3.write(&quot;Msg from UART3...&quot;.encode(&quot;gbk&quot;))17&gt;&gt;&gt; ted.read(17)b&#39;Msg from UART3...&#39;&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK 挺顺利，UART2 和 UART3 间通信正常。</p><p>参考：</p><p>官方 UART 配置文档：<br><a href="https://www.raspberrypi.org/documentation/configuration/uart.md">https://www.raspberrypi.org/documentation/configuration/uart.md</a></p><p>论坛关于多串口的命令与指引：<br><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=244827#p1493698">https://www.raspberrypi.org/forums/viewtopic.php?t=244827#p1493698</a></p><p>树莓派 4 UART 多串口配置通信<br><a href="https://blog.csdn.net/weixin_40796925/article/details/107907991?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164946453016781683948237%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164946453016781683948237&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107907991.142">https://blog.csdn.net/weixin_40796925/article/details/107907991?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164946453016781683948237%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164946453016781683948237&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107907991.142</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相比树莓派零、1、2 以及 3 的双串口 UART0（PL011）和 UART1（mini UART），树莓派 4 中新增了 4 个 PL011 串口共计有 6 个 UART，整理此笔记用作记录和配置参考。&lt;/p&gt;
&lt;p&gt;注意，目前搜到的大多数描述树莓派 4 串口的文章，大</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="树莓派" scheme="http://ccsu.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="串口" scheme="http://ccsu.top/tags/%E4%B8%B2%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Arduino Json串口</title>
    <link href="http://ccsu.top/posts/84233d6d/"/>
    <id>http://ccsu.top/posts/84233d6d/</id>
    <published>2022-04-09T15:18:00.000Z</published>
    <updated>2022-05-09T01:59:12.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arduino-串口接受字符串操作"><a href="#Arduino-串口接受字符串操作" class="headerlink" title="Arduino 串口接受字符串操作"></a>Arduino 串口接受字符串操作</h1><h2 id="自定义函数操作方式"><a href="#自定义函数操作方式" class="headerlink" title="自定义函数操作方式"></a>自定义函数操作方式</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*使用自定函数，将字符转化为字符串，再进行操作*&#x2F; String comdata &#x3D; &quot;&quot;;&#x2F;&#x2F;声明字符串变量 void setup() &#123;  Serial.begin(9600);      &#x2F;&#x2F;设定的波特率&#125; void loop() &#123;   while (Serial.available() &gt; 0)      &#123;        comdata +&#x3D; char(Serial.read());        delay(2);    &#125;       if (comdata.length() &gt; 0)    &#123;       Serial.println(comdata);       comdata &#x3D; &quot;&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此方法使用自定函数实现了字符到字符串的转换再进行操作，使用起来还不错，推荐大家使用。</p><h2 id="采用库函数Serial-readString-；"><a href="#采用库函数Serial-readString-；" class="headerlink" title="采用库函数Serial.readString()；"></a>采用库函数Serial.readString()；</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void setup() &#123;  Serial.begin(9600);      &#x2F;&#x2F;设定的波特率&#125; void loop() &#123;  String rx_buffer;  rx_buffer&#x3D;Serial.readString();  Serial.print(rx_buffer);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此方法使用简单暴力，但是有个缺点，官方库函数默认的参数使得读取串口操作必须要阻塞1s的时间，实时性较差；</p><p>在这里，提供一种修改方法：</p><p>在Arduino IDE 安装路径下找到<code> stream.h</code> 文件修改参数</p><p>①文件路径：<code>C:\Program Files\arduino-1.8.19\hardware\arduino\avr\cores\arduino</code></p><p>②找到文件 <code>stream.h</code>，修改参数：<code>Stream() &#123;_timeout=200;&#125;</code>，红色数值单位为毫秒，根据需要修改然后保存编译即可生效；</p><p>附<code>stream.h</code>文件内容（突出显示 要修改的地方：Stream() {_timeout&#x3D;200;}）：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*  Stream.h - base class for character-based streams.  Copyright (c) 2010 David A. Mellis.  All right reserved.  This library is free software; you can redistribute it and&#x2F;or  modify it under the terms of the GNU Lesser General Public  License as published by the Free Software Foundation; either  version 2.1 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful,  but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public  License along with this library; if not, write to the Free Software  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  parsing functions based on TextFinder library by Michael Margolis*&#x2F;#ifndef Stream_h#define Stream_h#include &lt;inttypes.h&gt;#include &quot;Print.h&quot;&#x2F;&#x2F; compatability macros for testing&#x2F;*#define   getInt()            parseInt()#define   getInt(ignore)    parseInt(ignore)#define   getFloat()          parseFloat()#define   getFloat(ignore)  parseFloat(ignore)#define   getString( pre_string, post_string, buffer, length)readBytesBetween( pre_string, terminator, buffer, length)*&#x2F;&#x2F;&#x2F; This enumeration provides the lookahead options for parseInt(), parseFloat()&#x2F;&#x2F; The rules set out here are used until either the first valid character is found&#x2F;&#x2F; or a time out occurs due to lack of input.enum LookaheadMode&#123;    SKIP_ALL,       &#x2F;&#x2F; All invalid characters are ignored.    SKIP_NONE,      &#x2F;&#x2F; Nothing is skipped, and the stream is not touched unless the first waiting character is valid.    SKIP_WHITESPACE &#x2F;&#x2F; Only tabs, spaces, line feeds &amp; carriage returns are skipped.&#125;;#define NO_IGNORE_CHAR  &#39;\x01&#39; &#x2F;&#x2F; a char not found in a valid ASCII numeric fieldclass Stream : public Print&#123;  protected:    unsigned long _timeout;      &#x2F;&#x2F; number of milliseconds to wait for the next char before aborting timed read    unsigned long _startMillis;  &#x2F;&#x2F; used for timeout measurement    int timedRead();    &#x2F;&#x2F; read stream with timeout    int timedPeek();    &#x2F;&#x2F; peek stream with timeout    int peekNextDigit(LookaheadMode lookahead, bool detectDecimal); &#x2F;&#x2F; returns the next numeric digit in the stream or -1 if timeout  public:    virtual int available() &#x3D; 0;    virtual int read() &#x3D; 0;    virtual int peek() &#x3D; 0;    Stream() &#123;_timeout&#x3D;100;&#125;&#x2F;&#x2F; parsing methods  void setTimeout(unsigned long timeout);  &#x2F;&#x2F; sets maximum milliseconds to wait for stream data, default is 1 second  unsigned long getTimeout(void) &#123; return _timeout; &#125;    bool find(char *target);   &#x2F;&#x2F; reads data from the stream until the target string is found  bool find(uint8_t *target) &#123; return find ((char *)target); &#125;  &#x2F;&#x2F; returns true if target string is found, false if timed out (see setTimeout)  bool find(char *target, size_t length);   &#x2F;&#x2F; reads data from the stream until the target string of given length is found  bool find(uint8_t *target, size_t length) &#123; return find ((char *)target, length); &#125;  &#x2F;&#x2F; returns true if target string is found, false if timed out  bool find(char target) &#123; return find (&amp;target, 1); &#125;  bool findUntil(char *target, char *terminator);   &#x2F;&#x2F; as find but search ends if the terminator string is found  bool findUntil(uint8_t *target, char *terminator) &#123; return findUntil((char *)target, terminator); &#125;  bool findUntil(char *target, size_t targetLen, char *terminate, size_t termLen);   &#x2F;&#x2F; as above but search ends if the terminate string is found  bool findUntil(uint8_t *target, size_t targetLen, char *terminate, size_t termLen) &#123;return findUntil((char *)target, targetLen, terminate, termLen); &#125;  long parseInt(LookaheadMode lookahead &#x3D; SKIP_ALL, char ignore &#x3D; NO_IGNORE_CHAR);  &#x2F;&#x2F; returns the first valid (long) integer value from the current position.  &#x2F;&#x2F; lookahead determines how parseInt looks ahead in the stream.  &#x2F;&#x2F; See LookaheadMode enumeration at the top of the file.  &#x2F;&#x2F; Lookahead is terminated by the first character that is not a valid part of an integer.  &#x2F;&#x2F; Once parsing commences, &#39;ignore&#39; will be skipped in the stream.  float parseFloat(LookaheadMode lookahead &#x3D; SKIP_ALL, char ignore &#x3D; NO_IGNORE_CHAR);  &#x2F;&#x2F; float version of parseInt  size_t readBytes( char *buffer, size_t length); &#x2F;&#x2F; read chars from stream into buffer  size_t readBytes( uint8_t *buffer, size_t length) &#123; return readBytes((char *)buffer, length); &#125;  &#x2F;&#x2F; terminates if length characters have been read or timeout (see setTimeout)  &#x2F;&#x2F; returns the number of characters placed in the buffer (0 means no valid data found)  size_t readBytesUntil( char terminator, char *buffer, size_t length); &#x2F;&#x2F; as readBytes with terminator character  size_t readBytesUntil( char terminator, uint8_t *buffer, size_t length) &#123; return readBytesUntil(terminator, (char *)buffer, length); &#125;  &#x2F;&#x2F; terminates if length characters have been read, timeout, or if the terminator character  detected  &#x2F;&#x2F; returns the number of characters placed in the buffer (0 means no valid data found)  &#x2F;&#x2F; Arduino String functions to be added here  String readString();  String readStringUntil(char terminator);  protected:  long parseInt(char ignore) &#123; return parseInt(SKIP_ALL, ignore); &#125;  float parseFloat(char ignore) &#123; return parseFloat(SKIP_ALL, ignore); &#125;  &#x2F;&#x2F; These overload exists for compatibility with any class that has derived  &#x2F;&#x2F; Stream and used parseFloat&#x2F;Int with a custom ignore character. To keep  &#x2F;&#x2F; the public API simple, these overload remains protected.  struct MultiTarget &#123;    const char *str;  &#x2F;&#x2F; string you&#39;re searching for    size_t len;       &#x2F;&#x2F; length of string you&#39;re searching for    size_t index;     &#x2F;&#x2F; index used by the search routine.  &#125;;  &#x2F;&#x2F; This allows you to search for an arbitrary number of strings.  &#x2F;&#x2F; Returns index of the target that is found first or -1 if timeout occurs.  int findMulti(struct MultiTarget *targets, int tCount);&#125;;#undef NO_IGNORE_CHAR#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用ArdunioJson发送Json数据包"><a href="#使用ArdunioJson发送Json数据包" class="headerlink" title="使用ArdunioJson发送Json数据包"></a>使用ArdunioJson发送Json数据包</h1><p>注意：这里使用的<strong>ArduinoJson的V6版本</strong>，关于V6和V5版本的切换，可以按照报错网站查询并修改。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;ArduinoJson.h&gt;void setup() &#123;  &#x2F;&#x2F; put your setup code here, to run once:  Serial.begin(115200);  Serial.println(&quot;begin now&quot;);&#125;void loop() &#123;  &#x2F;&#x2F; put your main code here, to run repeatedly:   DynamicJsonDocument data(256);   data[&quot;temp&quot;]&#x3D;25;   data[&quot;hum&quot;]&#x3D;110;   char json_string[256];   serializeJson(data,json_string);   Serial.println(json_string);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220430205543.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="解析Json数据包（int，char型）"><a href="#解析Json数据包（int，char型）" class="headerlink" title="解析Json数据包（int，char型）"></a>解析Json数据包（int，char型）</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 电源属性修改的回调函数void powerCallback(JsonVariant p)&#123;    extern int a;    int PowerSwitch &#x3D; p[&quot;PowerSwitch&quot;];    if (PowerSwitch &#x3D;&#x3D; 2)    &#123;       digitalWrite(LED_BUILTIN,HIGH);  &#x2F;&#x2F; 启动设备       a&#x3D;2;    &#125;     if (PowerSwitch &#x3D;&#x3D; 3)    &#123;       digitalWrite(LED_BUILTIN,LOW); &#x2F;&#x2F; 启动设备       a&#x3D;3;    &#125;&#125;&#x2F;&#x2F;字符回调函数void Receive_Zi_Fu_Callback(JsonVariant p)&#123;      const char* Zi_Fu &#x3D; p[&quot;Receive_Zi_Fu&quot;];&#x2F;      String S(Zi_Fu);&#x2F;&#x2F;const char*转String      S &#x3D; S.substring(2,6);&#x2F;&#x2F;截取字符串的一部分，可以去掉,比如123456,就是3456      extern char *c;      const int len&#x3D;S.length();      c &#x3D; new char[len+1];      strcpy(c,S.c_str());&#x2F;&#x2F;Strinf转char* ，是为了OLED_ShowString      OLED_ShowString(0,0,c,16);      Serial.println(S);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于char和String"><a href="#关于char和String" class="headerlink" title="关于char和String"></a>关于char和String</h2><ul><li>char表示的是字符，定义用单引号；</li><li>String表示字符串，定义用双引号。</li><li>string的内存管理是由系统处理，除非系统内存池用完，不然不会出现这种内存问题。</li><li>char *的内存管理由用户自己处理，很容易出现内存不足的问题。</li></ul><p>当我们要存一个串，但是不知道其他需要多少内存时， 用<code>string</code>来处理就最好不过了。当你知道了存储的内存的时候，可以用<code>char *</code>，但是不如用<code>string</code>的好，用指针总会有隐患。</p><h1 id="使用ArdunioJson解析Json数据包"><a href="#使用ArdunioJson解析Json数据包" class="headerlink" title="使用ArdunioJson解析Json数据包"></a>使用ArdunioJson解析Json数据包</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ArduinoJson.h></span></span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   DynamicJsonDocument  <span class="token function">jsonBuffer</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String json <span class="token operator">=</span>      <span class="token string">"&#123;\"sensor\":\"gps\",\"time\":1351824120,\"data\":[48.756080,2.302038]&#125;"</span><span class="token punctuation">;</span>   <span class="token function">deserializeJson</span><span class="token punctuation">(</span>jsonBuffer<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>    JsonObject root <span class="token operator">=</span> jsonBuffer<span class="token punctuation">.</span>as<span class="token operator">&lt;</span>JsonObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> sensor <span class="token operator">=</span> root<span class="token punctuation">[</span><span class="token string">"sensor"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> time <span class="token operator">=</span> root<span class="token punctuation">[</span><span class="token string">"time"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> latitude <span class="token operator">=</span> root<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> longitude <span class="token operator">=</span> root<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sensor<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>longitude<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="解析Arduino串口Json包"><a href="#解析Arduino串口Json包" class="headerlink" title="解析Arduino串口Json包"></a>解析Arduino串口Json包</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;&#123;&quot;state&quot;:1,&quot;LeftMotor&quot;:100,&quot;RightMotor&quot;:100,&quot;UpServo&quot;:10,&quot;DownServo&quot;:10,&quot;Light&quot;:0,&quot;Pump&quot;:0&#125;#include &lt;ArduinoJson.h&gt;String rx_buffer &#x3D; &quot;&quot;;&#x2F;&#x2F;声明字符串变量void setup()&#123;  Serial.begin(9600);      &#x2F;&#x2F;设定的波特率&#125;void loop()&#123;  while (Serial.available() &gt; 0)  &#123;    rx_buffer +&#x3D; char(Serial.read());    delay(2);  &#125;  if (rx_buffer.length() &gt; 0)  &#123;    DynamicJsonDocument  jsonBuffer(400);    deserializeJson(jsonBuffer, rx_buffer);    JsonObject root &#x3D; jsonBuffer.as&lt;JsonObject&gt;();    int state &#x3D; root[&quot;state&quot;];    int LeftMotor &#x3D; root[&quot;LeftMotor&quot;];    int RightMotor &#x3D; root[&quot;RightMotor&quot;];    int UpServo &#x3D; root[&quot;UpServo&quot;];    int DownServo &#x3D; root[&quot;DownServo&quot;];    int Light &#x3D; root[&quot;Light&quot;];    int Pump &#x3D; root[&quot;Pump&quot;];    Serial.println(state);    Serial.println(LeftMotor);    Serial.println(RightMotor);    Serial.println(UpServo);    Serial.println(DownServo);    Serial.println(Light);    Serial.println(Pump);    Serial.print(rx_buffer);    rx_buffer &#x3D; &quot;&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Arduino修改Serial接收缓冲区大小"><a href="#Arduino修改Serial接收缓冲区大小" class="headerlink" title="Arduino修改Serial接收缓冲区大小"></a>Arduino修改Serial接收缓冲区大小</h1><blockquote><p>  向Arduino发送一个90字节的字符串，不管怎么样都只能收到63个字节的数据，感觉应该是串口缓冲区大小的限制，修改完后，串口收发数据正常。</p></blockquote><p>看到网上有资料说，直接添加以下宏定义就可以了：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define SERIAL_RX_BUFFER_SIZE 2048 &#x2F;&#x2F;修改串口发送缓冲区大小为2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是由于Arduino的编译器是先导入其他头文件，再编译用户区代码的，所以会提示已经被重定义。</p><p>那么我们就只能根据提示，去修改<code>C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino\HardwareSerial.h</code>的代码了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220430225817.png" alt="image-20220430225817140" loading="lazy"></p><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/huanzx/article/details/79596855">https://blog.csdn.net/huanzx/article/details/79596855</a></li><li><a href="https://blog.csdn.net/weixin_43475628/article/details/118925979">https://blog.csdn.net/weixin_43475628/article/details/118925979</a></li><li><a href="https://blog.csdn.net/qq_27508477/article/details/105419505">https://blog.csdn.net/qq_27508477/article/details/105419505</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Arduino-串口接受字符串操作&quot;&gt;&lt;a href=&quot;#Arduino-串口接受字符串操作&quot; class=&quot;headerlink&quot; title=&quot;Arduino 串口接受字符串操作&quot;&gt;&lt;/a&gt;Arduino 串口接受字符串操作&lt;/h1&gt;&lt;h2 id=&quot;自定义函数</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="串口" scheme="http://ccsu.top/tags/%E4%B8%B2%E5%8F%A3/"/>
    
    <category term="Arduino" scheme="http://ccsu.top/tags/Arduino/"/>
    
    <category term="Json" scheme="http://ccsu.top/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>Arduino IO口使用方法</title>
    <link href="http://ccsu.top/posts/514fc85a/"/>
    <id>http://ccsu.top/posts/514fc85a/</id>
    <published>2022-04-09T14:18:00.000Z</published>
    <updated>2022-05-09T01:59:12.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字输入输出"><a href="#数字输入输出" class="headerlink" title="数字输入输出"></a>数字输入输出</h1><p>在使用输入或输出功能前，你需要先通过<code>pinMode()</code> 函数配置引脚的模式为输入模式或输出模式。</p><h2 id="端口初始化函数"><a href="#端口初始化函数" class="headerlink" title="端口初始化函数"></a>端口初始化函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//端口初始化</span><span class="token function">pinMode</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><p><strong>pin:</strong> 为指定配置的引脚编号</p></li><li><p>mode:</p><p> 为指定的配置模式 通常可用模式有三种:</p><ul><li><strong>INPUT:</strong> 输入模式 (DDRx&#x3D;0xFF)</li><li><strong>OUTPUT:</strong> 输出模式 (DDRx&#x3D;0x00)</li><li><strong>INPUT_PULLUP:</strong> 输入上拉模式 (DDRx&#x3D;0xFF;PORTx&#x3D;0xFF)</li></ul></li></ul><h2 id="输出电平函数"><a href="#输出电平函数" class="headerlink" title="输出电平函数"></a>输出电平函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//输出电平函数</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pin:</strong> 为指定输出的引脚编号；</li><li><strong>value:</strong> 为你要指定输出的电平<ul><li><strong>HIGH:</strong> 指定输出高电平(1)</li><li><strong>LOW:</strong> 指定输出低电平(0)(PORTx)</li></ul></li></ul><h2 id="读取电平函数"><a href="#读取电平函数" class="headerlink" title="读取电平函数"></a>读取电平函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//读取输入电平函数</span><span class="token function">digitalRead</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">digitalRead</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pin:</strong> 为指定读取状态的引脚编号。(PINx)</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>获取到的信号状态，1为高电平，0为低电平。</li></ul><h1 id="模拟输入输出"><a href="#模拟输入输出" class="headerlink" title="模拟输入输出"></a>模拟输入输出</h1><p>模拟输入引脚是带有ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。<br>它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现读入模拟值的功能。</p><h2 id="模拟信号输入函数"><a href="#模拟信号输入函数" class="headerlink" title="模拟信号输入函数"></a>模拟信号输入函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//模拟信号输入函数</span><span class="token function">analogRead</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">analogRead</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pin:</strong> 是指定要读取模拟值的引脚，被指定的引脚必须是模拟输入引脚。<br>如<code>analogRead(A0)</code>，即是读取<code>A0</code>引脚上的模拟值。</li></ul><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p><code>Arduino Uno</code>模拟输入功能有10位精度，即可以将0～5V的电压信号转换为0～1023的整数形式表示。</p><h2 id="模拟信号输出（PWM）函数"><a href="#模拟信号输出（PWM）函数" class="headerlink" title="模拟信号输出（PWM）函数"></a>模拟信号输出（PWM）函数</h2><p>在<code>Arduino Uno</code>中，提供PWM功能的引脚为3、5、6、9、10、11。<br>在<code>analogWrite()</code> 和<code>analogRead() </code>函数内部，已经完成了引脚的初始化，因此不用在Setup() 函数中进行初始化操作。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//模拟信号输出函数</span><span class="token function">analogWrite</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pin:</strong> 是指定要输出PWM波的引脚；</li><li><strong>value:</strong> 指定是PWM的脉冲宽度，范围为0～255。</li></ul><h2 id="模拟电压输出函数"><a href="#模拟电压输出函数" class="headerlink" title="模拟电压输出函数"></a>模拟电压输出函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//模拟电压输出函数</span><span class="token function">analogReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">analogReference</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>为模拟电压输入设置参考值；</li></ul><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><ul><li>analogReference(type)</li></ul><h3 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h3><p>type有以下几个选项：</p><ul><li>DEFAULT: 默认参考值5v (在5V的 板子上 ) 或者 3.3 v (在3.3V 的Arduino板子上)；</li><li>INTERNAL: 内置参考值, 在 ATmega168 或者ATmega328板子上为1.1v；在ATmega8 板子上为2.56v (在Arduino Mega板子上不可获得)。</li><li>INTERNAL1V1: 内置的1.1V 参考值 (只在Arduino Mega板子上有效 )</li><li>INTERNAL2V56: 内置的2.56V 参考值 (只在Arduino Mega板子上有效)</li><li>EXTERNAL: 在AREF引脚加的电压(0 ~ 5V)将作为参考值 。 AREF外接电源后不能使用其他的基准源,使用时会引起片内基准源与外部参考源短路</li></ul><h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><ul><li>-none</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>改变参考值的时候，刚开始的读数可能不准确。<br>不要用低于0v或高于5v的电压加在AREF引脚。如果使用加在AREF的外部电压作为参考那一定要在调用<code>analogRead()</code>之前设置<code>analogReference</code>为<code>EXTERNAL</code>，否则可能毁坏芯片。<br>也可以使用一个5千欧的电阻连接外部参考电压到AREF引脚，这样可以方便地在内外参考电压间转换，不过请注意电阻将改变原先你想要的参考值，因为在AREF引脚内部有个32千欧的内置电阻。这样两个电阻就可以分压了，例如：加的是2.5v，那么在AREF引脚的电压就是：2.5 * 32 &#x2F; (32 + 5) &#x3D; ~2.2V 。</p><h1 id="高级输入输出"><a href="#高级输入输出" class="headerlink" title="高级输入输出"></a>高级输入输出</h1><h2 id="输出50-方波函数"><a href="#输出50-方波函数" class="headerlink" title="输出50%方波函数"></a>输出50%方波函数</h2><p><code>tone() </code>主要用于<code>Arduino</code>连接蜂鸣器或扬声器发声。可以让指定引脚产生一个占空比为<code>50%</code>的指定频率的方波。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//输出50%方波函数</span><span class="token function">tone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">tone</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _pin<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> frequency<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> duration <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">tone</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> frequency<span class="token punctuation">)</span> <span class="token function">tone</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> frequency<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pin:</strong> 需要输出方波的引脚</li><li><strong>frequency:</strong> 输出的频率，unsigned int型</li><li><strong>duration:</strong> 方波持续的时间，单位毫秒。如果没有该参数，Arduino将持续发出设定的音调，直到你改变发声频率或者使用<code>noTone()</code> 函数停止发声。</li></ul><h2 id="停止输出50-方波函数"><a href="#停止输出50-方波函数" class="headerlink" title="停止输出50%方波函数"></a>停止输出50%方波函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//停止输出50%方波函数</span><span class="token function">noTone</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">noTone</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _pin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ul><li><strong>noTone(pin)</strong></li></ul><h3 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pin:</strong> 需要停止方波输出的引脚</li></ul><h2 id="检测脉冲宽度函数"><a href="#检测脉冲宽度函数" class="headerlink" title="检测脉冲宽度函数"></a>检测脉冲宽度函数</h2><p>例如当要检测高电平脉冲时，<code>pulseIn()</code> 会等待指定引脚输入的电平变高，当变高后开始记时，直到输入电平变低，停止计时。<br><code>pulseln() </code>函数会返回这个脉冲信号持续的时间，即这个脉冲的宽度。<br>函数还可以设定超时时间。如果超过设定时间，仍未检测到脉冲，则会退出<code>pulseIn()</code>函数并返回0。<br>当没有设定超时时间时，<code>pulseIn() </code>会默认1秒钟的超时时间。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//检测脉冲宽度函数</span><span class="token function">pulseIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">pulseIn</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> state<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> timeout <span class="token operator">=</span> <span class="token number">1000000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><ul><li>pulseIn(pin, value)</li><li>pulseIn(pin, value, timeout)</li></ul><h3 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h3><ul><li>pin：需要读取脉冲的引脚</li><li>value：需要读取的脉冲类型，HIGH或LOW</li><li>timeout：超时时间，单位微秒，数据类型为无符号长整型。</li></ul><h3 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h3><ul><li>返回脉冲宽度，单位微秒，数据类型为无符号长整型。如果在指定时间内没有检测到脉冲，则返回0。</li></ul><h2 id="外部中断函数"><a href="#外部中断函数" class="headerlink" title="外部中断函数"></a>外部中断函数</h2><p>对中断引脚进行初始化配置，以开启Arduino的外部中断功能</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//中断配置函数</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> ISR<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h3><ul><li>pin：中断引脚,部分为中断源标号</li></ul><table><thead><tr><th align="center">型号 编号</th><th align="center">int.0</th><th align="center">int.1</th><th align="center">int.2</th><th align="center">int.3</th><th align="center">int.4</th><th align="center">int.5</th></tr></thead><tbody><tr><td align="center">UNO\Ethernet</td><td align="center">2</td><td align="center">3</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Mega2560</td><td align="center">2</td><td align="center">3</td><td align="center">21</td><td align="center">20</td><td align="center">19</td><td align="center">18</td></tr><tr><td align="center">Leonardo</td><td align="center">3</td><td align="center">2</td><td align="center">0</td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Due</td><td align="center">所有IO口均可</td><td align="center">所有IO口均可</td><td align="center">所有IO口均可</td><td align="center">所有IO口均可</td><td align="center">所有IO口均可</td><td align="center">所有IO口均可</td></tr></tbody></table><ul><li><strong>ISR:</strong> 中断函数名</li><li><strong>mode:</strong> 中断模式<ul><li><strong>LOW:</strong> 低电平触发</li><li><strong>CHANGE:</strong> 变化时触发</li><li><strong>RISING:</strong> 低电平变为高电平时触发</li><li><strong>FALLING:</strong> 高电平变低电平时触发</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">attachInterrupt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Hello<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语句会开启Arduino Uno的 2号引脚（中断编号0）的外部中断功能，并指定下降沿时触发该中断。<br>当2号引脚上电平由高变低后，该中断会被触发，Arduino即会运行Hello() 函数中的语句。</p><h2 id="关闭中断函数"><a href="#关闭中断函数" class="headerlink" title="关闭中断函数"></a>关闭中断函数</h2><p>中断分离函数,关闭中断功能。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">detachInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pin:</strong> 需要禁用中断的引脚。<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h3></li></ul> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">detachInterrupt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="外部中断寄存器模式"><a href="#外部中断寄存器模式" class="headerlink" title="外部中断寄存器模式"></a>外部中断寄存器模式</h1><p>外部中断控制寄存器- <strong>EICRA</strong></p><table><thead><tr><th></th><th></th><th></th><th></th><th>ISC11</th><th>ISC10</th><th>ISC01</th><th>ISC00</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>INT0:(ISC11&amp;ISC10) </p><p>INT1:(ISC01&amp;ISC00)</p><ul><li>00:低电平触发</li><li>01:逻辑变化触发</li><li>10:下降沿触发</li><li>11:上升沿触发</li></ul><p>外部中断屏蔽寄存器- <strong>EIMSK</strong></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th>INT1</th><th>INT0</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>0:中断关闭</li><li>1:中断使能外部中断标志位寄存器- <strong>EIFR</strong></li></ul><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th>INTF1</th><th>INTF0</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>当中断触发标志位置高,执行ISR或向标志位写’1’时标志位重置</p><h3 id="中断函数总结"><a href="#中断函数总结" class="headerlink" title="中断函数总结"></a>中断函数总结</h3><p>单片机的中断可以描述为：由于某一随机事件的发生，单片机暂停在原程序的运行，转而执行另一个程序（随机事件），处理完毕之后又自动回到断点处继续执行。</p><p>其中， 中断源、主程序、中断服务程序简述如下：</p><ul><li>中断源：引起中断的原因，或能够发生中断请求的来源。</li><li>主程序：单片机现在运行的程序。</li><li>中断服务程序：处理中断请求的程序。</li><li><code>interrupts()</code>和<code>noInterrupts()</code>在Arduino中，<code>interrupts</code>函数和<code>noInterrupts</code>函数分别负责打开与关闭中断，这两个函数均为无返回值的函数，无参数。</li><li><code>attachInterrrupt(interrupt，function，mode)</code>该函数用于设置外部中断，有三个参数，分别表示中断源、中断处理函数和触发模式，它们的具体含义如下：<ul><li>中断源：可选0、1，对应2或3号数字引脚。</li><li>中断处理函数：指定中断的处理函数，是一段程序，当中断发生时执行该子程序部分，其中参数为函数的指针。</li><li>触发模式：有四种类型-LOW（低电平触发）、CHANGE（跳变时触发）、RISING(上升沿触发）、FALLING（下降沿触发）。</li><li><code>detachInterrupt(interrupt)</code>用于取消中断。</li></ul></li></ul><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXINT_LOW</span><span class="token expression"><span class="token number">0</span>b00</span><span class="token comment">//低电平触发</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXINT_CHANGE</span><span class="token expression"><span class="token number">0</span>b01</span><span class="token comment">//逻辑变化触发</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXINT_FALL</span><span class="token expression"><span class="token number">0</span>b10</span><span class="token comment">//下降沿触发</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXINT_RISE</span><span class="token expression"><span class="token number">0</span>b11</span><span class="token comment">//上升沿触发</span></span><span class="token keyword">void</span> <span class="token function">SetInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//外部中断</span><span class="token punctuation">&#123;</span><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Set EXINT0(pin->PD2), EXINT1(pin->PD3) to Mode INPUT_PULLUP </span>DDRD <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> PD2<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> PD3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PORTD <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> PD2<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> PD3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Set EXINT Mode to catch FALLING EDGE 下降沿触发中断</span>EICRA <span class="token operator">|=</span> <span class="token punctuation">(</span>EXINT_FALL <span class="token operator">&lt;&lt;</span> ISC00<span class="token punctuation">)</span><span class="token punctuation">;</span>EICRA <span class="token operator">|=</span> <span class="token punctuation">(</span>EXINT_FALL <span class="token operator">&lt;&lt;</span> ISC10<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Enable EXINT</span>EIMSK <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> INT1<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> INT0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启用外部中断</span><span class="token function">sei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// EXINT0(p2)</span><span class="token function">ISR</span><span class="token punctuation">(</span>INT0_vect<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// EXINT1(p3)</span><span class="token function">ISR</span><span class="token punctuation">(</span>INT1_vect<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h1><h2 id="串口设置"><a href="#串口设置" class="headerlink" title="串口设置"></a>串口设置</h2><h3 id="Serial-begin"><a href="#Serial-begin" class="headerlink" title="Serial.begin();"></a>Serial.begin();</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>开启串口，通常置于setup()函数中。</li></ul><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><ul><li><p>Serial.begin(speed);  </p></li><li><p>Serial.begin(speed,config);</p></li></ul><h4 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h4><ul><li><p>speed: 波特率，一般取值300, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600,115200</p></li><li><p>config: 设置数据位、校验位和停止位。例如Serial.begin(speed,Serial_8N1);  Serial_8N1中：8表示8个数据位，N表示没有校验，1表示有1个停止位。</p></li></ul><h4 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h4><ul><li>None</li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// opensserial port, sets data rate to 9600 bps </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Serial-end"><a href="#Serial-end" class="headerlink" title="Serial.end();"></a>Serial.end();</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><ul><li>禁止串口传输函数。此时串口传输的pin脚可以作为数字IO脚使用。</li></ul><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.end()</li></ul><h4 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h4><ul><li>None</li></ul><h4 id="返回-1"><a href="#返回-1" class="headerlink" title="返回"></a>返回</h4><ul><li>None</li></ul><h2 id="清空串口缓存"><a href="#清空串口缓存" class="headerlink" title="清空串口缓存"></a>清空串口缓存</h2><h3 id="Serial-flush"><a href="#Serial-flush" class="headerlink" title="Serial.flush();"></a>Serial.flush();</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><ul><li>1.0版本之前为清空串口缓存，现在该函数作用为等待输出数据传送完毕。如果要清空串口缓存的话，可以使用：while(Serial.read() &gt;&#x3D; 0)来代替。</li></ul><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.flush ()</li></ul><h4 id="参数-13"><a href="#参数-13" class="headerlink" title="参数"></a>参数</h4><ul><li>None</li></ul><h4 id="返回-2"><a href="#返回-2" class="headerlink" title="返回"></a>返回</h4><ul><li>None</li></ul><h3 id="while-Serial-read-gt-x3D-0"><a href="#while-Serial-read-gt-x3D-0" class="headerlink" title="while(Serial.read()&gt;&#x3D; 0){}"></a>while(Serial.read()&gt;&#x3D; 0){}</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><ul><li>因Serial.read()函数读取串口缓存中的一个字符，并删除已读字符。因此可以用这句代码来清空串口缓存。实验代码详见下文代码。</li></ul><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><ul><li>while(Serial.read() &gt;&#x3D;0){}</li></ul><h4 id="参数-14"><a href="#参数-14" class="headerlink" title="参数"></a>参数</h4><ul><li>None</li></ul><h4 id="返回-3"><a href="#返回-3" class="headerlink" title="返回"></a>返回</h4><ul><li>None</li></ul><h2 id="输出串口数据"><a href="#输出串口数据" class="headerlink" title="输出串口数据"></a>输出串口数据</h2><h3 id="Serial-print"><a href="#Serial-print" class="headerlink" title="Serial.print();"></a>Serial.print();</h3><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><ul><li>串口输出数据函数，写入字符串数据到串口。</li></ul><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><ul><li><p>Serial.print(val)</p></li><li><p>Serial.print(val,format)</p></li></ul><h4 id="参数-15"><a href="#参数-15" class="headerlink" title="参数"></a>参数</h4><ul><li><p>val: 打印的值，任意数据类型</p></li><li><p>format: 输出的数据格式，包括整数类型和浮点型数据的小数点位数。</p></li></ul><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> BIN<span class="token punctuation">)</span> 得到 <span class="token string">"1001110"</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> OCT<span class="token punctuation">)</span> 得到 <span class="token string">"116"</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> DEC<span class="token punctuation">)</span> 得到 <span class="token string">"78"</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> HEX<span class="token punctuation">)</span> 得到 <span class="token string">"4E"</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1.23456</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> 得到 <span class="token string">"1"</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1.23456</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 得到 <span class="token string">"1.23"</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1.23456</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> 得到 <span class="token string">"1.2346"</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">'N'</span><span class="token punctuation">)</span> 得到 <span class="token string">"N"</span>Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello world."</span><span class="token punctuation">)</span> 得到 <span class="token string">"Hello world."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Serial-println"><a href="#Serial-println" class="headerlink" title="Serial.println();"></a>Serial.println();</h3><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><p>写入字符串数据，并换行。实验代码详见下文。</p><h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.println(val) </li><li>Serial.println(val,format)</li></ul><h4 id="参数-16"><a href="#参数-16" class="headerlink" title="参数"></a>参数</h4><ul><li><p>val: 打印的值，任意数据类型 </p></li><li><p>format: 输出的数据格式，包括整数类型和浮点型数据的小数点位数。</p></li></ul><h4 id="返回-4"><a href="#返回-4" class="headerlink" title="返回"></a>返回</h4><ul><li>字节</li></ul><h3 id="Serial-SerialEvent"><a href="#Serial-SerialEvent" class="headerlink" title="Serial.SerialEvent();"></a>Serial.SerialEvent();</h3><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><ul><li>串口数据准备好时触发的事件函数，即串口数据准备好调用该函数。</li></ul><h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.serialEvent{&#x2F;&#x2F;statements}</li></ul><h4 id="参数-17"><a href="#参数-17" class="headerlink" title="参数"></a>参数</h4><ul><li>statements: 任何有效的语句。</li></ul><h2 id="读串口缓存区数据"><a href="#读串口缓存区数据" class="headerlink" title="读串口缓存区数据"></a>读串口缓存区数据</h2><h3 id="Serial-available"><a href="#Serial-available" class="headerlink" title="Serial.available();"></a>Serial.available();</h3><h4 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h4><ul><li>判断串口缓冲器的状态函数，用以判断数据是否送达串口。注意使用时通常用delay(100)以保证串口字符接收完毕，即保证Serial.available()返回的是缓冲区准确的可读字节数。</li></ul><h4 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.available();</li></ul><h4 id="参数-18"><a href="#参数-18" class="headerlink" title="参数"></a>参数</h4><ul><li>None</li></ul><h4 id="返回-5"><a href="#返回-5" class="headerlink" title="返回"></a>返回</h4><ul><li>返回缓冲区可读字节数目</li></ul><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//clear serialbuffer</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待数据传完</span>    <span class="token keyword">int</span> numdata <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.available = :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numdata<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//清空串口缓存</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409225354.jpeg" alt="img" loading="lazy"></p><h3 id="Serial-read"><a href="#Serial-read" class="headerlink" title="Serial.read();"></a>Serial.read();</h3><h4 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h4><ul><li>读取串口数据，一次读一个字符，读完后删除已读数据。</li></ul><h4 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.read();</li></ul><h4 id="参数-19"><a href="#参数-19" class="headerlink" title="参数"></a>参数</h4><ul><li>None</li></ul><h4 id="返回-6"><a href="#返回-6" class="headerlink" title="返回"></a>返回</h4><ul><li>返回串口缓存中第一个可读字节，当没有可读数据时返回-1，整数类型。</li></ul><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> comchar<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span> <span class="token operator">/</span>clear serialbuffer<span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    comchar <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读串口第一个字节</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.read: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comchar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409225507.jpeg" alt="img" loading="lazy"></p><p>从实验结果可以看出：Serial.read()每次从串口缓存中读取第一个字符，并将读过的字符删除。</p><h3 id="Serial-peek"><a href="#Serial-peek" class="headerlink" title="Serial.peek();"></a>Serial.peek();</h3><h4 id="说明-9"><a href="#说明-9" class="headerlink" title="说明"></a>说明</h4><ul><li>读串口缓存中下一字节的数据（字符型），但不从内部缓存中删除该数据。也就是说，连续的调用peek()将返回同一个字符。而调用read()则会返回下一个字符。</li></ul><h4 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.peek();</li></ul><h4 id="参数-20"><a href="#参数-20" class="headerlink" title="参数"></a>参数</h4><ul><li>None</li></ul><h4 id="返回-7"><a href="#返回-7" class="headerlink" title="返回"></a>返回</h4><ul><li>返回串口缓存中下一字节（字符）的数据，如果没有返回-1，整数int型</li></ul><h4 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> comchar<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//clear serialbuffer</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    comchar <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.peek: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comchar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409225600.jpeg" alt="img" loading="lazy"></p><p>从实验结果可以看出：Serial.peek()每次从串口缓存中读取一个字符，并不会将读过的字符删除。第二次读取时仍然为同一个字符。</p><h3 id="Serial-readBytes-buffer-length"><a href="#Serial-readBytes-buffer-length" class="headerlink" title="Serial.readBytes(buffer,length);"></a>Serial.readBytes(buffer,length);</h3><h4 id="说明-10"><a href="#说明-10" class="headerlink" title="说明"></a>说明</h4><ul><li>从串口读取指定长度length的字符到缓存数组buffer。</li></ul><h4 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.readBytes(buffer,length);</li></ul><h4 id="参数-21"><a href="#参数-21" class="headerlink" title="参数"></a>参数</h4><ul><li><p>buffer: 缓存变量</p></li><li><p>length:设定的读取长度</p></li></ul><h4 id="返回-8"><a href="#返回-8" class="headerlink" title="返回"></a>返回</h4><ul><li>返回存入缓存的字符数，0表示没有有效数据。</li></ul><h4 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> numdata<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//clear serial port</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      numdata <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.readBytes:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// clear serial buffer</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409225657.jpeg" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409225703.jpeg" alt="img" loading="lazy"></p><p>从串口缓存读取指定长度为3的字节。</p><h3 id="Serial-readBytesUntil-character-buffer-length"><a href="#Serial-readBytesUntil-character-buffer-length" class="headerlink" title="Serial.readBytesUntil(character,buffer,length);"></a>Serial.readBytesUntil(character,buffer,length);</h3><h4 id="说明-11"><a href="#说明-11" class="headerlink" title="说明"></a>说明</h4><ul><li>从串口缓存读取指定长度的字符到数组buffer，遇到终止字符character后停止。</li></ul><h4 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.readBytesUntil(character ,buffer,length);</li></ul><h4 id="参数-22"><a href="#参数-22" class="headerlink" title="参数"></a>参数</h4><ul><li><p>character : 查找的字符 (char)</p></li><li><p>buffer: 存储读取数据的缓存(char[] 或byte[])</p></li><li><p>length:设定的读取长度</p></li></ul><h4 id="返回-9"><a href="#返回-9" class="headerlink" title="返回"></a>返回</h4><ul><li>返回存入缓存的字符数，0表示没有有效数据。</li></ul><h4 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> character <span class="token operator">=</span> <span class="token char">','</span><span class="token punctuation">;</span> <span class="token comment">//终止字符</span><span class="token keyword">int</span> numdata<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//clear serialport</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      numdata <span class="token operator">=</span>Serial<span class="token punctuation">.</span><span class="token function">readBytesUntil</span><span class="token punctuation">(</span>character<span class="token punctuation">,</span>buffer<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.readBytes:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// clear serial buffer</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409230024.jpeg" loading="lazy"></p><p>从串口缓存中读取3个字符，当遇到”,”时终止读取。</p><h3 id="Serial-readString-；"><a href="#Serial-readString-；" class="headerlink" title="Serial.readString()；"></a>Serial.readString()；</h3><h4 id="说明-12"><a href="#说明-12" class="headerlink" title="说明"></a>说明</h4><ul><li>从串口缓存区读取全部数据到一个字符串型变量。</li></ul><h4 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.readString();</li></ul><h4 id="参数-23"><a href="#参数-23" class="headerlink" title="参数"></a>参数</h4><ul><li>None</li></ul><h4 id="返回-10"><a href="#返回-10" class="headerlink" title="返回"></a>返回</h4><ul><li>返回从串口缓存区中读取的一个字符串。</li></ul><h4 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">String comdata <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//clear serialbuffer</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      comdata <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.readString:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    comdata <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果-2"><a href="#实验结果-2" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409230024.jpeg" alt="img" loading="lazy"></p><p>从实验结果可以看出：Serial.readString()从串口缓存中读取字符至字符串。</p><h3 id="Serial-readStringUntil"><a href="#Serial-readStringUntil" class="headerlink" title="Serial.readStringUntil();"></a>Serial.readStringUntil();</h3><h4 id="说明-13"><a href="#说明-13" class="headerlink" title="说明"></a>说明</h4><ul><li>从串口缓存区读取字符到一个字符串型变量，直至读完或遇到某终止字符。</li></ul><h4 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.readStringUntil(terminator)</li></ul><h4 id="参数-24"><a href="#参数-24" class="headerlink" title="参数"></a>参数</h4><ul><li>terminator:终止字符(cha型)</li></ul><h4 id="返回-11"><a href="#返回-11" class="headerlink" title="返回"></a>返回</h4><ul><li>从串口缓存区中读取的整个字符串，直至检测到终止字符。</li></ul><h4 id="示例-11"><a href="#示例-11" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">String comdata <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">char</span> terminator <span class="token operator">=</span> <span class="token char">','</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//clear serialbuffer</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      comdata <span class="token operator">=</span>Serial<span class="token punctuation">.</span><span class="token function">readStringUntil</span><span class="token punctuation">(</span>terminator<span class="token punctuation">)</span><span class="token punctuation">;</span>     Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.readStringUntil: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果-3"><a href="#实验结果-3" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409225902.jpeg" alt="img" loading="lazy"></p><p>从串口读取所有字符存放于字符串comdata，直至遇到字符”,”时终止读取。</p><h3 id="Serial-parseFloat"><a href="#Serial-parseFloat" class="headerlink" title="Serial.parseFloat();"></a>Serial.parseFloat();</h3><h4 id="说明-14"><a href="#说明-14" class="headerlink" title="说明"></a>说明</h4><ul><li>读串口缓存区第一个有效的浮点型数据，数字将被跳过。当读到第一个非浮点数时函数结束。</li></ul><h4 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.parseFloat()</li></ul><h4 id="参数-25"><a href="#参数-25" class="headerlink" title="参数"></a>参数</h4><ul><li>None</li></ul><h4 id="返回-12"><a href="#返回-12" class="headerlink" title="返回"></a>返回</h4><ul><li>返回串口缓存区第一个有效的浮点型数据，数字将被跳过。</li></ul><h4 id="示例-12"><a href="#示例-12" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> comfloat<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//clear serialbuffer</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      comfloat <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.parseFloat:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comfloat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// clear serial buffer</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果-4"><a href="#实验结果-4" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409230045.jpeg" alt="img" loading="lazy"></p><p>从实验结果可以看出：Serial. parseFloat()从串口缓存中读取第一个有效的浮点数，第一个有效数字之前的负号也将被读取，独立的负号将被舍弃。</p><h3 id="Serial-parseInt"><a href="#Serial-parseInt" class="headerlink" title="Serial.parseInt()"></a>Serial.parseInt()</h3><h4 id="说明-15"><a href="#说明-15" class="headerlink" title="说明"></a>说明</h4><ul><li>从串口接收数据流中读取第一个有效整数（包括负数）。</li></ul><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ul><li><p>非数字的首字符或者负号将被跳过</p></li><li><p>当可配置的超时值没有读到有效字符时，或者读不到有效整数时，分析停止</p></li><li><p>如果超时且读不到有效整数时，返回0</p></li></ul><h4 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h4><p>Serial.parseInt()</p><p>Serial.parseInt(charskipChar)</p><h4 id="参数-26"><a href="#参数-26" class="headerlink" title="参数"></a>参数</h4><ul><li>skipChar用于在搜索中跳过指定字符（此用法未知）</li></ul><h4 id="返回-13"><a href="#返回-13" class="headerlink" title="返回"></a>返回</h4><ul><li>返回下一个有效整型值。</li></ul><h4 id="示例-13"><a href="#示例-13" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> comInt<span class="token punctuation">;</span> <span class="token function">voidsetup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//clear serialbuffer</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      comInt <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Serial.parseInt:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comInt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// clear serial buffer</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果-5"><a href="#实验结果-5" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409230007.jpeg" alt="img" loading="lazy"></p><p>从实验结果可以看出：Serial. parseInt()从串口缓存中读取第一个有效整数，第一个有效数字之前的负号也将被读取，独立的负号将被舍弃。</p><h2 id="串口查找指定字符串"><a href="#串口查找指定字符串" class="headerlink" title="串口查找指定字符串"></a>串口查找指定字符串</h2><h3 id="Serial-find"><a href="#Serial-find" class="headerlink" title="Serial.find()"></a>Serial.find()</h3><h4 id="说明-16"><a href="#说明-16" class="headerlink" title="说明"></a>说明</h4><ul><li>从串口缓存区读取数据，寻找目标字符串target(char型)</li></ul><h4 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h4><ul><li><p>char target[] &#x3D; ”目标字符串”;</p></li><li><p>Serial.find(target);</p></li></ul><h4 id="参数-27"><a href="#参数-27" class="headerlink" title="参数"></a>参数</h4><ul><li>target: 目标字符串（char型）</li></ul><h4 id="返回-14"><a href="#返回-14" class="headerlink" title="返回"></a>返回</h4><ul><li>找到目标字符串返回真，否则为假</li></ul><h4 id="示例-14"><a href="#示例-14" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> target<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//clear serialbuffer</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> Serial<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"find traget:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">// clear serial buffer</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果-6"><a href="#实验结果-6" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://img-blog.csdn.net/20151216230204010" alt="img" loading="lazy"></p><p>串口输入字符中只要有test,函数返回真，打印出目标字符串”test”，否则返回假，不打印任何值。</p><h3 id="Serial-findUntil-target-terminal"><a href="#Serial-findUntil-target-terminal" class="headerlink" title="Serial.findUntil(target,terminal);"></a>Serial.findUntil(target,terminal);</h3><h4 id="说明-17"><a href="#说明-17" class="headerlink" title="说明"></a>说明</h4><ul><li>从串口缓存区读取数据，寻找目标字符串target(char型数组)，直到出现给定字符串terminal(char型)，找到为真，否则为假。</li></ul><h4 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h4><ul><li>Serial.findUntil(target,terminal);</li></ul><h4 id="参数-28"><a href="#参数-28" class="headerlink" title="参数"></a>参数</h4><ul><li><p>target : 目标字符串（char型）</p></li><li><p>terminal : 结束搜索字符串（char型）</p></li></ul><h4 id="返回-15"><a href="#返回-15" class="headerlink" title="返回"></a>返回</h4><ul><li>如果在找到终止字符terminal之前找到目标字符target，返回真，否则返回假。</li></ul><h4 id="示例-15"><a href="#示例-15" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> target<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span><span class="token keyword">char</span> terminal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"end"</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//clear serialbuffer</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// read data from serial port</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> Serial<span class="token punctuation">.</span><span class="token function">findUntil</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>terminal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"find traget:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">// clear serial buffer</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果-7"><a href="#实验结果-7" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://img-blog.csdn.net/20151216230345691" alt="img" loading="lazy"></p><p>如果串口缓存中有目标字符”test”，返回真，但如果先遇到终止字符串”end”则函数立即终止，不论字符串后面有没有目标字符”test”。</p><h2 id="向串口写数据"><a href="#向串口写数据" class="headerlink" title="向串口写数据"></a>向串口写数据</h2><h3 id="Serial-write"><a href="#Serial-write" class="headerlink" title="Serial.write();"></a>Serial.write();</h3><h4 id="说明-18"><a href="#说明-18" class="headerlink" title="说明"></a>说明</h4><ul><li>串口输出数据函数。写二进制数据到串口。</li></ul><h4 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h4><ul><li><p>Serial.write(val) </p></li><li><p>Serial.write(str) </p></li><li><p>Serial.write(buf, len)</p></li></ul><h4 id="参数-29"><a href="#参数-29" class="headerlink" title="参数"></a>参数</h4><ul><li><p>val: 字节 </p></li><li><p>str: 一串字节 </p></li><li><p>buf: 字节数组 </p></li><li><p>len: buf的长度</p></li></ul><h4 id="返回-16"><a href="#返回-16" class="headerlink" title="返回"></a>返回</h4><ul><li>字节长度</li></ul><h4 id="示例-16"><a href="#示例-16" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   Serial<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// send a byte with thevalue 45 </span>  <span class="token keyword">int</span> bytesSent <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>“hello”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//sendthe string “hello” and return the length of the string. </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_42863355/article/details/102759709">https://blog.csdn.net/qq_42863355/article/details/102759709</a></p><p><a href="https://blog.csdn.net/iracer/article/details/50334041">https://blog.csdn.net/iracer/article/details/50334041</a></p><p><a href="https://blog.csdn.net/GuanFuXinCSDN/article/details/104144362">https://blog.csdn.net/GuanFuXinCSDN/article/details/104144362</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数字输入输出&quot;&gt;&lt;a href=&quot;#数字输入输出&quot; class=&quot;headerlink&quot; title=&quot;数字输入输出&quot;&gt;&lt;/a&gt;数字输入输出&lt;/h1&gt;&lt;p&gt;在使用输入或输出功能前，你需要先通过&lt;code&gt;pinMode()&lt;/code&gt; 函数配置引脚的模式为输入模</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="GPIO" scheme="http://ccsu.top/tags/GPIO/"/>
    
    <category term="Arduino" scheme="http://ccsu.top/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>Arduino uno介绍</title>
    <link href="http://ccsu.top/posts/c3972d29/"/>
    <id>http://ccsu.top/posts/c3972d29/</id>
    <published>2022-04-09T13:18:00.000Z</published>
    <updated>2022-05-09T01:59:12.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arduino介绍"><a href="#Arduino介绍" class="headerlink" title="Arduino介绍"></a>Arduino介绍</h1><p>官网链接 <a href="https://www.arduino.cc/">Arduino</a></p><p>Arduino是源自意大利的一个开放源代码的硬件项目平台，该平台包括一块具备简单I&#x2F;O功能的电路板以及一套程序开发环境软件。Arduino可以用来开发交互产品，比如它可以读取大量的开关和传感器信号，并且可以控制电灯、电机和其他各式各样的物理设备；Arduino也可以开发出与PC相连的周边装置，能在运行时与PC上的软件进行通信。Arduino的硬件电路板可以自行焊接组装，也可以购买已经组装好的模块，而程序开发环境的软件则可以从网上免费下载并使用。</p><h1 id="Arduino-Uno引脚分配图"><a href="#Arduino-Uno引脚分配图" class="headerlink" title="Arduino Uno引脚分配图"></a><strong>Arduino Uno引脚分配图</strong></h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409212401.png" alt="img" loading="lazy"></p><table><thead><tr><th>引脚</th><th>作用</th></tr></thead><tbody><tr><td>0和1接口</td><td>串口输出输入（入门很少用到，如无必要尽量不用这两个接口）</td></tr><tr><td>2到13接口</td><td>可作为数字输入输出 (输出or输入，可自己定义) 其中带 ~ 符号的可作为模拟输出</td></tr><tr><td>A0到A5</td><td>模拟输入</td></tr><tr><td>GND</td><td>接地线</td></tr><tr><td>5V</td><td>输出5V电压</td></tr><tr><td>3.3V</td><td>输出3.3V电压</td></tr><tr><td>Vin</td><td>外部电源给arduino供电 ，电压要在7~12V之间</td></tr><tr><td>SCL与SDA</td><td>I2c接口，初学者很少用</td></tr></tbody></table><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>数字输入输出：只有0和1两种状态，表示开或关（高电平或低电平）</li><li>模拟输入输出：就是将电信号转化为一系列数值，有一系列的量，如可设置灯泡百分之几的亮度，而不是只有开关。</li><li>模拟输入：0-5V的电压转换为0-1023的整数来表示</li><li>模拟输出：PWM （脉宽调制）输出 （0~255）</li><li>高电平低电平：Arduino一般用的是5V的电压，超过3V就算是高电平，低于1.5V就是低电平啦，一般来说高电平就是5V上下，低电平就是指的0V。</li><li>PWM ：（脉宽调制）输出，带PWM功能的引脚标有波浪线 ‘~’。</li><li>拉高：给Arduino的引脚设定了模式之后，有时并未指定引脚的状态，引脚会悬空，状态忽高忽低，拉高就是说让引脚保持高电平的状态</li><li>拉低：相反</li></ul><h1 id="Arduino-Uno-R3-详细参数"><a href="#Arduino-Uno-R3-详细参数" class="headerlink" title="Arduino Uno R3 - 详细参数"></a><em><strong>Arduino Uno R3 - 详细参数</strong></em></h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409213026.png" alt="img" loading="lazy"></p><h1 id="Arduino-Uno-R3-存储"><a href="#Arduino-Uno-R3-存储" class="headerlink" title="Arduino Uno R3 - 存储"></a><em><strong>Arduino Uno R3 - 存储</strong></em></h1><p>Arduino的存储空间即是其主控芯片所集成的存储空间。也可以通过使用外设芯片的方式来扩展Arduino的存储空间。</p><p>　　Arduino UNO的存储空间分三种：</p><ul><li>Flash，容量为32 KB。其中0. 5 KB作为BOOT区用于储存引导程序，实现通过串口下载程序的功能；另外的31.5 KB作为用户储存程序的空间。相对于现在动辄几百GB的硬盘，可能觉得32 KB太小了，但是在单片机上，32 KB已经可以存储很大的程序了。</li><li>SRAM，容量为2 KB。SRAM相当于计算机的内存，当CPU进行运算时，需要在其中开辟一定的存储空间。当Arduino 断电或复位后，其中的数据都会丢失。</li><li>EEPROM，容量为1 KB。EEPROM的全称为电可擦写的可编程只读存储器，是一种用户可更改的只读存储器，其特点是在Arduino断电或复位后，其中的数据不会丢失。</li></ul><h1 id="Arduino-Uno引脚分配-电源"><a href="#Arduino-Uno引脚分配-电源" class="headerlink" title="Arduino Uno引脚分配 - 电源"></a><strong>Arduino Uno引脚分配 - 电源</strong></h1><p>　　<strong>Arduino UNO可以通过3种方式供电：</strong></p><h2 id="1、直流电源插孔"><a href="#1、直流电源插孔" class="headerlink" title="1、直流电源插孔"></a>1、直流电源插孔</h2><p>　　可以使用直流电源插孔为Arduino开发板供电。电源插孔通常连接到一个适配器。</p><p>　　开发板的供电范围可以是6-20V，但制造商建议将其保持在7-12V之间。高于12V时，稳压芯片可能会过热，低于7V可能会供电不足。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409213108.png" alt="img" loading="lazy"></p><h2 id="2、VIN引脚"><a href="#2、VIN引脚" class="headerlink" title="2、VIN引脚"></a>2、VIN引脚</h2><p>​        该引脚用于使用外部电源为Arduino Uno开发板供电。电压应控制在上述提到的范围内。</p><p><img src="https://img2020.cnblogs.com/blog/2103481/202009/2103481-20200907110948426-1333579329.png" alt="img" loading="lazy"></p><h2 id="3、USB接口"><a href="#3、USB接口" class="headerlink" title="3、USB接口"></a>3、USB接口</h2><p>​            连接到计算机时，提供500mA&#x2F;5V电压。</p><p><strong>所使用的供电方式决定了可用于电路的功率：</strong></p><ul><li>使用USB为电路供电时，电流最大限制在500mA。（考虑到该电源也用于为MCU、外围设备、板载稳压器和与其连接的组件供电。）</li><li>当通过电源插座或VIN为电路供电时，可用的最大电流取决于Arduino开发板上的5V和3.3V稳压器。</li></ul><p>　　<strong>电源引脚说明：</strong></p><p>　　<strong><img src="https://img2020.cnblogs.com/blog/2103481/202009/2103481-20200907111909648-418280813.png" alt="img" loading="lazy"></strong></p><ul><li>VIN — 可以通过此引脚向UNO供电；VIN有电时将忽略从USB或者其他引脚接入的电源</li><li>5V — 提供稳压的3.3V，为外部电子元件供电</li><li>3.3V — 提供稳压的3.3V，为外部电子元件供电</li><li>GND — GND引脚与设备外壳相接（接地），用于闭合电路回路，并在整个电路中提供一个公共逻辑参考电平。</li></ul><p><strong>Arduino Uno引脚分配 - 数字引脚</strong></p><p>Arduino Uno的引脚0-13用作数字输入&#x2F;输出引脚。其中，引脚13连接到板载的LED指示灯；引脚3、5、6、9、10、11具有PWM功能。</p><p>需要注意的是：</p><p>●  每个引脚可提供&#x2F;接收最高40 mA的电流。但推荐的电流是20毫安。</p><p>●  所有引脚提供的绝对最大电流为200mA。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409213245.png" alt="img" loading="lazy"></p><h2 id="数字电平意味着什么？"><a href="#数字电平意味着什么？" class="headerlink" title="数字电平意味着什么？"></a><strong>数字电平意味着什么？</strong></h2><p>数字是一种表示1位电压的方式：0或1。Arduino上的数字引脚是根据用户需求设计为输入或输出的引脚。数字引脚可以打开或关闭。开启时，它们处于5V的高电平状态，当关闭时，它们处于0V的低电平状态。</p><p>在Arduino上，当数字引脚配置为输出时，它们设置为0或5V。</p><p>当数字引脚配置为输入时，电压由外部设备提供。该电压可以在0-5V之间变化，并转换成数字表示（0或1）。为了确定这一点，有2个阈值：</p><p>●  低于0.8v - 视为0。</p><p>●  高于2.0v - 视为1。</p><p>将组件连接到数字引脚时，确保逻辑电平匹配。如果电压在阈值之间，则返回值将不确定。</p><h1 id="Arduino-Uno引脚分配-模拟输入"><a href="#Arduino-Uno引脚分配-模拟输入" class="headerlink" title="Arduino Uno引脚分配 - 模拟输入"></a><em><strong>Arduino Uno引脚分配 - 模拟输入</strong></em></h1><p><img src="https://img2020.cnblogs.com/blog/2103481/202009/2103481-20200907112952054-1679928809.png" alt="img" loading="lazy"></p><p>Arduino uno r3 有6个模拟输入引脚（Analog In），可以用于接收模拟输入、用来测定0~5v的电压，但也可用作数字输入或数字输出。</p><p>　　我们看到上图中每一个模拟输入引脚前面都标注了一个ADC，这是什么含义呢？这里就涉及到了模拟输入的原理。</p><h2 id="ADC是什么？"><a href="#ADC是什么？" class="headerlink" title="ADC是什么？"></a><strong>ADC是什么？</strong></h2><p>ADC表示模拟到数字转换器。 ADC是用于将模拟信号转换为数字信号的电路。将输入的模拟信号通过ADC转换为数字信号，处理器才能对其进行处理。</p><p>　　这里讲的模拟输入是指0 ~ 5v的电压值。在Arduino上，ADC具有10位分辨率，这意味着它可以通过1,024个数字电平表示模拟电压。相当于将连续的电压值0 ~ 5v映射到离散的数值0<del>1023。将0 ~ 5 V的电压分成1024份（2^10^），算出来即为4.882mV的测量精度。即：0 ~ 4.882mV之间的电压值映射到数字0，4.883mV</del>9.764mV之间的电压值映射到数字1……</p><h1 id="Arduino-Uno引脚分配-关于模拟输出"><a href="#Arduino-Uno引脚分配-关于模拟输出" class="headerlink" title="Arduino Uno引脚分配 - 关于模拟输出"></a><em><strong>Arduino Uno引脚分配 - 关于模拟输出</strong></em></h1><p>Arduino控制板没有模拟输出引脚，但是数字引脚3、5、6、9、10、11具有PWM功能。</p><h2 id="PWM是什么？"><a href="#PWM是什么？" class="headerlink" title="PWM是什么？"></a><strong>PWM是什么？</strong></h2><p>　　脉冲宽带调制(PWM)，是英文“Pulse Width Modulation”的缩写，简称脉宽调制，是利用微处理器的数字输出来对模拟电路进行控制的一种非常有效的技术。</p><p>　　PWM是一种对模拟信号电平进行数字编码的方法。</p><p>　　PWM有两个关键组成部分：频率和占空比。频率决定了单个周期所用的时间。占空比 &#x3D; 一个周期中高电平所占的时间&#x2F;整个周期的时间。</p><p>　　<img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220409213801.png" alt="img" loading="lazy"></p><h2 id="LED"><a href="#LED" class="headerlink" title="LED"></a><em><strong>LED</strong></em></h2><ul><li>ON：电源指示灯，灯亮时表示Arduino已经通电</li><li>TX：串口发送指示灯。当使用USB连接到计算机且Arduino向计算机传输数据时，TX灯会点亮。</li><li>RX：串口接收指示灯。当使用USB连接到计算机且Arduino接收到计算机传来的数据时，RX灯会点亮。</li><li>L：可编程控制指示灯。该LED通过特殊电路连接到Arduino的13 号引脚，当13号引脚为高电平或高阻态时，该LED 会点亮；当为低电平时，不会点亮。因此可以通过程序或者外部输入信号来控制该LED的亮灭。可以用来测试板子是否正常：如果运行Blink程序时，L灯一闪一闪说明板子是好的。</li></ul><h1 id="RESET"><a href="#RESET" class="headerlink" title="RESET"></a><em><strong>RESET</strong></em></h1><p>　　按下该按键可以使Arduino重新启动，从头开始运行程序。</p><p>　　复位引脚接低电平会使Arduino复位。当复位键被按下时，会使该端口接到低电平，从而使Arduino复位。</p><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a><strong>通信协议</strong></h1><p>串行（TTL） - 数字引脚0和1是Arduino Uno的串行引脚。</p><p>它们由板载USB模块使用。</p><h2 id="什么是串行通信？"><a href="#什么是串行通信？" class="headerlink" title="什么是串行通信？"></a><strong>什么是串行通信？</strong></h2><p>串行通信用于在Arduino板和其他串行设备（如计算机，显示器，传感器等）之间交换数据。每块Arduino板至少有一个串口。串行通信发生在数字引脚0（RX）和1（TX）以及USB上。 Arduino也支持通过数字引脚与<code>SoftwareSerial Library</code>进行串行通信。这允许用户连接多个支持串行的设备，并保留主串行端口可用于USB。</p><p>软件串行和硬件串行 - 大多数微控制器都具有用于与其他串行设备进行通信的硬件。软件串行端口使用引脚更改中断系统进行通信。有一个用于软件串行通信的内置库。处理器使用软件串行来模拟额外的串行端口。软件串行唯一的缺点是它需要更多的处理，并且不能支持与硬件串行相同的高速。</p><h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a><strong>SPI</strong></h2><p> SS &#x2F; SCK &#x2F; MISO &#x2F; MOSI引脚是SPI通信的专用引脚。它们可以在Arduino Uno的数字引脚10-13和ICSP插头上找到。</p><p>串行外设接口（Serial Peripheral Interface，SPI）是一种串行数据协议，由微控制器用来与总线中的一个或多个外部设备进行通信，如连接。 SPI也可以用来连接2个微控制器。在SPI总线上，总是有一个设备表示为主设备，其余所有设备都表示为从设备。在大多数情况下，微控制器是主设备。 SS（从选择）引脚确定主器件当前正在与哪个器件通信。</p><p>启用SPI的器件始终具有以下引脚：</p><p>●  MISO（主从输出） - 用于向主设备发送数据的线路</p><p>●  MOSI（主机输出从机输入） - 发送数据到外围设备的主机线</p><p>●  SCK（串行时钟） - 由主设备生成的用于同步数据传输的时钟信号。</p><h2 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a><strong>I2C</strong></h2><p>SCL &#x2F; SDA引脚是I2C通信的专用引脚。在Arduino Uno上，它们可以在模拟引脚A4和A5上找到。</p><p>I2C通信协议通常称为“I2C总线”。 I2C协议旨在实现单个电路板上组件之间的通信。使用I2C时，有2条通信线，称为SCL和SDA。</p><p>●  SCL是用于同步数据传输的时钟线。</p><p>●  SDA是用于传输数据的通讯线。</p><p>I2C总线上的每个器件都有一个唯一的地址，最多可以在同一条总线上连接255个器件。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.yiboard.com/thread-831-1-1.html">https://www.yiboard.com/thread-831-1-1.html</a></p><p><a href="https://blog.csdn.net/chenhuanqiangnihao/article/details/113663176">https://blog.csdn.net/chenhuanqiangnihao/article/details/113663176</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Arduino介绍&quot;&gt;&lt;a href=&quot;#Arduino介绍&quot; class=&quot;headerlink&quot; title=&quot;Arduino介绍&quot;&gt;&lt;/a&gt;Arduino介绍&lt;/h1&gt;&lt;p&gt;官网链接 &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Ard</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Arduino" scheme="http://ccsu.top/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>乐迪AT9SPro连接双电机双电调车船调参</title>
    <link href="http://ccsu.top/posts/eeeaf652/"/>
    <id>http://ccsu.top/posts/eeeaf652/</id>
    <published>2022-04-08T12:18:00.000Z</published>
    <updated>2022-05-09T01:59:12.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="连接双电机双电调车船调参教程"><a href="#连接双电机双电调车船调参教程" class="headerlink" title="连接双电机双电调车船调参教程"></a>连接双电机双电调车船调参教程</h1><p>左边电机和右边电机分别接<code>二通道</code>和<code>四通道</code>，在可编程混控里面设置混控，对应摇杆如下图所示</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220408020931.png" alt="image-20220408020931476" loading="lazy"></p><p>设置两个普通模式的混控</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220408021230.png" alt="image-20220408021229825" loading="lazy"></p><p>四通控制右边电机，用来控制方向，主控设置为<code>四通</code>，被控设置为<code>二通</code>，正反比例都是-100%</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220408021450.png" alt="image-20220408021450340" loading="lazy"></p><p>二通控制右边电机，用来控制前进后退，主控设置为<code>二通</code>，被控设置为<code>四通</code>，正反比例都是+100%</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220408021531.png" alt="image-20220408021531628" loading="lazy"></p><p>同时设置<code>SWE</code>为控制混控的打开和关闭</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220408020509.png" alt="按键定义" loading="lazy"></p><p>这时候就可以自由控制船的前进后退与转向了</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220408021956.png" alt="image-20220408021955698" loading="lazy"></p><blockquote><p>  Tip：在接线的时候确保摇杆向左或者向上拨动螺旋桨的推力是向后的，这样就不用再在遥控器上面改变电机方向了</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;连接双电机双电调车船调参教程&quot;&gt;&lt;a href=&quot;#连接双电机双电调车船调参教程&quot; class=&quot;headerlink&quot; title=&quot;连接双电机双电调车船调参教程&quot;&gt;&lt;/a&gt;连接双电机双电调车船调参教程&lt;/h1&gt;&lt;p&gt;左边电机和右边电机分别接&lt;code&gt;二通道&lt;</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="AT9SPro" scheme="http://ccsu.top/tags/AT9SPro/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://ccsu.top/posts/2f57a694/"/>
    <id>http://ccsu.top/posts/2f57a694/</id>
    <published>2022-03-22T03:17:00.000Z</published>
    <updated>2022-03-22T03:18:22.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h4 id="场景1：在一个文件中，查找出itcast开头的语句"><a href="#场景1：在一个文件中，查找出itcast开头的语句" class="headerlink" title="场景1：在一个文件中，查找出itcast开头的语句"></a>场景1：在一个文件中，查找出itcast开头的语句</h4><p>测试文件</p><pre class="line-numbers language-none"><code class="language-none">itcast hello pythonitcast c++itheima iositheima php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="场景：在一个文件中，找到含有itcast的语句"><a href="#场景：在一个文件中，找到含有itcast的语句" class="headerlink" title="场景：在一个文件中，找到含有itcast的语句"></a>场景：在一个文件中，找到含有itcast的语句</h4><p>测试文件</p><pre class="line-numbers language-none"><code class="language-none">hello itcast pythonwww.itcast.cn c++itheima iositheima php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="场景：在一个文件中，找到邮箱为163或者126的所有邮件地址"><a href="#场景：在一个文件中，找到邮箱为163或者126的所有邮件地址" class="headerlink" title="场景：在一个文件中，找到邮箱为163或者126的所有邮件地址"></a>场景：在一个文件中，找到邮箱为163或者126的所有邮件地址</h4><h1 id="re模块操作"><a href="#re模块操作" class="headerlink" title="re模块操作"></a>re模块操作</h1><p>在Python中需要通过正则表达式对字符串进行匹配的时候，可以使用一个模块，名字为re</p><h2 id="1-re模块的使用过程"><a href="#1-re模块的使用过程" class="headerlink" title="1. re模块的使用过程"></a>1. re模块的使用过程</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token comment"># 导入re模块</span><span class="token keyword">import</span> re<span class="token comment"># 使用match方法进行匹配操作</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>正则表达式<span class="token punctuation">,</span>要匹配的字符串<span class="token punctuation">)</span><span class="token comment"># 如果上一步匹配到数据的话，可以使用group方法来提取数据</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-re模块示例-匹配以itcast开头的语句"><a href="#2-re模块示例-匹配以itcast开头的语句" class="headerlink" title="2. re模块示例(匹配以itcast开头的语句)"></a>2. re模块示例(匹配以itcast开头的语句)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reresult <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token string">"itcast.cn"</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><pre class="line-numbers language-none"><code class="language-none">itcast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-说明"><a href="#3-说明" class="headerlink" title="3. 说明"></a>3. 说明</h2><ul><li>re.match() 能够匹配出以xxx开头的字符串</li></ul><h1 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h1><p>在上一小节中，了解到通过re模块能够完成使用正则表达式来匹配字符串</p><p>本小节，将要讲解正则表达式的单字符匹配</p><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">.</td><td align="left">匹配任意1个字符（除了\n）</td></tr><tr><td align="center">[ ]</td><td align="left">匹配[ ]中列举的字符</td></tr><tr><td align="center">\d</td><td align="left">匹配数字，即0-9</td></tr><tr><td align="center">\D</td><td align="left">匹配非数字，即不是数字</td></tr><tr><td align="center">\s</td><td align="left">匹配空白，即 空格，tab键</td></tr><tr><td align="center">\S</td><td align="left">匹配非空白</td></tr><tr><td align="center">\w</td><td align="left">匹配单词字符，即a-z、A-Z、0-9、_</td></tr><tr><td align="center">\W</td><td align="left">匹配非单词字符</td></tr></tbody></table><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1： ."></a>示例1： .</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"t.o"</span><span class="token punctuation">,</span><span class="token string">"too"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"t.o"</span><span class="token punctuation">,</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Mtootwo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2：[ ]"></a>示例2：[ ]</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> re<span class="token comment"># 如果hello的首字符小写，那么正则表达式需要小写的h</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"hello Python"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 如果hello的首字符大写，那么正则表达式需要大写的H</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">,</span><span class="token string">"Hello Python"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 大小写h都可以的情况</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[hH]"</span><span class="token punctuation">,</span><span class="token string">"hello Python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[hH]"</span><span class="token punctuation">,</span><span class="token string">"Hello Python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[hH]ello Python"</span><span class="token punctuation">,</span><span class="token string">"Hello Python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 匹配0到9第一种写法</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[0123456789]Hello Python"</span><span class="token punctuation">,</span><span class="token string">"7Hello Python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 匹配0到9第二种写法</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[0-9]Hello Python"</span><span class="token punctuation">,</span><span class="token string">"7Hello Python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 匹配0到3 5到9</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[0-35-9]Hello Python"</span><span class="token punctuation">,</span><span class="token string">"7Hello Python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 下面这个正则不能够匹配到数字4，因此ret为None</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[0-35-9]Hello Python"</span><span class="token punctuation">,</span><span class="token string">"4Hello Python"</span><span class="token punctuation">)</span><span class="token comment"># print(ret.group())</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">hHhHHello Python7Hello Python7Hello Python7Hello Python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例3：-d"><a href="#示例3：-d" class="headerlink" title="示例3：\d"></a>示例3：\d</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> re<span class="token comment"># 普通的匹配方式</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"嫦娥1号"</span><span class="token punctuation">,</span><span class="token string">"嫦娥1号发射成功"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"嫦娥2号"</span><span class="token punctuation">,</span><span class="token string">"嫦娥2号发射成功"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"嫦娥3号"</span><span class="token punctuation">,</span><span class="token string">"嫦娥3号发射成功"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用\d进行匹配</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"嫦娥\d号"</span><span class="token punctuation">,</span><span class="token string">"嫦娥1号发射成功"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"嫦娥\d号"</span><span class="token punctuation">,</span><span class="token string">"嫦娥2号发射成功"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"嫦娥\d号"</span><span class="token punctuation">,</span><span class="token string">"嫦娥3号发射成功"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">嫦娥<span class="token number">1</span>号嫦娥<span class="token number">2</span>号嫦娥<span class="token number">3</span>号嫦娥<span class="token number">1</span>号嫦娥<span class="token number">2</span>号嫦娥<span class="token number">3</span>号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>其他的匹配符参见后面章节的讲解</li></ul><h1 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h1><p>匹配多个字符的相关格式</p><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">*</td><td align="left">匹配前一个字符出现0次或者无限次，即可有可无</td></tr><tr><td align="center">+</td><td align="left">匹配前一个字符出现1次或者无限次，即至少有1次</td></tr><tr><td align="center">?</td><td align="left">匹配前一个字符出现1次或者0次，即要么有1次，要么没有</td></tr><tr><td align="center">{m}</td><td align="left">匹配前一个字符出现m次</td></tr><tr><td align="center">{m,n}</td><td align="left">匹配前一个字符出现从m到n次</td></tr></tbody></table><h2 id="示例1：-1"><a href="#示例1：-1" class="headerlink" title="示例1：*"></a>示例1：*</h2><p>需求：匹配出，一个字符串第一个字母为大小字符，后面都是小写字母并且这些小写字母可有可无</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[A-Z][a-z]*"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[A-Z][a-z]*"</span><span class="token punctuation">,</span><span class="token string">"MnnM"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[A-Z][a-z]*"</span><span class="token punctuation">,</span><span class="token string">"Aabcdef"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">MMnnAabcdef<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="示例2：-1"><a href="#示例2：-1" class="headerlink" title="示例2：+"></a>示例2：+</h2><p>需求：匹配出，变量名是否有效</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> renames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"2_name"</span><span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">]</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>    ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z_]+[\w]*"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> ret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量名 %s 符合要求"</span> <span class="token operator">%</span> ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量名 %s 非法"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">变量名 name1 符合要求变量名 _name 符合要求变量名 2_name 非法变量名 __name__ 符合要求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例3："><a href="#示例3：" class="headerlink" title="示例3：?"></a>示例3：?</h2><p>需求：匹配出，0到99之间的数字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?[0-9]"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d"</span><span class="token punctuation">,</span><span class="token string">"09"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">7</span><span class="token number">33</span><span class="token number">0</span> <span class="token comment"># 这个结果并不是想要的，利用$才能解决</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="示例4：-m"><a href="#示例4：-m" class="headerlink" title="示例4：{m}"></a>示例4：{m}</h2><p>需求：匹配出，8到20位的密码，可以是大小写英文字母、数字、下划线</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z0-9_]&#123;6&#125;"</span><span class="token punctuation">,</span><span class="token string">"12a3g45678"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z0-9_]&#123;8,20&#125;"</span><span class="token punctuation">,</span><span class="token string">"1ad12f23s34455ff66"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">12a3g41ad12f23s34455ff66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练一练"><a href="#练一练" class="headerlink" title="练一练"></a>练一练</h2><h3 id="题目1：匹配出163的邮箱地址，且-符号之前有4到20位，例如-104-x65-108-108-x6f-x40-49-x36-x33-x2e-99-111-x6d"><a href="#题目1：匹配出163的邮箱地址，且-符号之前有4到20位，例如-104-x65-108-108-x6f-x40-49-x36-x33-x2e-99-111-x6d" class="headerlink" title="题目1：匹配出163的邮箱地址，且@符号之前有4到20位，例如&#104;&#x65;&#108;&#108;&#x6f;&#x40;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;"></a>题目1：匹配出163的邮箱地址，且@符号之前有4到20位，例如<a href="mailto:&#104;&#x65;&#108;&#108;&#x6f;&#x40;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;">&#104;&#x65;&#108;&#108;&#x6f;&#x40;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;</a></h3><h1 id="匹配开头结尾"><a href="#匹配开头结尾" class="headerlink" title="匹配开头结尾"></a>匹配开头结尾</h1><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">^</td><td align="left">匹配字符串开头</td></tr><tr><td align="center">$</td><td align="left">匹配字符串结尾</td></tr></tbody></table><h2 id="示例1：-2"><a href="#示例1：-2" class="headerlink" title="示例1：$"></a>示例1：$</h2><p>需求：匹配163.com的邮箱地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reemail_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xiaoWang@163.com"</span><span class="token punctuation">,</span> <span class="token string">"xiaoWang@163.comheihei"</span><span class="token punctuation">,</span> <span class="token string">".com.xiaowang@qq.com"</span><span class="token punctuation">]</span><span class="token keyword">for</span> email <span class="token keyword">in</span> email_list<span class="token punctuation">:</span>    ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[\w]&#123;4,20&#125;@163\.com"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span>    <span class="token keyword">if</span> ret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 是符合规定的邮件地址,匹配后的结果是:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>email<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 不符合要求"</span> <span class="token operator">%</span> email<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">xiaoWang@<span class="token number">163</span><span class="token punctuation">.</span>com 是符合规定的邮件地址<span class="token punctuation">,</span>匹配后的结果是<span class="token punctuation">:</span>xiaoWang@<span class="token number">163</span><span class="token punctuation">.</span>comxiaoWang@<span class="token number">163</span><span class="token punctuation">.</span>comheihei 是符合规定的邮件地址<span class="token punctuation">,</span>匹配后的结果是<span class="token punctuation">:</span>xiaoWang@<span class="token number">163</span><span class="token punctuation">.</span>com<span class="token punctuation">.</span>com<span class="token punctuation">.</span>xiaowang@qq<span class="token punctuation">.</span>com 不符合要求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="完善后"><a href="#完善后" class="headerlink" title="完善后"></a>完善后</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">email_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xiaoWang@163.com"</span><span class="token punctuation">,</span> <span class="token string">"xiaoWang@163.comheihei"</span><span class="token punctuation">,</span> <span class="token string">".com.xiaowang@qq.com"</span><span class="token punctuation">]</span><span class="token keyword">for</span> email <span class="token keyword">in</span> email_list<span class="token punctuation">:</span>    ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[\w]&#123;4,20&#125;@163\.com$"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span>    <span class="token keyword">if</span> ret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 是符合规定的邮件地址,匹配后的结果是:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>email<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 不符合要求"</span> <span class="token operator">%</span> email<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">xiaoWang@<span class="token number">163</span><span class="token punctuation">.</span>com 是符合规定的邮件地址<span class="token punctuation">,</span>匹配后的结果是<span class="token punctuation">:</span>xiaoWang@<span class="token number">163</span><span class="token punctuation">.</span>comxiaoWang@<span class="token number">163</span><span class="token punctuation">.</span>comheihei 不符合要求<span class="token punctuation">.</span>com<span class="token punctuation">.</span>xiaowang@qq<span class="token punctuation">.</span>com 不符合要求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="匹配分组"><a href="#匹配分组" class="headerlink" title="匹配分组"></a>匹配分组</h1><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">|</td><td align="left">匹配左右任意一个表达式</td></tr><tr><td align="center">(ab)</td><td align="left">将括号中字符作为一个分组</td></tr><tr><td align="center"><code>\num</code></td><td align="left">引用分组num匹配到的字符串</td></tr><tr><td align="center"><code>(?P&lt;name&gt;)</code></td><td align="left">分组起别名</td></tr><tr><td align="center">(?P&#x3D;name)</td><td align="left">引用别名为name分组匹配到的字符串</td></tr></tbody></table><h2 id="示例1：-3"><a href="#示例1：-3" class="headerlink" title="示例1：|"></a>示例1：|</h2><p>需求：匹配出0-100之间的数字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 8</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d"</span><span class="token punctuation">,</span><span class="token string">"78"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 78</span><span class="token comment"># 不正确的情况</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d"</span><span class="token punctuation">,</span><span class="token string">"08"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token comment"># 修正之后的</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d$"</span><span class="token punctuation">,</span><span class="token string">"08"</span><span class="token punctuation">)</span><span class="token keyword">if</span> ret<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不在0-100之间"</span><span class="token punctuation">)</span><span class="token comment"># 添加|</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d$|100"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 8</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d$|100"</span><span class="token punctuation">,</span><span class="token string">"78"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 78</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d$|100"</span><span class="token punctuation">,</span><span class="token string">"08"</span><span class="token punctuation">)</span><span class="token comment"># print(ret.group())  # 不是0-100之间</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"[1-9]?\d$|100"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例2：-2"><a href="#示例2：-2" class="headerlink" title="示例2：( )"></a>示例2：( )</h2><p>需求：匹配出163、126、qq邮箱</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"\w&#123;4,20&#125;@163\.com"</span><span class="token punctuation">,</span> <span class="token string">"test@163.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># test@163.com</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span><span class="token punctuation">,</span> <span class="token string">"test@126.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># test@126.com</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span><span class="token punctuation">,</span> <span class="token string">"test@qq.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># test@qq.com</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span><span class="token punctuation">,</span> <span class="token string">"test@gmail.com"</span><span class="token punctuation">)</span><span class="token keyword">if</span> ret<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不是163、126、qq邮箱"</span><span class="token punctuation">)</span>  <span class="token comment"># 不是163、126、qq邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="不是以4、7结尾的手机号码-11位"><a href="#不是以4、7结尾的手机号码-11位" class="headerlink" title="不是以4、7结尾的手机号码(11位)"></a>不是以4、7结尾的手机号码(11位)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> retels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"13100001234"</span><span class="token punctuation">,</span> <span class="token string">"18912344321"</span><span class="token punctuation">,</span> <span class="token string">"10086"</span><span class="token punctuation">,</span> <span class="token string">"18800007777"</span><span class="token punctuation">]</span><span class="token keyword">for</span> tel <span class="token keyword">in</span> tels<span class="token punctuation">:</span>    ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"1\d&#123;9&#125;[0-35-68-9]"</span><span class="token punctuation">,</span> tel<span class="token punctuation">)</span>    <span class="token keyword">if</span> ret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 不是想要的手机号"</span> <span class="token operator">%</span> tel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提取区号和电话号码"><a href="#提取区号和电话号码" class="headerlink" title="提取区号和电话号码"></a>提取区号和电话号码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"([^-]*)-(\d+)"</span><span class="token punctuation">,</span><span class="token string">"010-12345678"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'010-12345678'</span><span class="token operator">>></span><span class="token operator">></span> ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'010'</span><span class="token operator">>></span><span class="token operator">></span> ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'12345678'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例3：-1"><a href="#示例3：-1" class="headerlink" title="示例3：\"></a>示例3：\</h2><p>需求：匹配出<code>&lt;html&gt;hh&lt;/html&gt;</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> re<span class="token comment"># 能够完成对正确的字符串的匹配</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"&lt;[a-zA-Z]*>\w*&lt;/[a-zA-Z]*>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>hh&lt;/html>"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 如果遇到非正常的html格式字符串，匹配出错</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"&lt;[a-zA-Z]*>\w*&lt;/[a-zA-Z]*>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>hh&lt;/htmlbalabala>"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 正确的理解思路：如果在第一对&lt;>中是什么，按理说在后面的那对&lt;>中就应该是什么</span><span class="token comment"># 通过引用分组中匹配到的数据即可，但是要注意是元字符串，即类似 r""这种格式</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"&lt;([a-zA-Z]*)>\w*&lt;/\1>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>hh&lt;/html>"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 因为2对&lt;>中的数据不一致，所以没有匹配出来</span>test_label <span class="token operator">=</span> <span class="token string">"&lt;html>hh&lt;/htmlbalabala>"</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"&lt;([a-zA-Z]*)>\w*&lt;/\1>"</span><span class="token punctuation">,</span> test_label<span class="token punctuation">)</span><span class="token keyword">if</span> ret<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 这是一对不正确的标签"</span> <span class="token operator">%</span> test_label<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>hh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>hh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>htmlbalabala</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>hh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>hh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>htmlbalabala</span><span class="token punctuation">></span></span> 这是一对不正确的标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例4：-number"><a href="#示例4：-number" class="headerlink" title="示例4：\number"></a>示例4：\number</h2><p>需求：匹配出<code>&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> relabels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"&lt;html>&lt;h1>www.itcast.cn&lt;/h1>&lt;/html>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>&lt;h1>www.itcast.cn&lt;/h2>&lt;/html>"</span><span class="token punctuation">]</span><span class="token keyword">for</span> label <span class="token keyword">in</span> labels<span class="token punctuation">:</span>    ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"&lt;(\w*)>&lt;(\w*)>.*&lt;/\2>&lt;/\1>"</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>    <span class="token keyword">if</span> ret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 是符合要求的标签"</span> <span class="token operator">%</span> ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 不符合要求"</span> <span class="token operator">%</span> label<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>www.itcast.cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> 是符合要求的标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>www.itcast.cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> 不符合要求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="示例5：-P-lt-name-gt-P-name"><a href="#示例5：-P-lt-name-gt-P-name" class="headerlink" title="示例5：(?P&lt;name&gt;) (?P=name)"></a>示例5：<code>(?P&lt;name&gt;)</code> <code>(?P=name)</code></h2><p>需求：匹配出<code>&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"&lt;(?P&lt;name1>\w*)>&lt;(?P&lt;name2>\w*)>.*&lt;/(?P=name2)>&lt;/(?P=name1)>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>&lt;h1>www.itcast.cn&lt;/h1>&lt;/html>"</span><span class="token punctuation">)</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"&lt;(?P&lt;name1>\w*)>&lt;(?P&lt;name2>\w*)>.*&lt;/(?P=name2)>&lt;/(?P=name1)>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;html>&lt;h1>www.itcast.cn&lt;/h2>&lt;/html>"</span><span class="token punctuation">)</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意：-P-lt-name-gt-和-P-name-中的字母p大写"><a href="#注意：-P-lt-name-gt-和-P-name-中的字母p大写" class="headerlink" title="注意：(?P&lt;name&gt;)和(?P=name)中的字母p大写"></a>注意：<code>(?P&lt;name&gt;)</code>和<code>(?P=name)</code>中的字母p大写</h3><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321230906.png" alt="img" loading="lazy"></p><h1 id="re模块的高级用法"><a href="#re模块的高级用法" class="headerlink" title="re模块的高级用法"></a>re模块的高级用法</h1><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>需求：匹配出文章阅读的次数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> <span class="token string">"阅读次数为 9999"</span><span class="token punctuation">)</span>ret<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'9999'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h2><p>需求：统计出python、c、c++相应文章阅读的次数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> <span class="token string">"python = 9999, c = 7890, c++ = 12345"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'9999'</span><span class="token punctuation">,</span> <span class="token string">'7890'</span><span class="token punctuation">,</span> <span class="token string">'12345'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="sub-将匹配到的数据进行替换"><a href="#sub-将匹配到的数据进行替换" class="headerlink" title="sub 将匹配到的数据进行替换"></a>sub 将匹配到的数据进行替换</h2><p>需求：将匹配到的阅读次数加1</p><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> <span class="token string">'998'</span><span class="token punctuation">,</span> <span class="token string">"python = 997"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">=</span> <span class="token number">998</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span>    strNum <span class="token operator">=</span> temp<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>strNum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> <span class="token string">"python = 997"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>ret <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> <span class="token string">"python = 99"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">=</span> <span class="token number">998</span>python <span class="token operator">=</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321230920.png" alt="img" loading="lazy"></p><p>从下面的字符串中取出文本</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>岗位职责：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>完成推荐算法、数据统计、接口、后台等服务器端相关工作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>必备要求：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>良好的自我驱动力和职业素养，工作积极主动、结果导向<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>技术要求：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>1、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设计模式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>4、掌握NoSQL、MQ，熟练使用对应技术解决方案<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>加分项：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>大数据，数理统计，机器学习，sklearn，高性能，大并发。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考答案:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"&lt;[^>]*>|&amp;nbsp;|\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> test_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="split-根据匹配进行切割字符串，并返回一个列表"><a href="#split-根据匹配进行切割字符串，并返回一个列表" class="headerlink" title="split 根据匹配进行切割字符串，并返回一个列表"></a>split 根据匹配进行切割字符串，并返回一个列表</h2><p>需求：切割字符串“info:xiaoZhang 33 shandong”</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> reret <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r":| "</span><span class="token punctuation">,</span><span class="token string">"info:xiaoZhang 33 shandong"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span> <span class="token string">'33'</span><span class="token punctuation">,</span> <span class="token string">'shandong'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="python贪婪和非贪婪"><a href="#python贪婪和非贪婪" class="headerlink" title="python贪婪和非贪婪"></a>python贪婪和非贪婪</h1><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪则相反，总是尝试匹配尽可能少的字符。</p><p>在”*”,”?”,”+”,”{m,n}”后面加上？，使贪婪变成非贪婪。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s<span class="token operator">=</span><span class="token string">"This is a number 234-235-22-423"</span><span class="token operator">>></span><span class="token operator">></span> r<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">".+(\d+-\d+-\d+-\d+)"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> r<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'4-235-22-423'</span><span class="token operator">>></span><span class="token operator">></span> r<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">".+?(\d+-\d+-\d+-\d+)"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> r<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'234-235-22-423'</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正则表达式模式中使用到通配字，那它在从左到右的顺序求值时，会尽量“抓取”满足匹配最长字符串，在我们上面的例子里面，“.+”会从字符串的启始处抓取满足模式的最长字符，其中包括我们想得到的第一个整型字段的中的大部分，“\d+”只需一位字符就可以匹配，所以它匹配了数字“4”，而“.+”则匹配了从字符串起始到这个第一位数字4之前的所有字符。</p><p>解决方式：非贪婪操作符“？”，这个操作符可以用在”*”,”+”,”?”的后面，要求正则匹配的越少越好。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"aa(\d+)"</span><span class="token punctuation">,</span><span class="token string">"aa2343ddd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'2343'</span><span class="token operator">>></span><span class="token operator">></span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"aa(\d+?)"</span><span class="token punctuation">,</span><span class="token string">"aa2343ddd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'2'</span><span class="token operator">>></span><span class="token operator">></span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"aa(\d+)ddd"</span><span class="token punctuation">,</span><span class="token string">"aa2343ddd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">'2343'</span><span class="token operator">>></span><span class="token operator">></span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"aa(\d+?)ddd"</span><span class="token punctuation">,</span><span class="token string">"aa2343ddd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'2343'</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练一练-1"><a href="#练一练-1" class="headerlink" title="练一练"></a>练一练</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321230940.png" alt="img" loading="lazy"></p><p>字符串为:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-original</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://rpic.douyucdn.cn/appCovers/2016/11/13/1213973_201611131917_small.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://rpic.douyucdn.cn/appCovers/2016/11/13/1213973_201611131917_small.jpg<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请提取url地址</p><p>参考答案</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"https://.*?\.jpg"</span><span class="token punctuation">,</span> test_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="r的作用"><a href="#r的作用" class="headerlink" title="r的作用"></a>r的作用</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mm <span class="token operator">=</span> <span class="token string">"c:\\a\\b\\c"</span><span class="token operator">>></span><span class="token operator">></span> mm<span class="token string">'c:\\a\\b\\c'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span>c<span class="token punctuation">:</span>\a\b\c<span class="token operator">>></span><span class="token operator">></span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"c:\\\\"</span><span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'c:\\'</span><span class="token operator">>></span><span class="token operator">></span> ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"c:\\\\"</span><span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>c<span class="token punctuation">:</span>\<span class="token operator">>></span><span class="token operator">></span> ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"c:\\\\a"</span><span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>c<span class="token punctuation">:</span>\a<span class="token operator">>></span><span class="token operator">></span> ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"c:\\a"</span><span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>c<span class="token punctuation">:</span>\a<span class="token operator">>></span><span class="token operator">></span> ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"c:\a"</span><span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'NoneType'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'group'</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明</p><p><code>Python中字符串前面加上 r 表示原生字符串</code>，</p><p>与大多数编程语言相同，<code>正则表达式里使用&quot;\&quot;作为转义字符</code>，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”&quot;，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。</p><p>Python里的原生字符串很好地解决了这个问题，有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ret <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"c:\\a"</span><span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>c<span class="token punctuation">:</span>\a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式概述&quot;&gt;&lt;a href=&quot;#正则表达式概述&quot; class=&quot;headerlink&quot; title=&quot;正则表达式概述&quot;&gt;&lt;/a&gt;正则表达式概述&lt;/h1&gt;&lt;h2 id=&quot;思考&quot;&gt;&lt;a href=&quot;#思考&quot; class=&quot;headerlink&quot; title=&quot;思</summary>
      
    
    
    
    <category term="Python" scheme="http://ccsu.top/categories/Python/"/>
    
    
    <category term="Python" scheme="http://ccsu.top/tags/Python/"/>
    
    <category term="正则表达式" scheme="http://ccsu.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透</title>
    <link href="http://ccsu.top/posts/bd50b816/"/>
    <id>http://ccsu.top/posts/bd50b816/</id>
    <published>2022-03-20T17:08:00.000Z</published>
    <updated>2022-04-02T07:03:22.084Z</updated>
    
    <content type="html"><![CDATA[<p>通过<code>frp</code>开源代码进行内网穿透，需要准备一台带宽高有官网IP的服务器</p><p>下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321003851.png" alt="image-20220321003850923" loading="lazy"></p><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>下载<code>frp_0.40.0_linux_amd64.tar.gz</code>，可以通过命令行，也可以直接在github下载</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 下载frpwget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.40.0&#x2F;frp_0.40.0_linux_amd64.tar.gz# 解压tar -zvxf frp_0.40.0_linux_amd64.tar.gz# 重命名mv frp_0.40.0_linux_amd64.tar.gz frp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321004249.png" alt="image-20220321004249532" loading="lazy"></p><p>修改<code>frps.ini</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[common]bind_port &#x3D; 7000# frp使用的端口dashboard_user &#x3D; admin# 流量监控的账户dashboard_pwd &#x3D; admin  # 流量监控的密码dashboard_port &#x3D; 6443# 流量监控程序的端口，搭建完成之后用服务器IP:6443就可以打开流量监控网页程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给文件夹<code>frp</code>赋权</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo chmod 755 frp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动<code>frp</code></p><pre class="line-numbers language-SH" data-language="SH"><code class="language-SH">.&#x2F;frps -c .&#x2F;frps.ini <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321005150.png" alt="image-20220321005150643" loading="lazy"></p><p>打开流量监控网页，<code>服务器IP地址:7000</code></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321004800.png" alt="image-20220321004800570" loading="lazy"></p><h1 id="树莓派端"><a href="#树莓派端" class="headerlink" title="树莓派端"></a>树莓派端</h1><p>下载<code>frp_0.40.0_linux_amd64.tar.gz</code>，可以通过命令行，也可以直接在github下载</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 下载frpwget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.40.0&#x2F;frp_0.40.0_linux_amd64.tar.gz# 解压tar -zvxf frp_0.40.0_linux_amd64.tar.gz# 重命名mv frp_0.40.0_linux_amd64.tar.gz frp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321004249.png" alt="image-20220321004249532" loading="lazy"></p><p>修改<code>frpc.ini</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[common]server_addr &#x3D; 服务器IPserver_port &#x3D; 7000[ssh]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 22remote_port &#x3D; 6000[cream]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 8880remote_port &#x3D; 8880[vnc]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 5900# vnc端口是5900remote_port &#x3D; 5900<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给文件夹<code>frp</code>赋权</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo chmod 755 frp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动<code>frp</code></p><pre class="line-numbers language-SH" data-language="SH"><code class="language-SH">.&#x2F;frpc -c .&#x2F;frpc.ini <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321005206.png" alt="image-20220321005206495" loading="lazy"></p><p>查看<code>frp</code>后台，可以看见服务</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321005256.png" alt="image-20220321005256292" loading="lazy"></p><blockquote><p>  <code>frps.ini</code>是服务端的配置文件，<code>frpc.ini</code>是客户端的配置文件，注意不要混淆</p></blockquote><h1 id="配置frp自启动"><a href="#配置frp自启动" class="headerlink" title="配置frp自启动"></a>配置frp自启动</h1><p>使用systemctl来控制启动，将<code>/frp/systemd/frps.service</code>拷贝到<code>/lib/systemd/system/</code>目录下，在<code>frps.service</code>里写入以下内容</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[Unit]Description&#x3D;fraps serviceAfter&#x3D;network.target syslog.targetWants&#x3D;network.target[Service]Type&#x3D;simple#启动服务的命令（此处写你的frps的实际安装目录）ExecStart&#x3D;&#x2F;your&#x2F;path&#x2F;frps -c &#x2F;your&#x2F;path&#x2F;frps.ini[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就启动<code>frps</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo systemctl start frps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再打开自启动</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo systemctl enable frps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要重启应用，可以这样，<code>sudo systemctl restart frps</code><br>如果要停止应用，可以输入，<code>sudo systemctl stop frps</code><br>如果要查看应用的日志，可以输入，<code>sudo systemctl status frps</code></p><p>实测树莓派远程监控延时为0.5s左右，这个时候可以通过公网地址和端口访问树莓派，通过<code>ssh</code>或者<code>vnc</code>都可以</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220321005459.png" alt="image-20220321005459457" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过&lt;code&gt;frp&lt;/code&gt;开源代码进行内网穿透，需要准备一台带宽高有官网IP的服务器&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/fatedier/frp/releases&quot;&gt;https://github.com/fatedie</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="内网穿透" scheme="http://ccsu.top/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>树莓派实现远程监控</title>
    <link href="http://ccsu.top/posts/108619c9/"/>
    <id>http://ccsu.top/posts/108619c9/</id>
    <published>2022-03-20T16:23:00.000Z</published>
    <updated>2022-03-20T17:15:33.912Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  python实现opencv+scoket网络实时图传</p></blockquote><h1 id="服务器分析"><a href="#服务器分析" class="headerlink" title="服务器分析"></a><strong>服务器分析</strong></h1><p>1.　先通过在服务器端利用OpenCV捕获到视频的每一帧图片</p><p>2.　将这些图片进行压缩成JPEG格式，这样能减小图片大小，便于传输</p><p>3.　按照提前协商好的分辨率和帧数进行打包编码传输</p><p>4.　利用服务器端打开端口8880，此时客户端连接后，便可以在客户端中捕获到服务器端的视频。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#服务端</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">import</span> struct<span class="token keyword">import</span> time<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span>category<span class="token operator">=</span>DeprecationWarning<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Carame_Accept_Object</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>S_addr_port<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8880</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>resolution<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span><span class="token number">480</span><span class="token punctuation">)</span>    <span class="token comment">#分辨率</span>    self<span class="token punctuation">.</span>img_fps<span class="token operator">=</span><span class="token number">30</span>         <span class="token comment">#每秒传输多少帧数</span>    self<span class="token punctuation">.</span>addr_port<span class="token operator">=</span>S_addr_port    self<span class="token punctuation">.</span>Set_Socket<span class="token punctuation">(</span>self<span class="token punctuation">.</span>addr_port<span class="token punctuation">)</span>  <span class="token comment">#设置套接字</span>  <span class="token keyword">def</span> <span class="token function">Set_Socket</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>S_addr_port<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>server<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#端口可复用</span>    self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>S_addr_port<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">#print("the process work in the port:%d" % S_addr_port[1])</span><span class="token keyword">def</span> <span class="token function">check_option</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#按格式解码，确定帧数和分辨率</span>  info<span class="token operator">=</span>struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'lhh'</span><span class="token punctuation">,</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">888</span><span class="token punctuation">:</span>    <span class="token builtin">object</span><span class="token punctuation">.</span>img_fps<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">888</span>     <span class="token comment">#获取帧数</span>    <span class="token builtin">object</span><span class="token punctuation">.</span>resolution<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">.</span>resolution<span class="token punctuation">)</span>    <span class="token comment"># 获取分辨率</span>    <span class="token builtin">object</span><span class="token punctuation">.</span>resolution<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token builtin">object</span><span class="token punctuation">.</span>resolution<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token builtin">object</span><span class="token punctuation">.</span>resolution <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">.</span>resolution<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">RT_Image</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span>client<span class="token punctuation">,</span>D_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>check_option<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span>  camera<span class="token operator">=</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment">#从摄像头中获取视频</span>  img_param<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">object</span><span class="token punctuation">.</span>img_fps<span class="token punctuation">]</span> <span class="token comment">#设置传送图像格式、帧数</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>       <span class="token comment">#推迟线程运行0.1s</span>    ret<span class="token punctuation">,</span><span class="token builtin">object</span><span class="token punctuation">.</span>img<span class="token operator">=</span>camera<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#读取视频每一帧</span>    <span class="token builtin">object</span><span class="token punctuation">.</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">.</span>img<span class="token punctuation">,</span><span class="token builtin">object</span><span class="token punctuation">.</span>resolution<span class="token punctuation">)</span>   <span class="token comment">#按要求调整图像大小(resolution必须为元组)</span>    _<span class="token punctuation">,</span>img_encode<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imencode<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span><span class="token builtin">object</span><span class="token punctuation">.</span>img<span class="token punctuation">,</span>img_param<span class="token punctuation">)</span> <span class="token comment">#按格式生成图片</span>    img_code<span class="token operator">=</span>numpy<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img_encode<span class="token punctuation">)</span>            <span class="token comment">#转换成矩阵</span>    <span class="token builtin">object</span><span class="token punctuation">.</span>img_data<span class="token operator">=</span>img_code<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">#生成相应的字符串</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>      <span class="token comment">#按照相应的格式进行打包发送图片</span>      client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"lhh"</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">.</span>img_data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">object</span><span class="token punctuation">.</span>resolution<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">object</span><span class="token punctuation">.</span>resolution<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">object</span><span class="token punctuation">.</span>img_data<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>      camera<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#释放资源</span>      <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  camera<span class="token operator">=</span>Carame_Accept_Object<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    client<span class="token punctuation">,</span>D_addr<span class="token operator">=</span>camera<span class="token punctuation">.</span>server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    clientThread<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span>target<span class="token operator">=</span>RT_Image<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span>client<span class="token punctuation">,</span>D_addr<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    clientThread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="客户端分析"><a href="#客户端分析" class="headerlink" title="客户端分析"></a><strong>客户端分析</strong></h1><p>1.　客户端连接端口后，首先发送需要协商的分辨率和帧数，以致能够使传输“协议”一致</p><p>2.　客户端使用线程，对图片进行收集</p><ol start="3"><li>对收到的每一张图片进行解码，并利用OpenCV播放出来，即可实现C&#x2F;S两端实时视频传输。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time : 2022/3/20 22:57</span><span class="token comment"># @Author : WuShuai</span><span class="token comment"># @Email : wu_shuai_2000@163.com</span><span class="token comment"># @File : test.py</span><span class="token comment"># @blog : https://blog.csdn.net/Dumbking</span><span class="token comment">#客户端</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> cv2<span class="token keyword">import</span> threading<span class="token keyword">import</span> struct<span class="token keyword">import</span> numpy<span class="token keyword">class</span> <span class="token class-name">Camera_Connect_Object</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>D_addr_port<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8880</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>resolution<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">640</span><span class="token punctuation">,</span><span class="token number">480</span><span class="token punctuation">]</span>    self<span class="token punctuation">.</span>addr_port<span class="token operator">=</span>D_addr_port    self<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token number">888</span><span class="token operator">+</span><span class="token number">15</span>         <span class="token comment">#双方确定传输帧数，（888）为校验值</span>    self<span class="token punctuation">.</span>interval<span class="token operator">=</span><span class="token number">0</span>         <span class="token comment">#图片播放时间间隔</span>    self<span class="token punctuation">.</span>img_fps<span class="token operator">=</span><span class="token number">30</span>         <span class="token comment">#每秒传输多少帧数</span>  <span class="token keyword">def</span> <span class="token function">Set_socket</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>client<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">Socket_Connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>Set_socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>addr_port<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP is %s:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>addr_port<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>addr_port<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">RT_Image</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#按照格式打包发送帧数和分辨率</span>    self<span class="token punctuation">.</span>name<span class="token operator">=</span>self<span class="token punctuation">.</span>addr_port<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" Camera"</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"lhh"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>src<span class="token punctuation">,</span> self<span class="token punctuation">.</span>resolution<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>resolution<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      info<span class="token operator">=</span>struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"lhh"</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      buf_size<span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          <span class="token comment">#获取读的图片总长度</span>      <span class="token keyword">if</span> buf_size<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>          self<span class="token punctuation">.</span>buf<span class="token operator">=</span><span class="token string">b""</span>        <span class="token comment">#代表bytes类型</span>          temp_buf<span class="token operator">=</span>self<span class="token punctuation">.</span>buf          <span class="token keyword">while</span><span class="token punctuation">(</span>buf_size<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment">#读取每一张图片的长度</span>            temp_buf<span class="token operator">=</span>self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>buf_size<span class="token punctuation">)</span>            buf_size<span class="token operator">-=</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_buf<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>buf<span class="token operator">+=</span>temp_buf   <span class="token comment">#获取图片</span>            data <span class="token operator">=</span> numpy<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buf<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'uint8'</span><span class="token punctuation">)</span>  <span class="token comment">#按uint8转换为图像矩阵</span>            self<span class="token punctuation">.</span>image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment">#图像解码</span>            cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>image<span class="token punctuation">)</span>          <span class="token comment">#展示图片</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>          <span class="token keyword">pass</span><span class="token punctuation">;</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#每10ms刷新一次图片，按‘ESC'（27）退出</span>            self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>  <span class="token keyword">def</span> <span class="token function">Get_Data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    showThread<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>RT_Image<span class="token punctuation">)</span>    showThread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  camera<span class="token operator">=</span>Camera_Connect_Object<span class="token punctuation">(</span><span class="token punctuation">)</span>  camera<span class="token punctuation">.</span>addr_port<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"服务端的ip"</span>  camera<span class="token punctuation">.</span>addr_port<span class="token operator">=</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>camera<span class="token punctuation">.</span>addr_port<span class="token punctuation">)</span>  camera<span class="token punctuation">.</span>Socket_Connect<span class="token punctuation">(</span><span class="token punctuation">)</span>  camera<span class="token punctuation">.</span>Get_Data<span class="token punctuation">(</span>camera<span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  服务端放在树莓派上面运行，在局域网内可以直接访问，想要远程访问还需要让树莓派进行内网穿透。</p><p>  原本的思路是树莓派通过<code>opencv</code>获取视频帧，传给有公网IP的服务器，服务器再进行转发到客户端，这样的话需要多写服务器上面的代码，利用内网穿透可以很好地避免这个过程，减少开发的工作量。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  python实现opencv+scoket网络实时图传&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;服务器分析&quot;&gt;&lt;a href=&quot;#服务器分析&quot; class=&quot;headerlink&quot; title=&quot;服务器分析&quot;&gt;&lt;/a&gt;&lt;strong</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="树莓派" scheme="http://ccsu.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="OpenCV" scheme="http://ccsu.top/tags/OpenCV/"/>
    
    <category term="Socket" scheme="http://ccsu.top/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Python多任务-进程</title>
    <link href="http://ccsu.top/posts/b23c6bbe/"/>
    <id>http://ccsu.top/posts/b23c6bbe/</id>
    <published>2022-03-19T16:53:00.000Z</published>
    <updated>2022-03-19T16:53:47.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程以及状态"><a href="#进程以及状态" class="headerlink" title="进程以及状态"></a>进程以及状态</h1><h3 id="1-进程"><a href="#1-进程" class="headerlink" title="1. 进程"></a>1. 进程</h3><p>程序：例如xxx.py这是程序，是一个静态的</p><p>进程：一个程序运行起来后，代码+用到的资源 称之为进程，它是操作系统分配资源的基本单元。</p><p>不仅可以通过线程完成多任务，进程也是可以的</p><h3 id="2-进程的状态"><a href="#2-进程的状态" class="headerlink" title="2. 进程的状态"></a>2. 进程的状态</h3><p>工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319220239.png" alt="img" loading="lazy"></p><ul><li>就绪态：运行的条件都已经慢去，正在等在cpu执行</li><li>执行态：cpu正在执行其功能</li><li>等待态：等待某些条件满足，例如一个程序sleep了，此时就处于等待态</li></ul><h1 id="进程的创建-multiprocessing"><a href="#进程的创建-multiprocessing" class="headerlink" title="进程的创建-multiprocessing"></a>进程的创建-multiprocessing</h1><p>multiprocessing模块就是跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情</p><h3 id="1-2个while循环一起执行"><a href="#1-2个while循环一起执行" class="headerlink" title="1. 2个while循环一起执行"></a>1. 2个while循环一起执行</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">run_proc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""子进程要执行的代码"""</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----2----"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>run_proc<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----1----"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动</li></ul><h3 id="2-进程pid"><a href="#2-进程pid" class="headerlink" title="2. 进程pid"></a>2. 进程pid</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">run_proc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""子进程要执行的代码"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程运行中，pid=%d...'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># os.getpid获取当前进程的进程号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程将要结束...'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'父进程pid: %d'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># os.getpid获取当前进程的进程号</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>run_proc<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Process语法结构如下："><a href="#3-Process语法结构如下：" class="headerlink" title="3. Process语法结构如下："></a>3. Process语法结构如下：</h3><p>Process([group [, target [, name [, args [, kwargs]]]]])</p><ul><li>target：如果传递了函数的引用，可以任务这个子进程就执行这里的代码</li><li>args：给target指定的函数传递的参数，以元组的方式传递</li><li>kwargs：给target指定的函数传递命名参数</li><li>name：给进程设定一个名字，可以不设定</li><li>group：指定进程组，大多数情况下用不到</li></ul><p>Process创建的实例对象的常用方法：</p><ul><li>start()：启动子进程实例（创建子进程）</li><li>is_alive()：判断进程子进程是否还在活着</li><li>join([timeout])：是否等待子进程执行结束，或等待多少秒</li><li>terminate()：不管任务是否完成，立即终止子进程</li></ul><p>Process创建的实例对象的常用属性：</p><ul><li>name：当前进程的别名，默认为Process-N，N为从1开始递增的整数</li><li>pid：当前进程的pid（进程号）</li></ul><h3 id="4-给子进程指定的函数传递参数"><a href="#4-给子进程指定的函数传递参数" class="headerlink" title="4. 给子进程指定的函数传递参数"></a>4. 给子进程指定的函数传递参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> os<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">def</span> <span class="token function">run_proc</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程运行中，name= %s,age=%d ,pid=%d...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>run_proc<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"m"</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 1秒中之后，立即结束子进程</span>    p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">子进程运行中，name<span class="token operator">=</span> test<span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span> <span class="token punctuation">,</span>pid<span class="token operator">=</span><span class="token number">45097.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token string">'m'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>子进程运行中，name<span class="token operator">=</span> test<span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span> <span class="token punctuation">,</span>pid<span class="token operator">=</span><span class="token number">45097.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token string">'m'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>子进程运行中，name<span class="token operator">=</span> test<span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span> <span class="token punctuation">,</span>pid<span class="token operator">=</span><span class="token number">45097.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token string">'m'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>子进程运行中，name<span class="token operator">=</span> test<span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span> <span class="token punctuation">,</span>pid<span class="token operator">=</span><span class="token number">45097.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token string">'m'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>子进程运行中，name<span class="token operator">=</span> test<span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span> <span class="token punctuation">,</span>pid<span class="token operator">=</span><span class="token number">45097.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token string">'m'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-进程间不同享全局变量"><a href="#5-进程间不同享全局变量" class="headerlink" title="5. 进程间不同享全局变量"></a>5. 进程间不同享全局变量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> os<span class="token keyword">import</span> timenums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">work1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""子进程要执行的代码"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in process1 pid=%d ,nums=%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in process1 pid=%d ,nums=%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""子进程要执行的代码"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in process2 pid=%d ,nums=%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work1<span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work2<span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">in</span> process1 pid<span class="token operator">=</span><span class="token number">11349</span> <span class="token punctuation">,</span>nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token keyword">in</span> process1 pid<span class="token operator">=</span><span class="token number">11349</span> <span class="token punctuation">,</span>nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">in</span> process1 pid<span class="token operator">=</span><span class="token number">11349</span> <span class="token punctuation">,</span>nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">in</span> process1 pid<span class="token operator">=</span><span class="token number">11349</span> <span class="token punctuation">,</span>nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">in</span> process2 pid<span class="token operator">=</span><span class="token number">11350</span> <span class="token punctuation">,</span>nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="进程、线程对比"><a href="#进程、线程对比" class="headerlink" title="进程、线程对比"></a>进程、线程对比</h1><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>进程，能够完成多任务，比如 在一台电脑上能够同时运行多个QQ</li><li>线程，能够完成多任务，比如 一个QQ中的多个聊天窗口</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319221932.jpg" alt="img" loading="lazy"></p><h3 id="定义的不同"><a href="#定义的不同" class="headerlink" title="定义的不同"></a>定义的不同</h3><ul><li>进程是系统进行资源分配和调度的一个独立单位.</li><li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>一个程序至少有一个进程,一个进程至少有一个线程.</li><li>线程的划分尺度小于进程(资源比进程少)，使得多线程程序的并发性高。</li><li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319221950.png" alt="img" loading="lazy"></p><ul><li>线线程不能够独立执行，必须依存在进程中</li><li>可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319222001.gif" alt="img" loading="lazy"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p><h1 id="进程间通信-Queue"><a href="#进程间通信-Queue" class="headerlink" title="进程间通信-Queue"></a>进程间通信-Queue</h1><p>Process之间有时需要通信，操作系统提供了很多机制来实现进程间的通信。</p><h3 id="1-Queue的使用"><a href="#1-Queue的使用" class="headerlink" title="1. Queue的使用"></a>1. Queue的使用</h3><p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序，首先用一个小实例来演示一下Queue的工作原理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Queueq<span class="token operator">=</span>Queue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#初始化一个Queue对象，最多可接收三条put消息</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"消息1"</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"消息2"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#False</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"消息3"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#True</span><span class="token comment">#因为消息列队已满下面的try都会抛出异常，第一个try会等待2秒后再抛出异常，第二个Try会立刻抛出异常</span><span class="token keyword">try</span><span class="token punctuation">:</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"消息4"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消息列队已满，现有消息数量:%s"</span><span class="token operator">%</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token string">"消息4"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消息列队已满，现有消息数量:%s"</span><span class="token operator">%</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#推荐的方式，先判断消息列队是否已满，再写入</span><span class="token keyword">if</span> <span class="token keyword">not</span> q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token string">"消息4"</span><span class="token punctuation">)</span><span class="token comment">#读取消息时，先判断消息列队是否为空，再读取</span><span class="token keyword">if</span> <span class="token keyword">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token boolean">False</span><span class="token boolean">True</span>消息列队已满，现有消息数量<span class="token punctuation">:</span><span class="token number">3</span>消息列队已满，现有消息数量<span class="token punctuation">:</span><span class="token number">3</span>消息<span class="token number">1</span>消息<span class="token number">2</span>消息<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h5><p>初始化Queue()对象时（例如：q&#x3D;Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；</p><ul><li>Queue.qsize()：返回当前队列包含的消息数量；</li><li>Queue.empty()：如果队列为空，返回True，反之False ；</li><li>Queue.full()：如果队列满了，返回True,反之False；</li><li>Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；</li></ul><p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；</p><p>2）如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；</p><ul><li>Queue.get_nowait()：相当Queue.get(False)；</li><li>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</li></ul><p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；</p><p>2）如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p><ul><li>Queue.put_nowait(item)：相当Queue.put(item, False)；</li></ul><h3 id="2-Queue实例"><a href="#2-Queue实例" class="headerlink" title="2. Queue实例"></a>2. Queue实例</h3><p>我们以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token punctuation">,</span> random<span class="token comment"># 写数据进程执行的代码:</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Put %s to queue...'</span> <span class="token operator">%</span> value<span class="token punctuation">)</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 读数据进程执行的代码:</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get %s from queue.'</span> <span class="token operator">%</span> value<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 父进程创建Queue，并传给各个子进程：</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    pw <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pr <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 启动子进程pw，写入:</span>    pw<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 等待pw结束:</span>    pw<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 启动子进程pr，读取:</span>    pr<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    pr<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有数据都写入并且读完'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319222345.gif" alt="img" loading="lazy"></p><h1 id="进程池Pool"><a href="#进程池Pool" class="headerlink" title="进程池Pool"></a>进程池Pool</h1><p>当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。</p><p>初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会用之前的进程来执行新的任务，请看下面的实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token punctuation">,</span> random<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    t_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s开始执行,进程号为%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># random.random()随机生成0~1之间的浮点数</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>     t_stop <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token string">"执行完毕，耗时%0.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>t_stop<span class="token operator">-</span>t_start<span class="token punctuation">)</span><span class="token punctuation">)</span>po <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 定义一个进程池，最大进程数3</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元祖,))</span>    <span class="token comment"># 每次循环将会用空闲出来的子进程去调用目标</span>    po<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>worker<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----start----"</span><span class="token punctuation">)</span>po<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭进程池，关闭后po不再接收新的请求</span>po<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 等待po中所有子进程执行完成，必须放在close语句之后</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----end-----"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>start<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">0</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21466</span><span class="token number">1</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21468</span><span class="token number">2</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21467</span><span class="token number">0</span> 执行完毕，耗时<span class="token number">1.01</span><span class="token number">3</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21466</span><span class="token number">2</span> 执行完毕，耗时<span class="token number">1.24</span><span class="token number">4</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21467</span><span class="token number">3</span> 执行完毕，耗时<span class="token number">0.56</span><span class="token number">5</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21466</span><span class="token number">1</span> 执行完毕，耗时<span class="token number">1.68</span><span class="token number">6</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21468</span><span class="token number">4</span> 执行完毕，耗时<span class="token number">0.67</span><span class="token number">7</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21467</span><span class="token number">5</span> 执行完毕，耗时<span class="token number">0.83</span><span class="token number">8</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21466</span><span class="token number">6</span> 执行完毕，耗时<span class="token number">0.75</span><span class="token number">9</span>开始执行<span class="token punctuation">,</span>进程号为<span class="token number">21468</span><span class="token number">7</span> 执行完毕，耗时<span class="token number">1.03</span><span class="token number">8</span> 执行完毕，耗时<span class="token number">1.05</span><span class="token number">9</span> 执行完毕，耗时<span class="token number">1.69</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>end<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>multiprocessing.Pool常用函数解析：</p><ul><li>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</li><li>close()：关闭Pool，使其不再接受新的任务；</li><li>terminate()：不管任务是否完成，立即终止；</li><li>join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；</li></ul><h2 id="进程池中的Queue"><a href="#进程池中的Queue" class="headerlink" title="进程池中的Queue"></a>进程池中的Queue</h2><p>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到一条如下的错误信息：</p><p>RuntimeError: Queue objects should only be shared between processes through inheritance.</p><p>下面的实例演示了进程池中的进程如何通信：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment"># 修改import中的Queue为Manager</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Manager<span class="token punctuation">,</span>Pool<span class="token keyword">import</span> os<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">def</span> <span class="token function">reader</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"reader启动(%s),父进程为(%s)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"reader从Queue获取到消息：%s"</span> <span class="token operator">%</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">writer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"writer启动(%s),父进程为(%s)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"itcast"</span><span class="token punctuation">:</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"(%s) start"</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 使用Manager中的Queue</span>    po <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    po<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 先让上面的任务向Queue存入数据，然后再让下面的任务开始从中取数据</span>    po<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>reader<span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    po<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    po<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"(%s) End"</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">11095</span><span class="token punctuation">)</span> startwriter启动<span class="token punctuation">(</span><span class="token number">11097</span><span class="token punctuation">)</span><span class="token punctuation">,</span>父进程为<span class="token punctuation">(</span><span class="token number">11095</span><span class="token punctuation">)</span>reader启动<span class="token punctuation">(</span><span class="token number">11098</span><span class="token punctuation">)</span><span class="token punctuation">,</span>父进程为<span class="token punctuation">(</span><span class="token number">11095</span><span class="token punctuation">)</span>reader从Queue获取到消息：ireader从Queue获取到消息：treader从Queue获取到消息：creader从Queue获取到消息：areader从Queue获取到消息：sreader从Queue获取到消息：t<span class="token punctuation">(</span><span class="token number">11095</span><span class="token punctuation">)</span> End<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="应用：文件夹copy器（多进程版）"><a href="#应用：文件夹copy器（多进程版）" class="headerlink" title="应用：文件夹copy器（多进程版）"></a>应用：文件夹copy器（多进程版）</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">copy_file</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span>source_folder_name<span class="token punctuation">,</span>  dest_folder_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""copy文件到指定的路径"""</span>    f_read <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>source_folder_name <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>    f_write <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dest_folder_name <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> f_read<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> content<span class="token punctuation">:</span>            f_write<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    f_read<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    f_write<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 发送已经拷贝完毕的文件名字</span>    queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取要复制的文件夹</span>    source_folder_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入要复制文件夹名字:"</span><span class="token punctuation">)</span>    <span class="token comment"># 整理目标文件夹</span>    dest_folder_name <span class="token operator">=</span> source_folder_name <span class="token operator">+</span> <span class="token string">"[副本]"</span>    <span class="token comment"># 创建目标文件夹</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dest_folder_name<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>  <span class="token comment"># 如果文件夹已经存在，那么创建会失败</span>    <span class="token comment"># 获取这个文件夹中所有的普通文件名</span>    file_names <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>source_folder_name<span class="token punctuation">)</span>    <span class="token comment"># 创建Queue</span>    queue <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建进程池</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_names<span class="token punctuation">:</span>        <span class="token comment"># 向进程池中添加任务</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>copy_file<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> source_folder_name<span class="token punctuation">,</span> dest_folder_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 主进程显示进度</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    all_file_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>file_names<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        file_name <span class="token operator">=</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> file_name <span class="token keyword">in</span> file_names<span class="token punctuation">:</span>            file_names<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>        copy_rate <span class="token operator">=</span> <span class="token punctuation">(</span>all_file_num<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>file_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">/</span>all_file_num        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r%.2f...(%s)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>copy_rate<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> copy_rate <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程以及状态&quot;&gt;&lt;a href=&quot;#进程以及状态&quot; class=&quot;headerlink&quot; title=&quot;进程以及状态&quot;&gt;&lt;/a&gt;进程以及状态&lt;/h1&gt;&lt;h3 id=&quot;1-进程&quot;&gt;&lt;a href=&quot;#1-进程&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="Python" scheme="http://ccsu.top/categories/Python/"/>
    
    
    <category term="进程" scheme="http://ccsu.top/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python多任务-线程</title>
    <link href="http://ccsu.top/posts/a4da6e72/"/>
    <id>http://ccsu.top/posts/a4da6e72/</id>
    <published>2022-03-19T15:00:00.000Z</published>
    <updated>2022-03-19T16:53:47.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多任务介绍"><a href="#多任务介绍" class="headerlink" title="多任务介绍"></a>多任务介绍</h1><h2 id="现实生活中"><a href="#现实生活中" class="headerlink" title="现实生活中"></a>现实生活中</h2><p>有很多的场景中的事情是同时进行的，比如开车的时候 手和脚共同来驾驶汽车，再比如唱歌跳舞也是同时进行的；</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205200.jpg" alt="img" loading="lazy"></p><p>试想，如果把唱歌和跳舞这2件事情分开依次完成的话，估计就没有那么好的效果了（想一下场景：先唱歌，然后在跳舞，O(∩_∩)O哈哈~）</p><h2 id="程序中"><a href="#程序中" class="headerlink" title="程序中"></a>程序中</h2><p>如下程序，来模拟“唱歌跳舞”这件事情</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在唱歌...%d"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在跳舞...%d"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    sing<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#唱歌</span>    dance<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#跳舞</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205249.png" alt="image-20220319205249393" loading="lazy"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>很显然刚刚的程序并没有完成唱歌和跳舞同时进行的要求</li><li>如果想要实现“唱歌跳舞”同时进行，那么就需要一个新的方法，叫做：<strong>多任务</strong></li></ul><h1 id="多任务的概念"><a href="#多任务的概念" class="headerlink" title="多任务的概念"></a>多任务的概念</h1><p>什么叫“多任务”呢？简单地说，就是操作系统可以同时运行多个任务。打个比方，你一边在用浏览器上网，一边在听MP3，一边在用Word赶作业，这就是多任务，至少同时有3个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是桌面上没有显示而已。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205356.png" alt="img" loading="lazy"></p><p>现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？</p><p>答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。</p><p>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205411.jpg" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205417.gif" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205426.gif" alt="img" loading="lazy"></p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>**&#x3D;&#x3D;并发&#x3D;&#x3D;**：指的是任务数多余cpu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已）</li><li>**&#x3D;&#x3D;并行&#x3D;&#x3D;**：指的是任务数小于等于cpu核数，即任务真的是一起执行的</li></ul><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>python的thread模块是比较底层的模块，python的threading模块是对thread做了一些包装的，可以更加方便的被使用</p><h3 id="1-使用threading模块"><a href="#1-使用threading模块" class="headerlink" title="1. 使用threading模块"></a>1. 使用threading模块</h3><h4 id="单线程执行"><a href="#单线程执行" class="headerlink" title="单线程执行"></a>单线程执行</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">saySorry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"亲爱的，我错了，我能吃饭了吗？"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        saySorry<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205623.gif" alt="img" loading="lazy"></p><h4 id="多线程执行"><a href="#多线程执行" class="headerlink" title="多线程执行"></a>多线程执行</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">saySorry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"亲爱的，我错了，我能吃饭了吗？"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>saySorry<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#启动线程，即让线程开始执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205706.gif" alt="img" loading="lazy"></p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>可以明显看出使用了多线程并发的操作，花费时间要短很多</li><li>当调用<code>start()</code>时，才会真正的创建线程，并且开始执行</li></ol><h3 id="2-主线程会等待所有的子线程结束后才结束"><a href="#2-主线程会等待所有的子线程结束后才结束" class="headerlink" title="2. 主线程会等待所有的子线程结束后才结束"></a>2. 主线程会等待所有的子线程结束后才结束</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token punctuation">,</span>ctime<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在唱歌...%d"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在跳舞...%d"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---开始---:%s'</span><span class="token operator">%</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---结束---:%s'</span><span class="token operator">%</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319205759.gif" alt="img" loading="lazy"></p><h3 id="3-查看线程数量"><a href="#3-查看线程数量" class="headerlink" title="3. 查看线程数量"></a>3. 查看线程数量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token punctuation">,</span>ctime<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在唱歌...%d"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在跳舞...%d"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---开始---:%s'</span><span class="token operator">%</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前运行的线程数为：%d'</span><span class="token operator">%</span>length<span class="token punctuation">)</span>        <span class="token keyword">if</span> length<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319210210.gif" alt="img" loading="lazy"></p><h1 id="线程-注意点"><a href="#线程-注意点" class="headerlink" title="线程-注意点"></a>线程-注意点</h1><h4 id="1-线程执行代码的封装"><a href="#1-线程执行代码的封装" class="headerlink" title="1. 线程执行代码的封装"></a>1. 线程执行代码的封装</h4><p>通过上一小节，能够看出，通过使用threading模块能完成多任务的程序开发，为了让每个线程的封装性更完美，所以使用threading模块时，往往会定义一个新的子类class，只要继承<code>threading.Thread</code>就可以了，然后重写<code>run</code>方法</p><p>示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            msg <span class="token operator">=</span> <span class="token string">"I'm "</span><span class="token operator">+</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' @ '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">#name属性中保存的是当前线程的名字</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319210233.gif" alt="img" loading="lazy"></p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ul><li>python的threading.Thread类有一个run方法，用于定义线程的功能函数，可以在自己的线程类中覆盖该方法。而创建自己的线程实例后，通过Thread类的start方法，可以启动该线程，交给python虚拟机进行调度，当该线程获得执行的机会时，就会调用run方法执行线程。</li></ul><h4 id="2-线程的执行顺序"><a href="#2-线程的执行顺序" class="headerlink" title="2. 线程的执行顺序"></a>2. 线程的执行顺序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            msg <span class="token operator">=</span> <span class="token string">"I'm "</span><span class="token operator">+</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' @ '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：(运行的结果可能不一样，但是大体是一致的)</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">I&#39;m Thread-1 @ 0I&#39;m Thread-2 @ 0I&#39;m Thread-5 @ 0I&#39;m Thread-3 @ 0I&#39;m Thread-4 @ 0I&#39;m Thread-3 @ 1I&#39;m Thread-4 @ 1I&#39;m Thread-5 @ 1I&#39;m Thread-1 @ 1I&#39;m Thread-2 @ 1I&#39;m Thread-4 @ 2I&#39;m Thread-5 @ 2I&#39;m Thread-2 @ 2I&#39;m Thread-1 @ 2I&#39;m Thread-3 @ 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>从代码和执行结果我们可以看出，多线程程序的执行顺序是不确定的。当执行到sleep语句时，线程将被阻塞（Blocked），到sleep结束后，线程进入就绪（Runnable）状态，等待调度。而线程调度将自行选择一个线程执行。上面的代码中只能保证每个线程都运行完整个run函数，但是线程的启动顺序、run函数中每次循环的执行顺序都不能确定。</p><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><ol><li>每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。</li><li>当线程的run()方法结束时该线程完成。</li><li>无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。</li></ol><h1 id="多线程-共享全局变量"><a href="#多线程-共享全局变量" class="headerlink" title="多线程-共享全局变量"></a>多线程-共享全局变量</h1><p>在一个函数中对全局变屋进行修改的时候，到底是香需要使用<code>global</code>进行说明要看是否对全局变量的执行指向进行了修改如果修改了执行，即上全局变量指向了一个新的地方，那么必须使用<code>global</code>如果，仅仅是修改了指向的空间中的数据，此时不用必须使用<code>global</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">import</span> timeg_num <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">def</span> <span class="token function">work1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> g_num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        g_num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----in work1, g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> g_num    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----in work2, g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---线程创建之前g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work1<span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#延时一会，保证t1线程中的事情做完</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work2<span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>线程创建之前g_num <span class="token keyword">is</span> <span class="token number">100</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">in</span> work1<span class="token punctuation">,</span> g_num <span class="token keyword">is</span> <span class="token number">103</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">in</span> work2<span class="token punctuation">,</span> g_num <span class="token keyword">is</span> <span class="token number">103</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="列表当做实参传递到线程中"><a href="#列表当做实参传递到线程中" class="headerlink" title="列表当做实参传递到线程中"></a>列表当做实参传递到线程中</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">work1</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----in work1---"</span><span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">work2</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#延时一会，保证t1线程中的事情做完</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----in work2---"</span><span class="token punctuation">,</span>nums<span class="token punctuation">)</span>g_nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>g_nums<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>g_nums<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">in</span> work1<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">in</span> work2<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据</li><li>缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）</li></ul><h1 id="多线程-共享全局变量问题"><a href="#多线程-共享全局变量问题" class="headerlink" title="多线程-共享全局变量问题"></a>多线程-共享全局变量问题</h1><h3 id="多线程开发可能遇到的问题"><a href="#多线程开发可能遇到的问题" class="headerlink" title="多线程开发可能遇到的问题"></a>多线程开发可能遇到的问题</h3><p>假设两个线程t1和t2都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加10次，g_num的最终的结果应该为20。</p><p>但是由于是多线程同时操作，有可能出现下面情况：</p><ol><li>在g_num&#x3D;0时，t1取得g_num&#x3D;0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得g_num&#x3D;0</li><li>然后t2对得到的值进行加1并赋给g_num，使得g_num&#x3D;1</li><li>然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。</li><li>这样导致虽然t1和t2都对g_num加1，但结果仍然是g_num&#x3D;1</li></ol><h4 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timeg_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">work1</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> g_num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        g_num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----in work1, g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">work2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> g_num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        g_num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----in work2, g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---线程创建之前g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> <span class="token operator">%</span> g_num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>线程创建之前g_num <span class="token keyword">is</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">in</span> work1<span class="token punctuation">,</span> g_num <span class="token keyword">is</span> <span class="token number">100</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">in</span> work2<span class="token punctuation">,</span> g_num <span class="token keyword">is</span> <span class="token number">200</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">2</span>个线程对同一个全局变量操作之后的最终结果是<span class="token punctuation">:</span><span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timeg_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">work1</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> g_num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        g_num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----in work1, g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">work2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> g_num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        g_num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----in work2, g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---线程创建之前g_num is %d---"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> <span class="token operator">%</span> g_num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>线程创建之前g_num <span class="token keyword">is</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">in</span> work1<span class="token punctuation">,</span> g_num <span class="token keyword">is</span> <span class="token number">1088005</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">in</span> work2<span class="token punctuation">,</span> g_num <span class="token keyword">is</span> <span class="token number">1286202</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">2</span>个线程对同一个全局变量操作之后的最终结果是<span class="token punctuation">:</span><span class="token number">1286202</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>&#x3D;&#x3D;如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确&#x3D;&#x3D;</li></ul><h1 id="同步的概念"><a href="#同步的概念" class="headerlink" title="同步的概念"></a>同步的概念</h1><p>同步就是协同步调，按预定的先后次序进行运行。如:你说完，我再说。</p><p>“同”字从字面上容易理解为一起动作</p><p>其实不是，”同”字应是指协同、协助、互相配合。</p><p>如进程、线程同步，可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行;B执行，再将结果给A;A再继续操作。</p><h4 id="解决线程同时修改全局变量的方式"><a href="#解决线程同时修改全局变量的方式" class="headerlink" title="解决线程同时修改全局变量的方式"></a>解决线程同时修改全局变量的方式</h4><p>对于上一小节提出的那个计算错误的问题，可以通过线程同步来进行解决</p><p>思路，如下:</p><ol><li>系统调用t1，然后获取到g_num的值为0，此时上一把锁，即不允许其他线程操作g_num</li><li>t1对g_num的值进行+1</li><li>t1解锁，此时g_num的值为1，其他的线程就可以使用g_num了，而且是g_num的值不是0而是1</li><li>同理其他线程在对g_num进行修改时，都要先上锁，处理完后再解锁，在上锁的整个过程中不允许其他线程访问，就保证了数据的正确性</li></ol><h1 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h1><p>当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制</p><p>线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入互斥锁。</p><p>互斥锁为资源引入一个状态：锁定&#x2F;非锁定</p><p>某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319213103.png" alt="img" loading="lazy"></p><p>threading模块中定义了Lock类，可以方便的处理锁定：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建锁</span>mutex <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 锁定</span>mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 释放</span>mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><ul><li>如果这个锁之前是没有上锁的，那么acquire不会堵塞</li><li>如果在调用acquire对这个锁上锁之前 它已经被 其他线程上了锁，那么此时acquire会堵塞，直到这个锁被解锁为止</li></ul><h4 id="使用互斥锁完成2个线程对同一个全局变量各加100万次的操作"><a href="#使用互斥锁完成2个线程对同一个全局变量各加100万次的操作" class="headerlink" title="使用互斥锁完成2个线程对同一个全局变量各加100万次的操作"></a>使用互斥锁完成2个线程对同一个全局变量各加100万次的操作</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timeg_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> g_num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 上锁</span>        g_num <span class="token operator">+=</span> <span class="token number">1</span>        mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 解锁</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---test1---g_num=%d"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> g_num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 上锁</span>        g_num <span class="token operator">+=</span> <span class="token number">1</span>        mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 解锁</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---test2---g_num=%d"</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span><span class="token comment"># 创建一个互斥锁</span><span class="token comment"># 默认是未上锁的状态</span>mutex <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建2个线程，让他们各自对g_num加1000000次</span>p1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>test1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>test2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待计算完成</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> <span class="token operator">%</span> g_num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test1<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>g_num<span class="token operator">=</span><span class="token number">1909909</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test2<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>g_num<span class="token operator">=</span><span class="token number">2000000</span><span class="token number">2</span>个线程对同一个全局变量操作之后的最终结果是<span class="token punctuation">:</span><span class="token number">2000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到最后的结果，加入互斥锁后，其结果与预期相符。</p><h2 id="上锁解锁过程"><a href="#上锁解锁过程" class="headerlink" title="上锁解锁过程"></a>上锁解锁过程</h2><p>当一个线程调用锁的acquire()方法获得锁时，锁就进入“locked”状态。</p><p>每次只有一个线程可以获得锁。如果此时另一个线程试图获得这个锁，该线程就会变为“blocked”状态，称为“阻塞”，直到拥有锁的线程调用锁的release()方法释放锁之后，锁进入“unlocked”状态。</p><p>线程调度程序从处于同步阻塞状态的线程中选择一个来获得锁，并使得该线程进入运行（running）状态。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>锁的好处：</p><ul><li>确保了某段关键代码只能由一个线程从头到尾完整地执行</li></ul><p>锁的坏处：</p><ul><li>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</li><li>由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁</li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>现实社会中，男女双方都在等待对方先道歉</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319215542.png" alt="img" loading="lazy"></p><p>如果双方都这样固执的等待对方先开口，弄不好，就分搜了</p><h3 id="1-死锁"><a href="#1-死锁" class="headerlink" title="1. 死锁"></a>1. 死锁</h3><p>在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。</p><p>尽管死锁很少发生，但一旦发生就会造成应用的停止响应。下面看一个死锁的例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">MyThread1</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 对mutexA上锁</span>        mutexA<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># mutexA上锁后，延时1秒，等待另外那个线程 把mutexB上锁</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'----do1---up----'</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 此时会堵塞，因为这个mutexB已经被另外的线程抢先上锁了</span>        mutexB<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'----do1---down----'</span><span class="token punctuation">)</span>        mutexB<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 对mutexA解锁</span>        mutexA<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 对mutexB上锁</span>        mutexB<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># mutexB上锁后，延时1秒，等待另外那个线程 把mutexA上锁</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'----do2---up----'</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 此时会堵塞，因为这个mutexA已经被另外的线程抢先上锁了</span>        mutexA<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'----do2---down----'</span><span class="token punctuation">)</span>        mutexA<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 对mutexB解锁</span>        mutexB<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>mutexA <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>mutexB <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> MyThread1<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> MyThread2<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果： </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319215630.gif" alt="img" loading="lazy"></p><p>此时已经进入到了死锁状态，可以使用ctrl-c退出</p><h3 id="2-避免死锁"><a href="#2-避免死锁" class="headerlink" title="2. 避免死锁"></a>2. 避免死锁</h3><ul><li>程序设计时要尽量避免（银行家算法）</li><li>添加超时时间等</li></ul><h3 id="附录-银行家算法"><a href="#附录-银行家算法" class="headerlink" title="附录-银行家算法"></a>附录-银行家算法</h3><p>[背景知识]</p><p>一个银行家如何将一定数目的资金安全地借给若干个客户，使这些客户既能借到钱完成要干的事，同时银行家又能收回全部资金而不至于破产，这就是银行家问题。这个问题同操作系统中资源分配问题十分相似：银行家就像一个操作系统，客户就像运行的进程，银行家的资金就是系统的资源。</p><p>[问题的描述]</p><p>一个银行家拥有一定数量的资金，有若干个客户要贷款。每个客户须在一开始就声明他所需贷款的总额。若该客户贷款总额不超过银行家的资金总数，银行家可以接收客户的要求。客户贷款是以每次一个资金单位（如1万RMB等）的方式进行的，客户在借满所需的全部单位款额之前可能会等待，但银行家须保证这种等待是有限的，可完成的。</p><p>例如：有三个客户C1，C2，C3，向银行家借款，该银行家的资金总额为10个资金单位，其中C1客户要借9各资金单位，C2客户要借3个资金单位，C3客户要借8个资金单位，总计20个资金单位。某一时刻的状态如图所示。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319215638.png" alt="img" loading="lazy"></p><p>对于a图的状态，按照安全序列的要求，我们选的第一个客户应满足该客户所需的贷款小于等于银行家当前所剩余的钱款，可以看出只有C2客户能被满足：C2客户需1个资金单位，小银行家手中的2个资金单位，于是银行家把1个资金单位借给C2客户，使之完成工作并归还所借的3个资金单位的钱，进入b图。同理，银行家把4个资金单位借给C3客户，使其完成工作，在c图中，只剩一个客户C1，它需7个资金单位，这时银行家有8个资金单位，所以C1也能顺利借到钱并完成工作。最后（见图d）银行家收回全部10个资金单位，保证不赔本。那麽客户序列{C1，C2，C3}就是个安全序列，按照这个序列贷款，银行家才是安全的。否则的话，若在图b状态时，银行家把手中的4个资金单位借给了C1，则出现不安全状态：这时C1，C3均不能完成工作，而银行家手中又没有钱了，系统陷入僵持局面，银行家也不能收回投资。</p><p>综上所述，银行家算法是从当前状态出发，逐个按安全序列检查各客户谁能完成其工作，然后假定其完成工作且归还全部贷款，再进而检查下一个能完成工作的客户，……。如果所有客户都能完成工作，则找到一个安全序列，银行家才是安全的。</p><h1 id="案例：多任务版udp聊天器"><a href="#案例：多任务版udp聊天器" class="headerlink" title="案例：多任务版udp聊天器"></a>案例：多任务版udp聊天器</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319215802.png" alt="img" loading="lazy"></p><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><blockquote><ul><li>编写一个有2个线程的程序</li><li>线程1用来接收数据然后显示</li><li>线程2用来检测键盘数据然后通过udp发送数据</li></ul></blockquote><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><blockquote><ol><li>实现上述要求</li><li>总结多任务程序的特点</li></ol></blockquote><h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码:"></a>参考代码:</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">send_msg</span><span class="token punctuation">(</span>udp_socket<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取键盘数据，并将其发送给对方"""</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment"># 1. 从键盘输入数据</span>        msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n请输入要发送的数据:"</span><span class="token punctuation">)</span>        <span class="token comment"># 2. 输入对方的ip地址</span>        dest_ip <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n请输入对方的ip地址:"</span><span class="token punctuation">)</span>        <span class="token comment"># 3. 输入对方的port</span>        dest_port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n请输入对方的port:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 4. 发送数据</span>        udp_socket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>dest_ip<span class="token punctuation">,</span> dest_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">recv_msg</span><span class="token punctuation">(</span>udp_socket<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""接收数据并显示"""</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment"># 1. 接收数据</span>        recv_msg <span class="token operator">=</span> udp_socket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token comment"># 2. 解码</span>        recv_ip <span class="token operator">=</span> recv_msg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        recv_msg <span class="token operator">=</span> recv_msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token comment"># 3. 显示接收到的数据</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">>>%s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>recv_ip<span class="token punctuation">)</span><span class="token punctuation">,</span> recv_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1. 创建套接字</span>    udp_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    <span class="token comment"># 2. 绑定本地信息</span>    udp_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">7890</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 3. 创建一个子线程用来接收数据</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>recv_msg<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>udp_socket<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 4. 让主线程用来检测键盘数据并且发送</span>    send_msg<span class="token punctuation">(</span>udp_socket<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多任务介绍&quot;&gt;&lt;a href=&quot;#多任务介绍&quot; class=&quot;headerlink&quot; title=&quot;多任务介绍&quot;&gt;&lt;/a&gt;多任务介绍&lt;/h1&gt;&lt;h2 id=&quot;现实生活中&quot;&gt;&lt;a href=&quot;#现实生活中&quot; class=&quot;headerlink&quot; title=&quot;现实生</summary>
      
    
    
    
    <category term="Python" scheme="http://ccsu.top/categories/Python/"/>
    
    
    <category term="线程" scheme="http://ccsu.top/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="http://ccsu.top/posts/65cd929b/"/>
    <id>http://ccsu.top/posts/65cd929b/</id>
    <published>2022-03-18T16:07:00.000Z</published>
    <updated>2022-03-18T16:14:53.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PyCharm-的初始设置（知道）"><a href="#PyCharm-的初始设置（知道）" class="headerlink" title="PyCharm 的初始设置（知道）"></a>PyCharm 的初始设置（知道）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>恢复 PyCharm 的初始设置</li><li>第一次启动 PyCharm</li><li>新建一个 Python 项目</li><li>设置 PyCharm 的字体显示</li><li>PyCharm 的升级以及其他</li></ul><p>PyCharm 的官方网站地址是：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><h2 id="01-恢复-PyCharm-的初始设置"><a href="#01-恢复-PyCharm-的初始设置" class="headerlink" title="01. 恢复 PyCharm 的初始设置"></a>01. 恢复 PyCharm 的初始设置</h2><p><code>PyCharm</code> 的 <strong>配置信息</strong> 是保存在 <strong>用户家目录下</strong> 的 <code>.PyCharmxxxx.x</code> 目录下的，<code>xxxx.x</code> 表示当前使用的 <code>PyCharm</code> 的版本号</p><p>如果要恢复 <code>PyCharm</code> 的初始设置，可以按照以下步骤进行：</p><ul><li><ol><li>关闭正在运行的 <code>PyCharm</code></li></ol></li><li><ol start="2"><li>在终端中执行以下终端命令，删除 <code>PyCharm</code> 的配置信息目录：</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> -r ~/.PyCharm2016.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>重新启动 <code>PyCharm</code></li></ol></li></ul><h2 id="02-第一次启动-PyCharm"><a href="#02-第一次启动-PyCharm" class="headerlink" title="02. 第一次启动 PyCharm"></a>02. 第一次启动 PyCharm</h2><ol><li>导入配置信息</li><li>选择许可协议</li><li>配置初始界面</li></ol><h3 id="2-1-导入配置信息"><a href="#2-1-导入配置信息" class="headerlink" title="2.1 导入配置信息"></a>2.1 导入配置信息</h3><ul><li>在第一次启动 <code>PyCharm</code> 时，会首先提示用户是否导入 <strong>之前的配置信息</strong></li><li>如果是第一次使用，直接点击 <strong>OK</strong> 按钮</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025501.png" alt="001_PyCharm导入配置信息-w603" loading="lazy"></p><h3 id="2-2-选择许可协议"><a href="#2-2-选择许可协议" class="headerlink" title="2.2 选择许可协议"></a>2.2 选择许可协议</h3><ul><li>PyCharm 是一个付费软件，购买费用为 <strong>199$ &#x2F; 年</strong> 或者 <strong>19.90$ ／ 月</strong></li><li>不过 PyCharm 提供了对 <strong>学生和教师免费使用的版本</strong><ul><li>下载地址是：<a href="https://www.jetbrains.com/pycharm-edu/download/#section=linux">https://www.jetbrains.com/pycharm-edu/download/#section=linux</a></li></ul></li><li>商业版本会提示输入注册信息，或者选择免费评估</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025502.png" alt="002_激活许可证-w495" loading="lazy"></p><h3 id="2-3-PyCharm-的配置初始界面"><a href="#2-3-PyCharm-的配置初始界面" class="headerlink" title="2.3 PyCharm 的配置初始界面"></a>2.3 PyCharm 的配置初始界面</h3><ul><li>在初始配置界面，可以通过 <code>Editor colors and fonts</code> 选择 <strong>编辑器的配色方案</strong></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025503.png" alt="003_PyCharm初始配置界面-w491" loading="lazy"></p><h3 id="2-4-欢迎界面"><a href="#2-4-欢迎界面" class="headerlink" title="2.4 欢迎界面"></a>2.4 欢迎界面</h3><ul><li>所有基础配置工作结束之后，就可以看到 <code>PyCharm</code> 的 <strong>欢迎界面</strong>了，通过 <strong>欢迎界面</strong> 就可以开始开发 Python 项目了</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025504.png" alt="004_PyCharm欢迎页面-w664" loading="lazy"></p><h2 id="03-新建-x2F-打开一个-Python-项目"><a href="#03-新建-x2F-打开一个-Python-项目" class="headerlink" title="03. 新建&#x2F;打开一个 Python 项目"></a>03. 新建&#x2F;打开一个 Python 项目</h2><h3 id="3-1-项目简介"><a href="#3-1-项目简介" class="headerlink" title="3.1 项目简介"></a>3.1 项目简介</h3><ul><li>开发 <strong>项目</strong> 就是开发一个 <strong>专门解决一个复杂业务功能的软件</strong></li><li>通常每 <strong>一个项目</strong> 就具有一个 <strong>独立专属的目录</strong>，用于保存 <strong>所有和项目相关的文件</strong><ul><li>一个项目通常会包含 <strong>很多源文件</strong></li></ul></li></ul><h3 id="3-2-打开-Python-项目"><a href="#3-2-打开-Python-项目" class="headerlink" title="3.2 打开 Python 项目"></a>3.2 打开 Python 项目</h3><ul><li>直接点击 <strong>Open</strong> 按钮，然后浏览到之前保存 <strong>Python 文件的目录</strong>，既可以打开项目</li><li>打开之后，会在目录下新建一个 <code>.idea</code> 的目录，用于保存 <strong>项目相关的信息</strong>，例如：<strong>解释器版本</strong>、<strong>项目包含的文件</strong>等等</li><li>第一次打开项目，需要耐心等待 <code>PyCharm</code> 对项目<strong>进行初始设置</strong></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025505.png" alt="005_打开已有Python项目-w423" loading="lazy"></p><h4 id="设置项目使用的解释器版本"><a href="#设置项目使用的解释器版本" class="headerlink" title="设置项目使用的解释器版本"></a>设置项目使用的解释器版本</h4><ul><li>打开的目录如果不是由 <code>PyCharm</code> 建立的项目目录，<strong>有的时候</strong> 使用的解释器版本是 <code>Python 2.x</code> 的，需要<strong>单独设置解释器的版本</strong></li><li>通过 <strong>File</strong> &#x2F; <strong>Settings…</strong> 可以打开设置窗口，如下图所示：</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025506.png" alt="006_选择项目的解释器版本-w975" loading="lazy"></p><h3 id="3-3-新建项目"><a href="#3-3-新建项目" class="headerlink" title="3.3 新建项目"></a>3.3 新建项目</h3><h4 id="1-命名规则"><a href="#1-命名规则" class="headerlink" title="1) 命名规则"></a>1) 命名规则</h4><ul><li><p>以后 <strong>项目名</strong> 前面都以 <strong>数字编号</strong>，<strong>随着知识点递增，编号递增</strong></p><ul><li>例如：<strong>01_Python 基础</strong>、<strong>02_分支</strong>、<strong>03_循环</strong>…</li></ul></li><li><p>每个项目下的 <strong>文件名</strong> 都以 <code>hm_xx_知识点</code> 方式来命名</p><ul><li>其中 <strong>xx</strong> 是演练文件的序号</li></ul></li><li><p>注意</p><ul><li><ol><li>命名文件名时建议只使用 <strong>小写字母</strong>、<strong>数字</strong> 和 <strong>下划线</strong></li></ol></li><li><ol start="2"><li><strong>文件名不能以数字开始</strong></li></ol></li></ul></li><li><p>通过 <strong>欢迎界面</strong> 或者菜单 <strong>File</strong> &#x2F; <strong>New Project</strong> 可以新建项目</p></li></ul><h4 id="2-演练步骤"><a href="#2-演练步骤" class="headerlink" title="2) 演练步骤"></a>2) 演练步骤</h4><ul><li>新建 <code>01_Python基础</code> 项目，使用 <strong>Python 3.x 解释器</strong></li><li>在项目下新建 <code>hm_01_hello.py</code> Python 文件</li><li>编写 <code>print(&quot;Hello Python&quot;)</code> 代码</li></ul><h2 id="04-设置-PyCharm-的字体显示"><a href="#04-设置-PyCharm-的字体显示" class="headerlink" title="04. 设置 PyCharm 的字体显示"></a>04. 设置 PyCharm 的字体显示</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025507.png" alt="007_PyCharm设置编辑器字体-w500" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025508.png" alt="008_PyCharm设置控制台字体-w500" loading="lazy"></p><h2 id="05-PyCharm-的升级以及其他"><a href="#05-PyCharm-的升级以及其他" class="headerlink" title="05. PyCharm 的升级以及其他"></a>05. PyCharm 的升级以及其他</h2><blockquote><p>PyCharm 提供了对 <strong>学生和教师免费使用的版本</strong></p></blockquote><ul><li>教育版下载地址：<a href="https://www.jetbrains.com/pycharm-edu/download/#section=linux">https://www.jetbrains.com/pycharm-edu/download/#section=linux</a></li><li>专业版下载地址：<a href="https://www.jetbrains.com/pycharm/download/#section=linux">https://www.jetbrains.com/pycharm/download/#section=linux</a></li></ul><h3 id="5-1-安装和启动步骤"><a href="#5-1-安装和启动步骤" class="headerlink" title="5.1 安装和启动步骤"></a>5.1 安装和启动步骤</h3><ul><li><ol><li>执行以下终端命令，解压缩下载后的安装包</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -zxvf pycharm-professional-2017.1.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>将解压缩后的目录移动到 <code>/opt</code> 目录下，可以方便其他用户使用</li></ol></li></ul><blockquote><p><code>/opt</code> 目录用户存放给主机额外安装的软件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mv</span> pycharm-2017.1.3/ /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>切换工作目录</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /opt/pycharm-2017.1.3/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="4"><li>启动 <code>PyCharm</code></li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./pycharm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-设置专业版启动图标"><a href="#5-2-设置专业版启动图标" class="headerlink" title="5.2 设置专业版启动图标"></a>5.2 设置专业版启动图标</h3><ul><li>在<strong>专业版</strong>中，选择菜单 <strong>Tools</strong> &#x2F; <strong>Create Desktop Entry…</strong> 可以设置任务栏启动图标<ul><li>注意：设置图标时，需要勾选 <code>Create the entry for all users</code></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025509.png" alt="009_创建桌面图标-w657" loading="lazy"></p><h3 id="5-3-卸载之前版本的-PyCharm"><a href="#5-3-卸载之前版本的-PyCharm" class="headerlink" title="5.3 卸载之前版本的 PyCharm"></a>5.3 卸载之前版本的 PyCharm</h3><h4 id="1-程序安装"><a href="#1-程序安装" class="headerlink" title="1) 程序安装"></a>1) 程序安装</h4><ul><li><ol><li><p><strong>程序文件目录</strong> </p><ul><li>将安装包解压缩，并且移动到 <code>/opt</code> 目录下</li><li><strong>所有的相关文件都保存在解压缩的目录中</strong></li></ul></li></ol></li><li><ol start="2"><li><p><strong>配置文件目录</strong></p><ul><li>启动 <code>PyCharm</code> 后，会在用户家目录下建立一个 <code>.PyCharmxxx</code> 的隐藏目录</li><li><strong>保存 <code>PyCharm</code> 相关的配置信息</strong></li></ul></li></ol></li><li><ol start="3"><li><p><strong>快捷方式文件</strong></p><ul><li><code>/usr/share/applications/jetbrains-pycharm.desktop</code></li></ul></li></ol></li></ul><blockquote><p>在 <code>ubuntu</code> 中，应用程序启动的快捷方式通常都保存在 <code>/usr/share/applications</code> 目录下</p></blockquote><h4 id="2-程序卸载"><a href="#2-程序卸载" class="headerlink" title="2) 程序卸载"></a>2) 程序卸载</h4><ul><li><p>要卸载 <code>PyCharm</code> 只需要做以下两步工作：</p></li><li><ol><li>删除解压缩目录</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">rm</span> -r /opt/pycharm-2016.3.1/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>删除家目录下用于保存配置信息的隐藏目录</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> -r ~/.PyCharm2016.3/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果不再使用 PyCharm 还需要将 <code>/usr/share/applications/</code> 下的 <code>jetbrains-pycharm.desktop</code> 删掉</p></blockquote><h3 id="5-4-教育版安装演练"><a href="#5-4-教育版安装演练" class="headerlink" title="5.4 教育版安装演练"></a>5.4 教育版安装演练</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 解压缩下载后的安装包</span>$ <span class="token function">tar</span> -zxvf pycharm-edu-3.5.1.tar.gz<span class="token comment"># 2. 将解压缩后的目录移动到 `/opt` 目录下，可以方便其他用户使用</span>$ <span class="token function">sudo</span> <span class="token function">mv</span> pycharm-edu-3.5.1/ /opt/<span class="token comment"># 3. 启动 `PyCharm`</span>/opt/pycharm-edu-3.5.1/bin/pycharm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>后续课程<strong>都使用专业版本演练</strong></p></blockquote><h4 id="设置启动图标"><a href="#设置启动图标" class="headerlink" title="设置启动图标"></a>设置启动图标</h4><ul><li><ol><li>编辑快捷方式文件</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> gedit /usr/share/applications/jetbrains-pycharm.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>按照以下内容修改文件内容，需要注意<strong>指定正确的 <code>pycharm</code> 目录</strong></li></ol></li></ul><pre class="line-numbers language-none"><code class="language-none">[Desktop Entry]Version&#x3D;1.0Type&#x3D;ApplicationName&#x3D;PyCharmIcon&#x3D;&#x2F;opt&#x2F;pycharm-edu-3.5.1&#x2F;bin&#x2F;pycharm.pngExec&#x3D;&quot;&#x2F;opt&#x2F;pycharm-edu-3.5.1&#x2F;bin&#x2F;pycharm.sh&quot; %fComment&#x3D;The Drive to DevelopCategories&#x3D;Development;IDE;Terminal&#x3D;falseStartupWMClass&#x3D;jetbrains-pycharm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="认识-Python"><a href="#认识-Python" class="headerlink" title="认识 Python"></a>认识 Python</h1><blockquote><p>人生苦短，我用 Python —— Life is short, you need Python</p></blockquote><p><img src="J:/02-%25E6%25AF%2595%25E8%25AE%25BE/2018%25E5%25B9%25B4%25E4%25BC%25A0%25E6%2599%25BA%25E6%2592%25AD%25E5%25AE%25A2%25E9%25BB%2591%25E9%25A9%25ACpython+%25E4%25BA%25BA%25E5%25B7%25A5%25E6%2599%25BA%25E8%2583%25BD%252015%25E6%259C%259F/%25E5%259F%25BA%25E7%25A1%2580%25E7%258F%25AD-%25E5%25B0%25B1%25E4%25B8%259A%25E7%258F%25AD%25E8%25AF%25BE%25E4%25BB%25B6%25E8%25B5%2584%25E6%2596%2599%2520-1-4%25E4%25BD%258D%25E5%259F%25BA%25E7%25A1%2580%25E7%258F%25AD%2520%25205-14%25E5%25B0%25B1%25E4%25B8%259A%25E7%258F%25AD/02python%25E6%25A0%25B8%25E5%25BF%2583%25E7%25BC%2596%25E7%25A8%258B%25E9%2598%25B6%25E6%25AE%25B5-python%25E5%259F%25BA%25E7%25A1%2580/%25E8%25AF%25BE%25E4%25BB%25B6/day02_markdown/media/14950329208518/001_%25E4%25BA%25BA%25E7%2594%259F%25E8%258B%25A6%25E7%259F%25AD%25E6%2588%2591%25E7%2594%25A8python.jpg" alt="001_人生苦短我用python" loading="lazy"></p><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><ul><li>Python 的起源</li><li>为什么要用 Python？</li><li>Python 的特点</li><li>Python 的优缺点</li></ul><h2 id="01-Python-的起源"><a href="#01-Python-的起源" class="headerlink" title="01. Python 的起源"></a>01. Python 的起源</h2><blockquote><p>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）</p></blockquote><p><img src="J:/02-%25E6%25AF%2595%25E8%25AE%25BE/2018%25E5%25B9%25B4%25E4%25BC%25A0%25E6%2599%25BA%25E6%2592%25AD%25E5%25AE%25A2%25E9%25BB%2591%25E9%25A9%25ACpython+%25E4%25BA%25BA%25E5%25B7%25A5%25E6%2599%25BA%25E8%2583%25BD%252015%25E6%259C%259F/%25E5%259F%25BA%25E7%25A1%2580%25E7%258F%25AD-%25E5%25B0%25B1%25E4%25B8%259A%25E7%258F%25AD%25E8%25AF%25BE%25E4%25BB%25B6%25E8%25B5%2584%25E6%2596%2599%2520-1-4%25E4%25BD%258D%25E5%259F%25BA%25E7%25A1%2580%25E7%258F%25AD%2520%25205-14%25E5%25B0%25B1%25E4%25B8%259A%25E7%258F%25AD/02python%25E6%25A0%25B8%25E5%25BF%2583%25E7%25BC%2596%25E7%25A8%258B%25E9%2598%25B6%25E6%25AE%25B5-python%25E5%259F%25BA%25E7%25A1%2580/%25E8%25AF%25BE%25E4%25BB%25B6/day02_markdown/media/14950329208518/002_%25E5%2590%2589%25E5%25A4%259A.jpg" alt="002_吉多-w256" loading="lazy"></p><ol><li>1989 年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的<strong>解释程序</strong>，作为 ABC 语言的一种继承（<strong>感觉下什么叫牛人</strong>）</li><li>ABC 是由吉多参加设计的一种教学语言，就吉多本人看来，ABC 这种语言非常优美和强大，是<strong>专门为非专业程序员设计的</strong>。但是 ABC 语言并没有成功，究其原因，吉多认为是<strong>非开放</strong>造成的。吉多决心在 Python 中避免这一错误，并获取了非常好的效果</li><li>之所以选中 Python（蟒蛇） 作为程序的名字，是因为他是 BBC 电视剧——蒙提·派森的飞行马戏团（Monty Python’s Flying Circus）的爱好者</li><li>1991 年，第一个 Python <strong>解释器</strong> 诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件</li></ol><h3 id="1-1-解释器（科普）"><a href="#1-1-解释器（科普）" class="headerlink" title="1.1 解释器（科普）"></a>1.1 解释器（科普）</h3><p><strong>计算机不能直接理解任何除机器语言以外的语言</strong>，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。<strong>将其他语言翻译成机器语言的工具，被称为编译器</strong></p><p>编译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译时间点的不同</strong>。当编译器<strong>以解释方式运行的时候</strong>，也称之为<strong>解释器</strong></p><p><img src="J:/02-%25E6%25AF%2595%25E8%25AE%25BE/2018%25E5%25B9%25B4%25E4%25BC%25A0%25E6%2599%25BA%25E6%2592%25AD%25E5%25AE%25A2%25E9%25BB%2591%25E9%25A9%25ACpython+%25E4%25BA%25BA%25E5%25B7%25A5%25E6%2599%25BA%25E8%2583%25BD%252015%25E6%259C%259F/%25E5%259F%25BA%25E7%25A1%2580%25E7%258F%25AD-%25E5%25B0%25B1%25E4%25B8%259A%25E7%258F%25AD%25E8%25AF%25BE%25E4%25BB%25B6%25E8%25B5%2584%25E6%2596%2599%2520-1-4%25E4%25BD%258D%25E5%259F%25BA%25E7%25A1%2580%25E7%258F%25AD%2520%25205-14%25E5%25B0%25B1%25E4%25B8%259A%25E7%258F%25AD/02python%25E6%25A0%25B8%25E5%25BF%2583%25E7%25BC%2596%25E7%25A8%258B%25E9%2598%25B6%25E6%25AE%25B5-python%25E5%259F%25BA%25E7%25A1%2580/%25E8%25AF%25BE%25E4%25BB%25B6/day02_markdown/media/14950329208518/001_%25E7%25BC%2596%25E8%25AF%2591%25E5%259E%258B%25E5%2592%258C%25E8%25A7%25A3%25E9%2587%258A%25E5%259E%258B%25E8%25AF%25AD%25E8%25A8%2580%25E5%25B7%25A5%25E4%25BD%259C%25E5%25AF%25B9%25E6%25AF%2594.png" alt="001_编译型和解释型语言工作对比-w360" loading="lazy"></p><ul><li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++</li><li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行</li></ul><h4 id="编译型语言和解释型语言对比"><a href="#编译型语言和解释型语言对比" class="headerlink" title="编译型语言和解释型语言对比"></a>编译型语言和解释型语言对比</h4><ul><li><strong>速度</strong> —— 编译型语言比解释型语言执行速度快</li><li><strong>跨平台性</strong> —— 解释型语言比编译型语言跨平台性好</li></ul><h3 id="1-2-Python-的设计目标"><a href="#1-2-Python-的设计目标" class="headerlink" title="1.2 Python 的设计目标"></a>1.2 Python 的设计目标</h3><p>1999 年，吉多·范罗苏姆向 DARPA 提交了一条名为 “Computer Programming for Everybody” 的资金申请，并在后来说明了他对 Python 的目标：</p><ul><li>一门<strong>简单直观的语言</strong>并与主要竞争者一样强大</li><li><strong>开源</strong>，以便任何人都可以为它做贡献</li><li>代码<strong>像纯英语那样容易理解</strong></li><li>适用于<strong>短期</strong>开发的日常任务</li></ul><p>这些想法中的基本都已经成为现实，Python 已经成为一门流行的编程语言</p><h3 id="1-3-Python-的设计哲学"><a href="#1-3-Python-的设计哲学" class="headerlink" title="1.3 Python 的设计哲学"></a>1.3 Python 的设计哲学</h3><ol><li>优雅</li><li>明确</li><li>简单</li></ol><p>在 Python 解释器内运行 <code>import this</code> 可以获得完整的列表 </p><ul><li>Python 开发者的哲学是：<strong>用一种方法，最好是只有一种方法来做一件事</strong></li><li>如果面临多种选择，Python 开发者一般会拒绝花俏的语法，而选择<strong>明确没有或者很少有歧义的语法</strong></li></ul><blockquote><p>在 Python 社区，吉多被称为“仁慈的独裁者”</p></blockquote><h2 id="02-为什么选择-Python？"><a href="#02-为什么选择-Python？" class="headerlink" title="02. 为什么选择 Python？"></a>02. 为什么选择 Python？</h2><ul><li>代码量少</li><li>……</li></ul><blockquote><p>同一样问题，用不同的语言解决，代码量差距还是很多的，一般情况下 <code>Python</code> 是 <code>Java</code> 的 <strong>1&#x2F;5</strong>，所以说 <strong>人生苦短，我用 Python</strong></p></blockquote><h2 id="03-Python-特点"><a href="#03-Python-特点" class="headerlink" title="03. Python 特点"></a>03. Python 特点</h2><ul><li>Python 是<strong>完全面向对象的语言</strong><ul><li><strong>函数</strong>、<strong>模块</strong>、<strong>数字</strong>、<strong>字符串</strong>都是对象，<strong>在 Python 中一切皆对象</strong></li><li>完全支持继承、重载、多重继承</li><li>支持重载运算符，也支持泛型设计</li></ul></li><li>Python <strong>拥有一个强大的标准库</strong>，Python 语言的核心只包含 <strong>数字</strong>、<strong>字符串</strong>、<strong>列表</strong>、<strong>字典</strong>、<strong>文件</strong> 等常见类型和函数，而由 Python 标准库提供了 <strong>系统管理</strong>、<strong>网络通信</strong>、<strong>文本处理</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong>、<strong>XML 处理</strong> 等额外的功能</li><li>Python 社区提供了<strong>大量的第三方模块</strong>，使用方式与标准库类似。它们的功能覆盖 <strong>科学计算</strong>、<strong>人工智能</strong>、<strong>机器学习</strong>、<strong>Web 开发</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong> 多个领域</li></ul><h3 id="面向对象的思维方式"><a href="#面向对象的思维方式" class="headerlink" title="面向对象的思维方式"></a>面向对象的思维方式</h3><ul><li><strong>面向对象</strong> 是一种 <strong>思维方式</strong>，也是一门 <strong>程序设计技术</strong></li><li>要解决一个问题前，首先考虑 <strong>由谁</strong> 来做，怎么做事情是 <strong>谁</strong> 的职责，最后把事情做好就行！<ul><li><strong>对象</strong> 就是 <strong>谁</strong></li></ul></li><li>要解决复杂的问题，就可以找<strong>多个不同的对象</strong>，<strong>各司其职</strong>，共同实现，最终完成需求</li></ul><h2 id="04-Python-的优缺点"><a href="#04-Python-的优缺点" class="headerlink" title="04. Python 的优缺点"></a>04. Python 的优缺点</h2><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ul><li>简单、易学</li><li>免费、开源</li><li><strong>面向对象</strong></li><li>丰富的库</li><li>可扩展性<ul><li>如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 <code>C</code> 或 <code>C++</code> 编写，然后在 <code>Python</code> 程序中使用它们</li></ul></li><li>……</li></ul><h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><ul><li>运行速度</li><li>国内市场较小</li><li>中文资料匮乏</li></ul><h1 id="第一个-Python-程序"><a href="#第一个-Python-程序" class="headerlink" title="第一个 Python 程序"></a>第一个 Python 程序</h1><h2 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h2><ul><li>第一个 <code>HelloPython</code> 程序</li><li><code>Python 2.x</code> 与 <code>3​​.x</code> 版本简介</li><li>执行 <code>Python</code> 程序的三种方式<ul><li>解释器 —— <code>python</code> &#x2F; <code>python3</code></li><li>交互式 —— <code>ipython</code></li><li>集成开发环境 —— <code>PyCharm</code></li></ul></li></ul><h2 id="01-第一个-HelloPython-程序"><a href="#01-第一个-HelloPython-程序" class="headerlink" title="01. 第一个 HelloPython 程序"></a>01. 第一个 <code>HelloPython</code> 程序</h2><h3 id="1-1-Python-源程序的基本概念"><a href="#1-1-Python-源程序的基本概念" class="headerlink" title="1.1 Python 源程序的基本概念"></a>1.1 Python 源程序的基本概念</h3><ol><li>Python 源程序就是<strong>一个特殊格式的文本文件</strong>，可以<strong>使用任意文本编辑软件</strong>做 <code>Python</code> 的开发</li><li>Python 程序的 <strong>文件扩展名</strong> 通常都是 <code>.py</code></li></ol><h3 id="1-2-演练步骤"><a href="#1-2-演练步骤" class="headerlink" title="1.2 演练步骤"></a>1.2 演练步骤</h3><ul><li>在桌面下，新建 <code>认识Python</code> 目录</li><li>在 <code>认识Python</code> 目录下新建 <code>01-HelloPython.py</code> 文件</li><li>使用 <strong>gedit</strong> 编辑 <code>01-HelloPython.py</code> 并且输入以下内容：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在终端中输入以下命令执行 <code>01-HelloPython.py</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python 01-HelloPython.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>print</code> 是 <code>python</code> 中我们学习的第一个 <strong>函数</strong></p><p><code>print</code> 函数的作用，可以把 <strong>“”</strong> 内部的内容，输出到屏幕上</p></blockquote><h3 id="1-3-演练扩展-——-认识错误（BUG）"><a href="#1-3-演练扩展-——-认识错误（BUG）" class="headerlink" title="1.3 演练扩展 —— 认识错误（BUG）"></a>1.3 演练扩展 —— 认识错误（BUG）</h3><h4 id="关于错误"><a href="#关于错误" class="headerlink" title="关于错误"></a>关于错误</h4><ul><li>编写的程序<strong>不能正常执行</strong>，或者<strong>执行的结果不是我们期望的</strong></li><li>俗称 <code>BUG</code>，是程序员在开发时非常常见的，初学者常见错误的原因包括：<ol><li>手误</li><li>对已经学习过的知识理解还存在不足</li><li>对语言还有需要学习和提升的内容</li></ol></li><li>在学习语言时，不仅要<strong>学会语言的语法</strong>，而且还要<strong>学会如何认识错误和解决错误的方法</strong></li></ul><blockquote><p>每一个程序员都是在不断地修改错误中成长的</p></blockquote><h4 id="第一个演练中的常见错误"><a href="#第一个演练中的常见错误" class="headerlink" title="第一个演练中的常见错误"></a>第一个演练中的常见错误</h4><ul><li>1&gt; <strong>手误</strong>，例如使用 <code>pirnt(&quot;Hello world&quot;)</code></li></ul><pre class="line-numbers language-none"><code class="language-none">NameError: name &#39;pirnt&#39; is not defined名称错误：&#39;pirnt&#39; 名字没有定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>2&gt; 将多条 <code>print</code> 写在一行</li></ul><pre class="line-numbers language-none"><code class="language-none">SyntaxError: invalid syntax语法错误：语法无效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>每行代码负责完成一个动作</p></blockquote><ul><li>3&gt; 缩进错误</li></ul><pre class="line-numbers language-none"><code class="language-none">IndentationError: unexpected indent缩进错误：不期望出现的缩进<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>Python 是一个格式非常严格的程序设计语言</li><li>目前而言，大家记住每行代码前面都不要增加空格</li></ul></blockquote><ul><li>4&gt; <strong>python 2.x 默认不支持中文</strong></li></ul><p>目前市场上有两个 Python 的版本并存着，分别是 <code>Python 2.x</code> 和 <code>Python 3.x</code></p><ul><li><strong>Python 2.x 默认不支持中文</strong>，具体原因，等到介绍 <strong>字符编码</strong> 时给大家讲解</li><li>Python 2.x 的解释器名称是 <strong>python</strong></li><li>Python 3.x 的解释器名称是 <strong>python3</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">SyntaxError: Non-ASCII character &#39;\xe4&#39; in file 01-HelloPython.py on line 3, but no encoding declared; see http:&#x2F;&#x2F;python.org&#x2F;dev&#x2F;peps&#x2F;pep-0263&#x2F; for details语法错误： 在 01-HelloPython.py 中第 3 行出现了非 ASCII 字符 &#39;\xe4&#39;，但是没有声明文件编码请访问 http:&#x2F;&#x2F;python.org&#x2F;dev&#x2F;peps&#x2F;pep-0263&#x2F; 了解详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><code>ASCII</code> 字符只包含 <code>256</code> 个字符，不支持中文</li><li>有关字符编码的问题，后续会讲</li></ul></blockquote><h4 id="单词列表"><a href="#单词列表" class="headerlink" title="单词列表"></a>单词列表</h4><pre class="line-numbers language-none"><code class="language-none">* error 错误* name 名字* defined 已经定义* syntax 语法* invalid 无效* Indentation 索引* unexpected 意外的，不期望的* character 字符* line 行* encoding 编码* declared 声明* details 细节，详细信息* ASCII 一种字符编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="02-Python-2-x-与-3​​-x-版本简介"><a href="#02-Python-2-x-与-3​​-x-版本简介" class="headerlink" title="02. Python 2.x 与 3​​.x 版本简介"></a>02. <code>Python 2.x</code> 与 <code>3​​.x</code> 版本简介</h2><p>目前市场上有两个 Python 的版本并存着，分别是 <code>Python 2.x</code> 和 <code>Python 3.x</code></p><blockquote><p>新的 Python 程序建议使用 <code>Python 3.0</code> 版本的语法</p></blockquote><ul><li>Python 2.x 是 <strong>过去的版本</strong><ul><li>解释器名称是 <strong>python</strong></li></ul></li><li>Python 3.x 是 <strong>现在和未来 主流的版本</strong><ul><li>解释器名称是 <strong>python3</strong></li><li>相对于 <code>Python</code> 的早期版本，这是一个 <strong>较大的升级</strong></li><li>为了不带入过多的累赘，<code>Python 3.0</code> 在设计的时候 <strong>没有考虑向下兼容</strong><ul><li>许多早期 <code>Python</code> 版本设计的程序都无法在 <code>Python 3.0</code> 上正常执行</li></ul></li><li>Python 3.0 发布于 <strong>2008 年</strong></li><li>到目前为止，Python 3.0 的稳定版本已经有很多年了<ul><li>Python 3.3 发布于 2012</li><li>Python 3.4 发布于 2014</li><li>Python 3.5 发布于 2015</li><li>Python 3.6 发布于 2016</li></ul></li></ul></li><li>为了照顾现有的程序，官方提供了一个过渡版本 —— <strong>Python 2.6</strong><ul><li>基本使用了 <code>Python 2.x</code> 的语法和库</li><li>同时考虑了向 <code>Python 3.0</code> 的迁移，<strong>允许使用部分</strong> <code>Python 3.0</code> 的语法与函数</li><li>2010 年中推出的 <code>Python 2.7</code> 被确定为 <strong>最后一个Python 2.x 版本</strong></li></ul></li></ul><blockquote><p>提示：如果开发时，无法立即使用 Python 3.0（还有极少的第三方库不支持 3.0 的语法），建议</p><ul><li>先使用 <code>Python 3.0</code> 版本进行开发</li><li>然后使用 <code>Python 2.6</code>、<code>Python 2.7</code> 来执行，并且做一些兼容性的处理</li></ul></blockquote><h2 id="03-执行-Python-程序的三种方式"><a href="#03-执行-Python-程序的三种方式" class="headerlink" title="03. 执行 Python 程序的三种方式"></a>03. 执行 Python 程序的三种方式</h2><h3 id="3-1-解释器-python-x2F-python3"><a href="#3-1-解释器-python-x2F-python3" class="headerlink" title="3.1. 解释器 python &#x2F; python3"></a>3.1. 解释器 <code>python</code> &#x2F; <code>python3</code></h3><h4 id="Python-的解释器"><a href="#Python-的解释器" class="headerlink" title="Python 的解释器"></a>Python 的解释器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 2.x 解释器</span>$ python xxx.py<span class="token comment"># 使用 python 3.x 解释器</span>$ python3 xxx.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="其他解释器（知道）"><a href="#其他解释器（知道）" class="headerlink" title="其他解释器（知道）"></a>其他解释器（知道）</h5><p><strong>Python 的解释器</strong> 如今有多个语言的实现，包括：</p><ul><li><code>CPython</code> —— 官方版本的 C 语言实现</li><li><code>Jython</code> —— 可以运行在 Java 平台</li><li><code>IronPython</code> —— 可以运行在 .NET 和 Mono 平台</li><li><code>PyPy</code> —— Python 实现的，支持 JIT 即时编译</li></ul><h3 id="3-2-交互式运行-Python-程序"><a href="#3-2-交互式运行-Python-程序" class="headerlink" title="3.2. 交互式运行 Python 程序"></a>3.2. 交互式运行 Python 程序</h3><ul><li>直接在终端中运行解释器，而不输入要执行的文件名</li><li>在 Python 的 <code>Shell</code> 中直接输入 <strong>Python 的代码</strong>，会立即看到程序执行结果</li></ul><h4 id="1-交互式运行-Python-的优缺点"><a href="#1-交互式运行-Python-的优缺点" class="headerlink" title="1) 交互式运行 Python 的优缺点"></a>1) 交互式运行 Python 的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>适合于学习&#x2F;验证 Python 语法或者局部代码</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>代码不能保存</li><li>不适合运行太大的程序</li></ul><h4 id="2-退出-官方的解释器"><a href="#2-退出-官方的解释器" class="headerlink" title="2) 退出 官方的解释器"></a>2) 退出 官方的解释器</h4><h5 id="1-gt-直接输入-exit"><a href="#1-gt-直接输入-exit" class="headerlink" title="1&gt; 直接输入 exit()"></a>1&gt; 直接输入 <code>exit()</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-gt-使用热键退出"><a href="#2-gt-使用热键退出" class="headerlink" title="2&gt; 使用热键退出"></a>2&gt; 使用热键退出</h5><p>在 python 解释器中，按热键 <code>ctrl + d</code> 可以退出解释器</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319000129.jpg" alt="001_积跬步以至千里" loading="lazy"></p><h4 id="3-IPython"><a href="#3-IPython" class="headerlink" title="3) IPython"></a>3) IPython</h4><ul><li>IPython 中 的 “I” 代表 <strong>交互 interactive</strong></li></ul><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>IPython 是一个 python 的 <strong>交互式 shell</strong>，比默认的 <code>python shell</code> 好用得多<ul><li>支持自动补全</li><li>自动缩进</li><li>支持 <code>bash shell</code> 命令</li><li>内置了许多很有用的功能和函数</li></ul></li><li>IPython 是基于 BSD 开源的</li></ul><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><ul><li><p>Python 2.x 使用的解释器是 <strong>ipython</strong></p></li><li><p>Python 3.x 使用的解释器是 <strong>ipython3</strong></p></li><li><p>要退出解释器可以有以下两种方式：</p></li></ul><h5 id="1-gt-直接输入-exit-1"><a href="#1-gt-直接输入-exit-1" class="headerlink" title="1&gt; 直接输入 exit"></a>1&gt; 直接输入 <code>exit</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-gt-使用热键退出-1"><a href="#2-gt-使用热键退出-1" class="headerlink" title="2&gt; 使用热键退出"></a>2&gt; 使用热键退出</h5><p>在 IPython 解释器中，按热键 <code>ctrl + d</code>，<code>IPython</code> 会询问是否退出解释器</p><h4 id="IPython-的安装"><a href="#IPython-的安装" class="headerlink" title="IPython 的安装"></a>IPython 的安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ipython<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3-Python-的-IDE-——-PyCharm"><a href="#3-3-Python-的-IDE-——-PyCharm" class="headerlink" title="3.3. Python 的 IDE —— PyCharm"></a>3.3. Python 的 IDE —— <code>PyCharm</code></h2><h3 id="1）-集成开发环境（IDE）"><a href="#1）-集成开发环境（IDE）" class="headerlink" title="1） 集成开发环境（IDE）"></a>1） 集成开发环境（IDE）</h3><p>集成开发环境（<code>IDE</code>，Integrated Development Environment）—— <strong>集成了开发软件需要的所有工具</strong>，一般包括以下工具：</p><ul><li>图形用户界面</li><li>代码编辑器（支持 <strong>代码补全</strong>／<strong>自动缩进</strong>）</li><li>编译器／解释器</li><li>调试器（<strong>断点</strong>／<strong>单步执行</strong>）</li><li>……</li></ul><h3 id="2）PyCharm-介绍"><a href="#2）PyCharm-介绍" class="headerlink" title="2）PyCharm 介绍"></a>2）PyCharm 介绍</h3><ul><li><code>PyCharm</code> 是 Python 的一款非常优秀的集成开发环境</li><li><code>PyCharm</code> 除了具有一般 IDE 所必备功能外，还可以在 <code>Windows</code>、<code>Linux</code>、<code>macOS</code> 下使用</li><li><code>PyCharm</code> 适合开发大型项目<ul><li>一个项目通常会包含 <strong>很多源文件</strong></li><li>每个 <strong>源文件</strong> 的代码行数是有限的，通常在几百行之内</li><li>每个 <strong>源文件</strong> 各司其职，共同完成复杂的业务功能</li></ul></li></ul><h3 id="3）PyCharm-快速体验"><a href="#3）PyCharm-快速体验" class="headerlink" title="3）PyCharm 快速体验"></a>3）PyCharm 快速体验</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319000130.png" alt="001_PyCharm的界面结构" loading="lazy"></p><ul><li><strong>文件导航区域</strong> 能够 <strong>浏览</strong>／<strong>定位</strong>／<strong>打开</strong> 项目文件</li><li><strong>文件编辑区域</strong> 能够 <strong>编辑</strong> 当前打开的文件</li><li><strong>控制台区域</strong> 能够：<ul><li>输出程序执行内容</li><li>跟踪调试代码的执行</li></ul></li><li>右上角的 <strong>工具栏</strong> 能够 <strong>执行(SHIFT + F10)</strong> &#x2F; <strong>调试(SHIFT + F9)</strong> 代码</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319000131.png" alt="002_PyCharm运行工具栏" loading="lazy"></p><ul><li>通过控制台上方的**单步执行按钮(F8)**，可以单步执行代码</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220319000132.png" alt="003_PyCharm调试器" loading="lazy"></p><h1 id="PyCharm-的初始设置（知道）-1"><a href="#PyCharm-的初始设置（知道）-1" class="headerlink" title="PyCharm 的初始设置（知道）"></a>PyCharm 的初始设置（知道）</h1><h2 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h2><ul><li>恢复 PyCharm 的初始设置</li><li>第一次启动 PyCharm</li><li>新建一个 Python 项目</li><li>设置 PyCharm 的字体显示</li><li>PyCharm 的升级以及其他</li></ul><p>PyCharm 的官方网站地址是：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><h2 id="01-恢复-PyCharm-的初始设置-1"><a href="#01-恢复-PyCharm-的初始设置-1" class="headerlink" title="01. 恢复 PyCharm 的初始设置"></a>01. 恢复 PyCharm 的初始设置</h2><p><code>PyCharm</code> 的 <strong>配置信息</strong> 是保存在 <strong>用户家目录下</strong> 的 <code>.PyCharmxxxx.x</code> 目录下的，<code>xxxx.x</code> 表示当前使用的 <code>PyCharm</code> 的版本号</p><p>如果要恢复 <code>PyCharm</code> 的初始设置，可以按照以下步骤进行：</p><ul><li><ol><li>关闭正在运行的 <code>PyCharm</code></li></ol></li><li><ol start="2"><li>在终端中执行以下终端命令，删除 <code>PyCharm</code> 的配置信息目录：</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> -r ~/.PyCharm2016.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>重新启动 <code>PyCharm</code></li></ol></li></ul><h2 id="02-第一次启动-PyCharm-1"><a href="#02-第一次启动-PyCharm-1" class="headerlink" title="02. 第一次启动 PyCharm"></a>02. 第一次启动 PyCharm</h2><ol><li>导入配置信息</li><li>选择许可协议</li><li>配置初始界面</li></ol><h3 id="2-1-导入配置信息-1"><a href="#2-1-导入配置信息-1" class="headerlink" title="2.1 导入配置信息"></a>2.1 导入配置信息</h3><ul><li>在第一次启动 <code>PyCharm</code> 时，会首先提示用户是否导入 <strong>之前的配置信息</strong></li><li>如果是第一次使用，直接点击 <strong>OK</strong> 按钮</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235746.png" alt="001_PyCharm导入配置信息-w603" loading="lazy"></p><h3 id="2-2-选择许可协议-1"><a href="#2-2-选择许可协议-1" class="headerlink" title="2.2 选择许可协议"></a>2.2 选择许可协议</h3><ul><li>PyCharm 是一个付费软件，购买费用为 <strong>199$ &#x2F; 年</strong> 或者 <strong>19.90$ ／ 月</strong></li><li>不过 PyCharm 提供了对 <strong>学生和教师免费使用的版本</strong><ul><li>下载地址是：<a href="https://www.jetbrains.com/pycharm-edu/download/#section=linux">https://www.jetbrains.com/pycharm-edu/download/#section=linux</a></li></ul></li><li>商业版本会提示输入注册信息，或者选择免费评估</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235747.png" alt="002_激活许可证-w495" loading="lazy"></p><h3 id="2-3-PyCharm-的配置初始界面-1"><a href="#2-3-PyCharm-的配置初始界面-1" class="headerlink" title="2.3 PyCharm 的配置初始界面"></a>2.3 PyCharm 的配置初始界面</h3><ul><li>在初始配置界面，可以通过 <code>Editor colors and fonts</code> 选择 <strong>编辑器的配色方案</strong></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235748.png" alt="003_PyCharm初始配置界面-w491" loading="lazy"></p><h3 id="2-4-欢迎界面-1"><a href="#2-4-欢迎界面-1" class="headerlink" title="2.4 欢迎界面"></a>2.4 欢迎界面</h3><ul><li>所有基础配置工作结束之后，就可以看到 <code>PyCharm</code> 的 <strong>欢迎界面</strong>了，通过 <strong>欢迎界面</strong> 就可以开始开发 Python 项目了</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235749.png" alt="004_PyCharm欢迎页面-w664" loading="lazy"></p><h2 id="03-新建-x2F-打开一个-Python-项目-1"><a href="#03-新建-x2F-打开一个-Python-项目-1" class="headerlink" title="03. 新建&#x2F;打开一个 Python 项目"></a>03. 新建&#x2F;打开一个 Python 项目</h2><h3 id="3-1-项目简介-1"><a href="#3-1-项目简介-1" class="headerlink" title="3.1 项目简介"></a>3.1 项目简介</h3><ul><li>开发 <strong>项目</strong> 就是开发一个 <strong>专门解决一个复杂业务功能的软件</strong></li><li>通常每 <strong>一个项目</strong> 就具有一个 <strong>独立专属的目录</strong>，用于保存 <strong>所有和项目相关的文件</strong><ul><li>一个项目通常会包含 <strong>很多源文件</strong></li></ul></li></ul><h3 id="3-2-打开-Python-项目-1"><a href="#3-2-打开-Python-项目-1" class="headerlink" title="3.2 打开 Python 项目"></a>3.2 打开 Python 项目</h3><ul><li>直接点击 <strong>Open</strong> 按钮，然后浏览到之前保存 <strong>Python 文件的目录</strong>，既可以打开项目</li><li>打开之后，会在目录下新建一个 <code>.idea</code> 的目录，用于保存 <strong>项目相关的信息</strong>，例如：<strong>解释器版本</strong>、<strong>项目包含的文件</strong>等等</li><li>第一次打开项目，需要耐心等待 <code>PyCharm</code> 对项目<strong>进行初始设置</strong></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235750.png" alt="005_打开已有Python项目-w423" loading="lazy"></p><h4 id="设置项目使用的解释器版本-1"><a href="#设置项目使用的解释器版本-1" class="headerlink" title="设置项目使用的解释器版本"></a>设置项目使用的解释器版本</h4><ul><li>打开的目录如果不是由 <code>PyCharm</code> 建立的项目目录，<strong>有的时候</strong> 使用的解释器版本是 <code>Python 2.x</code> 的，需要<strong>单独设置解释器的版本</strong></li><li>通过 <strong>File</strong> &#x2F; <strong>Settings…</strong> 可以打开设置窗口，如下图所示：</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235751.png" alt="006_选择项目的解释器版本-w975" loading="lazy"></p><h3 id="3-3-新建项目-1"><a href="#3-3-新建项目-1" class="headerlink" title="3.3 新建项目"></a>3.3 新建项目</h3><h4 id="1-命名规则-1"><a href="#1-命名规则-1" class="headerlink" title="1) 命名规则"></a>1) 命名规则</h4><ul><li><p>以后 <strong>项目名</strong> 前面都以 <strong>数字编号</strong>，<strong>随着知识点递增，编号递增</strong></p><ul><li>例如：<strong>01_Python 基础</strong>、<strong>02_分支</strong>、<strong>03_循环</strong>…</li></ul></li><li><p>每个项目下的 <strong>文件名</strong> 都以 <code>hm_xx_知识点</code> 方式来命名</p><ul><li>其中 <strong>xx</strong> 是演练文件的序号</li></ul></li><li><p>注意</p><ul><li><ol><li>命名文件名时建议只使用 <strong>小写字母</strong>、<strong>数字</strong> 和 <strong>下划线</strong></li></ol></li><li><ol start="2"><li><strong>文件名不能以数字开始</strong></li></ol></li></ul></li><li><p>通过 <strong>欢迎界面</strong> 或者菜单 <strong>File</strong> &#x2F; <strong>New Project</strong> 可以新建项目</p></li></ul><h4 id="2-演练步骤-1"><a href="#2-演练步骤-1" class="headerlink" title="2) 演练步骤"></a>2) 演练步骤</h4><ul><li>新建 <code>01_Python基础</code> 项目，使用 <strong>Python 3.x 解释器</strong></li><li>在项目下新建 <code>hm_01_hello.py</code> Python 文件</li><li>编写 <code>print(&quot;Hello Python&quot;)</code> 代码</li></ul><h2 id="04-设置-PyCharm-的字体显示-1"><a href="#04-设置-PyCharm-的字体显示-1" class="headerlink" title="04. 设置 PyCharm 的字体显示"></a>04. 设置 PyCharm 的字体显示</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235752.png" alt="007_PyCharm设置编辑器字体-w500" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235753.png" alt="008_PyCharm设置控制台字体-w500" loading="lazy"></p><h2 id="05-PyCharm-的升级以及其他-1"><a href="#05-PyCharm-的升级以及其他-1" class="headerlink" title="05. PyCharm 的升级以及其他"></a>05. PyCharm 的升级以及其他</h2><blockquote><p>PyCharm 提供了对 <strong>学生和教师免费使用的版本</strong></p></blockquote><ul><li>教育版下载地址：<a href="https://www.jetbrains.com/pycharm-edu/download/#section=linux">https://www.jetbrains.com/pycharm-edu/download/#section=linux</a></li><li>专业版下载地址：<a href="https://www.jetbrains.com/pycharm/download/#section=linux">https://www.jetbrains.com/pycharm/download/#section=linux</a></li></ul><h3 id="5-1-安装和启动步骤-1"><a href="#5-1-安装和启动步骤-1" class="headerlink" title="5.1 安装和启动步骤"></a>5.1 安装和启动步骤</h3><ul><li><ol><li>执行以下终端命令，解压缩下载后的安装包</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -zxvf pycharm-professional-2017.1.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>将解压缩后的目录移动到 <code>/opt</code> 目录下，可以方便其他用户使用</li></ol></li></ul><blockquote><p><code>/opt</code> 目录用户存放给主机额外安装的软件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mv</span> pycharm-2017.1.3/ /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>切换工作目录</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /opt/pycharm-2017.1.3/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="4"><li>启动 <code>PyCharm</code></li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./pycharm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-设置专业版启动图标-1"><a href="#5-2-设置专业版启动图标-1" class="headerlink" title="5.2 设置专业版启动图标"></a>5.2 设置专业版启动图标</h3><ul><li>在<strong>专业版</strong>中，选择菜单 <strong>Tools</strong> &#x2F; <strong>Create Desktop Entry…</strong> 可以设置任务栏启动图标<ul><li>注意：设置图标时，需要勾选 <code>Create the entry for all users</code></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220318235754.png" alt="009_创建桌面图标-w657" loading="lazy"></p><h3 id="5-3-卸载之前版本的-PyCharm-1"><a href="#5-3-卸载之前版本的-PyCharm-1" class="headerlink" title="5.3 卸载之前版本的 PyCharm"></a>5.3 卸载之前版本的 PyCharm</h3><h4 id="1-程序安装-1"><a href="#1-程序安装-1" class="headerlink" title="1) 程序安装"></a>1) 程序安装</h4><ul><li><ol><li><p><strong>程序文件目录</strong> </p><ul><li>将安装包解压缩，并且移动到 <code>/opt</code> 目录下</li><li><strong>所有的相关文件都保存在解压缩的目录中</strong></li></ul></li></ol></li><li><ol start="2"><li><p><strong>配置文件目录</strong></p><ul><li>启动 <code>PyCharm</code> 后，会在用户家目录下建立一个 <code>.PyCharmxxx</code> 的隐藏目录</li><li><strong>保存 <code>PyCharm</code> 相关的配置信息</strong></li></ul></li></ol></li><li><ol start="3"><li><p><strong>快捷方式文件</strong></p><ul><li><code>/usr/share/applications/jetbrains-pycharm.desktop</code></li></ul></li></ol></li></ul><blockquote><p>在 <code>ubuntu</code> 中，应用程序启动的快捷方式通常都保存在 <code>/usr/share/applications</code> 目录下</p></blockquote><h4 id="2-程序卸载-1"><a href="#2-程序卸载-1" class="headerlink" title="2) 程序卸载"></a>2) 程序卸载</h4><ul><li><p>要卸载 <code>PyCharm</code> 只需要做以下两步工作：</p></li><li><ol><li>删除解压缩目录</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">rm</span> -r /opt/pycharm-2016.3.1/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>删除家目录下用于保存配置信息的隐藏目录</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> -r ~/.PyCharm2016.3/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果不再使用 PyCharm 还需要将 <code>/usr/share/applications/</code> 下的 <code>jetbrains-pycharm.desktop</code> 删掉</p></blockquote><h3 id="5-4-教育版安装演练-1"><a href="#5-4-教育版安装演练-1" class="headerlink" title="5.4 教育版安装演练"></a>5.4 教育版安装演练</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 解压缩下载后的安装包</span>$ <span class="token function">tar</span> -zxvf pycharm-edu-3.5.1.tar.gz<span class="token comment"># 2. 将解压缩后的目录移动到 `/opt` 目录下，可以方便其他用户使用</span>$ <span class="token function">sudo</span> <span class="token function">mv</span> pycharm-edu-3.5.1/ /opt/<span class="token comment"># 3. 启动 `PyCharm`</span>/opt/pycharm-edu-3.5.1/bin/pycharm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>后续课程<strong>都使用专业版本演练</strong></p></blockquote><h4 id="设置启动图标-1"><a href="#设置启动图标-1" class="headerlink" title="设置启动图标"></a>设置启动图标</h4><ul><li><ol><li>编辑快捷方式文件</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> gedit /usr/share/applications/jetbrains-pycharm.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>按照以下内容修改文件内容，需要注意<strong>指定正确的 <code>pycharm</code> 目录</strong></li></ol></li></ul><pre class="line-numbers language-none"><code class="language-none">[Desktop Entry]Version&#x3D;1.0Type&#x3D;ApplicationName&#x3D;PyCharmIcon&#x3D;&#x2F;opt&#x2F;pycharm-edu-3.5.1&#x2F;bin&#x2F;pycharm.pngExec&#x3D;&quot;&#x2F;opt&#x2F;pycharm-edu-3.5.1&#x2F;bin&#x2F;pycharm.sh&quot; %fComment&#x3D;The Drive to DevelopCategories&#x3D;Development;IDE;Terminal&#x3D;falseStartupWMClass&#x3D;jetbrains-pycharm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="多文件项目的演练"><a href="#多文件项目的演练" class="headerlink" title="多文件项目的演练"></a>多文件项目的演练</h1><ul><li>开发 <strong>项目</strong> 就是开发一个 <strong>专门解决一个复杂业务功能的软件</strong></li><li>通常每 <strong>一个项目</strong> 就具有一个 <strong>独立专属的目录</strong>，用于保存 <strong>所有和项目相关的文件</strong><ul><li>一个项目通常会包含 <strong>很多源文件</strong></li></ul></li></ul><h2 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h2><ul><li>在项目中添加多个文件，并且设置文件的执行</li></ul><h2 id="多文件项目演练"><a href="#多文件项目演练" class="headerlink" title="多文件项目演练"></a>多文件项目演练</h2><ol><li>在 <code>01_Python基础</code> 项目中新建一个 <code>hm_02_第2个Python程序.py</code> </li><li>在 <code>hm_02_第2个Python程序.py</code> 文件中添加一句 <code>print(&quot;hello&quot;)</code></li><li><strong>点击右键执行</strong> <code>hm_02_第2个Python程序.py</code></li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025811.png" alt="001_让选中的程序可以执行-w662" loading="lazy"></p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li>在 <code>PyCharm</code> 中，要想让哪一个 <code>Python</code> 程序能够执行，必须首先通过 <strong>鼠标右键的方式执行</strong> 一下</li><li>对于初学者而言，在一个项目中设置多个程序可以执行，是非常方便的，可以方便对不同知识点的练习和测试</li><li>对于商业项目而言，通常在一个项目中，只有一个 <strong>可以直接执行的 Python 源程序</strong></li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h2><ul><li>注释的作用</li><li>单行注释（行注释）</li><li>多行注释（块注释）</li></ul><h2 id="01-注释的作用"><a href="#01-注释的作用" class="headerlink" title="01. 注释的作用"></a>01. 注释的作用</h2><blockquote><p>使用用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025819.gif" alt="001_未使用注释的python程序" loading="lazy"></p><h2 id="02-单行注释-行注释"><a href="#02-单行注释-行注释" class="headerlink" title="02. 单行注释(行注释)"></a>02. 单行注释(行注释)</h2><ul><li><p>以 <code>#</code> 开头，<code>#</code> 右边的所有东西都被当做说明文字，而不是真正要执行的程序，只起到辅助说明作用</p></li><li><p>示例代码如下：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这是第一个单行注释</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello python"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>为了保证代码的可读性，<code>#</code> 后面建议先添加一个空格，然后再编写相应的说明文字</p></blockquote><h3 id="在代码后面增加的单行注释"><a href="#在代码后面增加的单行注释" class="headerlink" title="在代码后面增加的单行注释"></a>在代码后面增加的单行注释</h3><ul><li><p>在程序开发时，同样可以使用 <code>#</code> 在代码的后面（旁边）增加说明性的文字</p></li><li><p>但是，需要注意的是，<strong>为了保证代码的可读性</strong>，<strong>注释和代码之间</strong> 至少要有 <strong>两个空格</strong></p></li><li><p>示例代码如下：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello python"</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 `hello python`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="03-多行注释（块注释）"><a href="#03-多行注释（块注释）" class="headerlink" title="03. 多行注释（块注释）"></a>03. 多行注释（块注释）</h2><ul><li><p>如果希望编写的 <strong>注释信息很多，一行无法显示</strong>，就可以使用多行注释</p></li><li><p>要在 Python 程序中使用多行注释，可以用 <strong>一对 连续的 三个 引号</strong>(单引号和双引号都可以)</p></li><li><p>示例代码如下：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""这是一个多行注释在多行注释之间，可以写很多很多的内容……"""</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello python"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么时候需要使用注释？"><a href="#什么时候需要使用注释？" class="headerlink" title="什么时候需要使用注释？"></a>什么时候需要使用注释？</h3><ol><li><strong>注释不是越多越好</strong>，对于一目了然的代码，不需要添加注释</li><li>对于 <strong>复杂的操作</strong>，应该在操作开始前写上若干行注释</li><li>对于 <strong>不是一目了然的代码</strong>，应在其行尾添加注释（为了提高可读性，注释应该至少离开代码 2 个空格）</li><li>绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么</li></ol><blockquote><p>在一些正规的开发团队，通常会有 <strong>代码审核</strong> 的惯例，就是一个团队中彼此阅读对方的代码</p></blockquote><h3 id="关于代码规范"><a href="#关于代码规范" class="headerlink" title="关于代码规范"></a>关于代码规范</h3><ul><li><code>Python</code> 官方提供有一系列 PEP（Python Enhancement Proposals） 文档</li><li>其中第 8 篇文档专门针对 <strong>Python 的代码格式</strong> 给出了建议，也就是俗称的 <strong>PEP 8</strong></li><li>文档地址：<a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></li><li>谷歌有对应的中文文档：<a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></li></ul><blockquote><p>任何语言的程序员，编写出符合规范的代码，是开始程序生涯的第一步</p></blockquote><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><p><strong>计算机</strong>，顾名思义就是负责进行 <strong>数学计算</strong> 并且 <strong>存储计算结果</strong> 的电子设备</p><h2 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h2><ul><li>算术运算符的基本使用</li></ul><h2 id="01-算数运算符"><a href="#01-算数运算符" class="headerlink" title="01. 算数运算符"></a>01. 算数运算符</h2><ul><li>算数运算符是 <strong>运算符的一种</strong></li><li>是完成基本的算术运算使用的符号，用来处理四则运算</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>10 + 20 &#x3D; 30</td></tr><tr><td align="center">-</td><td align="center">减</td><td>10 - 20 &#x3D; -10</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>10 * 20 &#x3D; 200</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td><td>10 &#x2F; 20 &#x3D; 0.5</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">取整除</td><td>返回除法的整数部分（商） 9 &#x2F;&#x2F; 2 输出结果 4</td></tr><tr><td align="center">%</td><td align="center">取余数</td><td>返回除法的余数 9 % 2 &#x3D; 1</td></tr><tr><td align="center">**</td><td align="center">幂</td><td>又称次方、乘方，2 ** 3 &#x3D; 8</td></tr></tbody></table><ul><li>在 Python 中 <code>*</code> 运算符还可以用于字符串，计算结果就是字符串重复指定次数的结果</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span>Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'----------------------------------------'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="02-算数运算符的优先级"><a href="#02-算数运算符的优先级" class="headerlink" title="02. 算数运算符的优先级"></a>02. 算数运算符的优先级</h2><ul><li><p>和数学中的运算符的优先级一致，在 Python 中进行数学计算时，同样也是：</p><ul><li><strong>先乘除后加减</strong></li><li>同级运算符是 <strong>从左至右</strong> 计算</li><li>可以使用 <code>()</code> 调整计算的优先级</li></ul></li><li><p>以下表格的算数优先级由高到最低顺序排列</p></li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂 (最高优先级)</td></tr><tr><td>* &#x2F; % &#x2F;&#x2F;</td><td>乘、除、取余数、取整除</td></tr><tr><td>+ -</td><td>加法、减法</td></tr></tbody></table><ul><li>例如：<ul><li><code>2 + 3 * 5 = 17</code></li><li><code>(2 + 3) * 5 = 25</code></li><li><code>2 * 3 + 5 = 11</code></li><li><code>2 * (3 + 5) = 16</code></li></ul></li></ul><h1 id="程序执行原理（科普）"><a href="#程序执行原理（科普）" class="headerlink" title="程序执行原理（科普）"></a>程序执行原理（科普）</h1><h2 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h2><ul><li>计算机中的 <strong>三大件</strong></li><li>程序执行的原理</li><li>程序的作用</li></ul><h2 id="01-计算机中的三大件"><a href="#01-计算机中的三大件" class="headerlink" title="01. 计算机中的三大件"></a>01. 计算机中的三大件</h2><p>计算机中包含有较多的硬件，但是一个程序要运行，有 <strong>三个</strong> 核心的硬件，分别是：</p><ol><li><strong>CPU</strong> <ul><li>中央处理器，是一块超大规模的集成电路</li><li>负责 <strong>处理数据</strong>／<strong>计算</strong></li></ul></li><li><strong>内存</strong><ul><li><strong>临时</strong> 存储数据（断电之后，数据会消失）</li><li>速度快</li><li>空间小（单位价格高）</li></ul></li><li><strong>硬盘</strong> <ul><li><strong>永久</strong> 存储数据</li><li>速度慢</li><li>空间大（单位价格低）</li></ul></li></ol><table><thead><tr><th align="center">CPU</th><th align="center">内存</th><th align="center">硬盘</th></tr></thead><tbody><tr><td align="center"><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025841.jpg" alt="CPU-w200" loading="lazy"></td><td align="center"><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025842.png" alt="内存条-w200" loading="lazy"></td><td align="center"><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025843.jpg" alt="硬盘-w200" loading="lazy"></td></tr></tbody></table><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><ol><li>计算机中哪一个硬件设备负责执行程序？<ul><li><strong>CPU</strong></li></ul></li><li><strong>内存</strong> 的速度快还是 <strong>硬盘</strong> 的速度快？<ul><li><strong>内存</strong></li></ul></li><li>我们的程序是安装在内存中的，还是安装在硬盘中的？<ul><li>硬盘</li></ul></li><li><strong>我买了一个内存条，有 500G 的空间！！！</strong>，这句话对吗？<ul><li>不对，内存条通常只有 <code>4G</code> &#x2F; <code>8G</code> &#x2F; <code>16G</code> &#x2F; <code>32G</code></li></ul></li><li><strong>计算机关机之后，内存中的数据都会消失</strong>，这句话对吗？<ul><li>正确</li></ul></li></ol><h2 id="02-程序执行的原理"><a href="#02-程序执行的原理" class="headerlink" title="02. 程序执行的原理"></a>02. 程序执行的原理</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025844.png" alt="001_程序执行示意图-w" loading="lazy"></p><ol><li>程序 <strong>运行之前</strong>，程序是 <strong>保存在硬盘</strong> 中的</li><li>当要运行一个程序时<ul><li>操作系统会首先让 <strong>CPU</strong> 把程序复制到 <strong>内存</strong> 中</li><li><strong>CPU</strong> 执行 <strong>内存</strong> 中的 <strong>程序代码</strong></li></ul></li></ol><blockquote><p><strong>程序要执行，首先要被加载到内存</strong></p></blockquote><h3 id="2-1-Python-程序执行原理"><a href="#2-1-Python-程序执行原理" class="headerlink" title="2.1 Python 程序执行原理"></a>2.1 Python 程序执行原理</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025845.png" alt="003_Python程序执行示意图" loading="lazy"></p><ol><li>操作系统会首先让 <strong>CPU</strong> 把 <strong>Python 解释器</strong> 的程序复制到 <strong>内存</strong> 中</li><li><strong>Python 解释器</strong> 根据语法规则，<strong>从上向下</strong> 让 <strong>CPU</strong> 翻译 <strong>Python 程序中的代码</strong></li><li><strong>CPU</strong> 负责执行翻译完成的代码</li></ol><h4 id="Python-的解释器有多大？"><a href="#Python-的解释器有多大？" class="headerlink" title="Python 的解释器有多大？"></a>Python 的解释器有多大？</h4><ul><li>执行以下终端命令可以查看 Python 解释器的大小</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 确认解释器所在位置</span>$ <span class="token function">which</span> python<span class="token comment"># 2. 查看 python 文件大小(只是一个软链接)</span>$ <span class="token function">ls</span> -lh /usr/bin/python<span class="token comment"># 3. 查看具体文件大小</span>$ <span class="token function">ls</span> -lh /usr/bin/python2.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：建立 <strong>软链接</strong> 的目的，是为了方便使用者不用记住使用的解释器是 <strong>哪一个具体版本</strong></p></blockquote><h2 id="03-程序的作用"><a href="#03-程序的作用" class="headerlink" title="03. 程序的作用"></a>03. 程序的作用</h2><blockquote><p>程序就是 <strong>用来处理数据</strong> 的！</p></blockquote><ul><li><strong>新闻软件</strong> 提供的 <strong>新闻内容、评论……</strong> 是数据</li><li><strong>电商软件</strong> 提供的 <strong>商品信息、配送信息……</strong> 是数据</li><li><strong>运动类软件</strong> 提供的 <strong>运动数据……</strong> 是数据</li><li><strong>地图类软件</strong> 提供的 <strong>地图信息、定位信息、车辆信息……</strong> 是数据</li><li><strong>即时通讯软件</strong> 提供的 <strong>聊天信息、好友信息……</strong> 是数据</li><li>……</li></ul><h3 id="3-1-思考-QQ-程序的启动过程"><a href="#3-1-思考-QQ-程序的启动过程" class="headerlink" title="3.1 思考 QQ 程序的启动过程"></a>3.1 思考 QQ 程序的启动过程</h3><ol><li>QQ 在<strong>运行之前</strong>，是保存在 <strong>硬盘</strong> 中的</li><li><strong>运行之后</strong>，QQ 程序就会被加载到 <strong>内存</strong> 中了</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025846.png" alt="003_QQ登陆界面-w248" loading="lazy"></p><h3 id="3-2-思考-QQ-程序的-登录-过程"><a href="#3-2-思考-QQ-程序的-登录-过程" class="headerlink" title="3.2 思考 QQ 程序的 登录 过程"></a>3.2 思考 QQ 程序的 <strong>登录</strong> 过程</h3><ol><li>读取用户输入的 <strong>QQ 号码</strong></li><li>读取用户输入的 <strong>QQ 密码</strong></li><li>将 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 发送给腾讯的服务器，等待服务器确认用户信息</li></ol><h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考 1"></a>思考 1</h4><blockquote><p>在 QQ 这个程序将 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 发送给服务器之前，<strong>是否需要先存储一下 QQ 号码 和 密码?</strong></p></blockquote><p><strong>答案</strong></p><p>肯定需要！—— 否则 QQ 这个程序就不知道把什么内容发送给服务器了！</p><h4 id="思考-2"><a href="#思考-2" class="headerlink" title="思考 2"></a>思考 2</h4><blockquote><p>QQ 这个程序把 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 保存在哪里？</p></blockquote><p><strong>答案</strong></p><p>保存在 <strong>内存</strong> 中，因为 QQ 程序自己就在内存中</p><h4 id="思考-3"><a href="#思考-3" class="headerlink" title="思考 3"></a>思考 3</h4><blockquote><p>QQ 这个程序是怎么保存用户的 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 的？</p></blockquote><p><strong>答案</strong></p><ol><li>在内存中为 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 各自分配一块空间<ul><li>在 QQ 程序结束之前，这两块空间是由 QQ 程序负责管理的，其他任何程序都不允许使用</li><li>在 QQ 自己使用完成之前，这两块空间始终都只负责保存 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong></li></ul></li><li>使用一个 <strong>别名</strong> 标记 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 在内存中的位置</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127025847.png" alt="004_QQ号码和密码内存示意图" loading="lazy"></p><blockquote><ul><li>在程序内部，为 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 在内存中分配的空间就叫做 <strong>变量</strong></li><li><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></li></ul></blockquote><h1 id="变量的基本使用"><a href="#变量的基本使用" class="headerlink" title="变量的基本使用"></a>变量的基本使用</h1><blockquote><p><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></p></blockquote><h2 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h2><ul><li>变量定义</li><li>变量的类型</li><li>变量的命名</li></ul><h2 id="01-变量定义"><a href="#01-变量定义" class="headerlink" title="01. 变量定义"></a>01. 变量定义</h2><ul><li>在 Python 中，每个变量 <strong>在使用前都必须赋值</strong>，变量 <strong>赋值以后</strong> 该变量 <strong>才会被创建</strong></li><li>等号（&#x3D;）用来给变量赋值<ul><li><code>=</code> 左边是一个变量名</li><li><code>=</code> 右边是存储在变量中的值</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">变量名 <span class="token operator">=</span> 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>变量定义之后，后续就可以直接使用了</p></blockquote><h3 id="1-变量演练1-——-iPython"><a href="#1-变量演练1-——-iPython" class="headerlink" title="1) 变量演练1 —— iPython"></a>1) 变量演练1 —— iPython</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义 qq_number 的变量用来保存 qq 号码</span>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> qq_number <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token comment"># 输出 qq_number 中保存的内容</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> qq_numberOut<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'1234567'</span><span class="token comment"># 定义 qq_password 的变量用来保存 qq 密码</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> qq_password <span class="token operator">=</span> <span class="token string">"123"</span><span class="token comment"># 输出 qq_password 中保存的内容</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> qq_passwordOut<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'123'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用交互式方式，如果要查看变量内容，直接输入变量名即可，不需要使用 <code>print</code> 函数</p></blockquote><h3 id="2-变量演练-2-——-PyCharm"><a href="#2-变量演练-2-——-PyCharm" class="headerlink" title="2) 变量演练 2 —— PyCharm"></a>2) 变量演练 2 —— PyCharm</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义 qq 号码变量</span>qq_number <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token comment"># 定义 qq 密码变量</span>qq_password <span class="token operator">=</span> <span class="token string">"123"</span><span class="token comment"># 在程序中，如果要输出变量的内容，需要使用 print 函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>qq_number<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>qq_password<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用解释器执行，如果要输出变量的内容，必须要要使用 <code>print</code> 函数</p></blockquote><h3 id="3-变量演练-3-——-超市买苹果"><a href="#3-变量演练-3-——-超市买苹果" class="headerlink" title="3) 变量演练 3 —— 超市买苹果"></a>3) 变量演练 3 —— 超市买苹果</h3><blockquote><ul><li>可以用 <strong>其他变量的计算结果</strong> 来定义变量</li><li>变量定义之后，后续就可以直接使用了</li></ul></blockquote><p><strong>需求</strong></p><ul><li>苹果的价格是 <strong>8.5 元&#x2F;斤</strong></li><li>买了 <strong>7.5 斤</strong> 苹果</li><li>计算付款金额</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义苹果价格变量</span>price <span class="token operator">=</span> <span class="token number">8.5</span><span class="token comment"># 定义购买重量</span>weight <span class="token operator">=</span> <span class="token number">7.5</span><span class="token comment"># 计算金额</span>money <span class="token operator">=</span> price <span class="token operator">*</span> weight<span class="token keyword">print</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h4><ul><li>如果 <strong>只要买苹果，就返 5 块钱</strong></li><li>请重新计算购买金额</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义苹果价格变量</span>price <span class="token operator">=</span> <span class="token number">8.5</span><span class="token comment"># 定义购买重量</span>weight <span class="token operator">=</span> <span class="token number">7.5</span><span class="token comment"># 计算金额</span>money <span class="token operator">=</span> price <span class="token operator">*</span> weight<span class="token comment"># 只要买苹果就返 5 元</span>money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提问</strong></p><ul><li>上述代码中，一共定义有几个变量？<ul><li>三个：<code>price</code>／<code>weight</code>／<code>money</code></li></ul></li><li><code>money = money - 5</code> 是在定义新的变量还是在使用变量？<ul><li>直接使用之前已经定义的变量</li><li>变量名 只有在 <strong>第一次出现</strong> 才是 <strong>定义变量</strong></li><li>变量名 再次出现，不是定义变量，而是直接使用之前定义过的变量</li></ul></li><li>在程序开发中，可以修改之前定义变量中保存的值吗？<ul><li>可以</li><li>变量中存储的值，就是可以 <strong>变</strong> 的</li></ul></li></ul><h2 id="02-变量的类型"><a href="#02-变量的类型" class="headerlink" title="02. 变量的类型"></a>02. 变量的类型</h2><ul><li>在内存中创建一个变量，会包括：<ol><li>变量的名称</li><li>变量保存的数据</li><li>变量存储数据的类型</li><li>变量的地址（标示）</li></ol></li></ul><h3 id="2-1-变量类型的演练-——-个人信息"><a href="#2-1-变量类型的演练-——-个人信息" class="headerlink" title="2.1 变量类型的演练 —— 个人信息"></a>2.1 变量类型的演练 —— 个人信息</h3><p><strong>需求</strong></p><ul><li>定义变量保存小明的个人信息</li><li>姓名：<strong>小明</strong></li><li>年龄：<strong>18</strong> 岁</li><li>性别：<strong>是</strong>男生</li><li>身高：<strong>1.75</strong> 米</li><li>体重：<strong>75.0</strong> 公斤</li></ul><blockquote><p>利用 <strong>单步调试</strong> 确认变量中保存数据的类型</p></blockquote><p><strong>提问</strong></p><ol><li>在演练中，一共有几种数据类型？<ul><li>4 种</li><li><code>str</code> —— 字符串</li><li><code>bool</code> —— 布尔（真假）</li><li><code>int</code> —— 整数</li><li><code>float</code> —— 浮点数（小数）</li></ul></li><li>在 <code>Python</code> 中定义变量时需要指定类型吗？<ul><li>不需要</li><li><code>Python</code> 可以根据 <code>=</code> 等号右侧的值，自动推导出变量中存储数据的类型</li></ul></li></ol><h3 id="2-2-变量的类型"><a href="#2-2-变量的类型" class="headerlink" title="2.2 变量的类型"></a>2.2 变量的类型</h3><ul><li>在 <code>Python</code> 中定义变量是 <strong>不需要指定类型</strong>（在其他很多高级语言中都需要）</li><li>数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li><li>数字型<ul><li>整型 (<code>int</code>)</li><li>浮点型（<code>float</code>）</li><li>布尔型（<code>bool</code>） <ul><li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li><li>假 <code>False</code> <code>0</code></li></ul></li><li>复数型 (<code>complex</code>)<ul><li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li></ul></li></ul></li><li>非数字型<ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ul></li></ul><blockquote><p>提示：在 Python 2.x 中，<strong>整数</strong> 根据保存数值的长度还分为：</p><ul><li><code>int</code>（整数）</li><li><code>long</code>（长整数）</li></ul></blockquote><ul><li>使用 <code>type</code> 函数可以查看一个变量的类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-不同类型变量之间的计算"><a href="#2-3-不同类型变量之间的计算" class="headerlink" title="2.3 不同类型变量之间的计算"></a>2.3 不同类型变量之间的计算</h3><h4 id="1-数字型变量-之间可以直接计算"><a href="#1-数字型变量-之间可以直接计算" class="headerlink" title="1) 数字型变量 之间可以直接计算"></a>1) <strong>数字型变量</strong> 之间可以直接计算</h4><ul><li>在 Python 中，两个数字型变量是可以直接进行 算数运算的</li><li>如果变量是 <code>bool</code> 型，在计算时<ul><li><code>True</code> 对应的数字是 <code>1</code></li><li><code>False</code> 对应的数字是 <code>0</code></li></ul></li></ul><p><strong>演练步骤</strong></p><ol><li>定义整数 <code>i = 10</code></li><li>定义浮点数 <code>f = 10.5</code></li><li>定义布尔型 <code>b = True</code></li></ol><ul><li>在 iPython 中，使用上述三个变量相互进行算术运算</li></ul><h4 id="2-字符串变量-之间使用-拼接字符串"><a href="#2-字符串变量-之间使用-拼接字符串" class="headerlink" title="2) 字符串变量 之间使用 + 拼接字符串"></a>2) <strong>字符串变量</strong> 之间使用 <code>+</code> 拼接字符串</h4><ul><li>在 Python 中，字符串之间可以使用 <code>+</code> 拼接生成新的字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> first_name <span class="token operator">=</span> <span class="token string">"三"</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> last_name <span class="token operator">=</span> <span class="token string">"张"</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> first_name <span class="token operator">+</span> last_nameOut<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'三张'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-字符串变量-可以和-整数-使用-重复拼接相同的字符串"><a href="#3-字符串变量-可以和-整数-使用-重复拼接相同的字符串" class="headerlink" title="3) 字符串变量 可以和 整数 使用 * 重复拼接相同的字符串"></a>3) <strong>字符串变量</strong> 可以和 <strong>整数</strong> 使用 <code>*</code> 重复拼接相同的字符串</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span>Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'--------------------------------------------------'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-数字型变量-和-字符串-之间-不能进行其他计算"><a href="#4-数字型变量-和-字符串-之间-不能进行其他计算" class="headerlink" title="4) 数字型变量 和 字符串 之间 不能进行其他计算"></a>4) <strong>数字型变量</strong> 和 <strong>字符串</strong> 之间 <strong>不能进行其他计算</strong></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> first_name <span class="token operator">=</span> <span class="token string">"zhang"</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> <span class="token number">10</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">+</span> first_name<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError<span class="token punctuation">:</span> unsupported operand <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token operator">+</span><span class="token punctuation">:</span> <span class="token string">'int'</span> <span class="token keyword">and</span> <span class="token string">'str'</span>类型错误：`<span class="token operator">+</span>` 不支持的操作类型：`<span class="token builtin">int</span>` 和 `<span class="token builtin">str</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-变量的输入"><a href="#2-4-变量的输入" class="headerlink" title="2.4 变量的输入"></a>2.4 变量的输入</h3><ul><li>所谓 <strong>输入</strong>，就是 <strong>用代码</strong> <strong>获取</strong> 用户通过 <strong>键盘</strong> 输入的信息</li><li>例如：去银行取钱，在 ATM 上输入密码</li><li>在 Python 中，如果要获取用户在 <strong>键盘</strong> 上的输入信息，需要使用到 <code>input</code> 函数</li></ul><h4 id="1-关于函数"><a href="#1-关于函数" class="headerlink" title="1) 关于函数"></a>1) 关于函数</h4><ul><li>一个 <strong>提前准备好的功能</strong>(别人或者自己写的代码)，<strong>可以直接使用</strong>，而 <strong>不用关心内部的细节</strong></li><li>目前已经学习过的函数</li></ul><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>print(x)</td><td>将 x 输出到控制台</td></tr><tr><td>type(x)</td><td>查看 x 的变量类型</td></tr></tbody></table><h4 id="2-input-函数实现键盘输入"><a href="#2-input-函数实现键盘输入" class="headerlink" title="2) input 函数实现键盘输入"></a>2) input 函数实现键盘输入</h4><ul><li>在 Python 中可以使用 <code>input</code> 函数从键盘等待用户的输入</li><li>用户输入的 <strong>任何内容</strong> Python 都认为是一个 <strong>字符串</strong></li><li>语法如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串变量 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"提示信息："</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-类型转换函数"><a href="#3-类型转换函数" class="headerlink" title="3) 类型转换函数"></a>3) 类型转换函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int(x)</td><td>将 x 转换为一个整数</td></tr><tr><td>float(x)</td><td>将 x 转换到一个浮点数</td></tr></tbody></table><h4 id="4-变量输入演练-——-超市买苹果增强版"><a href="#4-变量输入演练-——-超市买苹果增强版" class="headerlink" title="4) 变量输入演练 —— 超市买苹果增强版"></a>4) 变量输入演练 —— 超市买苹果增强版</h4><p><strong>需求</strong></p><ul><li><strong>收银员输入</strong> 苹果的价格，单位：<strong>元／斤</strong></li><li><strong>收银员输入</strong> 用户购买苹果的重量，单位：<strong>斤</strong></li><li>计算并且 <strong>输出</strong> 付款金额</li></ul><h5 id="演练方式-1"><a href="#演练方式-1" class="headerlink" title="演练方式 1"></a>演练方式 1</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 输入苹果单价</span>price_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入苹果价格："</span><span class="token punctuation">)</span><span class="token comment"># 2. 要求苹果重量</span>weight_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入苹果重量："</span><span class="token punctuation">)</span><span class="token comment"># 3. 计算金额</span><span class="token comment"># 1> 将苹果单价转换成小数</span>price <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>price_str<span class="token punctuation">)</span><span class="token comment"># 2> 将苹果重量转换成小数</span>weight <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>weight_str<span class="token punctuation">)</span><span class="token comment"># 3> 计算付款金额</span>money <span class="token operator">=</span> price <span class="token operator">*</span> weight<span class="token keyword">print</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提问</strong></p><ol><li>演练中，针对 <strong>价格</strong> 定义了几个变量？<ul><li><strong>两个</strong></li><li><code>price_str</code> 记录用户输入的价格字符串</li><li><code>price</code> 记录转换后的价格数值</li></ul></li><li><strong>思考</strong> —— 如果开发中，需要用户通过控制台 输入 <strong>很多个 数字</strong>，针对每一个数字都要定义两个变量，<strong>方便吗</strong>？</li></ol><h5 id="演练方式-2-——-买苹果改进版"><a href="#演练方式-2-——-买苹果改进版" class="headerlink" title="演练方式 2 —— 买苹果改进版"></a>演练方式 2 —— 买苹果改进版</h5><ol><li><strong>定义</strong> 一个 <strong>浮点变量</strong> 接收用户输入的同时，就使用 <code>float</code> 函数进行转换</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">price <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入价格:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>改进后的好处：</li></ul><ol><li>节约空间，只需要为一个变量分配空间</li><li>起名字方便，不需要为中间变量起名字</li></ol><ul><li>改进后的“缺点”：</li></ul><ol><li>初学者需要知道，两个函数能够嵌套使用，稍微有一些难度</li></ol><p><strong>提示</strong></p><ul><li>如果输入的不是一个数字，程序执行时会出错，有关数据转换的高级话题，后续会讲！</li></ul><h3 id="2-5-变量的格式化输出"><a href="#2-5-变量的格式化输出" class="headerlink" title="2.5 变量的格式化输出"></a>2.5 变量的格式化输出</h3><blockquote><p>苹果单价 <code>9.00</code> 元／斤，购买了 <code>5.00</code> 斤，需要支付 <code>45.00</code> 元</p></blockquote><ul><li>在 Python 中可以使用 <code>print</code> 函数将信息输出到控制台</li><li>如果希望输出文字信息的同时，<strong>一起输出</strong> <strong>数据</strong>，就需要使用到 <strong>格式化操作符</strong></li><li><code>%</code> 被称为 <strong>格式化操作符</strong>，专门用于处理字符串中的格式<ul><li>包含 <code>%</code> 的字符串，被称为 <strong>格式化字符串</strong></li><li><code>%</code> 和不同的 <strong>字符</strong> 连用，<strong>不同类型的数据</strong> 需要使用 <strong>不同的格式化字符</strong></li></ul></li></ul><table><thead><tr><th>格式化字符</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号十进制整数，<code>%06d</code> 表示输出的整数显示位数，不足的地方使用 <code>0</code> 补全</td></tr><tr><td>%f</td><td>浮点数，<code>%.2f</code> 表示小数点后只显示两位</td></tr><tr><td>%%</td><td>输出 <code>%</code></td></tr></tbody></table><ul><li>语法格式如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式化字符串"</span> <span class="token operator">%</span> 变量<span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式化字符串"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>变量<span class="token number">1</span><span class="token punctuation">,</span> 变量<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="格式化输出演练-——-基本练习"><a href="#格式化输出演练-——-基本练习" class="headerlink" title="格式化输出演练 —— 基本练习"></a>格式化输出演练 —— 基本练习</h4><p><strong>需求</strong></p><ol><li>定义字符串变量 <code>name</code>，输出 <strong>我的名字叫 小明，请多多关照！</strong></li><li>定义整数变量 <code>student_no</code>，输出 <strong>我的学号是 000001</strong></li><li>定义小数 <code>price</code>、<code>weight</code>、<code>money</code>，输出 <strong>苹果单价 9.00 元／斤，购买了 5.00 斤，需要支付 45.00 元</strong></li><li>定义一个小数 <code>scale</code>，输出 <strong>数据比例是 10.00%</strong></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我的名字叫 %s，请多多关照！"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我的学号是 %06d"</span> <span class="token operator">%</span> student_no<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"苹果单价 %.02f 元／斤，购买 %.02f 斤，需要支付 %.02f 元"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>price<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据比例是 %.02f%%"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>scale <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="课后练习-——-个人名片"><a href="#课后练习-——-个人名片" class="headerlink" title="课后练习 —— 个人名片"></a>课后练习 —— 个人名片</h4><p><strong>需求</strong></p><ul><li>在控制台依次提示用户输入：<strong>姓名</strong>、<strong>公司</strong>、<strong>职位</strong>、<strong>电话</strong>、<strong>邮箱</strong></li><li>按照以下格式输出：</li></ul><pre class="line-numbers language-none"><code class="language-none">**************************************************公司名称姓名 (职位)电话：电话邮箱：邮箱**************************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""在控制台依次提示用户输入：姓名、公司、职位、电话、电子邮箱"""</span>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span>company <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入公司："</span><span class="token punctuation">)</span>title <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入职位："</span><span class="token punctuation">)</span>phone <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入电话："</span><span class="token punctuation">)</span>email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入邮箱："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>company<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s (%s)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"电话：%s"</span> <span class="token operator">%</span> phone<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"邮箱：%s"</span> <span class="token operator">%</span> email<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h1><h2 id="目标-9"><a href="#目标-9" class="headerlink" title="目标"></a>目标</h2><ul><li>标识符和关键字</li><li>变量的命名规则</li></ul><h2 id="0-1-标识符和关键字"><a href="#0-1-标识符和关键字" class="headerlink" title="0.1 标识符和关键字"></a>0.1 标识符和关键字</h2><h3 id="1-1-标识符"><a href="#1-1-标识符" class="headerlink" title="1.1 标识符"></a>1.1 标识符</h3><blockquote><p>标示符就是程序员定义的 <strong>变量名</strong>、<strong>函数名</strong></p><p><strong>名字</strong> 需要有 <strong>见名知义</strong> 的效果，见下图：</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030129.jpg" alt="001_中国山东找蓝翔" loading="lazy"></p><ul><li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li><li><strong>不能以数字开头</strong></li><li><strong>不能与关键字重名</strong></li></ul><p>思考：下面的标示符哪些是正确的，哪些不正确为什么？</p><pre class="line-numbers language-none"><code class="language-none">fromNo12from#12my_Booleanmy-BooleanObj22ndObjmyIntMy_tExt_testtest!32haha(da)ttjack_rosejack&amp;roseGUIG.U.I<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-关键字"><a href="#1-2-关键字" class="headerlink" title="1.2 关键字"></a>1.2 关键字</h3><ul><li><strong>关键字</strong> 就是在 <code>Python</code> 内部已经使用的标识符</li><li><strong>关键字</strong> 具有特殊的功能和含义</li><li>开发者 <strong>不允许定义和关键字相同的名字的标示符</strong></li></ul><p>通过以下命令可以查看 <code>Python</code> 中的关键字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> keywordIn <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>提示：<strong>关键字的学习及使用</strong>，会在后面的课程中不断介绍</p><ul><li><p><code>import</code> <strong>关键字</strong> 可以导入一个 <strong>“工具包”</strong></p></li><li><p>在 <code>Python</code> 中不同的工具包，提供有不同的工具</p></li></ul></blockquote><h2 id="02-变量的命名规则"><a href="#02-变量的命名规则" class="headerlink" title="02. 变量的命名规则"></a>02. 变量的命名规则</h2><blockquote><p><strong>命名规则</strong> 可以被视为一种 <strong>惯例</strong>，并无绝对与强制<br>目的是为了 <strong>增加代码的识别和可读性</strong></p></blockquote><p><strong>注意</strong> <code>Python</code> 中的 <strong>标识符</strong> 是 <strong>区分大小写的</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030130.jpg" alt="002_标识符区分大小写" loading="lazy"></p><ol><li><p>在定义变量时，为了保证代码格式，<code>=</code> 的左右应该各保留一个空格</p></li><li><p>在 <code>Python</code> 中，如果 <strong>变量名</strong> 需要由 <strong>二个</strong> 或 <strong>多个单词</strong> 组成时，可以按照以下方式命名</p><ol><li>每个单词都使用小写字母</li><li>单词与单词之间使用 <strong><code>_</code>下划线</strong> 连接</li></ol><ul><li>例如：<code>first_name</code>、<code>last_name</code>、<code>qq_number</code>、<code>qq_password</code></li></ul></li></ol><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><ul><li>当 <strong>变量名</strong> 是由二个或多个单词组成时，还可以利用驼峰命名法来命名</li><li><strong>小驼峰式命名法</strong><ul><li>第一个单词以小写字母开始，后续单词的首字母大写</li><li>例如：<code>firstName</code>、<code>lastName</code></li></ul></li><li><strong>大驼峰式命名法</strong><ul><li>每一个单词的首字母都采用大写字母</li><li>例如：<code>FirstName</code>、<code>LastName</code>、<code>CamelCase</code></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030131.jpg" alt="003_驼峰命名法" loading="lazy"></p><h1 id="判断（if）语句"><a href="#判断（if）语句" class="headerlink" title="判断（if）语句"></a>判断（if）语句</h1><h2 id="目标-10"><a href="#目标-10" class="headerlink" title="目标"></a>目标</h2><ul><li>开发中的应用场景</li><li>if 语句体验</li><li>if 语句进阶</li><li>综合应用</li></ul><h2 id="01-开发中的应用场景"><a href="#01-开发中的应用场景" class="headerlink" title="01. 开发中的应用场景"></a>01. 开发中的应用场景</h2><p>生活中的判断几乎是无所不在的，我们每天都在做各种各样的选择，如果这样？如果那样？……</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030138.jpg" alt="001_未成年人禁止入内-w400" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030139.png" alt="002_火车站安检-w400" loading="lazy"></p><h3 id="程序中的判断"><a href="#程序中的判断" class="headerlink" title="程序中的判断"></a>程序中的判断</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030140.png" alt="003_判断示意图-w600" loading="lazy"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 今天发工资<span class="token punctuation">:</span>    先还信用卡的钱    <span class="token keyword">if</span> 有剩余<span class="token punctuation">:</span>        又可以happy了，O<span class="token punctuation">(</span>∩_∩<span class="token punctuation">)</span>O哈哈<span class="token operator">~</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        噢，no。。。还的等<span class="token number">30</span>天<span class="token keyword">else</span><span class="token punctuation">:</span>    盼着发工资<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断的定义"><a href="#判断的定义" class="headerlink" title="判断的定义"></a>判断的定义</h3><ul><li>如果 <strong>条件满足</strong>，才能做某件事情，</li><li>如果 <strong>条件不满足</strong>，就做另外一件事情，或者什么也不做</li></ul><blockquote><p>正是因为有了判断，才使得程序世界丰富多彩，充满变化！</p><p><strong>判断语句</strong> 又被称为 “分支语句”，正是因为有了判断，才让程序有了很多的分支</p></blockquote><h2 id="02-if-语句体验"><a href="#02-if-语句体验" class="headerlink" title="02. if 语句体验"></a>02. if 语句体验</h2><h3 id="2-1-if-判断语句基本语法"><a href="#2-1-if-判断语句基本语法" class="headerlink" title="2.1 if 判断语句基本语法"></a>2.1 if 判断语句基本语法</h3><p>在 <code>Python</code> 中，<strong>if 语句</strong> 就是用来进行判断的，格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 要判断的条件<span class="token punctuation">:</span>    条件成立时，要做的事情    ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：代码的缩进为一个 <code>tab</code> 键，或者 <strong>4</strong> 个空格 —— <strong>建议使用空格</strong></p><ul><li>在 Python 开发中，Tab 和空格不要混用！</li></ul></blockquote><p><strong>我们可以把整个 if 语句看成一个完整的代码块</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030141.png" alt="004_if语句是一个完整的代码块1-w400" loading="lazy"></p><h3 id="2-2-判断语句演练-——-判断年龄"><a href="#2-2-判断语句演练-——-判断年龄" class="headerlink" title="2.2 判断语句演练 —— 判断年龄"></a>2.2 判断语句演练 —— 判断年龄</h3><p><strong>需求</strong></p><ol><li>定义一个整数变量记录年龄</li><li>判断是否满 18 岁 （**&gt;&#x3D;**）</li><li>如果满 18 岁，允许进网吧嗨皮</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义年龄变量</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token comment"># 2. 判断是否满 18 岁</span><span class="token comment"># if 语句以及缩进部分的代码是一个完整的代码块</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可以进网吧嗨皮……"</span><span class="token punctuation">)</span><span class="token comment"># 3. 思考！- 无论条件是否满足都会执行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这句代码什么时候执行?"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ul><li><code>if</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li></ul><h3 id="2-3-else-处理条件不满足的情况"><a href="#2-3-else-处理条件不满足的情况" class="headerlink" title="2.3 else 处理条件不满足的情况"></a>2.3 else 处理条件不满足的情况</h3><p><strong>思考</strong></p><p>在使用 <code>if</code> 判断时，只能做到满足条件时要做的事情。那如果需要在 <strong>不满足条件的时候</strong>，做某些事情，该如何做呢？</p><p><strong>答案</strong></p><p><code>else</code>，格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 要判断的条件<span class="token punctuation">:</span>    条件成立时，要做的事情    ……<span class="token keyword">else</span><span class="token punctuation">:</span>    条件不成立时，要做的事情    ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ul><li><code>if</code> 和 <code>else</code> 语句以及各自的缩进部分共同是一个 <strong>完整的代码块</strong></li></ul><h3 id="2-4-判断语句演练-——-判断年龄改进"><a href="#2-4-判断语句演练-——-判断年龄改进" class="headerlink" title="2.4 判断语句演练 —— 判断年龄改进"></a>2.4 判断语句演练 —— 判断年龄改进</h3><p><strong>需求</strong></p><ol><li>输入用户年龄</li><li>判断是否满 18 岁 （**&gt;&#x3D;**）</li><li>如果满 18 岁，允许进网吧嗨皮</li><li>如果未满 18 岁，提示回家写作业</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 输入用户年龄</span>age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"今年多大了？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2. 判断是否满 18 岁</span><span class="token comment"># if 语句以及缩进部分的代码是一个完整的语法块</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可以进网吧嗨皮……"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你还没长大，应该回家写作业！"</span><span class="token punctuation">)</span><span class="token comment"># 3. 思考！- 无论条件是否满足都会执行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这句代码什么时候执行?"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030142.png" alt="005_ifelse语句是一个完整的代码块1-w400" loading="lazy"></p><h2 id="03-逻辑运算"><a href="#03-逻辑运算" class="headerlink" title="03. 逻辑运算"></a>03. 逻辑运算</h2><ul><li>在程序开发中，通常 <strong>在判断条件时</strong>，会需要同时判断多个条件</li><li>只有多个条件都满足，才能够执行后续代码，这个时候需要使用到 <strong>逻辑运算符</strong></li><li><strong>逻辑运算符</strong> 可以把 <strong>多个条件</strong> 按照 <strong>逻辑</strong> 进行 <strong>连接</strong>，变成 <strong>更复杂的条件</strong></li><li>Python 中的 <strong>逻辑运算符</strong> 包括：<strong>与 and</strong>／<strong>或 or</strong>／<strong>非 not</strong> 三种</li></ul><h3 id="3-1-and"><a href="#3-1-and" class="headerlink" title="3.1 and"></a>3.1 <code>and</code></h3><pre class="line-numbers language-none"><code class="language-none">条件1 and 条件2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>与</strong>／<strong>并且</strong></li><li>两个条件同时满足，返回 <code>True</code></li><li>只要有一个不满足，就返回 <code>False</code></li></ul><table><thead><tr><th align="center">条件 1</th><th align="center">条件 2</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">成立</td><td align="center">成立</td><td align="center">成立</td></tr><tr><td align="center">成立</td><td align="center">不成立</td><td align="center">不成立</td></tr><tr><td align="center">不成立</td><td align="center">成立</td><td align="center">不成立</td></tr><tr><td align="center">不成立</td><td align="center">不成立</td><td align="center">不成立</td></tr></tbody></table><h3 id="3-2-or"><a href="#3-2-or" class="headerlink" title="3.2 or"></a>3.2 <code>or</code></h3><pre class="line-numbers language-none"><code class="language-none">条件1 or 条件2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>或</strong>／<strong>或者</strong></li><li>两个条件只要有一个满足，返回 <code>True</code></li><li>两个条件都不满足，返回 <code>False</code></li></ul><table><thead><tr><th align="center">条件 1</th><th align="center">条件 2</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">成立</td><td align="center">成立</td><td align="center">成立</td></tr><tr><td align="center">成立</td><td align="center">不成立</td><td align="center">成立</td></tr><tr><td align="center">不成立</td><td align="center">成立</td><td align="center">成立</td></tr><tr><td align="center">不成立</td><td align="center">不成立</td><td align="center">不成立</td></tr></tbody></table><h3 id="3-3-not"><a href="#3-3-not" class="headerlink" title="3.3 not"></a>3.3 <code>not</code></h3><pre class="line-numbers language-none"><code class="language-none">not 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>非</strong>／<strong>不是</strong></li></ul><table><thead><tr><th align="center">条件</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">成立</td><td align="center">不成立</td></tr><tr><td align="center">不成立</td><td align="center">成立</td></tr></tbody></table><h4 id="逻辑运算演练"><a href="#逻辑运算演练" class="headerlink" title="逻辑运算演练"></a>逻辑运算演练</h4><ol><li>练习1: 定义一个整数变量 <code>age</code>，编写代码判断年龄是否正确<ul><li>要求人的年龄在 0-120 之间</li></ul></li><li>练习2: 定义两个整数变量 <code>python_score</code>、<code>c_score</code>，编写代码判断成绩<ul><li>要求只要有一门成绩 &gt; 60 分就算合格</li></ul></li><li>练习3: 定义一个布尔型变量 <code>is_employee</code>，编写代码判断是否是本公司员工<ul><li>如果不是提示不允许入内</li></ul></li></ol><p>答案 1：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 练习1: 定义一个整数变量 age，编写代码判断年龄是否正确</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token comment"># 要求人的年龄在 0-120 之间</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> age <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"年龄正确"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"年龄不正确"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案 2：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 练习2: 定义两个整数变量 python_score、c_score，编写代码判断成绩</span>python_score <span class="token operator">=</span> <span class="token number">50</span>c_score <span class="token operator">=</span> <span class="token number">50</span><span class="token comment"># 要求只要有一门成绩 > 60 分就算合格</span><span class="token keyword">if</span> python_score <span class="token operator">></span> <span class="token number">60</span> <span class="token keyword">or</span> c_score <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"考试通过"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"再接再厉！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案 3：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 练习3: 定义一个布尔型变量 `is_employee`，编写代码判断是否是本公司员工</span>is_employee <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 如果不是提示不允许入内</span><span class="token keyword">if</span> <span class="token keyword">not</span> is_employee<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"非公勿内"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-if-语句进阶"><a href="#04-if-语句进阶" class="headerlink" title="04. if 语句进阶"></a>04. if 语句进阶</h2><h3 id="4-1-elif"><a href="#4-1-elif" class="headerlink" title="4.1 elif"></a>4.1 <code>elif</code></h3><ul><li>在开发中，使用 <code>if</code> 可以 <strong>判断条件</strong></li><li>使用 <code>else</code> 可以处理 <strong>条件不成立</strong> 的情况</li><li>但是，如果希望 <strong>再增加一些条件</strong>，<strong>条件不同，需要执行的代码也不同</strong> 时，就可以使用 <code>elif</code> </li><li>语法格式如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>满足执行的代码    ……<span class="token keyword">elif</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>    条件<span class="token number">2</span>满足时，执行的代码    ……<span class="token keyword">elif</span> 条件<span class="token number">3</span><span class="token punctuation">:</span>    条件<span class="token number">3</span>满足时，执行的代码    ……<span class="token keyword">else</span><span class="token punctuation">:</span>    以上条件都不满足时，执行的代码    ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对比逻辑运算符的代码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span> <span class="token keyword">and</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>满足 并且 条件<span class="token number">2</span>满足 执行的代码    ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ol><li><code>elif</code> 和 <code>else</code> 都必须和 <code>if</code> 联合使用，而不能单独使用</li><li>可以将 <code>if</code>、<code>elif</code> 和 <code>else</code> 以及各自缩进的代码，看成一个 <strong>完整的代码块</strong></li></ol><h4 id="elif-演练-——-女友的节日"><a href="#elif-演练-——-女友的节日" class="headerlink" title="elif 演练 —— 女友的节日"></a>elif 演练 —— 女友的节日</h4><p><strong>需求</strong></p><ol><li>定义 <code>holiday_name</code> 字符串变量记录节日名称</li><li>如果是 <strong>情人节</strong> 应该 <strong>买玫瑰</strong>／<strong>看电影</strong></li><li>如果是 <strong>平安夜</strong> 应该 <strong>买苹果</strong>／<strong>吃大餐</strong></li><li>如果是 <strong>生日</strong> 应该 <strong>买蛋糕</strong></li><li>其他的日子每天都是节日啊……</li></ol><pre class="line-numbers language-none"><code class="language-none">holiday_name &#x3D; &quot;平安夜&quot;if holiday_name &#x3D;&#x3D; &quot;情人节&quot;:    print(&quot;买玫瑰&quot;)    print(&quot;看电影&quot;)elif holiday_name &#x3D;&#x3D; &quot;平安夜&quot;:    print(&quot;买苹果&quot;)    print(&quot;吃大餐&quot;)elif holiday_name &#x3D;&#x3D; &quot;生日&quot;:    print(&quot;买蛋糕&quot;)else:    print(&quot;每天都是节日啊……&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-if-的嵌套"><a href="#4-2-if-的嵌套" class="headerlink" title="4.2 if 的嵌套"></a>4.2 <code>if</code> 的嵌套</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030139.png" alt="002_火车站安检-w400" loading="lazy"></p><blockquote><p><strong>elif</strong> 的应用场景是：<strong>同时</strong> 判断 <strong>多个条件</strong>，所有的条件是 <strong>平级</strong> 的</p></blockquote><ul><li>在开发中，使用 <code>if</code> 进行条件判断，如果希望 <strong>在条件成立的执行语句中</strong> 再 <strong>增加条件判断</strong>，就可以使用 <strong>if 的嵌套</strong></li><li><strong>if 的嵌套</strong> 的应用场景就是：<strong>在之前条件满足的前提下，再增加额外的判断</strong></li><li><strong>if 的嵌套</strong> 的语法格式，<strong>除了缩进之外</strong> 和之前的没有区别</li><li>语法格式如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件 <span class="token number">1</span><span class="token punctuation">:</span>    条件 <span class="token number">1</span> 满足执行的代码    ……        <span class="token keyword">if</span> 条件 <span class="token number">1</span> 基础上的条件 <span class="token number">2</span><span class="token punctuation">:</span>        条件 <span class="token number">2</span> 满足时，执行的代码        ……                <span class="token comment"># 条件 2 不满足的处理</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        条件 <span class="token number">2</span> 不满足时，执行的代码        <span class="token comment"># 条件 1 不满足的处理</span><span class="token keyword">else</span><span class="token punctuation">:</span>    条件<span class="token number">1</span> 不满足时，执行的代码    ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if-的嵌套-演练-——-火车站安检"><a href="#if-的嵌套-演练-——-火车站安检" class="headerlink" title="if 的嵌套 演练 —— 火车站安检"></a>if 的嵌套 演练 —— 火车站安检</h4><p><strong>需求</strong></p><ol><li>定义布尔型变量 <code>has_ticket</code> 表示是否有车票</li><li>定义整型变量 <code>knife_length</code> 表示刀的长度，单位：厘米</li><li>首先检查是否有车票，如果有，才允许进行 <strong>安检</strong></li><li>安检时，需要检查刀的长度，判断是否超过 20 厘米<ul><li>如果超过 20 厘米，提示刀的长度，不允许上车</li><li>如果不超过 20 厘米，安检通过</li></ul></li><li>如果没有车票，不允许进门</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义布尔型变量 has_ticket 表示是否有车票</span>has_ticket <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 定义整数型变量 knife_length 表示刀的长度，单位：厘米</span>knife_length <span class="token operator">=</span> <span class="token number">20</span><span class="token comment"># 首先检查是否有车票，如果有，才允许进行 安检</span><span class="token keyword">if</span> has_ticket<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"有车票，可以开始安检..."</span><span class="token punctuation">)</span>    <span class="token comment"># 安检时，需要检查刀的长度，判断是否超过 20 厘米</span>    <span class="token comment"># 如果超过 20 厘米，提示刀的长度，不允许上车</span>    <span class="token keyword">if</span> knife_length <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不允许携带 %d 厘米长的刀上车"</span> <span class="token operator">%</span> knife_length<span class="token punctuation">)</span>    <span class="token comment"># 如果不超过 20 厘米，安检通过</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"安检通过，祝您旅途愉快……"</span><span class="token punctuation">)</span><span class="token comment"># 如果没有车票，不允许进门</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大哥，您要先买票啊"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="05-综合应用-——-石头剪刀布"><a href="#05-综合应用-——-石头剪刀布" class="headerlink" title="05. 综合应用 —— 石头剪刀布"></a>05. 综合应用 —— 石头剪刀布</h2><p><strong>目标</strong></p><ol><li>强化 <strong>多个条件</strong> 的 <strong>逻辑运算</strong></li><li>体会 <code>import</code> 导入模块（“工具包”）的使用</li></ol><p><strong>需求</strong></p><ol><li>从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</li><li>电脑 <strong>随机</strong> 出拳 —— 先假定电脑只会出石头，完成整体代码功能</li><li>比较胜负</li></ol><table><thead><tr><th align="center">序号</th><th align="center">规则</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">石头 胜 剪刀</td></tr><tr><td align="center">2</td><td align="center">剪刀 胜 布</td></tr><tr><td align="center">3</td><td align="center">布 胜 石头</td></tr></tbody></table><h3 id="5-1-基础代码实现"><a href="#5-1-基础代码实现" class="headerlink" title="5.1 基础代码实现"></a>5.1 基础代码实现</h3><ul><li>先 <strong>假定电脑就只会出石头</strong>，完成整体代码功能</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</span>player <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请出拳 石头（1）／剪刀（2）／布（3）："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 电脑 随机 出拳 - 假定电脑永远出石头</span>computer <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 比较胜负</span><span class="token comment"># 如果条件判断的内容太长，可以在最外侧的条件增加一对大括号</span><span class="token comment"># 再在每一个条件之间，使用回车，PyCharm 可以自动增加 8 个空格</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> computer <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">or</span>        <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> computer <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">or</span>        <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> computer <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"噢耶！！！电脑弱爆了！！！"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> player <span class="token operator">==</span> computer<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"心有灵犀，再来一盘！"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不行，我要和你决战到天亮！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-随机数的处理"><a href="#5-2-随机数的处理" class="headerlink" title="5.2 随机数的处理"></a>5.2 随机数的处理</h3><ul><li>在 <code>Python</code> 中，要使用随机数，首先需要导入 <strong>随机数</strong> 的 <strong>模块</strong> —— “工具包”</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>导入模块后，可以直接在 <strong>模块名称</strong> 后面敲一个 <code>.</code> 然后按 <code>Tab</code> 键，会提示该模块中包含的所有函数</p></li><li><p><code>random.randint(a, b)</code> ，返回 <code>[a, b]</code> 之间的整数，包含 <code>a</code> 和 <code>b</code></p></li><li><p>例如：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 生成的随机数n: 12 &lt;= n &lt;= 20   </span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 结果永远是 20   </span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 该语句是错误的，下限必须小于上限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="目标-11"><a href="#目标-11" class="headerlink" title="目标"></a>目标</h2><ul><li>算数运算符</li><li>比较（关系）运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>运算符的优先级</li></ul><p>数学符号表链接：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8">https://zh.wikipedia.org/wiki/数学符号表</a></p><h2 id="01-算数运算符-1"><a href="#01-算数运算符-1" class="headerlink" title="01. 算数运算符"></a>01. 算数运算符</h2><ul><li>是完成基本的算术运算使用的符号，用来处理四则运算</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>10 + 20 &#x3D; 30</td></tr><tr><td align="center">-</td><td align="center">减</td><td>10 - 20 &#x3D; -10</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>10 * 20 &#x3D; 200</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td><td>10 &#x2F; 20 &#x3D; 0.5</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">取整除</td><td>返回除法的整数部分（商） 9 &#x2F;&#x2F; 2 输出结果 4</td></tr><tr><td align="center">%</td><td align="center">取余数</td><td>返回除法的余数 9 % 2 &#x3D; 1</td></tr><tr><td align="center">**</td><td align="center">幂</td><td>又称次方、乘方，2 ** 3 &#x3D; 8</td></tr></tbody></table><ul><li>在 Python 中 <code>*</code> 运算符还可以用于字符串，计算结果就是字符串重复指定次数的结果</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span>Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'----------------------------------------'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="02-比较（关系）运算符"><a href="#02-比较（关系）运算符" class="headerlink" title="02. 比较（关系）运算符"></a>02. 比较（关系）运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>检查两个操作数的值是否 <strong>相等</strong>，如果是，则条件成立，返回 True</td></tr><tr><td>!&#x3D;</td><td>检查两个操作数的值是否 <strong>不相等</strong>，如果是，则条件成立，返回 True</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否 <strong>大于</strong> 右操作数的值，如果是，则条件成立，返回 True</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否 <strong>小于</strong> 右操作数的值，如果是，则条件成立，返回 True</td></tr><tr><td>&gt;&#x3D;</td><td>检查左操作数的值是否 <strong>大于或等于</strong> 右操作数的值，如果是，则条件成立，返回 True</td></tr><tr><td>&lt;&#x3D;</td><td>检查左操作数的值是否 <strong>小于或等于</strong> 右操作数的值，如果是，则条件成立，返回 True</td></tr></tbody></table><blockquote><p>Python 2.x 中判断 <strong>不等于</strong> 还可以使用 <code>&lt;&gt;</code> 运算符</p><p><code>!=</code> 在 Python 2.x 中同样可以用来判断 <strong>不等于</strong></p></blockquote><h2 id="03-逻辑运算符"><a href="#03-逻辑运算符" class="headerlink" title="03. 逻辑运算符"></a>03. 逻辑运算符</h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>只有 x 和 y 的值都为 True，才会返回 True<br />否则只要 x 或者 y 有一个值为 False，就返回 False</td></tr><tr><td>or</td><td>x or y</td><td>只要 x 或者 y 有一个值为 True，就返回 True<br />只有 x 和 y 的值都为 False，才会返回 False</td></tr><tr><td>not</td><td>not x</td><td>如果 x 为 True，返回 False<br />如果 x 为 False，返回 True</td></tr></tbody></table><h2 id="04-赋值运算符"><a href="#04-赋值运算符" class="headerlink" title="04. 赋值运算符"></a>04. 赋值运算符</h2><ul><li>在 Python 中，使用 <code>=</code> 可以给变量赋值</li><li>在算术运算时，为了简化代码的编写，<code>Python</code> 还提供了一系列的 与 <strong>算术运算符</strong> 对应的 <strong>赋值运算符</strong></li><li>注意：<strong>赋值运算符中间不能使用空格</strong></li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符</td><td>c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取 <strong>模</strong> (余数)赋值运算符</td><td>c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c **&#x3D; a 等效于 c &#x3D; c ** a</td></tr></tbody></table><h2 id="05-运算符的优先级"><a href="#05-运算符的优先级" class="headerlink" title="05. 运算符的优先级"></a>05. 运算符的优先级</h2><ul><li>以下表格的算数优先级由高到最低顺序排列</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂 (最高优先级)</td></tr><tr><td>* &#x2F; % &#x2F;&#x2F;</td><td>乘、除、取余数、取整除</td></tr><tr><td>+ -</td><td>加法、减法</td></tr><tr><td>&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td>比较运算符</td></tr><tr><td>&#x3D;&#x3D; !&#x3D;</td><td>等于运算符</td></tr><tr><td>&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td>赋值运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="目标-12"><a href="#目标-12" class="headerlink" title="目标"></a>目标</h2><ul><li>程序的三大流程</li><li>while 循环基本使用</li><li>break 和 continue</li><li>while 循环嵌套</li></ul><h2 id="01-程序的三大流程"><a href="#01-程序的三大流程" class="headerlink" title="01. 程序的三大流程"></a>01. 程序的三大流程</h2><ul><li><p>在程序开发中，一共有三种流程方式：</p><ul><li><strong>顺序</strong> —— <strong>从上向下</strong>，顺序执行代码</li><li><strong>分支</strong> —— 根据条件判断，决定执行代码的 <strong>分支</strong></li><li><strong>循环</strong> —— 让 <strong>特定代码 重复</strong> 执行</li></ul><p>  <img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030157.png" alt="001_程序三大流程" loading="lazy"></p></li></ul><h2 id="02-while-循环基本使用"><a href="#02-while-循环基本使用" class="headerlink" title="02. while 循环基本使用"></a>02. <code>while</code> 循环基本使用</h2><ul><li><p>循环的作用就是让 <strong>指定的代码</strong> 重复的执行</p></li><li><p><code>while</code> 循环最常用的应用场景就是 <strong>让执行的代码</strong> 按照 <strong>指定的次数</strong> <strong>重复</strong> 执行</p></li><li><p>需求 —— 打印 5 遍 <code>Hello Python</code></p></li><li><p>思考 —— 如果要求打印 100 遍怎么办？</p></li></ul><h3 id="2-1-while-语句基本语法"><a href="#2-1-while-语句基本语法" class="headerlink" title="2.1 while 语句基本语法"></a>2.1 <code>while</code> 语句基本语法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">初始条件设置 —— 通常是重复执行的 计数器<span class="token keyword">while</span> 条件<span class="token punctuation">(</span>判断 计数器 是否达到 目标次数<span class="token punctuation">)</span><span class="token punctuation">:</span>    条件满足时，做的事情<span class="token number">1</span>    条件满足时，做的事情<span class="token number">2</span>    条件满足时，做的事情<span class="token number">3</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        处理条件<span class="token punctuation">(</span>计数器 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ul><li><code>while</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li></ul><h4 id="第一个-while-循环"><a href="#第一个-while-循环" class="headerlink" title="第一个 while 循环"></a>第一个 while 循环</h4><p><strong>需求</strong></p><ul><li>打印 5 遍 Hello Python</li></ul><pre class="line-numbers language-while" data-language="while"><code class="language-while"># 1. 定义重复次数计数器i &#x3D; 1# 2. 使用 while 判断条件while i &lt;&#x3D; 5:    # 要重复执行的代码    print(&quot;Hello Python&quot;)    # 处理计数器 i    i &#x3D; i + 1print(&quot;循环结束后的 i &#x3D; %d&quot; % i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：循环结束后，之前定义的计数器条件的数值是依旧存在的</p></blockquote><h4 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h4><blockquote><p>由于程序员的原因，<strong>忘记</strong> 在循环内部 <strong>修改循环的判断条件</strong>，导致循环持续执行，程序无法终止！</p></blockquote><h3 id="2-2-赋值运算符"><a href="#2-2-赋值运算符" class="headerlink" title="2.2 赋值运算符"></a>2.2 赋值运算符</h3><ul><li>在 Python 中，使用 <code>=</code> 可以给变量赋值</li><li>在算术运算时，为了简化代码的编写，<code>Python</code> 还提供了一系列的 与 <strong>算术运算符</strong> 对应的 <strong>赋值运算符</strong></li><li>注意：<strong>赋值运算符中间不能使用空格</strong></li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符</td><td>c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取 <strong>模</strong> (余数)赋值运算符</td><td>c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c **&#x3D; a 等效于 c &#x3D; c ** a</td></tr></tbody></table><h3 id="2-3-Python-中的计数方法"><a href="#2-3-Python-中的计数方法" class="headerlink" title="2.3 Python 中的计数方法"></a>2.3 Python 中的计数方法</h3><p>常见的计数方法有两种，可以分别称为：</p><ul><li><strong>自然计数法</strong>（从 <code>1</code> 开始）—— 更符合人类的习惯</li><li><strong>程序计数法</strong>（从 <code>0</code> 开始）—— 几乎所有的程序语言都选择从 0 开始计数</li></ul><p>因此，大家在编写程序时，应该尽量养成习惯：<strong>除非需求的特殊要求，否则 循环 的计数都从 0 开始</strong></p><h3 id="2-4-循环计算"><a href="#2-4-循环计算" class="headerlink" title="2.4 循环计算"></a>2.4 循环计算</h3><blockquote><p>在程序开发中，通常会遇到 <strong>利用循环</strong> <strong>重复计算</strong> 的需求</p></blockquote><p>遇到这种需求，可以：</p><ol><li>在 <code>while</code> 上方定义一个变量，用于 <strong>存放最终计算结果</strong></li><li>在循环体内部，每次循环都用 <strong>最新的计算结果</strong>，<strong>更新</strong> 之前定义的变量</li></ol><p><strong>需求</strong></p><ul><li>计算 0 ~ 100 之间所有数字的累计求和结果</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算 0 ~ 100 之间所有数字的累计求和结果</span><span class="token comment"># 0. 定义最终结果的变量</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 1. 定义一个整数的变量记录循环的次数</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 2. 开始循环</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment"># 每一次循环，都让 result 这个变量和 i 这个计数器相加</span>    result <span class="token operator">+=</span> i    <span class="token comment"># 处理计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0~100之间的数字求和结果 = %d"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="需求进阶"><a href="#需求进阶" class="headerlink" title="需求进阶"></a>需求进阶</h4><ul><li>计算 0 ~ 100 之间 所有 <strong>偶数</strong> 的累计求和结果</li></ul><p>开发步骤</p><ol><li>编写循环 <strong>确认</strong> <strong>要计算的数字</strong></li><li>添加 <strong>结果</strong> 变量，在循环内部 <strong>处理计算结果</strong></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 0. 最终结果</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 1. 计数器</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 2. 开始循环</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token comment"># 判断偶数</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        result <span class="token operator">+=</span> i    <span class="token comment"># 处理计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0~100之间偶数求和结果 = %d"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="03-break-和-continue"><a href="#03-break-和-continue" class="headerlink" title="03. break 和 continue"></a>03. break 和 continue</h2><blockquote><p><code>break</code> 和 <code>continue</code> 是专门在循环中使用的关键字</p></blockquote><ul><li><code>break</code> <strong>某一条件满足时</strong>，退出循环，不再执行后续重复的代码</li><li><code>continue</code> <strong>某一条件满足时</strong>，不执行后续重复的代码</li></ul><blockquote><p><code>break</code> 和 <code>continue</code> 只针对 <strong>当前所在循环</strong> 有效</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030158.png" alt="002_循环流程图-w400" loading="lazy"></p><h3 id="3-1-break"><a href="#3-1-break" class="headerlink" title="3.1 break"></a>3.1 break</h3><ul><li><strong>在循环过程中</strong>，如果 <strong>某一个条件满足后</strong>，<strong>不</strong> 再希望 <strong>循环继续执行</strong>，可以使用 <code>break</code> 退出循环</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token comment"># break 某一条件满足时，退出循环，不再执行后续重复的代码</span>    <span class="token comment"># i == 3</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>break</code> 只针对当前所在循环有效</p></blockquote><h3 id="3-2-continue"><a href="#3-2-continue" class="headerlink" title="3.2 continue"></a>3.2 continue</h3><ul><li><strong>在循环过程中</strong>，如果 <strong>某一个条件满足后</strong>，<strong>不</strong> 希望 <strong>执行循环代码，但是又不希望退出循环</strong>，可以使用 <code>continue</code></li><li>也就是：在整个循环中，<strong>只有某些条件</strong>，不需要执行循环代码，而其他条件都需要执行</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token comment"># 当 i == 7 时，不希望执行需要重复执行的代码</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token comment"># 在使用 continue 之前，同样应该修改计数器</span>        <span class="token comment"># 否则会出现死循环</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">continue</span>    <span class="token comment"># 重复执行的代码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>需要注意：使用 <code>continue</code> 时，<strong>条件处理部分的代码，需要特别注意</strong>，不小心会出现 <strong>死循环</strong></li></ul><blockquote><p><code>continue</code> 只针对当前所在循环有效</p></blockquote><h2 id="04-while-循环嵌套"><a href="#04-while-循环嵌套" class="headerlink" title="04. while 循环嵌套"></a>04. <code>while</code> 循环嵌套</h2><h3 id="4-1-循环嵌套"><a href="#4-1-循环嵌套" class="headerlink" title="4.1 循环嵌套"></a>4.1 循环嵌套</h3><ul><li><code>while</code> 嵌套就是：<code>while</code> 里面还有 <code>while</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件 <span class="token number">1</span><span class="token punctuation">:</span>    条件满足时，做的事情<span class="token number">1</span>    条件满足时，做的事情<span class="token number">2</span>    条件满足时，做的事情<span class="token number">3</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> 条件 <span class="token number">2</span><span class="token punctuation">:</span>        条件满足时，做的事情<span class="token number">1</span>        条件满足时，做的事情<span class="token number">2</span>        条件满足时，做的事情<span class="token number">3</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            处理条件 <span class="token number">2</span>        处理条件 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-循环嵌套演练-——-九九乘法表"><a href="#4-2-循环嵌套演练-——-九九乘法表" class="headerlink" title="4.2 循环嵌套演练 —— 九九乘法表"></a>4.2 循环嵌套演练 —— 九九乘法表</h3><h4 id="第-1-步：用嵌套打印小星星"><a href="#第-1-步：用嵌套打印小星星" class="headerlink" title="第 1 步：用嵌套打印小星星"></a>第 1 步：用嵌套打印小星星</h4><p><strong>需求</strong></p><ul><li>在控制台连续输出五行 <code>*</code>，每一行星号的数量依次递增</li></ul><pre class="line-numbers language-none"><code class="language-none">***************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用字符串 * 打印</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义一个计数器变量，从数字1开始，循环会比较方便</span>row <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> row <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> row<span class="token punctuation">)</span>    row <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第-2-步：使用循环嵌套打印小星星"><a href="#第-2-步：使用循环嵌套打印小星星" class="headerlink" title="第 2 步：使用循环嵌套打印小星星"></a>第 2 步：使用循环嵌套打印小星星</h4><p><strong>知识点</strong> 对 <code>print</code> 函数的使用做一个增强</p><ul><li><p>在默认情况下，<code>print</code> 函数输出内容之后，会自动在内容末尾增加换行</p></li><li><p>如果不希望末尾增加换行，可以在 <code>print</code> 函数输出内容的后面增加 <code>, end=&quot;&quot;</code></p></li><li><p>其中 <code>&quot;&quot;</code> 中间可以指定 <code>print</code> 函数输出内容之后，继续希望显示的内容</p></li><li><p>语法格式如下：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 向控制台输出内容结束之后，不会换行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment"># 单纯的换行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>end=&quot;&quot;</code> 表示向控制台输出内容结束之后，不会换行</p></blockquote><p><strong>假设</strong> <code>Python</code> <strong>没有提供</strong> 字符串的 <code>*</code> 操作 <strong>拼接字符串</strong></p><p><strong>需求</strong></p><ul><li>在控制台连续输出五行 <code>*</code>，每一行星号的数量依次递增</li></ul><pre class="line-numbers language-none"><code class="language-none">***************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开发步骤</strong></p><ul><li>1&gt; 完成 5 行内容的简单输出</li><li>2&gt; 分析每行内部的 <code>*</code> 应该如何处理？<ul><li>每行显示的星星和当前所在的行数是一致的</li><li>嵌套一个小的循环，专门处理每一行中 <code>列</code> 的星星显示</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">row <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> row <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token comment"># 假设 python 没有提供字符串 * 操作</span>    <span class="token comment"># 在循环内部，再增加一个循环，实现每一行的 星星 打印</span>    col <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> col <span class="token operator">&lt;=</span> row<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        col <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 每一行星号输出完成后，再增加一个换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    row <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第-3-步：-九九乘法表"><a href="#第-3-步：-九九乘法表" class="headerlink" title="第 3 步： 九九乘法表"></a>第 3 步： 九九乘法表</h4><p><strong>需求</strong> 输出 九九乘法表，格式如下：</p><pre class="line-numbers language-none"><code class="language-none">1 * 1 &#x3D; 11 * 2 &#x3D; 22 * 2 &#x3D; 41 * 3 &#x3D; 32 * 3 &#x3D; 63 * 3 &#x3D; 91 * 4 &#x3D; 42 * 4 &#x3D; 83 * 4 &#x3D; 124 * 4 &#x3D; 161 * 5 &#x3D; 52 * 5 &#x3D; 103 * 5 &#x3D; 154 * 5 &#x3D; 205 * 5 &#x3D; 251 * 6 &#x3D; 62 * 6 &#x3D; 123 * 6 &#x3D; 184 * 6 &#x3D; 245 * 6 &#x3D; 306 * 6 &#x3D; 361 * 7 &#x3D; 72 * 7 &#x3D; 143 * 7 &#x3D; 214 * 7 &#x3D; 285 * 7 &#x3D; 356 * 7 &#x3D; 427 * 7 &#x3D; 491 * 8 &#x3D; 82 * 8 &#x3D; 163 * 8 &#x3D; 244 * 8 &#x3D; 325 * 8 &#x3D; 406 * 8 &#x3D; 487 * 8 &#x3D; 568 * 8 &#x3D; 641 * 9 &#x3D; 92 * 9 &#x3D; 183 * 9 &#x3D; 274 * 9 &#x3D; 365 * 9 &#x3D; 456 * 9 &#x3D; 547 * 9 &#x3D; 638 * 9 &#x3D; 729 * 9 &#x3D; 81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开发步骤</strong></p><ul><li><ol><li>打印 9 行小星星</li></ol></li></ul><pre class="line-numbers language-none"><code class="language-none">*********************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol start="2"><li>将每一个 <code>*</code> 替换成对应的行与列相乘</li></ol></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义起始行</span>row <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 最大打印 9 行</span><span class="token keyword">while</span> row <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>    <span class="token comment"># 定义起始列</span>    col <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># 最大打印 row 列</span>    <span class="token keyword">while</span> col <span class="token operator">&lt;=</span> row<span class="token punctuation">:</span>        <span class="token comment"># end = ""，表示输出结束后，不换行</span>        <span class="token comment"># "\t" 可以在控制台输出一个制表符，协助在输出文本时对齐</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>col<span class="token punctuation">,</span> row<span class="token punctuation">,</span> row <span class="token operator">*</span> col<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\t"</span><span class="token punctuation">)</span>        <span class="token comment"># 列数 + 1</span>        col <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 一行打印完成的换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment"># 行数 + 1</span>    row <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串中的转义字符</strong></p><ul><li><code>\t</code> 在控制台输出一个 <strong>制表符</strong>，协助在输出文本时 <strong>垂直方向</strong> 保持对齐</li><li><code>\n</code> 在控制台输出一个 <strong>换行符</strong></li></ul><blockquote><p><strong>制表符</strong> 的功能是在不使用表格的情况下在 <strong>垂直方向</strong> 按列对齐文本</p></blockquote><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\\</td><td>反斜杠符号</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr></tbody></table><h1 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h1><h2 id="目标-13"><a href="#目标-13" class="headerlink" title="目标"></a>目标</h2><ul><li>函数的快速体验</li><li>函数的基本使用</li><li>函数的参数</li><li>函数的返回值</li><li>函数的嵌套调用</li><li>在模块中定义函数</li></ul><h2 id="01-函数的快速体验"><a href="#01-函数的快速体验" class="headerlink" title="01. 函数的快速体验"></a>01. 函数的快速体验</h2><h3 id="1-1-快速体验"><a href="#1-1-快速体验" class="headerlink" title="1.1 快速体验"></a>1.1 快速体验</h3><ul><li>所谓<strong>函数</strong>，就是把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li><li>函数的使用包含两个步骤：<ol><li>定义函数 —— <strong>封装</strong> 独立的功能</li><li>调用函数 —— 享受 <strong>封装</strong> 的成果</li></ol></li><li><strong>函数的作用</strong>，在开发程序时，使用函数可以提高编写的效率以及代码的 <strong>重用</strong></li></ul><p><strong>演练步骤</strong></p><ol><li>新建 <code>04_函数</code> 项目</li><li>复制之前完成的 <strong>乘法表</strong> 文件</li><li>修改文件，增加函数定义 <code>multiple_table():</code></li><li>新建另外一个文件，使用 <code>import</code> 导入并且调用函数</li></ol><h2 id="02-函数基本使用"><a href="#02-函数基本使用" class="headerlink" title="02. 函数基本使用"></a>02. 函数基本使用</h2><h3 id="2-1-函数的定义"><a href="#2-1-函数的定义" class="headerlink" title="2.1 函数的定义"></a>2.1 函数的定义</h3><p>定义函数的格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    函数封装的代码    ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>def</code> 是英文 <code>define</code> 的缩写</li><li><strong>函数名称</strong> 应该能够表达 <strong>函数封装代码</strong> 的功能，方便后续的调用</li><li><strong>函数名称</strong> 的命名应该 <strong>符合</strong> <strong>标识符的命名规则</strong><ul><li>可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li><li><strong>不能以数字开头</strong></li><li><strong>不能与关键字重名</strong></li></ul></li></ol><h3 id="2-2-函数调用"><a href="#2-2-函数调用" class="headerlink" title="2.2 函数调用"></a>2.2 函数调用</h3><p>调用函数很简单的，通过 <code>函数名()</code> 即可完成对函数的调用</p><h3 id="2-3-第一个函数演练"><a href="#2-3-第一个函数演练" class="headerlink" title="2.3 第一个函数演练"></a>2.3 第一个函数演练</h3><p><strong>需求</strong></p><ul><li><ol><li>编写一个打招呼 <code>say_hello</code> 的函数，封装三行打招呼的代码</li></ol></li><li><ol start="2"><li>在函数下方调用打招呼的代码</li></ol></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token comment"># 解释器知道这里定义了一个函数</span><span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello 1"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello 2"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello 3"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment"># 只有在调用函数时，之前定义的函数才会被执行</span><span class="token comment"># 函数执行完成之后，会重新回到之前的程序中，继续执行后续的代码</span>say_hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>用 <strong>单步执行 F8 和 F7</strong> 观察以下代码的执行过程</p></blockquote><ul><li>定义好函数之后，只表示这个函数封装了一段代码而已</li><li>如果不主动调用函数，函数是不会主动执行的</li></ul><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ul><li><p>能否将 <strong>函数调用</strong> 放在 <strong>函数定义</strong> 的上方？</p><ul><li>不能！</li><li>因为在 <strong>使用函数名</strong> 调用函数之前，必须要保证 <code>Python</code> 已经知道函数的存在</li><li>否则控制台会提示 <code>NameError: name &#39;say_hello&#39; is not defined</code> (<strong>名称错误：say_hello 这个名字没有被定义</strong>)</li></ul></li></ul><h3 id="2-4-PyCharm-的调试工具"><a href="#2-4-PyCharm-的调试工具" class="headerlink" title="2.4 PyCharm 的调试工具"></a>2.4 PyCharm 的调试工具</h3><ul><li><strong>F8 Step Over</strong> 可以单步执行代码，会把函数调用看作是一行代码直接执行</li><li><strong>F7 Step Into</strong> 可以单步执行代码，如果是函数，会进入函数内部</li></ul><h3 id="2-5-函数的文档注释"><a href="#2-5-函数的文档注释" class="headerlink" title="2.5 函数的文档注释"></a>2.5 函数的文档注释</h3><ul><li>在开发中，如果希望给函数添加注释，应该在 <strong>定义函数</strong> 的下方，使用 <strong>连续的三对引号</strong></li><li>在 <strong>连续的三对引号</strong> 之间编写对函数的说明文字</li><li>在 <strong>函数调用</strong> 位置，使用快捷键 <code>CTRL + Q</code> 可以查看函数的说明信息</li></ul><blockquote><p>注意：因为 <strong>函数体相对比较独立</strong>，<strong>函数定义的上方</strong>，应该和其他代码（包括注释）保留 <strong>两个空行</strong></p></blockquote><h2 id="03-函数的参数"><a href="#03-函数的参数" class="headerlink" title="03. 函数的参数"></a>03. 函数的参数</h2><p><strong>演练需求</strong></p><ol><li>开发一个 <code>sum_2_num</code> 的函数</li><li>函数能够实现 <strong>两个数字的求和</strong> 功能</li></ol><p>演练代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_2_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num1 <span class="token operator">=</span> <span class="token number">10</span>    num2 <span class="token operator">=</span> <span class="token number">20</span>    result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>sum_2_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考一下存在什么问题</strong></p><blockquote><p>函数只能处理 <strong>固定数值</strong> 的相加</p></blockquote><p><strong>如何解决？</strong></p><ul><li>如果能够把需要计算的数字，在调用函数时，传递到函数内部就好了！</li></ul><h3 id="3-1-函数参数的使用"><a href="#3-1-函数参数的使用" class="headerlink" title="3.1 函数参数的使用"></a>3.1 函数参数的使用</h3><ul><li>在函数名的后面的小括号内部填写 <strong>参数</strong></li><li>多个参数之间使用 <code>,</code> 分隔</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_2_num</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>sum_2_num<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-参数的作用"><a href="#3-2-参数的作用" class="headerlink" title="3.2 参数的作用"></a>3.2 参数的作用</h3><ul><li><strong>函数</strong>，把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li><li><strong>函数的参数</strong>，增加函数的 <strong>通用性</strong>，针对 <strong>相同的数据处理逻辑</strong>，能够 <strong>适应更多的数据</strong><ol><li>在函数 <strong>内部</strong>，把参数当做 <strong>变量</strong> 使用，进行需要的数据处理</li><li>函数调用时，按照函数定义的<strong>参数顺序</strong>，把 <strong>希望在函数内部处理的数据</strong>，<strong>通过参数</strong> 传递</li></ol></li></ul><h3 id="3-3-形参和实参"><a href="#3-3-形参和实参" class="headerlink" title="3.3 形参和实参"></a>3.3 形参和实参</h3><ul><li><strong>形参</strong>：<strong>定义</strong> 函数时，小括号中的参数，是用来接收参数用的，在函数内部 <strong>作为变量使用</strong></li><li><strong>实参</strong>：<strong>调用</strong> 函数时，小括号中的参数，是用来把数据传递到 <strong>函数内部</strong> 用的</li></ul><h2 id="04-函数的返回值"><a href="#04-函数的返回值" class="headerlink" title="04. 函数的返回值"></a>04. 函数的返回值</h2><ul><li>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong>，以便调用者针对具体的结果做后续的处理</li><li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li><li>在函数中使用 <code>return</code> 关键字可以返回结果</li><li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li></ul><blockquote><p>注意：<code>return</code> 表示返回，后续的代码都不会被执行</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_2_num</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""对两个数字的求和"""</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token comment"># 调用函数，并使用 result 变量接收计算结果</span>result <span class="token operator">=</span> sum_2_num<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"计算结果是 %d"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="05-函数的嵌套调用"><a href="#05-函数的嵌套调用" class="headerlink" title="05. 函数的嵌套调用"></a>05. 函数的嵌套调用</h2><ul><li>一个函数里面 <strong>又调用</strong> 了 <strong>另外一个函数</strong>，这就是 <strong>函数嵌套调用</strong></li><li>如果函数 <code>test2</code> 中，调用了另外一个函数 <code>test1</code><ul><li>那么执行到调用 <code>test1</code> 函数时，会先把函数 <code>test1</code> 中的任务都执行完</li><li>才会回到 <code>test2</code> 中调用函数 <code>test1</code> 的位置，继续执行后续的代码</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test 1"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test 2"</span><span class="token punctuation">)</span>        test1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数嵌套的演练-——-打印分隔线"><a href="#函数嵌套的演练-——-打印分隔线" class="headerlink" title="函数嵌套的演练 —— 打印分隔线"></a>函数嵌套的演练 —— 打印分隔线</h3><blockquote><p>体会一下工作中 <strong>需求是多变</strong> 的</p></blockquote><p><strong>需求 1</strong></p><ul><li>定义一个 <code>print_line</code> 函数能够打印 <code>*</code> 组成的 <strong>一条分隔线</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_line</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>需求 2</strong></p><ul><li>定义一个函数能够打印 <strong>由任意字符组成</strong> 的分隔线</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_line</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>char <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需求 3</strong></p><ul><li>定义一个函数能够打印 <strong>任意重复次数</strong> 的分隔线</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_line</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>char <span class="token operator">*</span> times<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>需求 4</strong></p><ul><li>定义一个函数能够打印 <strong>5 行</strong> 的分隔线，分隔线要求符合<strong>需求 3</strong></li></ul><blockquote><p>提示：工作中针对需求的变化，应该冷静思考，<strong>不要轻易修改之前已经完成的，能够正常执行的函数</strong>！</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_line</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>char <span class="token operator">*</span> times<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_lines</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">:</span>    row <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> row <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>        print_line<span class="token punctuation">(</span>char<span class="token punctuation">,</span> times<span class="token punctuation">)</span>        row <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="06-使用模块中的函数"><a href="#06-使用模块中的函数" class="headerlink" title="06. 使用模块中的函数"></a>06. 使用模块中的函数</h2><blockquote><p><strong>模块是 Python 程序架构的一个核心概念</strong></p></blockquote><ul><li><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要 <strong>导入 import</strong> 这个模块</li><li>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></li><li>在模块中定义的 <strong>全局变量</strong> 、 <strong>函数</strong> 都是模块能够提供给外界直接使用的工具</li></ul><h3 id="6-1-第一个模块体验"><a href="#6-1-第一个模块体验" class="headerlink" title="6.1 第一个模块体验"></a>6.1 第一个模块体验</h3><p><strong>步骤</strong></p><ul><li>新建 <code>hm_10_分隔线模块.py</code><ul><li>复制 <code>hm_09_打印多条分隔线.py</code> 中的内容，<strong>最后一行 <code>print</code> 代码除外</strong></li><li>增加一个字符串变量</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"黑马程序员"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>新建 <code>hm_10_体验模块.py</code> 文件，并且编写以下代码：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hm_10_分隔线模块hm_10_分隔线模块<span class="token punctuation">.</span>print_line<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hm_10_分隔线模块<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="体验小结"><a href="#体验小结" class="headerlink" title="体验小结"></a>体验小结</h4><ul><li>可以 <strong>在一个 Python 文件</strong> 中 <strong>定义 变量 或者 函数</strong></li><li>然后在 <strong>另外一个文件中</strong> 使用 <code>import</code> 导入这个模块</li><li>导入之后，就可以使用 <code>模块名.变量</code> &#x2F; <code>模块名.函数</code> 的方式，使用这个模块中定义的变量或者函数</li></ul><blockquote><p><strong>模块</strong>可以让 <strong>曾经编写过的代码</strong> 方便的被 <strong>复用</strong>！</p></blockquote><h3 id="6-2-模块名也是一个标识符"><a href="#6-2-模块名也是一个标识符" class="headerlink" title="6.2 模块名也是一个标识符"></a>6.2 模块名也是一个标识符</h3><ul><li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li><li><strong>不能以数字开头</strong></li><li><strong>不能与关键字重名</strong></li></ul><blockquote><p>注意：如果在给 Python 文件起名时，<strong>以数字开头</strong> 是无法在 <code>PyCharm</code> 中通过导入这个模块的</p></blockquote><h3 id="6-3-Pyc-文件（了解）"><a href="#6-3-Pyc-文件（了解）" class="headerlink" title="6.3 Pyc 文件（了解）"></a>6.3 Pyc 文件（了解）</h3><blockquote><p><code>C</code> 是 <code>compiled</code> <strong>编译过</strong> 的意思</p></blockquote><p><strong>操作步骤</strong></p><ol><li>浏览程序目录会发现一个 <code>__pycache__</code> 的目录</li><li>目录下会有一个 <code>hm_10_分隔线模块.cpython-35.pyc</code> 文件，<code>cpython-35</code> 表示 <code>Python</code> 解释器的版本</li><li>这个 <code>pyc</code> 文件是由 Python 解释器将 <strong>模块的源码</strong> 转换为 <strong>字节码</strong><ul><li><code>Python</code> 这样保存 <strong>字节码</strong> 是作为一种启动 <strong>速度的优化</strong></li></ul></li></ol><p><strong>字节码</strong></p><ul><li><p><code>Python</code> 在解释源程序时是分成两个步骤的</p><ol><li>首先处理源代码，<strong>编译</strong> 生成一个二进制 <strong>字节码</strong></li><li>再对 <strong>字节码</strong> 进行处理，才会生成 CPU 能够识别的 <strong>机器码</strong></li></ol></li><li><p>有了模块的字节码文件之后，下一次运行程序时，如果在 <strong>上次保存字节码之后</strong> 没有修改过源代码，Python 将会加载 .pyc 文件并跳过编译这个步骤</p></li><li><p>当 <code>Python</code> 重编译时，它会自动检查源文件和字节码文件的时间戳</p></li><li><p>如果你又修改了源代码，下次程序运行时，字节码将自动重新创建</p></li></ul><blockquote><p>提示：有关模块以及模块的其他导入方式，后续课程还会逐渐展开！</p><p><strong>模块是 Python 程序架构的一个核心概念</strong></p></blockquote><h1 id="高级变量类型"><a href="#高级变量类型" class="headerlink" title="高级变量类型"></a>高级变量类型</h1><h2 id="目标-14"><a href="#目标-14" class="headerlink" title="目标"></a>目标</h2><ul><li>列表</li><li>元组</li><li>字典</li><li>字符串</li><li>公共方法</li><li>变量高级</li></ul><h3 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h3><ul><li><p>Python 中数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></p></li><li><p>数字型</p><ul><li>整型 (<code>int</code>)</li><li>浮点型（<code>float</code>）</li><li>布尔型（<code>bool</code>） <ul><li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li><li>假 <code>False</code> <code>0</code></li></ul></li><li>复数型 (<code>complex</code>)<ul><li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li></ul></li></ul></li><li><p>非数字型</p><ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ul></li><li><p>在 <code>Python</code> 中，所有 <strong>非数字型变量</strong> 都支持以下特点：</p><ol><li>都是一个 <strong>序列</strong> <code>sequence</code>，也可以理解为 <strong>容器</strong></li><li><strong>取值</strong> <code>[]</code></li><li><strong>遍历</strong> <code>for in</code></li><li><strong>计算长度</strong>、<strong>最大&#x2F;最小值</strong>、<strong>比较</strong>、<strong>删除</strong></li><li><strong>链接</strong> <code>+</code> 和 <strong>重复</strong> <code>*</code></li><li><strong>切片</strong></li></ol></li></ul><h2 id="01-列表"><a href="#01-列表" class="headerlink" title="01. 列表"></a>01. 列表</h2><h3 id="1-1-列表的定义"><a href="#1-1-列表的定义" class="headerlink" title="1.1 列表的定义"></a>1.1 列表的定义</h3><ul><li><code>List</code>（列表） 是 <code>Python</code> 中使用 <strong>最频繁</strong> 的数据类型，在其他语言中通常叫做 <strong>数组</strong></li><li>专门用于存储 <strong>一串 信息</strong></li><li>列表用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>列表的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>列表</strong> 中的位置编号，<strong>索引</strong> 又可以被称为 <strong>下标</strong></li></ul></li></ul><blockquote><p>注意：从列表中取值时，如果 <strong>超出索引范围</strong>，程序会报错</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030308.png" alt="001_列表示意图" loading="lazy"></p><h3 id="1-2-列表常用操作"><a href="#1-2-列表常用操作" class="headerlink" title="1.2 列表常用操作"></a>1.2 列表常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>列表</strong>，例如：<code>name_list = []</code></li><li>输入 <code>name_list.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>列表</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">In [1]: name_list.name_list.append   name_list.count    name_list.insert   name_list.reversename_list.clear    name_list.extend   name_list.pop      name_list.sortname_list.copy     name_list.index    name_list.remove <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>序号</th><th>分类</th><th>关键字 &#x2F; 函数 &#x2F; 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td>列表[索引] &#x3D; 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse&#x3D;True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h4 id="del-关键字（科普）"><a href="#del-关键字（科普）" class="headerlink" title="del 关键字（科普）"></a>del 关键字（科普）</h4><ul><li>使用 <code>del</code> 关键字(<code>delete</code>) 同样可以删除列表中元素</li><li><code>del</code> 关键字本质上是用来 <strong>将一个变量从内存中删除的</strong></li><li>如果使用 <code>del</code> 关键字将变量从内存中删除，后续的代码就不能再使用这个变量了</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> name_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在日常开发中，要从列表删除数据，建议 <strong>使用列表提供的方法</strong></p></blockquote><h4 id="关键字、函数和方法（科普）"><a href="#关键字、函数和方法（科普）" class="headerlink" title="关键字、函数和方法（科普）"></a>关键字、函数和方法（科普）</h4><ul><li><strong>关键字</strong> 是 Python 内置的、具有特殊意义的标识符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> keywordIn <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>关键字后面不需要使用括号</p></blockquote><ul><li><strong>函数</strong> 封装了独立功能，可以直接调用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>函数需要死记硬背</p></blockquote><ul><li><strong>方法</strong> 和函数类似，同样是封装了独立的功能</li><li><strong>方法</strong> 需要通过 <strong>对象</strong> 来调用，表示针对这个 <strong>对象</strong> 要做的操作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">对象<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在变量后面输入 <code>.</code>，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多</p></blockquote><h3 id="1-3-循环遍历"><a href="#1-3-循环遍历" class="headerlink" title="1.3 循环遍历"></a>1.3 循环遍历</h3><ul><li><p><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>列表</strong> 中获取数据</p><ul><li>在 <strong>循环体内部</strong> 针对 <strong>每一个元素</strong>，执行相同的操作</li></ul></li><li><p>在 <code>Python</code> 中为了提高列表的遍历效率，专门提供的 <strong>迭代 iteration 遍历</strong></p></li><li><p>使用 <code>for</code> 就能够实现迭代遍历</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># for 循环内部使用的变量 in 列表</span><span class="token keyword">for</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>    循环内部针对列表元素进行操作    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030309.png" alt="002_forin循环流程图-w420" loading="lazy"></p><h3 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4 应用场景"></a>1.4 <strong>应用场景</strong></h3><ul><li>尽管 <code>Python</code> 的 <strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li><li>但是在开发中，更多的应用场景是<ol><li><strong>列表</strong> 存储相同类型的数据</li><li>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ol></li></ul><h2 id="02-元组"><a href="#02-元组" class="headerlink" title="02. 元组"></a>02. 元组</h2><h3 id="2-1-元组的定义"><a href="#2-1-元组的定义" class="headerlink" title="2.1 元组的定义"></a>2.1 元组的定义</h3><ul><li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong><ul><li><strong>元组</strong> 表示多个元素组成的序列</li><li><strong>元组</strong> 在 <code>Python</code> 开发中，有特定的应用场景</li></ul></li><li>用于存储 <strong>一串 信息</strong>，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>元组用 <code>()</code> 定义</li><li>元组的 <strong>索引</strong> 从 <code>0</code> 开始<ul><li><strong>索引</strong> 就是数据在 <strong>元组</strong> 中的位置编号</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1.75</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建空元组"><a href="#创建空元组" class="headerlink" title="创建空元组"></a>创建空元组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="元组中-只包含一个元素-时，需要-在元素后面添加逗号"><a href="#元组中-只包含一个元素-时，需要-在元素后面添加逗号" class="headerlink" title="元组中 只包含一个元素 时，需要 在元素后面添加逗号"></a>元组中 <strong>只包含一个元素</strong> 时，需要 <strong>在元素后面添加逗号</strong></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030310.png" alt="003_元组示意图-w500" loading="lazy"></p><h3 id="2-2-元组常用操作"><a href="#2-2-元组常用操作" class="headerlink" title="2.2 元组常用操作"></a>2.2 元组常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>元组</strong>，例如：<code>info = ()</code></li><li>输入 <code>info.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>元组</strong> 能够使用的函数如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">info<span class="token punctuation">.</span>count  info<span class="token punctuation">.</span>index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>有关 <strong>元组</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h3 id="2-3-循环遍历"><a href="#2-3-循环遍历" class="headerlink" title="2.3 循环遍历"></a>2.3 循环遍历</h3><ul><li><strong>取值</strong> 就是从 <strong>元组</strong> 中获取存储在指定位置的数据</li><li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>元组</strong> 中获取数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># for 循环内部使用的变量 in 元组</span><span class="token keyword">for</span> item <span class="token keyword">in</span> info<span class="token punctuation">:</span>    循环内部针对元组元素进行操作    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>在 <code>Python</code> 中，可以使用 <code>for</code> 循环遍历所有非数字型类型的变量：<strong>列表</strong>、<strong>元组</strong>、<strong>字典</strong> 以及 <strong>字符串</strong></li><li>提示：在实际开发中，除非 <strong>能够确认元组中的数据类型</strong>，否则针对元组的循环遍历需求并不是很多</li></ul></blockquote><h3 id="2-4-应用场景"><a href="#2-4-应用场景" class="headerlink" title="2.4 应用场景"></a>2.4 应用场景</h3><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>元组</strong></li><li>但是在开发中，更多的应用场景是：<ul><li><strong>函数的 参数 和 返回值</strong>，一个函数可以接收 <strong>任意多个参数</strong>，或者 <strong>一次返回多个数据</strong><ul><li>有关 <strong>函数的参数 和 返回值</strong>，在后续 <strong>函数高级</strong> 给大家介绍</li></ul></li><li><strong>格式字符串</strong>，格式化字符串后面的 <code>()</code> 本质上就是一个元组</li><li><strong>让列表不可以被修改</strong>，以保护数据安全</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 的年龄是 %d"</span> <span class="token operator">%</span> info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="元组和列表之间的转换"><a href="#元组和列表之间的转换" class="headerlink" title="元组和列表之间的转换"></a>元组和列表之间的转换</h4><ul><li>使用 <code>list</code> 函数可以把元组转换成列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span>元组<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 <code>tuple</code> 函数可以把列表转换成元组</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span><span class="token punctuation">(</span>列表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="03-字典"><a href="#03-字典" class="headerlink" title="03. 字典"></a>03. 字典</h2><h3 id="3-1-字典的定义"><a href="#3-1-字典的定义" class="headerlink" title="3.1 字典的定义"></a>3.1 字典的定义</h3><ul><li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li><li>字典同样可以用来 <strong>存储多个数据</strong><ul><li>通常用于存储 <strong>描述一个 <code>物体</code> 的相关信息</strong></li></ul></li><li>和列表的区别<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典用 <code>&#123;&#125;</code> 定义</li><li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul><li><strong>键</strong> <code>key</code> 是索引</li><li><strong>值</strong> <code>value</code> 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">xiaoming <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>            <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.75</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030311.png" alt="002_字典示意图" loading="lazy"></p><h3 id="3-2-字典常用操作"><a href="#3-2-字典常用操作" class="headerlink" title="3.2 字典常用操作"></a>3.2 字典常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字典</strong>，例如：<code>xiaoming = &#123;&#125;</code></li><li>输入 <code>xiaoming.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字典</strong> 能够使用的函数如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">In [1]: xiaoming.xiaoming.clear       xiaoming.items       xiaoming.setdefaultxiaoming.copy        xiaoming.keys        xiaoming.updatexiaoming.fromkeys    xiaoming.pop         xiaoming.valuesxiaoming.get         xiaoming.popitem    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有关 <strong>字典</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p></blockquote><h3 id="3-3-循环遍历"><a href="#3-3-循环遍历" class="headerlink" title="3.3 循环遍历"></a>3.3 循环遍历</h3><ul><li><strong>遍历</strong> 就是 <strong>依次</strong> 从 <strong>字典</strong> 中获取所有键值对</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># for 循环内部使用的 `key 的变量` in 字典</span><span class="token keyword">for</span> k <span class="token keyword">in</span> xiaoming<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> xiaoming<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多</p></blockquote><h3 id="3-4-应用场景"><a href="#3-4-应用场景" class="headerlink" title="3.4 应用场景"></a>3.4 <strong>应用场景</strong></h3><ul><li>尽管可以使用 <code>for in</code> 遍历 <strong>字典</strong></li><li>但是在开发中，更多的应用场景是：<ul><li>使用 <strong>多个键值对</strong>，存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> —— 描述更复杂的数据信息</li><li>将 <strong>多个字典</strong> 放在 <strong>一个列表</strong> 中，再进行遍历，在循环体内部针对每一个字典进行 <strong>相同的处理</strong></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">card_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>              <span class="token string">"qq"</span><span class="token punctuation">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span>              <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"110"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>              <span class="token string">"qq"</span><span class="token punctuation">:</span> <span class="token string">"54321"</span><span class="token punctuation">,</span>              <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"10086"</span><span class="token punctuation">&#125;</span>             <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-字符串"><a href="#04-字符串" class="headerlink" title="04. 字符串"></a>04. 字符串</h2><h3 id="4-1-字符串的定义"><a href="#4-1-字符串的定义" class="headerlink" title="4.1 字符串的定义"></a>4.1 字符串的定义</h3><ul><li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li><li>在 Python 中可以使用 <strong>一对双引号</strong> <code>&quot;</code> 或者 <strong>一对单引号</strong> <code>&#39;</code> 定义一个字符串<ul><li>虽然可以使用 <code>\&quot;</code> 或者 <code>\&#39;</code> 做字符串的转义，但是在实际开发中：<ul><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li><li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li></ul></li></ul></li><li>可以使用 <strong>索引</strong> 获取一个字符串中 <strong>指定位置的字符</strong>，索引计数从 <strong>0</strong> 开始</li><li>也可以使用 <code>for</code> <strong>循环遍历</strong> 字符串中每一个字符</li></ul><blockquote><p>大多数编程语言都是用 <code>&quot;</code> 来定义字符串</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">string <span class="token operator">=</span> <span class="token string">"Hello Python"</span><span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030312.png" alt="005_字符串示意图-w500" loading="lazy"></p><h3 id="4-2-字符串的常用操作"><a href="#4-2-字符串的常用操作" class="headerlink" title="4.2 字符串的常用操作"></a>4.2 字符串的常用操作</h3><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字符串</strong>，例如：<code>hello_str = &quot;&quot;</code></li><li>输入 <code>hello_str.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字符串</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">In [1]: hello_str.hello_str.capitalize    hello_str.isidentifier  hello_str.rindexhello_str.casefold      hello_str.islower       hello_str.rjusthello_str.center        hello_str.isnumeric     hello_str.rpartitionhello_str.count         hello_str.isprintable   hello_str.rsplithello_str.encode        hello_str.isspace       hello_str.rstriphello_str.endswith      hello_str.istitle       hello_str.splithello_str.expandtabs    hello_str.isupper       hello_str.splitlineshello_str.find          hello_str.join          hello_str.startswithhello_str.format        hello_str.ljust         hello_str.striphello_str.format_map    hello_str.lower         hello_str.swapcasehello_str.index         hello_str.lstrip        hello_str.titlehello_str.isalnum       hello_str.maketrans     hello_str.translatehello_str.isalpha       hello_str.partition     hello_str.upperhello_str.isdecimal     hello_str.replace       hello_str.zfillhello_str.isdigit       hello_str.rfind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！</p></blockquote><h4 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table><h4 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start&#x3D;0, end&#x3D;len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start&#x3D;0, end&#x3D;len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start&#x3D;0, end&#x3D;len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start&#x3D;0, end&#x3D;len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num&#x3D;string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table><h4 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table><h4 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h4 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table><h4 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str&#x3D;””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table><h3 id="4-3-字符串的切片"><a href="#4-3-字符串的切片" class="headerlink" title="4.3 字符串的切片"></a>4.3 字符串的切片</h3><ul><li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030313.png" alt="006_字符串索引示意图" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none">字符串[开始索引:结束索引:步长]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：</p><ol><li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> &#x3D;&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul><li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li></ul></li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li></ol><h4 id="索引的顺序和倒序"><a href="#索引的顺序和倒序" class="headerlink" title="索引的顺序和倒序"></a>索引的顺序和倒序</h4><ul><li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li><li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul><li>最右边的索引值是 <strong>-1</strong>，依次递减</li></ul></li></ul><p><strong>演练需求</strong></p><ul><li><ol><li>截取从 2 ~ 5 位置 的字符串</li></ol></li><li><ol start="2"><li>截取从 2 ~ <code>末尾</code> 的字符串</li></ol></li><li><ol start="3"><li>截取从 <code>开始</code> ~ 5 位置 的字符串</li></ol></li><li><ol start="4"><li>截取完整的字符串</li></ol></li><li><ol start="5"><li>从开始位置，每隔一个字符截取字符串</li></ol></li><li><ol start="6"><li>从索引 1 开始，每隔一个取一个</li></ol></li><li><ol start="7"><li>截取从 2 ~ <code>末尾 - 1</code> 的字符串</li></ol></li><li><ol start="8"><li>截取字符串末尾两个字符</li></ol></li><li><ol start="9"><li>字符串的逆序（面试题）</li></ol></li></ul><p><strong>答案</strong></p><pre class="line-numbers language-none"><code class="language-none">num_str &#x3D; &quot;0123456789&quot;# 1. 截取从 2 ~ 5 位置 的字符串print(num_str[2:6])# 2. 截取从 2 ~ &#96;末尾&#96; 的字符串print(num_str[2:])# 3. 截取从 &#96;开始&#96; ~ 5 位置 的字符串print(num_str[:6])# 4. 截取完整的字符串print(num_str[:])# 5. 从开始位置，每隔一个字符截取字符串print(num_str[::2])# 6. 从索引 1 开始，每隔一个取一个print(num_str[1::2])# 倒序切片# -1 表示倒数第一个字符print(num_str[-1])# 7. 截取从 2 ~ &#96;末尾 - 1&#96; 的字符串print(num_str[2:-1])# 8. 截取字符串末尾两个字符print(num_str[-2:])# 9. 字符串的逆序（面试题）print(num_str[::-1])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="05-公共方法"><a href="#05-公共方法" class="headerlink" title="05. 公共方法"></a>05. 公共方法</h2><h3 id="5-1-Python-内置函数"><a href="#5-1-Python-内置函数" class="headerlink" title="5.1 Python 内置函数"></a>5.1 Python 内置函数</h3><p>Python 包含了以下内置函数：</p><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>cmp(item1, item2)</td><td>比较两个值，-1 小于&#x2F;0 相等&#x2F;1 大于</td><td>Python 3.x 取消了 cmp 函数</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><strong>字符串</strong> 比较符合以下规则： “0” &lt; “A” &lt; “a”</li></ul><h3 id="5-2-切片"><a href="#5-2-切片" class="headerlink" title="5.2 切片"></a>5.2 切片</h3><p>| 描述 | Python 表达式 | 结果 | 支持的数据类型 |<br>| :—: | — | — | — | — |<br>| 切片 | “0123456789”[::-2] | “97531” | 字符串、列表、元组 |</p><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul><h3 id="5-3-运算符"><a href="#5-3-运算符" class="headerlink" title="5.3 运算符"></a>5.3 运算符</h3><table><thead><tr><th align="center">运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td align="center">+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td align="center">*</td><td>[“Hi!”] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td align="center">in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="center">&gt; &gt;&#x3D; &#x3D;&#x3D; &lt; &lt;&#x3D;</td><td>(1, 2, 3) &lt; (2, 2, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><code>in</code> 在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li><li><code>in</code> 和 <code>not in</code> 被称为 <strong>成员运算符</strong></li></ul><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>成员运算符用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td><td><code>3 in (1, 2, 3)</code> 返回 <code>True</code></td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td><td><code>3 not in (1, 2, 3)</code> 返回 <code>False</code></td></tr></tbody></table><p>注意：在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></p><h3 id="5-4-完整的-for-循环语法"><a href="#5-4-完整的-for-循环语法" class="headerlink" title="5.4 完整的 for 循环语法"></a>5.4 完整的 for 循环语法</h3><ul><li>在 <code>Python</code> 中完整的 <code>for 循环</code> 的语法如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 集合<span class="token punctuation">:</span>        循环体代码<span class="token keyword">else</span><span class="token punctuation">:</span>    没有通过 <span class="token keyword">break</span> 退出循环，循环结束后，会执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>在 <strong>迭代遍历</strong> 嵌套的数据类型时，例如 <strong>一个列表包含了多个字典</strong></li><li>需求：要判断 某一个字典中 是否存在 指定的 值 <ul><li>如果 <strong>存在</strong>，提示并且退出循环</li><li>如果 <strong>不存在</strong>，在 <strong>循环整体结束</strong> 后，希望 <strong>得到一个统一的提示</strong></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"阿土"</span><span class="token punctuation">,</span>     <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>     <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>     <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">,</span>     <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">75.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小美"</span><span class="token punctuation">,</span>     <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>     <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>     <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.6</span><span class="token punctuation">,</span>     <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">45.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>find_name <span class="token operator">=</span> <span class="token string">"阿土"</span><span class="token keyword">for</span> stu_dict <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu_dict<span class="token punctuation">)</span>    <span class="token comment"># 判断当前遍历的字典中姓名是否为find_name</span>    <span class="token keyword">if</span> stu_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> find_name<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到了"</span><span class="token punctuation">)</span>        <span class="token comment"># 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="综合应用-——-名片管理系统"><a href="#综合应用-——-名片管理系统" class="headerlink" title="综合应用 —— 名片管理系统"></a>综合应用 —— 名片管理系统</h1><h2 id="目标-15"><a href="#目标-15" class="headerlink" title="目标"></a>目标</h2><p>综合应用已经学习过的知识点：</p><ul><li><strong>变量</strong></li><li><strong>流程控制</strong></li><li><strong>函数</strong></li><li><strong>模块</strong></li></ul><p>开发 <strong>名片管理系统</strong></p><h2 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h2><ul><li><ol><li>程序启动，显示名片管理系统欢迎界面，并显示功能菜单</li></ol></li></ul><pre class="line-numbers language-none"><code class="language-none">**************************************************欢迎使用【名片管理系统】V1.01. 新建名片2. 显示全部3. 查询名片0. 退出系统**************************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol start="2"><li>用户用数字选择不同的功能</li></ol></li><li><ol start="3"><li>根据功能选择，执行不同的功能</li></ol></li><li><ol start="4"><li>用户名片需要记录用户的 <strong>姓名</strong>、<strong>电话</strong>、<strong>QQ</strong>、<strong>邮件</strong></li></ol></li><li><ol start="5"><li>如果查询到指定的名片，用户可以选择 <strong>修改</strong> 或者 <strong>删除</strong> 名片</li></ol></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>框架搭建</li><li>新增名片</li><li>显示所有名片</li><li>查询名片</li><li>查询成功后修改、删除名片</li><li>让 Python 程序能够直接运行</li></ol><h2 id="01-框架搭建"><a href="#01-框架搭建" class="headerlink" title="01. 框架搭建"></a>01. 框架搭建</h2><p><strong>目标</strong></p><ul><li>搭建名片管理系统 <strong>框架结构</strong><ol><li><strong>准备文件</strong>，确定文件名，保证能够 <strong>在需要的位置</strong> 编写代码</li><li>编写 <strong>主运行循环</strong>，实现基本的 <strong>用户输入和判断</strong></li></ol></li></ul><h3 id="1-1-文件准备"><a href="#1-1-文件准备" class="headerlink" title="1.1 文件准备"></a>1.1 文件准备</h3><ol><li>新建 <code>cards_main.py</code> 保存 <strong>主程序功能代码</strong><ul><li>程序的入口</li><li>每一次启动名片管理系统都通过 <code>main</code> 这个文件启动</li></ul></li><li>新建 <code>cards_tools.py</code> 保存 <strong>所有名片功能函数</strong><ul><li>将对名片的 <strong>新增</strong>、<strong>查询</strong>、<strong>修改</strong>、<strong>删除</strong> 等功能封装在不同的函数中</li></ul></li></ol><h3 id="1-2-编写主运行循环"><a href="#1-2-编写主运行循环" class="headerlink" title="1.2 编写主运行循环"></a>1.2 编写主运行循环</h3><ul><li>在 <code>cards_main</code> 中添加一个 <strong>无限循环</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># TODO(小明) 显示系统菜单</span>    action <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请选择操作功能："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您选择的操作是：%s"</span> <span class="token operator">%</span> action<span class="token punctuation">)</span>    <span class="token comment"># 根据用户输入决定后续的操作</span>    <span class="token keyword">if</span> action <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎再次使用【名片管理系统】"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入错误，请重新输入"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> action <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> action <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> action <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>使用 <code>in</code> 针对 <strong>列表</strong> 判断，避免使用 <code>or</code> 拼接复杂的逻辑条件</li><li>没有使用 <code>int</code> 转换用户输入，可以避免 <strong>一旦用户输入的不是数字</strong>，导致程序运行出错</li></ol><h4 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h4><ul><li><code>pass</code> 就是一个空语句，不做任何事情，一般用做占位语句</li><li>是为了保持程序结构的完整性</li></ul><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><ul><li>在开发软件时，如果 <strong>不希望程序执行后</strong> 立即退出</li><li>可以在程序中增加一个 <strong>无限循环</strong></li><li><strong>由用户来决定</strong> 退出程序的时机</li></ul><h4 id="TODO-注释"><a href="#TODO-注释" class="headerlink" title="TODO 注释"></a>TODO 注释</h4><ul><li>在 <code>#</code> 后跟上 <code>TODO</code>，用于标记需要去做的工作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># TODO(作者/邮件) 显示系统菜单</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-在-cards-tools-中增加四个新函数"><a href="#1-3-在-cards-tools-中增加四个新函数" class="headerlink" title="1.3 在 cards_tools 中增加四个新函数"></a>1.3 在 <code>cards_tools</code> 中增加四个新函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示菜单    """</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">new_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""新建名片    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"功能：新建名片"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示全部    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"功能：显示全部"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""搜索名片    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"功能：搜索名片"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-导入模块"><a href="#1-4-导入模块" class="headerlink" title="1.4 导入模块"></a>1.4 导入模块</h3><ul><li>在 <code>cards_main.py</code> 中使用 <code>import</code> 导入 <code>cards_tools</code> 模块</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cards_tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改 <code>while</code> 循环的代码如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cards_tools<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    cards_tools<span class="token punctuation">.</span>show_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>    action <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请选择操作功能："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您选择的操作是：%s"</span> <span class="token operator">%</span> action<span class="token punctuation">)</span>    <span class="token comment"># 根据用户输入决定后续的操作</span>    <span class="token keyword">if</span> action <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>            cards_tools<span class="token punctuation">.</span>new_card<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>            cards_tools<span class="token punctuation">.</span>show_all<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span>            cards_tools<span class="token punctuation">.</span>search_card<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎再次使用【名片管理系统】"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入错误，请重新输入："</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>至此：<code>cards_main</code> 中的所有代码全部开发完毕！</p></blockquote><h3 id="1-5-完成-show-menu-函数"><a href="#1-5-完成-show-menu-函数" class="headerlink" title="1.5 完成 show_menu 函数"></a>1.5 完成 <code>show_menu</code> 函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示菜单    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎使用【菜单管理系统】V1.0"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1. 新建名片"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2. 显示全部"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3. 查询名片"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0. 退出系统"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="02-保存名片数据的结构"><a href="#02-保存名片数据的结构" class="headerlink" title="02. 保存名片数据的结构"></a>02. 保存名片数据的结构</h2><p><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></p><ul><li>使用 <strong>字典</strong> 记录 <strong>每一张名片</strong> 的详细信息</li><li>使用 <strong>列表</strong> 统一记录所有的 <strong>名片字典</strong></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127030350.png" alt="001_名片管理系统全局列表-w500" loading="lazy"></p><h3 id="定义名片列表变量"><a href="#定义名片列表变量" class="headerlink" title="定义名片列表变量"></a>定义名片列表变量</h3><ul><li>在 <code>cards_tools</code> 文件的顶部增加一个 <strong>列表变量</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 所有名片记录的列表</span>card_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ol><li><strong>所有名片相关操作</strong>，都需要使用这个列表，所以应该 <strong>定义在程序的顶部</strong></li><li><strong>程序刚运行时，没有数据</strong>，所以是 <strong>空列表</strong></li></ol><h2 id="03-新增名片"><a href="#03-新增名片" class="headerlink" title="03. 新增名片"></a>03. 新增名片</h2><h3 id="3-1-功能分析"><a href="#3-1-功能分析" class="headerlink" title="3.1 功能分析"></a>3.1 功能分析</h3><ol><li>提示用户依次输入名片信息</li><li>将名片信息保存到一个字典</li><li>将字典添加到名片列表</li><li>提示名片添加完成</li></ol><h3 id="3-2-实现-new-card-方法"><a href="#3-2-实现-new-card-方法" class="headerlink" title="3.2 实现 new_card 方法"></a>3.2 实现 new_card 方法</h3><ul><li>根据步骤实现代码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">new_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""新建名片    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"功能：新建名片"</span><span class="token punctuation">)</span>    <span class="token comment"># 1. 提示用户输入名片信息</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span>    phone <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入电话："</span><span class="token punctuation">)</span>    qq <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入 QQ 号码："</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入邮箱："</span><span class="token punctuation">)</span>    <span class="token comment"># 2. 将用户信息保存到一个字典</span>    card_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                 <span class="token string">"phone"</span><span class="token punctuation">:</span> phone<span class="token punctuation">,</span>                 <span class="token string">"qq"</span><span class="token punctuation">:</span> qq<span class="token punctuation">,</span>                 <span class="token string">"email"</span><span class="token punctuation">:</span> email<span class="token punctuation">&#125;</span>    <span class="token comment"># 3. 将用户字典添加到名片列表</span>    card_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>card_dict<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>card_list<span class="token punctuation">)</span>        <span class="token comment"># 4. 提示添加成功信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功添加 %s 的名片"</span> <span class="token operator">%</span> card_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>技巧：在 <code>PyCharm</code> 中，可以使用 <code>SHIFT + F6</code> 统一修改变量名</p></blockquote><h2 id="04-显示所有名片"><a href="#04-显示所有名片" class="headerlink" title="04. 显示所有名片"></a>04. 显示所有名片</h2><h3 id="4-1-功能分析"><a href="#4-1-功能分析" class="headerlink" title="4.1 功能分析"></a>4.1 功能分析</h3><ul><li>循环遍历名片列表，顺序显示每一个字典的信息</li></ul><h3 id="4-2-基础代码实现"><a href="#4-2-基础代码实现" class="headerlink" title="4.2 基础代码实现"></a>4.2 基础代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示全部    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"功能：显示全部"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> card_dict <span class="token keyword">in</span> card_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>card_dict<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>显示效果不好！</li></ul><h3 id="4-3-增加标题和使用-t-显示"><a href="#4-3-增加标题和使用-t-显示" class="headerlink" title="4.3 增加标题和使用 \t 显示"></a>4.3 增加标题和使用 <code>\t</code> 显示</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示全部    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"功能：显示全部"</span><span class="token punctuation">)</span>    <span class="token comment"># 打印表头</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"电话"</span><span class="token punctuation">,</span> <span class="token string">"QQ"</span><span class="token punctuation">,</span> <span class="token string">"邮箱"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\t\t"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment"># 打印分隔线</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> card_dict <span class="token keyword">in</span> card_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s\t\t%s\t\t%s\t\t%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>card_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                        card_dict<span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                        card_dict<span class="token punctuation">[</span><span class="token string">"qq"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                        card_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-增加没有名片记录判断"><a href="#4-4-增加没有名片记录判断" class="headerlink" title="4.4 增加没有名片记录判断"></a>4.4 增加没有名片记录判断</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示全部    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"功能：显示全部"</span><span class="token punctuation">)</span>    <span class="token comment"># 1. 判断是否有名片记录</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>card_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"提示：没有任何名片记录"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>在函数中使用 <code>return</code> 表示返回</li><li>如果在 <code>return</code> 后没有跟任何内容，只是表示该函数执行到此就不再执行后续的代码</li></ul><h2 id="05-查询名片"><a href="#05-查询名片" class="headerlink" title="05. 查询名片"></a>05. 查询名片</h2><h3 id="5-1-功能分析"><a href="#5-1-功能分析" class="headerlink" title="5.1 功能分析"></a>5.1 功能分析</h3><ol><li>提示用户要搜索的姓名</li><li>根据用户输入的姓名遍历列表</li><li>搜索到指定的名片后，再执行后续的操作</li></ol><h3 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h3><ul><li>查询功能实现</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">search_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""搜索名片    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"功能：搜索名片"</span><span class="token punctuation">)</span>    <span class="token comment"># 1. 提示要搜索的姓名</span>    find_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入要搜索的姓名："</span><span class="token punctuation">)</span>    <span class="token comment"># 2. 遍历字典</span>    <span class="token keyword">for</span> card_dict <span class="token keyword">in</span> card_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> card_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> find_name<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名\t\t\t电话\t\t\tQQ\t\t\t邮箱"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s\t\t\t%s\t\t\t%s\t\t\t%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                card_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                card_dict<span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                card_dict<span class="token punctuation">[</span><span class="token string">"qq"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                card_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>                        <span class="token comment"># TODO(小明) 针对找到的字典进行后续操作：修改/删除</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有找到 %s"</span> <span class="token operator">%</span> find_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加名片操作函数：<strong>修改</strong>&#x2F;<strong>删除</strong>&#x2F;<strong>返回主菜单</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">deal_card</span><span class="token punctuation">(</span>find_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""操作搜索到的名片字典    :param find_dict:找到的名片字典    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>find_dict<span class="token punctuation">)</span>    action_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请选择要执行的操作 "</span>                       <span class="token string">"[1] 修改 [2] 删除 [0] 返回上级菜单"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"修改"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="06-修改和删除"><a href="#06-修改和删除" class="headerlink" title="06. 修改和删除"></a>06. 修改和删除</h2><h3 id="6-1-查询成功后删除名片"><a href="#6-1-查询成功后删除名片" class="headerlink" title="6.1 查询成功后删除名片"></a>6.1 查询成功后删除名片</h3><ul><li>由于找到的字典记录已经在列表中保存</li><li>要删除名片记录，只需要把列表中对应的字典删除即可</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>    card_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>find_dict<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-修改名片"><a href="#6-2-修改名片" class="headerlink" title="6.2 修改名片"></a>6.2 修改名片</h3><ul><li>由于找到的字典记录已经在列表中保存</li><li>要修改名片记录，只需要把列表中对应的字典中每一个键值对的数据修改即可</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>    find_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span>    find_dict<span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入电话："</span><span class="token punctuation">)</span>    find_dict<span class="token punctuation">[</span><span class="token string">"qq"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入QQ："</span><span class="token punctuation">)</span>    find_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入邮件："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 的名片修改成功"</span> <span class="token operator">%</span> find_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改名片细化"><a href="#修改名片细化" class="headerlink" title="修改名片细化"></a>修改名片细化</h4><ul><li><strong>如果用户在使用时，某些名片内容并不想修改</strong>，应该如何做呢？—— 既然系统提供的 <code>input</code> 函数不能满足需求，那么就新定义一个函数 <code>input_card_info</code> 对系统的 <code>input</code> 函数进行扩展</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">input_card_info</span><span class="token punctuation">(</span>dict_value<span class="token punctuation">,</span> tip_message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""输入名片信息    :param dict_value: 字典原有值    :param tip_message: 输入提示信息    :return: 如果输入，返回输入内容，否则返回字典原有值    """</span>    <span class="token comment"># 1. 提示用户输入内容</span>    result_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>tip_message<span class="token punctuation">)</span>    <span class="token comment"># 2. 针对用户的输入进行判断，如果用户输入了内容，直接返回结果</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result_str<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result_str    <span class="token comment"># 3. 如果用户没有输入内容，返回 `字典中原有的值`</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict_value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="07-LINUX-上的-Shebang-符号"><a href="#07-LINUX-上的-Shebang-符号" class="headerlink" title="07. LINUX 上的 Shebang 符号(#!)"></a>07. LINUX 上的 <code>Shebang</code> 符号(<code>#!</code>)</h2><ul><li><code>#!</code>这个符号叫做 <code>Shebang</code> 或者 <code>Sha-bang</code></li><li><code>Shebang</code> 通常在 <code>Unix</code> 系统脚本的中 <strong>第一行开头</strong> 使用</li><li>指明 <strong>执行这个脚本文件</strong> 的 <strong>解释程序</strong></li></ul><h3 id="使用-Shebang-的步骤"><a href="#使用-Shebang-的步骤" class="headerlink" title="使用 Shebang 的步骤"></a>使用 Shebang 的步骤</h3><ul><li><ol><li>使用 <code>which</code> 查询 <code>python3</code> 解释器所在路径</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">which</span> python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>修改要运行的 <strong>主 python 文件</strong>，在第一行增加以下内容</li></ol></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>修改 <strong>主 python 文件</strong> 的文件权限，增加执行权限</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> +x cards_main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="4"><li>在需要时执行程序即可</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./cards_main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="变量进阶（理解）"><a href="#变量进阶（理解）" class="headerlink" title="变量进阶（理解）"></a>变量进阶（理解）</h1><h2 id="目标-16"><a href="#目标-16" class="headerlink" title="目标"></a>目标</h2><ul><li>变量的引用</li><li>可变和不可变类型</li><li>局部变量和全局变量</li></ul><h2 id="01-变量的引用"><a href="#01-变量的引用" class="headerlink" title="01. 变量的引用"></a>01. 变量的引用</h2><blockquote><ul><li>变量 和 数据 都是保存在 <strong>内存</strong> 中的</li><li>在 <code>Python</code> 中 <strong>函数 的 参数传递</strong> 以及 <strong>返回值</strong> 都是靠 <strong>引用</strong> 传递的</li></ul></blockquote><h3 id="1-1-引用的概念"><a href="#1-1-引用的概念" class="headerlink" title="1.1 引用的概念"></a>1.1 引用的概念</h3><p>在 <code>Python</code> 中</p><ul><li><strong>变量</strong> 和 <strong>数据</strong> 是分开存储的</li><li><strong>数据</strong> 保存在内存中的一个位置</li><li><strong>变量</strong> 中保存着数据在内存中的地址</li><li><strong>变量</strong> 中 <strong>记录数据的地址</strong>，就叫做 <strong>引用</strong></li><li>使用 <code>id()</code> 函数可以查看变量中保存数据所在的 <strong>内存地址</strong></li></ul><blockquote><p>注意：如果变量已经被定义，当给一个变量赋值的时候，本质上是 <strong>修改了数据的引用</strong></p><ul><li>变量 <strong>不再</strong> 对之前的数据引用</li><li>变量 <strong>改为</strong> 对新赋值的数据引用</li></ul></blockquote><h3 id="1-2-变量引用-的示例"><a href="#1-2-变量引用-的示例" class="headerlink" title="1.2 变量引用 的示例"></a>1.2 <code>变量引用</code> 的示例</h3><p>在 <code>Python</code> 中，变量的名字类似于 <strong>便签纸</strong> 贴在 <strong>数据</strong> 上</p><ul><li>定义一个整数变量 <code>a</code>，并且赋值为 <code>1</code></li></ul><table><thead><tr><th align="center">代码</th><th align="center">图示</th></tr></thead><tbody><tr><td align="center">a &#x3D; 1</td><td align="center"><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127021307.png" alt="004_a1tag" loading="lazy"></td></tr></tbody></table><ul><li>将变量 <code>a</code> 赋值为 <code>2</code></li></ul><table><thead><tr><th align="center">代码</th><th align="center">图示</th></tr></thead><tbody><tr><td align="center">a &#x3D; 2</td><td align="center"><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127021308.png" alt="005_a2tag" loading="lazy"><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127021309.png" alt="005_1" loading="lazy"></td></tr></tbody></table><ul><li>定义一个整数变量 <code>b</code>，并且将变量 <code>a</code> 的值赋值给 <code>b</code></li></ul><table><thead><tr><th align="center">代码</th><th align="center">图示</th></tr></thead><tbody><tr><td align="center">b &#x3D; a</td><td align="center"><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127021310.png" alt="006_ab2tag" loading="lazy"></td></tr></tbody></table><blockquote><p>变量 <code>b</code> 是第 2 个贴在数字 <code>2</code> 上的标签</p></blockquote><h3 id="1-3-函数的参数和返回值的传递"><a href="#1-3-函数的参数和返回值的传递" class="headerlink" title="1.3 函数的参数和返回值的传递"></a>1.3 函数的参数和返回值的传递</h3><p>在 <code>Python</code> 中，函数的 <strong>实参</strong>&#x2F;<strong>返回值</strong> 都是是靠 <strong>引用</strong> 来传递来的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d 在函数内的内存地址是 %x"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"返回值 %d 在内存中的地址是 %x"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  resulta <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用函数前 内存地址是 %x"</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>r <span class="token operator">=</span> test<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用函数后 实参内存地址是 %x"</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用函数后 返回值内存地址是 %x"</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="02-可变和不可变类型"><a href="#02-可变和不可变类型" class="headerlink" title="02. 可变和不可变类型"></a>02. 可变和不可变类型</h2><ul><li><p><strong>不可变类型</strong>，内存中的数据不允许被修改：</p><ul><li>数字类型 <code>int</code>, <code>bool</code>, <code>float</code>, <code>complex</code>, <code>long(2.x)</code></li><li>字符串 <code>str</code></li><li>元组 <code>tuple</code></li></ul></li><li><p><strong>可变类型</strong>，内存中的数据可以被修改：</p><ul><li>列表 <code>list</code></li><li>字典 <code>dict</code></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>a <span class="token operator">=</span> <span class="token string">"hello"</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">demo_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"定义列表后的内存地址 %d"</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token punctuation">(</span>demo_list<span class="token punctuation">)</span><span class="token punctuation">)</span>demo_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span>demo_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>demo_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>demo_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"修改数据后的内存地址 %d"</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token punctuation">(</span>demo_list<span class="token punctuation">)</span><span class="token punctuation">)</span>demo_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"定义字典后的内存地址 %d"</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token punctuation">(</span>demo_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>demo_dict<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>demo_dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>demo_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"老王"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"修改数据后的内存地址 %d"</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token punctuation">(</span>demo_dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：字典的 <code>key</code> <strong>只能使用不可变类型的数据</strong></p></blockquote><p><strong>注意</strong></p><ol><li><strong>可变类型</strong>的数据变化，是通过 <strong>方法</strong> 来实现的</li><li>如果给一个可变类型的变量，赋值了一个新的数据，<strong>引用会修改</strong><ul><li>变量 <strong>不再</strong> 对之前的数据引用</li><li>变量 <strong>改为</strong> 对新赋值的数据引用</li></ul></li></ol><h3 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 (hash)"></a>哈希 <code>(hash)</code></h3><ul><li><code>Python</code> 中内置有一个名字叫做 <code>hash(o)</code> 的函数<ul><li>接收一个 <strong>不可变类型</strong> 的数据作为 <strong>参数</strong></li><li><strong>返回</strong> 结果是一个 <strong>整数</strong></li></ul></li><li><code>哈希</code> 是一种 <strong>算法</strong>，其作用就是提取数据的 <strong>特征码（指纹）</strong><ul><li><strong>相同的内容</strong> 得到 <strong>相同的结果</strong></li><li><strong>不同的内容</strong> 得到 <strong>不同的结果</strong></li></ul></li><li>在 <code>Python</code> 中，设置字典的 <strong>键值对</strong> 时，会首先对 <code>key</code> 进行 <code>hash</code> 已决定如何在内存中保存字典的数据，以方便 <strong>后续</strong> 对字典的操作：<strong>增、删、改、查</strong><ul><li>键值对的 <code>key</code> 必须是不可变类型数据</li><li>键值对的 <code>value</code> 可以是任意类型的数据</li></ul></li></ul><h2 id="03-局部变量和全局变量"><a href="#03-局部变量和全局变量" class="headerlink" title="03. 局部变量和全局变量"></a>03. 局部变量和全局变量</h2><ul><li><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></li><li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong> 内部 <strong>都可以使用这个变量</strong></li></ul><blockquote><p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong> —— 可变范围太大，导致程序不好维护！</p></blockquote><h3 id="3-1-局部变量"><a href="#3-1-局部变量" class="headerlink" title="3.1 局部变量"></a>3.1 局部变量</h3><ul><li><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></li><li>函数执行结束后，<strong>函数内部的局部变量，会被系统回收</strong></li><li>不同的函数，可以定义相同的名字的局部变量，但是 <strong>彼此之间</strong> 不会产生影响</li></ul><h4 id="局部变量的作用"><a href="#局部变量的作用" class="headerlink" title="局部变量的作用"></a>局部变量的作用</h4><ul><li>在函数内部使用，<strong>临时</strong> 保存 <strong>函数内部需要使用的数据</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"修改后 %d"</span> <span class="token operator">%</span> num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>demo1<span class="token punctuation">(</span><span class="token punctuation">)</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="局部变量的生命周期"><a href="#局部变量的生命周期" class="headerlink" title="局部变量的生命周期"></a>局部变量的生命周期</h4><ul><li>所谓 <strong>生命周期</strong> 就是变量从 <strong>被创建</strong> 到 <strong>被系统回收</strong> 的过程</li><li><strong>局部变量</strong> 在 <strong>函数执行时</strong> 才会被创建</li><li><strong>函数执行结束后</strong> 局部变量 <strong>被系统回收</strong></li><li><strong>局部变量在生命周期</strong> 内，可以用来存储 <strong>函数内部临时使用到的数据</strong></li></ul><h3 id="3-2-全局变量"><a href="#3-2-全局变量" class="headerlink" title="3.2 全局变量"></a>3.2 全局变量</h3><ul><li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量，所有函数内部都可以使用这个变量</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个全局变量</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>demo1<span class="token punctuation">(</span><span class="token punctuation">)</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：函数执行时，<strong>需要处理变量时</strong> 会：</p><ol><li><strong>首先</strong> 查找 <strong>函数内部</strong> 是否存在 <strong>指定名称 的局部变量</strong>，<strong>如果有，直接使用</strong></li><li>如果没有，查找 <strong>函数外部</strong> 是否存在 <strong>指定名称 的全局变量</strong>，<strong>如果有，直接使用</strong></li><li>如果还没有，程序报错！</li></ol><h4 id="1-函数不能直接修改-全局变量的引用"><a href="#1-函数不能直接修改-全局变量的引用" class="headerlink" title="1) 函数不能直接修改 全局变量的引用"></a>1) 函数不能直接修改 <code>全局变量的引用</code></h4><ul><li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong> 内部 <strong>都可以使用这个变量</strong></li></ul><blockquote><p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong> —— 可变范围太大，导致程序不好维护！</p></blockquote><ul><li>在函数内部，可以 <strong>通过全局变量的引用获取对应的数据</strong></li><li>但是，<strong>不允许直接修改全局变量的引用</strong> —— 使用赋值语句修改全局变量的值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"demo1"</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span>    num <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"demo2"</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>demo1<span class="token punctuation">(</span><span class="token punctuation">)</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：只是在函数内部定义了一个局部变量而已，只是变量名相同 —— 在函数内部不能直接修改全局变量的值</p></blockquote><h4 id="2-在函数内部修改全局变量的值"><a href="#2-在函数内部修改全局变量的值" class="headerlink" title="2) 在函数内部修改全局变量的值"></a>2) 在函数内部修改全局变量的值</h4><ul><li>如果在函数中需要修改全局变量，需要使用 <code>global</code> 进行声明</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"demo1"</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment"># global 关键字，告诉 Python 解释器 num 是一个全局变量</span>    <span class="token keyword">global</span> num    <span class="token comment"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span>    num <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"demo2"</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>demo1<span class="token punctuation">(</span><span class="token punctuation">)</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-全局变量定义的位置"><a href="#3-全局变量定义的位置" class="headerlink" title="3) 全局变量定义的位置"></a>3) 全局变量定义的位置</h4><ul><li>为了保证所有的函数都能够正确使用到全局变量，应该 <strong>将全局变量定义在其他函数的上方</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d"</span> <span class="token operator">%</span> a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d"</span> <span class="token operator">%</span> b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d"</span> <span class="token operator">%</span> c<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token number">20</span>demo<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>由于全局变量 c，是在调用函数之后，才定义的，在执行函数时，变量还没有定义，所以程序会报错！</li></ul><p><strong>代码结构示意图如下</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127021311.png" alt="001_代码结构示意图-w240" loading="lazy"></p><h4 id="4-全局变量命名的建议"><a href="#4-全局变量命名的建议" class="headerlink" title="4) 全局变量命名的建议"></a>4) 全局变量命名的建议</h4><ul><li>为了避免局部变量和全局变量出现混淆，在定义全局变量时，有些公司会有一些开发要求，例如：</li><li>全局变量名前应该增加 <code>g_</code> 或者 <code>gl_</code> 的前缀</li></ul><blockquote><p>提示：具体的要求格式，各公司要求可能会有些差异</p></blockquote><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="目标-17"><a href="#目标-17" class="headerlink" title="目标"></a>目标</h2><ul><li>函数参数和返回值的作用</li><li>函数的返回值 进阶</li><li>函数的参数 进阶</li><li>递归函数</li></ul><h2 id="01-函数参数和返回值的作用"><a href="#01-函数参数和返回值的作用" class="headerlink" title="01. 函数参数和返回值的作用"></a>01. 函数参数和返回值的作用</h2><p>函数根据 <strong>有没有参数</strong> 以及 <strong>有没有返回值</strong>，可以 <strong>相互组合</strong>，一共有 <strong>4 种</strong> 组合形式</p><ol><li>无参数，无返回值</li><li>无参数，有返回值</li><li>有参数，无返回值</li><li>有参数，有返回值</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127023303.png" alt="001_函数参数和返回值" loading="lazy"></p><blockquote><p>定义函数时，<strong>是否接收参数，或者是否返回结果</strong>，是根据 <strong>实际的功能需求</strong> 来决定的！</p></blockquote><ol><li>如果函数 <strong>内部处理的数据不确定</strong>，就可以将外界的数据以参数传递到函数内部</li><li>如果希望一个函数 <strong>执行完成后，向外界汇报执行结果</strong>，就可以增加函数的返回值</li></ol><h3 id="1-1-无参数，无返回值"><a href="#1-1-无参数，无返回值" class="headerlink" title="1.1 无参数，无返回值"></a>1.1 无参数，无返回值</h3><p>此类函数，不接收参数，也没有返回值，应用场景如下：</p><ol><li><strong>只是单纯地做一件事情</strong>，例如 <strong>显示菜单</strong></li><li>在函数内部 <strong>针对全局变量进行操作</strong>，例如：<strong>新建名片</strong>，最终结果 <strong>记录在全局变量</strong> 中</li></ol><blockquote><p>注意：</p></blockquote><ul><li>如果全局变量的数据类型是一个 <strong>可变类型</strong>，在函数内部可以使用 <strong>方法</strong> 修改全局变量的内容 —— <strong>变量的引用不会改变</strong></li><li>在函数内部，<strong>使用赋值语句</strong> 才会 <strong>修改变量的引用</strong></li></ul><h3 id="1-2-无参数，有返回值"><a href="#1-2-无参数，有返回值" class="headerlink" title="1.2 无参数，有返回值"></a>1.2 无参数，有返回值</h3><p>此类函数，不接收参数，但是有返回值，应用场景如下：</p><ul><li>采集数据，例如 <strong>温度计</strong>，返回结果就是当前的温度，而不需要传递任何的参数</li></ul><h3 id="1-3-有参数，无返回值"><a href="#1-3-有参数，无返回值" class="headerlink" title="1.3 有参数，无返回值"></a>1.3 有参数，无返回值</h3><p>此类函数，接收参数，没有返回值，应用场景如下：</p><ul><li>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong></li><li>例如 <strong>名片管理系统</strong> 针对 <strong>找到的名片</strong> 做 <strong>修改</strong>、<strong>删除</strong> 操作</li></ul><h3 id="1-4-有参数，有返回值"><a href="#1-4-有参数，有返回值" class="headerlink" title="1.4 有参数，有返回值"></a>1.4 有参数，有返回值</h3><p>此类函数，接收参数，同时有返回值，应用场景如下：</p><ul><li>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong>，并且 <strong>返回期望的处理结果</strong></li><li>例如 <strong>名片管理系统</strong> 使用 <strong>字典默认值</strong> 和 <strong>提示信息</strong> 提示用户输入内容<ul><li>如果输入，返回输入内容</li><li>如果没有输入，返回字典默认值</li></ul></li></ul><h2 id="02-函数的返回值-进阶"><a href="#02-函数的返回值-进阶" class="headerlink" title="02. 函数的返回值 进阶"></a>02. 函数的返回值 进阶</h2><ul><li>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong>，以便调用者针对具体的结果做后续的处理</li><li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li><li>在函数中使用 <code>return</code> 关键字可以返回结果</li><li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li></ul><blockquote><p>问题：一个函数执行后能否返回多个结果？</p></blockquote><h3 id="示例-——-温度和湿度测量"><a href="#示例-——-温度和湿度测量" class="headerlink" title="示例 —— 温度和湿度测量"></a>示例 —— 温度和湿度测量</h3><ul><li>假设要开发一个函数能够同时返回当前的温度和湿度</li><li><strong>先完成返回温度</strong>的功能如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""返回当前的温度"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始测量..."</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token number">39</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测量结束..."</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> tempresult <span class="token operator">=</span> measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在利用 <strong>元组</strong> 在返回温度的同时，也能够返回 <strong>湿度</strong></li><li>改造如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""返回当前的温度"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始测量..."</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token number">39</span>    wetness <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测量结束..."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>temp<span class="token punctuation">,</span> wetness<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：如果一个函数返回的是元组，括号可以省略</p></blockquote><p><strong>技巧</strong> </p><ul><li>在 <code>Python</code> 中，可以 <strong>将一个元组</strong> 使用 <strong>赋值语句</strong> 同时赋值给 <strong>多个变量</strong></li><li>注意：变量的数量需要和元组中的元素数量保持一致</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> temp<span class="token punctuation">,</span> wetness <span class="token operator">=</span> measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="面试题-——-交换两个数字"><a href="#面试题-——-交换两个数字" class="headerlink" title="面试题 —— 交换两个数字"></a>面试题 —— 交换两个数字</h3><p><strong>题目要求</strong></p><ol><li>有两个整数变量 <code>a = 6</code>, <code>b = 100</code></li><li>不使用其他变量，<strong>交换两个变量的值</strong></li></ol><h4 id="解法-1-——-使用其他变量"><a href="#解法-1-——-使用其他变量" class="headerlink" title="解法 1 —— 使用其他变量"></a>解法 1 —— 使用其他变量</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 解法 1 - 使用临时变量</span>c <span class="token operator">=</span> bb <span class="token operator">=</span> aa <span class="token operator">=</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解法-2-——-不使用临时变量"><a href="#解法-2-——-不使用临时变量" class="headerlink" title="解法 2 —— 不使用临时变量"></a>解法 2 —— 不使用临时变量</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 解法 2 - 不使用临时变量</span>a <span class="token operator">=</span> a <span class="token operator">+</span> bb <span class="token operator">=</span> a <span class="token operator">-</span> ba <span class="token operator">=</span> a <span class="token operator">-</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解法-3-——-Python-专有，利用元组"><a href="#解法-3-——-Python-专有，利用元组" class="headerlink" title="解法 3 —— Python 专有，利用元组"></a>解法 3 —— Python 专有，利用元组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="03-函数的参数-进阶"><a href="#03-函数的参数-进阶" class="headerlink" title="03. 函数的参数 进阶"></a>03. 函数的参数 进阶</h2><h3 id="3-1-不可变和可变的参数"><a href="#3-1-不可变和可变的参数" class="headerlink" title="3.1. 不可变和可变的参数"></a>3.1. 不可变和可变的参数</h3><blockquote><p>问题 1：在函数内部，针对参数使用 <strong>赋值语句</strong>，会不会影响调用函数时传递的 <strong>实参变量</strong>？ —— 不会！</p></blockquote><ul><li>无论传递的参数是 <strong>可变</strong> 还是 <strong>不可变</strong> <ul><li>只要 <strong>针对参数</strong> 使用 <strong>赋值语句</strong>，会在 <strong>函数内部</strong> 修改 <strong>局部变量的引用</strong>，<strong>不会影响到 外部变量的引用</strong></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数内部"</span><span class="token punctuation">)</span>    <span class="token comment"># 赋值语句</span>    num <span class="token operator">=</span> <span class="token number">200</span>    num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数代码完成"</span><span class="token punctuation">)</span>gl_num <span class="token operator">=</span> <span class="token number">99</span>gl_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>demo<span class="token punctuation">(</span>gl_num<span class="token punctuation">,</span> gl_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_list<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>问题 2：如果传递的参数是 <strong>可变类型</strong>，在函数内部，使用 <strong>方法</strong> 修改了数据的内容，<strong>同样会影响到外部的数据</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mutable</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># num_list = [1, 2, 3]</span>    num_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>gl_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>mutable<span class="token punctuation">(</span>gl_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="面试题-——"><a href="#面试题-——" class="headerlink" title="面试题 —— +="></a>面试题 —— <code>+=</code></h4><ul><li>在 <code>python</code> 中，列表变量调用 <code>+=</code> 本质上是在执行列表变量的 <code>extend</code> 方法，不会修改变量的引用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数内部代码"</span><span class="token punctuation">)</span>    <span class="token comment"># num = num + num</span>    num <span class="token operator">+=</span> num    <span class="token comment"># num_list.extend(num_list) 由于是调用方法，所以不会修改变量的引用</span>    <span class="token comment"># 函数执行结束后，外部数据同样会发生变化</span>    num_list <span class="token operator">+=</span> num_list    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数代码完成"</span><span class="token punctuation">)</span>gl_num <span class="token operator">=</span> <span class="token number">9</span>gl_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>demo<span class="token punctuation">(</span>gl_num<span class="token punctuation">,</span> gl_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-缺省参数"><a href="#3-2-缺省参数" class="headerlink" title="3.2 缺省参数"></a>3.2 缺省参数</h3><ul><li>定义函数时，可以给 <strong>某个参数</strong> 指定一个<strong>默认值</strong>，具有默认值的参数就叫做 <strong>缺省参数</strong></li><li>调用函数时，如果没有传入 <strong>缺省参数</strong> 的值，则在函数内部使用定义函数时指定的 <strong>参数默认值</strong></li><li>函数的缺省参数，<strong>将常见的值设置为参数的缺省值</strong>，从而 <strong>简化函数的调用</strong></li><li>例如：对列表排序的方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">gl_num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment"># 默认就是升序排序，因为这种应用需求更多</span>gl_num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_num_list<span class="token punctuation">)</span><span class="token comment"># 只有当需要降序排序时，才需要传递 `reverse` 参数</span>gl_num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_num_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指定函数的缺省参数"><a href="#指定函数的缺省参数" class="headerlink" title="指定函数的缺省参数"></a>指定函数的缺省参数</h4><ul><li>在参数后使用赋值语句，可以指定参数的缺省值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gender_text <span class="token operator">=</span> <span class="token string">"男生"</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> gender<span class="token punctuation">:</span>        gender_text <span class="token operator">=</span> <span class="token string">"女生"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 是 %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示</strong></p><ol><li>缺省参数，需要使用 <strong>最常见的值</strong> 作为默认值！</li><li>如果一个参数的值 <strong>不能确定</strong>，则不应该设置默认值，具体的数值在调用函数时，由外界传递！</li></ol><h4 id="缺省参数的注意事项"><a href="#缺省参数的注意事项" class="headerlink" title="缺省参数的注意事项"></a>缺省参数的注意事项</h4><h5 id="1-缺省参数的定义位置"><a href="#1-缺省参数的定义位置" class="headerlink" title="1) 缺省参数的定义位置"></a>1) 缺省参数的定义位置</h5><ul><li><strong>必须保证</strong> <strong>带有默认值的缺省参数</strong> <strong>在参数列表末尾</strong></li><li>所以，以下定义是错误的！</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-调用带有多个缺省参数的函数"><a href="#2-调用带有多个缺省参数的函数" class="headerlink" title="2) 调用带有多个缺省参数的函数"></a>2) 调用带有多个缺省参数的函数</h5><ul><li>在 <strong>调用函数时</strong>，如果有 <strong>多个缺省参数</strong>，<strong>需要指定参数名</strong>，这样解释器才能够知道参数的对应关系！</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param title: 职位    :param name: 班上同学的姓名    :param gender: True 男生 False 女生    """</span>    gender_text <span class="token operator">=</span> <span class="token string">"男生"</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> gender<span class="token punctuation">:</span>        gender_text <span class="token operator">=</span> <span class="token string">"女生"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s%s 是 %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 提示：在指定缺省参数的默认值时，应该使用最常见的值作为默认值！</span>print_info<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span>print_info<span class="token punctuation">(</span><span class="token string">"老王"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"班长"</span><span class="token punctuation">)</span>print_info<span class="token punctuation">(</span><span class="token string">"小美"</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-多值参数（知道）"><a href="#3-3-多值参数（知道）" class="headerlink" title="3.3 多值参数（知道）"></a>3.3 多值参数（知道）</h3><h4 id="定义支持多值参数的函数"><a href="#定义支持多值参数的函数" class="headerlink" title="定义支持多值参数的函数"></a>定义支持多值参数的函数</h4><ul><li><p>有时可能需要 <strong>一个函数</strong> 能够处理的参数 <strong>个数</strong> 是不确定的，这个时候，就可以使用 <strong>多值参数</strong></p></li><li><p><code>python</code> 中有 <strong>两种</strong> 多值参数：</p><ul><li>参数名前增加 <strong>一个</strong> <code>*</code> 可以接收 <strong>元组</strong></li><li>参数名前增加 <strong>两个</strong> <code>*</code> 可以接收 <strong>字典</strong></li></ul></li><li><p>一般在给多值参数命名时，<strong>习惯</strong>使用以下两个名字</p><ul><li><code>*args</code> —— 存放 <strong>元组</strong> 参数，前面有一个 <code>*</code></li><li><code>**kwargs</code> —— 存放 <strong>字典</strong> 参数，前面有两个 <code>*</code></li></ul></li><li><p><code>args</code> 是 <code>arguments</code> 的缩写，有变量的含义</p></li><li><p><code>kw</code> 是 <code>keyword</code> 的缩写，<code>kwargs</code> 可以记忆 <strong>键值对参数</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：<strong>多值参数</strong> 的应用会经常出现在网络上一些大牛开发的框架中，知道多值参数，<strong>有利于我们能够读懂大牛的代码</strong></p></blockquote><h4 id="多值参数案例-——-计算任意多个数字的和"><a href="#多值参数案例-——-计算任意多个数字的和" class="headerlink" title="多值参数案例 —— 计算任意多个数字的和"></a>多值参数案例 —— 计算任意多个数字的和</h4><p><strong>需求</strong></p><ol><li>定义一个函数 <code>sum_numbers</code>，可以接收的 <strong>任意多个整数</strong></li><li>功能要求：将传递的 <strong>所有数字累加</strong> 并且返回累加结果</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 遍历 args 元组顺序求和</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>        num <span class="token operator">+=</span> n    <span class="token keyword">return</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>sum_numbers<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元组和字典的拆包（知道）"><a href="#元组和字典的拆包（知道）" class="headerlink" title="元组和字典的拆包（知道）"></a>元组和字典的拆包（知道）</h4><ul><li>在调用带有多值参数的函数时，如果希望：<ul><li>将一个 <strong>元组变量</strong>，直接传递给 <code>args</code></li><li>将一个 <strong>字典变量</strong>，直接传递给 <code>kwargs</code></li></ul></li><li>就可以使用 <strong>拆包</strong>，简化参数的传递，<strong>拆包</strong> 的方式是：<ul><li>在 <strong>元组变量前</strong>，增加 <strong>一个</strong> <code>*</code></li><li>在 <strong>字典变量前</strong>，增加 <strong>两个</strong> <code>*</code></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span>gl_nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>gl_xiaoming <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token comment"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span><span class="token comment"># demo(gl_nums, gl_xiaoming)</span>demo<span class="token punctuation">(</span><span class="token operator">*</span>gl_nums<span class="token punctuation">,</span> <span class="token operator">**</span>gl_xiaoming<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-函数的递归"><a href="#04-函数的递归" class="headerlink" title="04. 函数的递归"></a>04. 函数的递归</h2><blockquote><p>函数调用自身的 <strong>编程技巧</strong> 称为递归</p></blockquote><h3 id="4-1-递归函数的特点"><a href="#4-1-递归函数的特点" class="headerlink" title="4.1 递归函数的特点"></a>4.1 递归函数的特点</h3><p><strong>特点</strong></p><ul><li><strong>一个函数</strong> <strong>内部</strong> <strong>调用自己</strong><ul><li>函数内部可以调用其他函数，当然在函数内部也可以调用自己</li></ul></li></ul><p><strong>代码特点</strong></p><ol><li>函数内部的 <strong>代码</strong> 是相同的，只是针对 <strong>参数</strong> 不同，<strong>处理的结果不同</strong></li><li>当 <strong>参数满足一个条件</strong> 时，函数不再执行<ul><li><strong>这个非常重要</strong>，通常被称为递归的出口，否则 <strong>会出现死循环</strong>！</li></ul></li></ol><p>示例代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token comment"># 递归的出口很重要，否则会出现死循环</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    sum_numbers<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    sum_numbers<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127023304.png" alt="002_递归调用示意图I" loading="lazy"></p><h3 id="4-2-递归案例-——-计算数字累加"><a href="#4-2-递归案例-——-计算数字累加" class="headerlink" title="4.2 递归案例 —— 计算数字累加"></a>4.2 递归案例 —— 计算数字累加</h3><p><strong>需求</strong></p><ol><li>定义一个函数 <code>sum_numbers</code></li><li>能够接收一个 <code>num</code> 的整数参数</li><li>计算 1 + 2 + … num 的结果</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token comment"># 假设 sum_numbers 能够完成 num - 1 的累加</span>    temp <span class="token operator">=</span> sum_numbers<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 函数内部的核心算法就是 两个数字的相加</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> temp<span class="token keyword">print</span><span class="token punctuation">(</span>sum_numbers<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220127023305.png" alt="002_递归调用示意图" loading="lazy"></p><blockquote><p>提示：递归是一个 <strong>编程技巧</strong>，初次接触递归会感觉有些吃力！在处理 <strong>不确定的循环条件时</strong>，格外的有用，例如：<strong>遍历整个文件目录的结构</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PyCharm-的初始设置（知道）&quot;&gt;&lt;a href=&quot;#PyCharm-的初始设置（知道）&quot; class=&quot;headerlink&quot; title=&quot;PyCharm 的初始设置（知道）&quot;&gt;&lt;/a&gt;PyCharm 的初始设置（知道）&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Python" scheme="http://ccsu.top/categories/Python/"/>
    
    
    <category term="Python基础" scheme="http://ccsu.top/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>树莓派系统备份</title>
    <link href="http://ccsu.top/posts/52784c40/"/>
    <id>http://ccsu.top/posts/52784c40/</id>
    <published>2022-03-13T12:18:00.000Z</published>
    <updated>2022-05-09T01:59:12.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、全卡备份"><a href="#一、全卡备份" class="headerlink" title="一、全卡备份"></a>一、全卡备份</h1><p>全卡备份就是直接从SD卡A复制到SD卡B</p><h2 id="1-通过GUI备份"><a href="#1-通过GUI备份" class="headerlink" title="1.通过GUI备份"></a>1.通过GUI备份</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220312232048.png" alt="image-20220312232048461" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220312232726.png" alt="image-20220312232726142" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220312232403.png" alt="image-20220312232403516" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220312232959.png" alt="image-20220312232959086" loading="lazy"></p><h2 id="2-命令行备份"><a href="#2-命令行备份" class="headerlink" title="2.命令行备份"></a>2.命令行备份</h2><blockquote><p>  实测，太慢了</p></blockquote><p>更新源</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo apt update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>mmcblk0</code>是SD卡A，<code>sda</code>是SD卡B，从A复制到B</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pi@raspberrypi:~ $ lsblkNAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda           8:0    1 59.5G  0 disk ├─sda1        8:1    1  256M  0 part └─sda2        8:2    1 59.2G  0 part mmcblk0     179:0    0 59.5G  0 disk ├─mmcblk0p1 179:1    0  256M  0 part &#x2F;boot└─mmcblk0p2 179:2    0 59.2G  0 part &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装<code>dc3dd</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo apt install dc3dd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备份</p><p><code>if</code>表示要备份的卡，<code>of</code>表示要备份到的卡</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo dc3dd if&#x3D;&#x2F;dev&#x2F;mmcblk0 of&#x3D;&#x2F;dev&#x2F;sda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220313001259.png" alt="image-20220313001259177" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220313013246.png" alt="image-20220313013246475" loading="lazy"></p><h1 id="二、压缩备份"><a href="#二、压缩备份" class="headerlink" title="二、压缩备份"></a>二、压缩备份</h1><p>压缩备份是它会备份整个<code>boot</code>分区，然后<code>Root</code>分区它只会备份实际使用的容量</p><p>待续。。。。。。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、全卡备份&quot;&gt;&lt;a href=&quot;#一、全卡备份&quot; class=&quot;headerlink&quot; title=&quot;一、全卡备份&quot;&gt;&lt;/a&gt;一、全卡备份&lt;/h1&gt;&lt;p&gt;全卡备份就是直接从SD卡A复制到SD卡B&lt;/p&gt;
&lt;h2 id=&quot;1-通过GUI备份&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="树莓派" scheme="http://ccsu.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="备份" scheme="http://ccsu.top/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>vi——终端中的编辑器</title>
    <link href="http://ccsu.top/posts/a670312d/"/>
    <id>http://ccsu.top/posts/a670312d/</id>
    <published>2022-03-11T01:22:00.000Z</published>
    <updated>2022-03-11T01:21:16.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><code>vi</code> 简介</li><li>打开和新建文件</li><li>三种工作模式</li><li>常用命令</li><li>分屏命令</li><li>常用命令速查图</li></ul><h2 id="01-vi-简介"><a href="#01-vi-简介" class="headerlink" title="01. vi 简介"></a>01. <code>vi</code> 简介</h2><h3 id="1-1-学习-vi-的目的"><a href="#1-1-学习-vi-的目的" class="headerlink" title="1.1 学习 vi 的目的"></a>1.1 学习 <code>vi</code> 的目的</h3><ul><li>在工作中，要对 <strong>服务器</strong> 上的文件进行 <strong>简单</strong> 的修改，可以使用 <code>ssh</code> 远程登录到服务器上，并且使用 <code>vi</code> 进行快速的编辑即可</li><li>常见需要修改的文件包括：<ul><li><strong>源程序</strong></li><li><strong>配置文件</strong>，例如 <code>ssh</code> 的配置文件 <code>~/.ssh/config</code></li></ul></li></ul><blockquote><ul><li>在没有图形界面的环境下，要编辑文件，<code>vi</code> 是最佳选择！</li><li>每一个要使用 Linux 的程序员，都应该或多或少的学习一些 <code>vi</code> 的常用命令</li></ul></blockquote><h3 id="1-2-vi-和-vim"><a href="#1-2-vi-和-vim" class="headerlink" title="1.2 vi 和 vim"></a>1.2 vi 和 vim</h3><ul><li>在很多 <code>Linux</code> 发行版中，直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li></ul><h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h4><ul><li><code>vi</code> 是 <code>Visual interface</code> 的简称，是 <code>Linux</code> 中 <strong>最经典</strong> 的文本编辑器</li><li><code>vi</code> 的核心设计思想 —— <strong>让程序员的手指始终保持在键盘的核心区域，就能完成所有的编辑操作</strong></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118195440.png" alt="001_vi键盘-w551" loading="lazy"></p><ul><li><code>vi</code> 的特点：<ul><li><strong>没有图形界面</strong> 的 <strong>功能强大</strong> 的编辑器</li><li>只能是编辑 <strong>文本内容</strong>，不能对字体、段落进行排版</li><li><strong>不支持鼠标操作</strong></li><li><strong>没有菜单</strong></li><li><strong>只有命令</strong></li></ul></li><li><code>vi</code> 编辑器在 <strong>系统管理</strong>、<strong>服务器管理</strong> 编辑文件时，<strong>其功能永远不是图形界面的编辑器能比拟的</strong></li></ul><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a><code>vim</code></h4><p><strong>vim &#x3D; vi improved</strong></p><ul><li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，支持 <strong>代码补全</strong>、<strong>编译</strong> 及 <strong>错误跳转</strong> 等方便编程的功能特别丰富，在程序员中被广泛使用，被称为 <strong>编辑器之神</strong></li></ul><h4 id="查询软连接命令（知道）"><a href="#查询软连接命令（知道）" class="headerlink" title="查询软连接命令（知道）"></a>查询软连接命令（知道）</h4><ul><li>在很多 <code>Linux</code> 发行版中直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找 vi 的运行文件</span>$ <span class="token function">which</span> <span class="token function">vi</span>$ <span class="token function">ls</span> -l /usr/bin/vi$ <span class="token function">ls</span> -l /etc/alternatives/vi$ <span class="token function">ls</span> -l /usr/bin/vim.basic<span class="token comment"># 查找 vim 的运行文件</span>$ <span class="token function">which</span> <span class="token function">vim</span>$ <span class="token function">ls</span> -l /usr/bin/vim$ <span class="token function">ls</span> -l /etc/alternatives/vim$ <span class="token function">ls</span> -l /usr/bin/vim.basic <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="02-打开和新建文件"><a href="#02-打开和新建文件" class="headerlink" title="02. 打开和新建文件"></a>02. 打开和新建文件</h2><ul><li>在终端中输入 <code>vi</code> <strong>在后面跟上文件名</strong> 即可</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vi</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果文件已经存在，会直接打开该文件</li><li>如果文件不存在，会新建一个文件</li></ul><h3 id="2-1-打开文件并且定位行"><a href="#2-1-打开文件并且定位行" class="headerlink" title="2.1 打开文件并且定位行"></a>2.1 打开文件并且定位行</h3><ul><li><p>在日常工作中，有可能会遇到 <strong>打开一个文件，并定位到指定行</strong> 的情况</p></li><li><p>例如：在开发时，<strong>知道某一行代码有错误</strong>，可以 <strong>快速定位</strong> 到出错代码的位置</p></li><li><p>这个时候，可以使用以下命令打开文件</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vi</span> 文件名 +行数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提示：如果只带上 <code>+</code> 而不指定行号，会直接定位到文件末尾</p></blockquote><h3 id="2-2-异常处理"><a href="#2-2-异常处理" class="headerlink" title="2.2 异常处理"></a>2.2 异常处理</h3><ul><li>如果 <code>vi</code> 异常退出，在磁盘上可能会保存有 <strong>交换文件</strong></li><li>下次再使用 <code>vi</code> 编辑该文件时，会看到以下屏幕信息，按下字母 <code>d</code> 可以 <strong>删除交换文件</strong> 即可</li></ul><blockquote><p>提示：按下键盘时，注意关闭输入法</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118195441.png" alt="002_删除交换文件-w1048" loading="lazy"></p><h2 id="03-三种工作模式"><a href="#03-三种工作模式" class="headerlink" title="03. 三种工作模式"></a>03. 三种工作模式</h2><ul><li><p><code>vi</code> 有三种基本工作模式：</p><ol><li><strong>命令模式</strong><ul><li><strong>打开文件首先进入命令模式</strong>，是使用 <code>vi</code> 的 <strong>入口</strong></li><li>通过 <strong>命令</strong> 对文件进行常规的编辑操作，例如：<strong>定位</strong>、<strong>翻页</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>删除</strong>……</li><li>在其他图形编辑器下，通过 <strong>快捷键</strong> 或者 <strong>鼠标</strong> 实现的操作，都在 <strong>命令模式</strong> 下实现</li></ul></li><li><strong>末行模式</strong> —— 执行 <strong>保存</strong>、<strong>退出</strong> 等操作 <ul><li>要退出 <code>vi</code> 返回到控制台，需要在末行模式下输入命令</li><li><strong>末行模式</strong> 是 <code>vi</code> 的 <strong>出口</strong></li></ul></li><li><strong>编辑模式</strong> —— 正常的编辑文字</li></ol></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118195442.png" alt="003_vi的模式-w500" loading="lazy"></p><blockquote><p>提示：在 <code>Touch Bar</code> 的 Mac 电脑上 ，按 <code>ESC</code> 不方便，可以使用 <code>CTRL + [</code> 替代</p></blockquote><h3 id="末行模式命令"><a href="#末行模式命令" class="headerlink" title="末行模式命令"></a>末行模式命令</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">write</td><td>保存</td></tr><tr><td align="center">q</td><td align="center">quit</td><td>退出，如果没有保存，不允许退出</td></tr><tr><td align="center">q!</td><td align="center">quit</td><td>强行退出，不保存退出</td></tr><tr><td align="center">wq</td><td align="center">write &amp; quit</td><td>保存并退出</td></tr><tr><td align="center">x</td><td align="center"></td><td>保存并退出</td></tr></tbody></table><h2 id="04-常用命令"><a href="#04-常用命令" class="headerlink" title="04. 常用命令"></a>04. 常用命令</h2><h3 id="命令线路图"><a href="#命令线路图" class="headerlink" title="命令线路图"></a>命令线路图</h3><ol start="0"><li>重复次数<ul><li>在命令模式下，<strong>先输入一个数字</strong>，<strong>再跟上一个命令</strong>，可以让该命令 <strong>重复执行指定次数</strong></li></ul></li><li>移动和选择（<strong>多练</strong>）<ul><li><code>vi</code> 之所以快，关键在于 <strong>能够快速定位到要编辑的代码行</strong></li><li><strong>移动命令</strong> 能够 和 <strong>编辑操作</strong> 命令 <strong>组合使用</strong></li></ul></li><li>编辑操作<ul><li><strong>删除</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>替换</strong>、<strong>缩排</strong></li></ul></li><li>撤销和重复</li><li>查找替换</li><li>编辑</li></ol><h4 id="学习提示"><a href="#学习提示" class="headerlink" title="学习提示"></a>学习提示</h4><ol><li><code>vi</code> 的命令较多，<strong>不要期望一下子全部记住</strong>，个别命令忘记了，只是会影响编辑速度而已</li><li>在使用 <code>vi</code> 命令时，注意 <strong>关闭中文输入法</strong></li></ol><h3 id="4-1-移动（基本）"><a href="#4-1-移动（基本）" class="headerlink" title="4.1 移动（基本）"></a>4.1 移动（基本）</h3><ul><li>要熟练使用 <code>vi</code>，首先应该学会怎么在 <strong>命令模式</strong> 下样快速移动光标</li><li><strong>编辑操作命令</strong>，能够和 <strong>移动命令</strong> 结合在一起使用</li></ul><h4 id="1-上、下、左、右"><a href="#1-上、下、左、右" class="headerlink" title="1) 上、下、左、右"></a>1) 上、下、左、右</h4><table><thead><tr><th align="center">命令</th><th>功能</th><th align="center">手指</th></tr></thead><tbody><tr><td align="center">h</td><td>向左</td><td align="center">食指</td></tr><tr><td align="center">j</td><td>向下</td><td align="center">食指</td></tr><tr><td align="center">k</td><td>向上</td><td align="center">中指</td></tr><tr><td align="center">l</td><td>向右</td><td align="center">无名指</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118195443.png" alt="005_移动光标-w551" loading="lazy"></p><h4 id="2-行内移动"><a href="#2-行内移动" class="headerlink" title="2) 行内移动"></a>2) 行内移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">word</td><td>向后移动一个单词</td></tr><tr><td align="center">b</td><td align="center">back</td><td>向前移动一个单词</td></tr><tr><td align="center">0</td><td align="center"></td><td>行首</td></tr><tr><td align="center">^</td><td align="center"></td><td>行首，第一个不是空白字符的位置</td></tr><tr><td align="center">$</td><td align="center"></td><td>行尾</td></tr></tbody></table><h4 id="3-行数移动"><a href="#3-行数移动" class="headerlink" title="3) 行数移动"></a>3) 行数移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">gg</td><td align="center">go</td><td>文件顶部</td></tr><tr><td align="center">G</td><td align="center">go</td><td>文件末尾</td></tr><tr><td align="center">数字gg</td><td align="center">go</td><td>移动到 数字 对应行数</td></tr><tr><td align="center">数字G</td><td align="center">go</td><td>移动到 数字 对应行数</td></tr><tr><td align="center">:数字</td><td align="center"></td><td>移动到 数字 对应行数</td></tr></tbody></table><h4 id="4-屏幕移动"><a href="#4-屏幕移动" class="headerlink" title="4) 屏幕移动"></a>4) 屏幕移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">Ctrl + b</td><td align="center">back</td><td>向上翻页</td></tr><tr><td align="center">Ctrl + f</td><td align="center">forward</td><td>向下翻页</td></tr><tr><td align="center">H</td><td align="center">Head</td><td>屏幕顶部</td></tr><tr><td align="center">M</td><td align="center">Middle</td><td>屏幕中间</td></tr><tr><td align="center">L</td><td align="center">Low</td><td>屏幕底部</td></tr></tbody></table><h3 id="4-2-移动（程序）"><a href="#4-2-移动（程序）" class="headerlink" title="4.2 移动（程序）"></a>4.2 移动（程序）</h3><h4 id="1-段落移动"><a href="#1-段落移动" class="headerlink" title="1) 段落移动"></a>1) 段落移动</h4><ul><li><code>vi</code> 中使用 空行 来区分段落</li><li>在程序开发时，通常 <strong>一段功能相关的代码会写在一起</strong> —— 之间没有空行</li></ul><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">{</td><td>上一段</td></tr><tr><td align="center">}</td><td>下一段</td></tr></tbody></table><h4 id="2-括号切换"><a href="#2-括号切换" class="headerlink" title="2) 括号切换"></a>2) 括号切换</h4><ul><li>在程序世界中，<code>()</code>、<code>[]</code>、<code>&#123;&#125;</code> 使用频率很高，而且 <strong>都是成对出现的</strong></li></ul><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">%</td><td>括号匹配及切换</td></tr></tbody></table><h4 id="3-标记"><a href="#3-标记" class="headerlink" title="3) 标记"></a>3) 标记</h4><ul><li>在开发时，某一块代码可能<strong>需要稍后处理</strong>，例如：编辑、查看</li><li>此时先使用 <code>m</code> 增加一个标记，这样可以 <strong>在需要时快速地跳转回来</strong> 或者 <strong>执行其他编辑操作</strong></li><li><strong>标记名称</strong> 可以是 <code>a~z</code> 或者 <code>A~Z</code> 之间的任意 <strong>一个</strong> 字母</li><li>添加了标记的 <strong>行如果被删除</strong>，<strong>标记同时被删除</strong></li><li>如果 <strong>在其他行添加了相同名称的标记</strong>，<strong>之前添加的标记也会被替换掉</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">mx</td><td align="center">mark</td><td>添加标记 x，x 是 a<del>z 或者 A</del>Z 之间的任意一个字母</td></tr><tr><td align="center">‘x</td><td align="center"></td><td>直接定位到标记 x 所在位置</td></tr></tbody></table><h3 id="4-3-选中文本（可视模式）"><a href="#4-3-选中文本（可视模式）" class="headerlink" title="4.3 选中文本（可视模式）"></a>4.3 选中文本（可视模式）</h3><ul><li>学习 <code>复制</code> 命令前，应该先学会 <strong>怎么样选中 要复制的代码</strong></li><li>在 <code>vi</code> 中要选择文本，需要先使用 <code>Visual</code> 命令切换到 <strong>可视模式</strong></li><li><code>vi</code> 中提供了 <strong>三种</strong> 可视模式，可以方便程序员选择 <strong>选中文本的方式</strong></li><li>按 <code>ESC</code> 可以放弃选中，返回到 <strong>命令模式</strong></li></ul><table><thead><tr><th align="center">命令</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td align="center">v</td><td>可视模式</td><td>从光标位置开始按照正常模式选择文本</td></tr><tr><td align="center">V</td><td>可视行模式</td><td>选中光标经过的完整行</td></tr><tr><td align="center">Ctrl + v</td><td>可视块模式</td><td>垂直方向选中文本</td></tr></tbody></table><ul><li><strong>可视模式</strong>下，可以和 <strong>移动命令</strong> 连用，例如：<code>ggVG</code> 能够选中所有内容</li></ul><h3 id="4-4-撤销和恢复撤销"><a href="#4-4-撤销和恢复撤销" class="headerlink" title="4.4 撤销和恢复撤销"></a>4.4 撤销和恢复撤销</h3><ul><li>在学习编辑命令之前，先要知道怎样撤销之前一次 <strong>错误的</strong> 编辑动作！</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">u</td><td align="center">undo</td><td>撤销上次命令</td></tr><tr><td align="center">CTRL + r</td><td align="center">redo</td><td>恢复撤销的命令</td></tr></tbody></table><h3 id="4-5-删除文本"><a href="#4-5-删除文本" class="headerlink" title="4.5 删除文本"></a>4.5 删除文本</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">cut</td><td>删除光标所在字符，或者选中文字</td></tr><tr><td align="center">d(移动命令)</td><td align="center">delete</td><td>删除移动命令对应的内容</td></tr><tr><td align="center">dd</td><td align="center">delete</td><td>删除光标所在行，可以 ndd 复制多行</td></tr><tr><td align="center">D</td><td align="center">delete</td><td>删除至行尾</td></tr></tbody></table><blockquote><p>提示：如果使用 <strong>可视模式</strong> 已经选中了一段文本，那么无论使用 <code>d</code> 还是 <code>x</code>，都可以删除选中文本</p></blockquote><ul><li>删除命令可以和 <strong>移动命令</strong> 连用，以下是常见的组合命令：</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">* dw        # 从光标位置删除到单词末尾* d0        # 从光标位置删除到一行的起始位置* d&#125;        # 从光标位置删除到段落结尾* ndd       # 从光标位置向下连续删除 n 行* d代码行G   # 从光标所在行 删除到 指定代码行 之间的所有代码* d&#39;a       # 从光标所在行 删除到 标记a 之间的所有代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-复制、粘贴"><a href="#4-6-复制、粘贴" class="headerlink" title="4.6 复制、粘贴"></a>4.6 复制、粘贴</h3><ul><li><code>vi</code> 中提供有一个 <strong>被复制文本的缓冲区</strong><ul><li><strong>复制</strong> 命令会将选中的文字保存在缓冲区 </li><li><strong>删除</strong> 命令删除的文字会被保存在缓冲区</li><li>在需要的位置，使用 <strong>粘贴</strong> 命令可以将缓冲区的文字插入到光标所在位置</li></ul></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">y(移动命令)</td><td align="center">copy</td><td>复制</td></tr><tr><td align="center">yy</td><td align="center">copy</td><td>复制一行，可以 nyy 复制多行</td></tr><tr><td align="center">p</td><td align="center">paste</td><td>粘贴</td></tr></tbody></table><p><strong>提示</strong></p><ul><li>命令 <code>d</code>、<code>x</code> 类似于图形界面的 <strong>剪切操作</strong> —— <code>CTRL + X</code></li><li>命令 <code>y</code> 类似于图形界面的 <strong>复制操作</strong> —— <code>CTRL + C</code></li><li>命令 <code>p</code> 类似于图形界面的 <strong>粘贴操作</strong> —— <code>CTRL + V</code></li><li><code>vi</code> 中的 <strong>文本缓冲区同样只有一个</strong>，如果后续做过 <strong>复制、剪切</strong> 操作，之前缓冲区中的内容会被替换</li></ul><p><strong>注意</strong></p><ul><li><code>vi</code> 中的 <strong>文本缓冲区</strong> 和系统的 <strong>剪贴板</strong> 不是同一个</li><li>所以在其他软件中使用 <code>CTRL + C</code> 复制的内容，不能在 <code>vi</code> 中通过 <code>P</code> 命令粘贴</li><li>可以在 <strong>编辑模式</strong> 下使用 <strong>鼠标右键粘贴</strong></li></ul><h3 id="4-7-替换"><a href="#4-7-替换" class="headerlink" title="4.7 替换"></a>4.7 替换</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th><th>工作模式</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">replace</td><td>替换当前字符</td><td>命令模式</td></tr><tr><td align="center">R</td><td align="center">replace</td><td>替换当前行光标后的字符</td><td>替换模式</td></tr></tbody></table><ul><li><code>R</code> 命令可以进入 <strong>替换模式</strong>，替换完成后，按下 <code>ESC</code> 可以回到 <strong>命令模式</strong></li><li><strong>替换命令</strong> 的作用就是不用进入 <strong>编辑模式</strong>，对文件进行 <strong>轻量级的修改</strong></li></ul><h3 id="4-8-缩排和重复执行"><a href="#4-8-缩排和重复执行" class="headerlink" title="4.8 缩排和重复执行"></a>4.8 缩排和重复执行</h3><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">&gt;&gt;</td><td>向右增加缩进</td></tr><tr><td align="center">&lt;&lt;</td><td>向左减少缩进</td></tr><tr><td align="center">.</td><td>重复上次命令</td></tr></tbody></table><ul><li><strong>缩排命令</strong> 在开发程序时，<strong>统一增加代码的缩进</strong> 比较有用！<ul><li>一次性 <strong>在选中代码前增加 4 个空格</strong>，就叫做 <strong>增加缩进</strong></li><li>一次性 <strong>在选中代码前删除 4 个空格</strong>，就叫做 <strong>减少缩进</strong></li></ul></li><li>在 <strong>可视模式</strong> 下，缩排命令只需要使用 <strong>一个</strong> <code>&gt;</code> 或者 <code>&lt;</code></li></ul><blockquote><p>在程序中，<strong>缩进</strong> 通常用来表示代码的归属关系</p><ul><li>前面空格越少，代码的级别越高</li><li>前面空格越多，代码的级别越低</li></ul></blockquote><h3 id="4-9-查找"><a href="#4-9-查找" class="headerlink" title="4.9 查找"></a>4.9 查找</h3><h4 id="常规查找"><a href="#常规查找" class="headerlink" title="常规查找"></a>常规查找</h4><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">&#x2F;str</td><td>查找 str</td></tr></tbody></table><ul><li>查找到指定内容之后，使用 <code>Next</code> 查找下一个出现的位置：<ul><li><code>n</code>: 查找下一个</li><li><code>N</code>: 查找上一个</li></ul></li><li>如果不想看到高亮显示，可以随便查找一个文件中不存在的内容即可</li></ul><h4 id="单词快速匹配"><a href="#单词快速匹配" class="headerlink" title="单词快速匹配"></a>单词快速匹配</h4><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">*</td><td>向后查找当前光标所在单词</td></tr><tr><td align="center">#</td><td>向前查找当前光标所在单词</td></tr></tbody></table><ul><li>在开发中，通过单词快速匹配，可以快速看到这个单词在其他什么位置使用过</li></ul><h3 id="4-10-查找并替换"><a href="#4-10-查找并替换" class="headerlink" title="4.10 查找并替换"></a>4.10 查找并替换</h3><ul><li>在 <code>vi</code> 中查找和替换命令需要在 <strong>末行模式</strong> 下执行</li><li>记忆命令格式：</li></ul><pre class="line-numbers language-none"><code class="language-none">:%s&#x2F;&#x2F;&#x2F;g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-全局替换"><a href="#1-全局替换" class="headerlink" title="1) 全局替换"></a>1) 全局替换</h4><ul><li><strong>一次性</strong>替换文件中的 <strong>所有出现的旧文本</strong></li><li>命令格式如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">:%s&#x2F;旧文本&#x2F;新文本&#x2F;g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-可视区域替换"><a href="#2-可视区域替换" class="headerlink" title="2) 可视区域替换"></a>2) 可视区域替换</h4><ul><li><strong>先选中</strong> 要替换文字的 <strong>范围</strong></li><li>命令格式如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">:s&#x2F;旧文本&#x2F;新文本&#x2F;g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-确认替换"><a href="#3-确认替换" class="headerlink" title="3) 确认替换"></a>3) 确认替换</h4><ul><li>如果把末尾的 <code>g</code> 改成 <code>gc</code> 在替换的时候，会有提示！<strong>推荐使用！</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">:%s&#x2F;旧文本&#x2F;新文本&#x2F;gc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>y</code> - <code>yes</code> 替换</li><li><code>n</code> - <code>no</code> 不替换</li><li><code>a</code> - <code>all</code> 替换所有</li><li><code>q</code> - <code>quit</code> 退出替换</li><li><code>l</code> - <code>last</code> 最后一个，并把光标移动到行首</li><li><code>^E</code> 向下滚屏</li><li><code>^Y</code> 向上滚屏</li></ol><h3 id="4-11-插入命令"><a href="#4-11-插入命令" class="headerlink" title="4.11 插入命令"></a>4.11 插入命令</h3><ul><li>在 <code>vi</code> 中除了常用的 <code>i</code> 进入 <strong>编辑模式</strong> 外，还提供了以下命令同样可以进入编辑模式：</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th><th align="center">常用</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">insert</td><td>在当前字符前插入文本</td><td align="center">常用</td></tr><tr><td align="center">I</td><td align="center">insert</td><td>在行首插入文本</td><td align="center">较常用</td></tr><tr><td align="center">a</td><td align="center">append</td><td>在当前字符后添加文本</td><td align="center"></td></tr><tr><td align="center">A</td><td align="center">append</td><td>在行末添加文本</td><td align="center">较常用</td></tr><tr><td align="center">o</td><td align="center"></td><td>在当前行后面插入一空行</td><td align="center">常用</td></tr><tr><td align="center">O</td><td align="center"></td><td>在当前行前面插入一空行</td><td align="center">常用</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118195444.png" alt="004_插入命令-w400" loading="lazy"></p><h4 id="演练-1-——-编辑命令和数字连用"><a href="#演练-1-——-编辑命令和数字连用" class="headerlink" title="演练 1 —— 编辑命令和数字连用"></a>演练 1 —— 编辑命令和数字连用</h4><ul><li>在开发中，可能会遇到连续输入 <code>N</code> 个同样的字符</li></ul><blockquote><p>在 <code>Python</code> 中有简单的方法，但是其他语言中通常需要自己输入</p></blockquote><ul><li>例如：<code>**********</code> 连续 10 个星号</li></ul><p>要实现这个效果可以在 <strong>命令模式</strong> 下</p><ol><li>输入 <code>10</code>，表示要重复 10 次</li><li>输入 <code>i</code> 进入 <strong>编辑模式</strong></li><li>输入 <code>*</code> 也就是重复的文字</li><li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 就会把第 <code>2、3</code> 两步的操作重复 <code>10</code> 次</li></ol><blockquote><p>提示：正常开发时，在 <strong>进入编辑模式之前，不要按数字</strong></p></blockquote><h4 id="演练-2-——-利用-可视块-给多行代码增加注释"><a href="#演练-2-——-利用-可视块-给多行代码增加注释" class="headerlink" title="演练 2 —— 利用 可视块 给多行代码增加注释"></a>演练 2 —— 利用 可视块 给多行代码增加注释</h4><ul><li>在开发中，可能会遇到一次性给多行代码 <strong>增加注释</strong> 的情况</li></ul><blockquote><p>在 <code>Python</code> 中，要给代码增加注释，可以在代码前增加一个 <code># </code></p></blockquote><p>要实现这个效果可以在 <strong>命令模式</strong> 下</p><ol><li>移动到要添加注释的 <strong>第 1 行代码</strong>，按 <code>^</code> 来到行首</li><li>按 <code>CTRL + v</code> 进入 <strong>可视块</strong> 模式</li><li>使用 <code>j</code> 向下连续选中要添加的代码行</li><li>输入 <code>I</code> 进入 <strong>编辑模式</strong>，并在 <strong>行首插入</strong>，注意：一定要使用 <strong>I</strong></li><li>输入 <code># </code> 也就是注释符号</li><li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 会在之前选中的每一行代码 <strong>前</strong> 插入 <code># </code></li></ol><h2 id="05-分屏命令"><a href="#05-分屏命令" class="headerlink" title="05. 分屏命令"></a>05. 分屏命令</h2><ul><li>属于 <code>vi</code> 的高级命令 —— 可以 <strong>同时编辑和查看多个文件</strong></li></ul><h3 id="5-1-末行命令扩展"><a href="#5-1-末行命令扩展" class="headerlink" title="5.1 末行命令扩展"></a>5.1 末行命令扩展</h3><p><strong>末行命令</strong> 主要是针对文件进行操作的：<strong>保存</strong>、<strong>退出</strong>、<strong>保存&amp;退出</strong>、<strong>搜索&amp;替换</strong>、<strong>另存</strong>、<strong>新建</strong>、<strong>浏览文件</strong></p><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:e .</td><td align="center">edit</td><td>会打开内置的文件浏览器，浏览要当前目录下的文件</td></tr><tr><td align="center">:n 文件名</td><td align="center">new</td><td>新建文件</td></tr><tr><td align="center">:w 文件名</td><td align="center">write</td><td>另存为，但是仍然编辑当前文件，并不会切换文件</td></tr></tbody></table><blockquote><p>提示：切换文件之前，必须保证当前这个文件已经被保存！</p></blockquote><ul><li>已经学习过的 <strong>末行命令</strong>：</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:w</td><td align="center">write</td><td>保存</td></tr><tr><td align="center">:q</td><td align="center">quit</td><td>退出，如果没有保存，不允许退出</td></tr><tr><td align="center">:q!</td><td align="center">quit</td><td>强行退出，不保存退出</td></tr><tr><td align="center">:wq</td><td align="center">write &amp; quit</td><td>保存并退出</td></tr><tr><td align="center">:x</td><td align="center"></td><td>保存并退出</td></tr><tr><td align="center">:%s&#x2F;&#x2F;&#x2F;gc</td><td align="center"></td><td>确认搜索并替换</td></tr></tbody></table><blockquote><p>在实际开发中，可以使用 <code>w</code> 命令 <strong>阶段性的备份代码</strong></p></blockquote><h3 id="5-2-分屏命令"><a href="#5-2-分屏命令" class="headerlink" title="5.2 分屏命令"></a>5.2 分屏命令</h3><ul><li>使用 <strong>分屏命令</strong>，可以 <strong>同时编辑和查看多个文件</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:sp [文件名]</td><td align="center">split</td><td>横向增加分屏</td></tr><tr><td align="center">:vsp [文件名]</td><td align="center">vertical split</td><td>纵向增加分屏</td></tr></tbody></table><h4 id="1-切换分屏窗口"><a href="#1-切换分屏窗口" class="headerlink" title="1) 切换分屏窗口"></a>1) 切换分屏窗口</h4><blockquote><p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">window</td><td>切换到下一个窗口</td></tr><tr><td align="center">r</td><td align="center">reverse</td><td>互换窗口</td></tr><tr><td align="center">c</td><td align="center">close</td><td>关闭当前窗口，但是不能关闭最后一个窗口</td></tr><tr><td align="center">q</td><td align="center">quit</td><td>退出当前窗口，如果是最后一个窗口，则关闭 vi</td></tr><tr><td align="center">o</td><td align="center">other</td><td>关闭其他窗口</td></tr></tbody></table><h4 id="2-调整窗口大小"><a href="#2-调整窗口大小" class="headerlink" title="2) 调整窗口大小"></a>2) 调整窗口大小</h4><blockquote><p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">+</td><td align="center"></td><td>增加窗口高度</td></tr><tr><td align="center">-</td><td align="center"></td><td>减少窗口高度</td></tr><tr><td align="center">&gt;</td><td align="center"></td><td>增加窗口宽度</td></tr><tr><td align="center">&lt;</td><td align="center"></td><td>减少窗口宽度</td></tr><tr><td align="center">&#x3D;</td><td align="center"></td><td>等分窗口大小</td></tr></tbody></table><blockquote><p>调整窗口宽高的命令可以和数字连用，例如：<code>5 CTRL + W +</code> 连续 5 次增加高度</p></blockquote><h2 id="06-常用命令速查图"><a href="#06-常用命令速查图" class="headerlink" title="06. 常用命令速查图"></a>06. 常用命令速查图</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118195445.png" alt="vi" loading="lazy"></p><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h3><ul><li><code>vimrc</code> 是 <code>vim</code> 的配置文件，可以设置 vim 的配置，包括：<strong>热键</strong>、<strong>配色</strong>、<strong>语法高亮</strong>、<strong>插件</strong> 等</li><li><code>Linux</code> 中 <code>vimrc</code> 有两个位置，<strong>家目录下的配置文件优先级更高</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;vim&#x2F;vimrc~&#x2F;.vimrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>常用的插件有：<ul><li>代码补全</li><li>代码折叠</li><li>搜索</li><li>Git 集成</li><li>……</li></ul></li><li>网上有很多高手已经配置好的针对 <code>python</code> 开发的 <code>vimrc</code> 文件，可以下载过来直接使用，或者等大家多 <code>Linux</code> 比较熟悉后，再行学习！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vi&lt;/code&gt; 简介&lt;/li&gt;
&lt;li&gt;打开和新建文件&lt;/li&gt;
&lt;li&gt;三种工作模式&lt;/li&gt;
&lt;li&gt;常用命</summary>
      
    
    
    
    <category term="linux" scheme="http://ccsu.top/categories/linux/"/>
    
    
    <category term="vim" scheme="http://ccsu.top/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>linux基本命令</title>
    <link href="http://ccsu.top/posts/65cd929b/"/>
    <id>http://ccsu.top/posts/65cd929b/</id>
    <published>2022-03-11T01:12:00.000Z</published>
    <updated>2022-03-18T16:20:41.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-Python-基础课程安排"><a href="#01-Python-基础课程安排" class="headerlink" title="01.Python 基础课程安排"></a>01.Python 基础课程安排</h1><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194457.jpg" alt="001_积跬步以至千里" loading="lazy">  </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194500.jpg" alt="002_三天打鱼两天晒网" loading="lazy"></p><h1 id="02-操作系统（科普章节）"><a href="#02-操作系统（科普章节）" class="headerlink" title="02.操作系统（科普章节）"></a>02.操作系统（科普章节）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>了解<strong>操作系统</strong>及作用</li></ul><h2 id="1-操作系统（Operation-System，OS）"><a href="#1-操作系统（Operation-System，OS）" class="headerlink" title="1. 操作系统（Operation System，OS）"></a>1. 操作系统（Operation System，OS）</h2><blockquote><p>操作系统作为接口的示意图</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194511.png" alt="001_OS作为接口的示意图" loading="lazy">￼</p><blockquote><p>没有安装操作系统的计算机，通常被称为 <strong>裸机</strong></p><ul><li>如果想在 <strong>裸机</strong> 上运行自己所编写的程序，就必须用机器语言书写程序</li><li>如果计算机上安装了操作系统，就可以在操作系统上安装支持的高级语言环境，用高级语言开发程序</li></ul></blockquote><h3 id="1-1-操作系统的作用"><a href="#1-1-操作系统的作用" class="headerlink" title="1.1 操作系统的作用"></a>1.1 操作系统的作用</h3><ul><li>是现代计算机系统中 <strong>最基本和最重要</strong> 的系统软件</li><li>是 <strong>配置在计算机硬件上的第一层软件</strong>，是对硬件系统的首次扩展</li><li>主要作用是<strong>管理好硬件设备</strong>，并为用户和应用程序提供一个简单的接口，以便于使用</li><li>而其他的诸如编译程序、数据库管理系统，以及大量的应用软件，都直接依赖于操作系统的支持</li></ul><h3 id="1-2-不同应用领域的主流操作系统"><a href="#1-2-不同应用领域的主流操作系统" class="headerlink" title="1.2 不同应用领域的主流操作系统"></a>1.2 不同应用领域的主流操作系统</h3><ul><li>桌面操作系统</li><li>服务器操作系统</li><li>嵌入式操作系统</li><li>移动设备操作系统</li></ul><h4 id="1-gt-桌面操作系统"><a href="#1-gt-桌面操作系统" class="headerlink" title="1&gt; 桌面操作系统"></a>1&gt; 桌面操作系统</h4><ul><li>Windows 系列<ul><li>用户群体大</li></ul></li><li>macOS<ul><li>适合于开发人员</li></ul></li><li>Linux<ul><li>应用软件少</li></ul></li></ul><h4 id="2-gt-服务器操作系统"><a href="#2-gt-服务器操作系统" class="headerlink" title="2&gt; 服务器操作系统"></a>2&gt; 服务器操作系统</h4><ul><li>Linux<ul><li>安全、稳定、免费</li><li>占有率高</li></ul></li><li>Windows Server<ul><li>付费</li><li>占有率低</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194512.jpg" alt="002_机房照片" loading="lazy">￼</p><h4 id="3-gt-嵌入式操作系统"><a href="#3-gt-嵌入式操作系统" class="headerlink" title="3&gt; 嵌入式操作系统"></a>3&gt; 嵌入式操作系统</h4><ul><li>Linux</li></ul><h4 id="4-gt-移动设备操作系统"><a href="#4-gt-移动设备操作系统" class="headerlink" title="4&gt; 移动设备操作系统"></a>4&gt; 移动设备操作系统</h4><ul><li>iOS</li><li>Android（基于 <code>Linux</code>）</li></ul><h3 id="1-3-虚拟机"><a href="#1-3-虚拟机" class="headerlink" title="1.3 虚拟机"></a>1.3 虚拟机</h3><p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统</p><ul><li>虚拟系统通过生成现有操作系统的全新虚拟镜像，具有真实操作系统完全一样的功能</li><li>进入虚拟系统后，所有操作都是在这个全新的独立的虚拟系统里面进行，可以独立安装运行软件，保存数据，拥有自己的独立桌面，不会对真正的系统产生任何影响</li><li>而且能够在现有系统与虚拟镜像之间灵活切换的一类操作系统</li></ul><h1 id="03-操作系统的发展史（科普章节）"><a href="#03-操作系统的发展史（科普章节）" class="headerlink" title="03.操作系统的发展史（科普章节）"></a>03.操作系统的发展史（科普章节）</h1><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><ul><li>了解操作系统的发展历史</li><li>知道 Linux 内核及发行版的区别</li><li>知道 Linux 的应用领域</li></ul><h2 id="01-操作系统的发展历史"><a href="#01-操作系统的发展历史" class="headerlink" title="01. 操作系统的发展历史"></a>01. 操作系统的发展历史</h2><h3 id="1-1-Unix"><a href="#1-1-Unix" class="headerlink" title="1.1 Unix"></a>1.1 Unix</h3><p>1965 年之前的时候，电脑并不像现在一样普遍，它可不是一般人能碰的起的，除非是军事或者学院的研究机构，而且当时大型主机至多能提供30台终端（30个键盘、显示器)，连接一台电脑</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194533.png" alt="001_大型机" loading="lazy">￼</p><p><strong>为了解决数量不够用的问题</strong></p><ul><li>1965 年左后由 <strong>贝尔实验室</strong> 加入了 <strong>麻省理工学院</strong> 以及 <strong>通用电气</strong> 合作的计划 —— 该计划要建立一套 <strong>多使用者(multi－user)<strong>、</strong>多任务(multi－processor)<strong>、</strong>多层次(multi－level)</strong> 的 <strong>MULTICS</strong> 操作系统，想让大型主机支持 300 台终端</li><li>1969 年前后这个项目进度缓慢，资金短缺，贝尔实验室退出了研究</li><li>1969 年从这个项目中退出的 <strong>Ken Thompson</strong> 当时在实验室无聊时，为了让一台空闲的电脑上能够运行 “星际旅行（Space Travel）” 游行，在 8 月份左右趁着其妻子探亲的时间，<strong>用了 1 个月的时间</strong>，使用汇编写出了 Unix 操作系统的原型</li><li>1970 年，美国贝尔实验室的 <strong>Ken Thompson</strong>，以 <strong>BCPL</strong> 语言为基础，设计出很简单且很接近硬件的 <strong>B 语言</strong>（取BCPL的首字母），并且他用 <strong>B 语言</strong> 写了第一个 UNIX 操作系统</li><li>1971 年，同样酷爱 “星际旅行（Space Travel）” 的 <strong>Dennis M.Ritchie</strong> 为了能早点儿玩上游戏，加入了 <strong>Thompson</strong> 的开发项目，合作开发 UNIX，他的主要工作是改造 <strong>B 语言</strong>，因为<strong>B 语言</strong> 的跨平台性较差</li><li>1972 年，<strong>Dennis M.Ritchie</strong> 在 <strong>B 语言</strong> 的基础上最终设计出了一种新的语言，他取了 <strong>BCPL</strong> 的第二个字母作为这种语言的名字，这就是 <strong>C 语言</strong></li><li>1973 年初，<strong>C 语言</strong>的主体完成，<strong>Thompson</strong> 和 <strong>Ritchie</strong> 迫不及待地开始用它完全重写了现在大名鼎鼎的 <strong>Unix 操作系统</strong></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194534.png" alt="002_unix之父" loading="lazy">￼</p><p>肯·汤普逊（左）和丹尼斯·里奇（右）</p><h4 id="C-语言"><a href="#C-语言" class="headerlink" title="C 语言"></a>C 语言</h4><ul><li>在把 <strong>UNIX</strong> 移植到其他类型的计算机上使用时，<strong>C 语言</strong>强大的移植性（Portability）在此显现<ul><li>机器语言和汇编语言都不具有移植性，为 x86 开发的程序，不可能在 Alpha，SPARC 和 ARM 等机器上运行</li></ul></li><li>而 <strong>C 语言</strong>程序则可以使用在任意架构的处理器上，只要那种架构的处理器<strong>具有对应的 C 语言编译器和库</strong>，然后将 C 源代码编译、连接成目标二进制文件之后即可运行</li></ul><h4 id="Unix-家谱"><a href="#Unix-家谱" class="headerlink" title="Unix 家谱"></a>Unix 家谱</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194535.jpg" alt="003_unix家谱" loading="lazy">￼</p><h3 id="1-2-Minix"><a href="#1-2-Minix" class="headerlink" title="1.2 Minix"></a>1.2 Minix</h3><ul><li>因为 <strong>AT&amp;T（通用电气）</strong> 的政策改变，在 Version 7 Unix 推出之后，发布新的使用条款，将 UNIX 源代码私有化，在大学中不再能使用 UNIX 源代码</li><li><strong>Andrew S. Tanenbaum（塔能鲍姆）</strong> 教授为了能 <strong>在课堂上教授学生操作系统运作的细节</strong>，决定在不使用任何 AT&amp;T 的源代码前提下，自行开发与 UNIX 兼容的操作系统，以避免版权上的争议</li><li>以 <strong>小型 UNIX（mini-UNIX）</strong>之意，将它称为 <strong>MINIX</strong></li></ul><h3 id="1-3-Linux"><a href="#1-3-Linux" class="headerlink" title="1.3 Linux"></a>1.3 Linux</h3><ul><li>1991 年 <strong>林纳斯（Linus）</strong> 就读于赫尔辛基大学期间，对 Unix 产生浓厚兴趣，尝试着在Minix 上做一些开发工作</li><li>因为 <strong>Minix</strong> 只是教学使用，因此功能并不强，<strong>林纳斯</strong> 经常要用他的终端 <strong>仿真器（Terminal Emulator）</strong> 去访问大学主机上的新闻组和邮件，为了方便读写和下载文件，他自己编写了磁盘驱动程序和文件系统，这些在后来成为了 Linux 第一个内核的雏形，当时，他年仅 21 岁！</li><li><strong>林纳斯</strong> 利用 GNU 的 bash 当做开发环境，gcc 当做编译工具，编写了 Linux 内核，一开始 Linux 并不能兼容 Unix<ul><li>即 Unix 上跑的应用程序不能在 Linux 上跑，即应用程序与内核之间的接口不一致</li><li>一开始 Linux 只适用于 386，后来经过全世界的网友的帮助，最终能够兼容多种硬件</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194536.jpg" alt="004_林纳斯" loading="lazy">￼</p><h2 id="02-Linux-内核及发行版"><a href="#02-Linux-内核及发行版" class="headerlink" title="02. Linux 内核及发行版"></a>02. Linux 内核及发行版</h2><h3 id="2-1-Linux-内核版本"><a href="#2-1-Linux-内核版本" class="headerlink" title="2.1 Linux 内核版本"></a>2.1 Linux 内核版本</h3><ul><li><strong>内核（kernel）</strong>是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层</li><li>Linux 内核版本又分为 <strong>稳定版</strong> 和 <strong>开发版</strong>，两种版本是相互关联，相互循环<ul><li><strong>稳定版</strong>：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些 bug 或加入一些新的驱动程序</li><li><strong>开发版</strong>：由于要试验各种解决方案，所以变化很快</li></ul></li><li>内核源码网址：<a href="http://www.kernel.org/">http://www.kernel.org</a></li></ul><blockquote><p>所有来自全世界的对 Linux 源码的修改最终都会汇总到这个网站，由 Linus 领导的开源社区对其进行甄别和修改最终决定是否进入到 Linux 主线内核源码中</p></blockquote><h3 id="2-2-Linux-发行版本"><a href="#2-2-Linux-发行版本" class="headerlink" title="2.2 Linux 发行版本"></a>2.2 Linux 发行版本</h3><ul><li><p><strong>Linux 发行版（也被叫做 GNU&#x2F;Linux 发行版）</strong>通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件</p></li><li><p>常见的发行版本如下：</p><ul><li>Ubuntu</li><li>Redhat</li><li>Fedora</li><li>openSUSE</li><li>Linux Mint</li><li>Debian</li><li>Manjaro</li><li>Mageia</li><li>CentOS</li><li>Arch</li></ul></li><li><p>十大 Linux 服务器发行版排行榜：<a href="http://os.51cto.com/art/201612/526126.htm">http://os.51cto.com/art/201612/526126.htm</a></p></li></ul><blockquote><p>在几乎每一份与 Linux 有关的榜单上，基于 Debian 的 Ubuntu 都占有一席之位。Canonical 的Ubuntu 胜过其他所有的 Linux 服务器发行版 ―― 从简单安装、出色的硬件发现，到世界级的商业支持，Ubuntu确立了难以企及的严格标准</p></blockquote><h2 id="03-Linux-的应用领域"><a href="#03-Linux-的应用领域" class="headerlink" title="03. Linux 的应用领域"></a>03. Linux 的应用领域</h2><h3 id="3-1-服务器领域"><a href="#3-1-服务器领域" class="headerlink" title="3.1 服务器领域"></a>3.1 服务器领域</h3><ul><li>Linux 在服务器领域的应用是其重要分支</li><li>Linux 免费、稳定、高效等特点在这里得到了很好的体现<ul><li>早期因为维护、运行等原因同样受到了很大的限制</li><li>近些年来 Linux 服务器市场得到了飞速的提升，尤其在一些高端领域尤为广泛</li></ul></li></ul><h3 id="3-2-嵌入式领域"><a href="#3-2-嵌入式领域" class="headerlink" title="3.2 嵌入式领域"></a>3.2 嵌入式领域</h3><ul><li>近些年来 Linux 在嵌入式领域的应用得到了飞速的提高</li><li>Linux 运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百 KB 等特点，使其近些年来在嵌入式领域的应用得到非常大的提高</li></ul><blockquote><p>主要应用：<strong>机顶盒</strong>、<strong>数字电视</strong>、<strong>网络电话</strong>、<strong>程控交换机</strong>、<strong>手机</strong>、<strong>PDA</strong>、等都是其应用领域，得到了 Google、三星、摩托罗拉、NEC 等公司的大力推广</p></blockquote><h3 id="3-3-个人桌面领域"><a href="#3-3-个人桌面领域" class="headerlink" title="3.3 个人桌面领域"></a>3.3 个人桌面领域</h3><ul><li>此领域是传统 Linux 应用最薄弱的环节</li><li>传统 Linux 由于界面简单、操作复杂、应用软件少的缺点，一直被 Windows 所压制</li><li>近些年来随着 <strong>Ubuntu</strong>、<strong>Fedora</strong> 等优秀桌面环境的兴起，同时各大硬件厂商对其支持的加大，Linux 在个人桌面领域的占有率在逐渐的提高</li></ul><blockquote><p>在 Ubuntu 中玩 QQ</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194537.jpg" alt="005_ubuntu_qq" loading="lazy">￼</p><h1 id="04-文件和目录（理解）"><a href="#04-文件和目录（理解）" class="headerlink" title="04.文件和目录（理解）"></a>04.文件和目录（理解）</h1><h2 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h2><ul><li>理解 Linux 文件目录的结构</li></ul><h2 id="01-单用户操作系统和多用户操作系统（科普）"><a href="#01-单用户操作系统和多用户操作系统（科普）" class="headerlink" title="01. 单用户操作系统和多用户操作系统（科普）"></a>01. 单用户操作系统和多用户操作系统（科普）</h2><ul><li><p><strong>单用户操作系统</strong>：指一台计算机在同一时间 <strong>只能由一个用户</strong> 使用，一个用户独自享用系统的全部硬件和软件资源</p><ul><li><strong>Windows XP</strong> 之前的版本都是单用户操作系统</li></ul></li><li><p><strong>多用户操作系统</strong>：指一台计算机在同一时间可以由 <strong>多个用户</strong> 使用，多个用户共同享用系统的全部硬件和软件资源</p><ul><li><strong>Unix</strong> 和 <strong>Linux</strong> 的设计初衷就是多用户操作系统</li></ul></li></ul><h2 id="02-Windows-和-Linux-文件系统区别"><a href="#02-Windows-和-Linux-文件系统区别" class="headerlink" title="02. Windows 和 Linux 文件系统区别"></a>02. <code>Windows</code> 和 <code>Linux</code> 文件系统区别</h2><h3 id="2-1-Windows-下的文件系统"><a href="#2-1-Windows-下的文件系统" class="headerlink" title="2.1 Windows 下的文件系统"></a>2.1 <code>Windows</code> 下的文件系统</h3><ul><li>在 <code>Windows</code> 下，打开 “计算机”，我们看到的是一个个的驱动器盘符：</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194549.png" alt="001_Windows下的多个盘" loading="lazy">￼</p><ul><li>每个驱动器都有自己的根目录结构，这样形成了多个树并列的情形，如图所示：</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194550.png" alt="001-Windows下多个盘为节点的目录分支" loading="lazy">￼</p><h3 id="2-2-Linux-下的文件系统"><a href="#2-2-Linux-下的文件系统" class="headerlink" title="2.2 Linux 下的文件系统"></a>2.2 <code>Linux</code> 下的文件系统</h3><ul><li>在 <code>Linux</code> 下，我们是看不到这些驱动器盘符，我们看到的是文件夹（目录）：</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194551.png" alt="002_Ubuntu文件目录" loading="lazy">￼</p><ul><li><code>Ubuntu</code> 没有盘符这个概念，只有一个根目录 <code>/</code>，所有文件都在它下面</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194552.png" alt="003-Linux的树形示意图" loading="lazy">￼</p><h3 id="2-3-用户目录"><a href="#2-3-用户目录" class="headerlink" title="2.3 用户目录"></a>2.3 用户目录</h3><p>位于 <code>/home/user</code>，称之为用户工作目录或家目录，表示方式：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;home&#x2F;user~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4-Linux-主要目录速查表"><a href="#2-4-Linux-主要目录速查表" class="headerlink" title="2.4 Linux 主要目录速查表"></a>2.4 <code>Linux</code> 主要目录速查表</h3><ul><li>&#x2F;：根目录，<strong>一般根目录下只存放目录</strong>，在 linux 下有且只有一个根目录，所有的东西都是从这里开始<ul><li>当在终端里输入 <code>/home</code>，其实是在告诉电脑，先从 <code>/</code>（根目录）开始，再进入到 <code>home</code> 目录</li></ul></li><li>&#x2F;bin、&#x2F;usr&#x2F;bin：可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等</li><li>&#x2F;boot：放置 linux 系统启动时用到的一些文件，如 linux 的内核文件：<code>/boot/vmlinuz</code>，系统引导管理器：<code>/boot/grub</code></li><li>&#x2F;dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱<code>mount /dev/cdrom /mnt</code></li><li>&#x2F;etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有<ul><li>&#x2F;etc&#x2F;inittab</li><li>&#x2F;etc&#x2F;fstab</li><li>&#x2F;etc&#x2F;init.d</li><li>&#x2F;etc&#x2F;X11</li><li>&#x2F;etc&#x2F;sysconfig</li><li>&#x2F;etc&#x2F;xinetd.d</li></ul></li><li>&#x2F;home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下<ul><li><code>~</code> 表示当前用户的家目录</li><li><code>~edu</code> 表示用户 <code>edu</code> 的家目录</li></ul></li><li>&#x2F;lib、&#x2F;usr&#x2F;lib、&#x2F;usr&#x2F;local&#x2F;lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</li><li>&#x2F;lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下</li><li>&#x2F;mnt: &#x2F;media：光盘默认挂载点，通常光盘挂载于 &#x2F;mnt&#x2F;cdrom 下，也不一定，可以选择任意位置进行挂载</li><li>&#x2F;opt：给主机额外安装软件所摆放的目录</li><li>&#x2F;proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件有：&#x2F;proc&#x2F;cpuinfo、&#x2F;proc&#x2F;interrupts、&#x2F;proc&#x2F;dma、&#x2F;proc&#x2F;ioports、&#x2F;proc&#x2F;net&#x2F;* 等</li><li>&#x2F;root：系统管理员root的家目录</li><li>&#x2F;sbin、&#x2F;usr&#x2F;sbin、&#x2F;usr&#x2F;local&#x2F;sbin：放置系统管理员使用的可执行命令，如 fdisk、shutdown、mount 等。与 &#x2F;bin 不同的是，这几个目录是给系统管理员 root 使用的命令，一般用户只能”查看”而不能设置和使用</li><li>&#x2F;tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下</li><li>&#x2F;srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 &#x2F;srv&#x2F;www 内</li><li>&#x2F;usr：应用程序存放目录<ul><li>&#x2F;usr&#x2F;bin：存放应用程序</li><li>&#x2F;usr&#x2F;share：存放共享数据</li><li>&#x2F;usr&#x2F;lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</li><li>&#x2F;usr&#x2F;local：存放软件升级包</li><li>&#x2F;usr&#x2F;share&#x2F;doc：系统说明文件存放目录</li><li>&#x2F;usr&#x2F;share&#x2F;man：程序说明文件存放目录</li></ul></li><li>&#x2F;var：放置系统执行过程中经常变化的文件<ul><li>&#x2F;var&#x2F;log：随时更改的日志文件</li><li>&#x2F;var&#x2F;spool&#x2F;mail：邮件存放的目录</li><li>&#x2F;var&#x2F;run：程序或服务启动后，其 PID 存放在该目录下</li></ul></li></ul><h1 id="05-Ubuntu-图形界面入门"><a href="#05-Ubuntu-图形界面入门" class="headerlink" title="05.Ubuntu 图形界面入门"></a>05.Ubuntu 图形界面入门</h1><h2 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h2><ul><li>熟悉 Ubuntu 图形界面的基本使用</li></ul><h2 id="01-Ubuntu-的任务栏"><a href="#01-Ubuntu-的任务栏" class="headerlink" title="01. Ubuntu 的任务栏"></a>01. Ubuntu 的任务栏</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194600.jpg" loading="lazy">￼</p><h2 id="02-窗口操作按钮"><a href="#02-窗口操作按钮" class="headerlink" title="02. 窗口操作按钮"></a>02. 窗口操作按钮</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194601.jpg" loading="lazy">￼</p><h2 id="03-窗口菜单条"><a href="#03-窗口菜单条" class="headerlink" title="03. 窗口菜单条"></a>03. 窗口菜单条</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194602.jpg" loading="lazy">￼</p><h1 id="06-常用-Linux-命令的基本使用"><a href="#06-常用-Linux-命令的基本使用" class="headerlink" title="06.常用 Linux 命令的基本使用"></a>06.常用 Linux 命令的基本使用</h1><h2 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h2><ul><li>理解学习 Linux 终端命令的原因</li><li>常用 Linux 命令体验</li></ul><h2 id="01-学习-Linux-终端命令的原因"><a href="#01-学习-Linux-终端命令的原因" class="headerlink" title="01. 学习 Linux 终端命令的原因"></a>01. 学习 Linux 终端命令的原因</h2><ul><li>Linux 刚面世时并没有图形界面，所有的操作全靠命令完成，如 <strong>磁盘操作</strong>、<strong>文件存取</strong>、<strong>目录操作</strong>、<strong>进程管理</strong>、<strong>文件权限</strong> 设定等</li><li>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 <strong>远程</strong> 通过 <strong>SSH 客户端</strong> 来完成的，并没有图形界面，所有的维护工作都需要通过命令来完成</li><li>在职场中，作为后端程序员，必须要或多或少的掌握一些 Linux 常用的终端命令</li><li>Linux 发行版本的命令大概有 200 多个，但是常用的命令只有 10 多个而已</li></ul><blockquote><p>学习终端命令的技巧：</p><ul><li>不需要死记硬背，对于常用命令，用的多了，自然就记住了</li><li>不要尝试一次学会所有的命令，有些命令是非常不常用的，临时遇到，临时百度就可以</li></ul></blockquote><h2 id="02-常用-Linux-命令的基本使用"><a href="#02-常用-Linux-命令的基本使用" class="headerlink" title="02. 常用 Linux 命令的基本使用"></a>02. 常用 Linux 命令的基本使用</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>02</td><td>pwd</td><td>print wrok directory</td><td>查看当前所在文件夹</td></tr><tr><td>03</td><td>cd [目录名]</td><td>change directory</td><td>切换文件夹</td></tr><tr><td>04</td><td>touch [文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>05</td><td>mkdir [目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>06</td><td>rm [文件名]</td><td>remove</td><td>删除指定的文件名</td></tr><tr><td>07</td><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><blockquote><p>小技巧</p><ul><li><code>ctrl + shift + =</code> <strong>放大</strong>终端窗口的字体显示</li><li><code>ctrl + -</code> <strong>缩小</strong>终端窗口的字体显示</li></ul></blockquote><h3 id="03-自动补全"><a href="#03-自动补全" class="headerlink" title="03. 自动补全"></a>03. 自动补全</h3><ul><li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li></ul></li></ul><blockquote><p>小技巧</p><ul><li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li></ul></blockquote><h1 id="07-Linux-终端命令格式"><a href="#07-Linux-终端命令格式" class="headerlink" title="07.Linux 终端命令格式"></a>07.Linux 终端命令格式</h1><h2 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h2><ul><li>了解终端命令格式</li><li>知道如何查阅终端命令帮助信息</li></ul><h2 id="01-终端命令格式"><a href="#01-终端命令格式" class="headerlink" title="01. 终端命令格式"></a>01. 终端命令格式</h2><pre class="line-numbers language-none"><code class="language-none">command [-options] [parameter]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ul><li><code>command</code>：命令名，相应功能的英文单词或单词的缩写</li><li><code>[-options]</code>：选项，可用来对命令进行控制，也可以省略</li><li><code>parameter</code>：传给命令的参数，可以是 <strong>零个</strong>、<strong>一个</strong> 或者 <strong>多个</strong></li></ul><blockquote><p><code>[]</code> 代表可选</p></blockquote><h2 id="02-查阅命令帮助信息（知道）"><a href="#02-查阅命令帮助信息（知道）" class="headerlink" title="02. 查阅命令帮助信息（知道）"></a>02. 查阅命令帮助信息（知道）</h2><blockquote><p>提示</p><ul><li>现阶段只需要 <strong>知道</strong> 通过以下两种方式可以查询命令的帮助信息</li><li>先学习<strong>常用命令</strong>及<strong>常用选项</strong>的使用即可，工作中如果遇到问题可以借助 <strong>网络搜索</strong></li></ul></blockquote><h3 id="2-1-help"><a href="#2-1-help" class="headerlink" title="2.1 --help"></a>2.1 <code>--help</code></h3><pre class="line-numbers language-none"><code class="language-none">command --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ul><li>显示 <code>command</code> 命令的帮助信息</li></ul><h3 id="2-2-man"><a href="#2-2-man" class="headerlink" title="2.2 man"></a>2.2 man</h3><pre class="line-numbers language-none"><code class="language-none">man command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ul><li>查阅 <code>command</code> 命令的使用手册</li></ul><blockquote><p><code>man</code> 是 <strong>manual</strong> 的缩写，是 Linux 提供的一个 <strong>手册</strong>，包含了绝大部分的命令、函数的详细使用说明</p></blockquote><p>使用 <code>man</code> 时的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一屏</td></tr><tr><td>Enter 键</td><td>一次滚动手册页的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>&#x2F;word</td><td>搜索 <strong>word</strong> 字符串</td></tr></tbody></table><h1 id="08-文件和目录常用命令"><a href="#08-文件和目录常用命令" class="headerlink" title="08.文件和目录常用命令"></a>08.文件和目录常用命令</h1><h2 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h2><ul><li>查看目录内容<ul><li><code>ls</code></li></ul></li><li>切换目录<ul><li><code>cd</code></li></ul></li><li>创建和删除操作<ul><li><code>touch</code></li><li><code>rm</code></li><li><code>mkdir</code></li></ul></li><li>拷贝和移动文件<ul><li><code>cp</code></li><li><code>mv</code></li></ul></li><li>查看文件内容<ul><li><code>cat</code></li><li><code>more</code></li><li><code>grep</code></li></ul></li><li>其他<ul><li><code>echo</code></li><li>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></li><li>管道 <code>|</code></li></ul></li></ul><h2 id="01-查看目录内容"><a href="#01-查看目录内容" class="headerlink" title="01. 查看目录内容"></a>01. 查看目录内容</h2><h3 id="1-1-终端实用技巧"><a href="#1-1-终端实用技巧" class="headerlink" title="1.1 终端实用技巧"></a>1.1 终端实用技巧</h3><h4 id="1-gt-自动补全"><a href="#1-gt-自动补全" class="headerlink" title="1&gt; 自动补全"></a>1&gt; 自动补全</h4><ul><li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li></ul></li></ul><h4 id="2-gt-曾经使用过的命令"><a href="#2-gt-曾经使用过的命令" class="headerlink" title="2&gt; 曾经使用过的命令"></a>2&gt; 曾经使用过的命令</h4><ul><li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li></ul><h3 id="1-2-ls-命令说明"><a href="#1-2-ls-命令说明" class="headerlink" title="1.2 ls 命令说明"></a>1.2 <code>ls</code> 命令说明</h3><ul><li><code>ls</code> 是英文单词 <strong>list</strong> 的简写，其功能为列出目录的内容，是用户最常用的命令之一，类似于 <strong>DOS</strong> 下的 <code>dir</code> 命令</li></ul><h4 id="Linux-下文件和目录的特点"><a href="#Linux-下文件和目录的特点" class="headerlink" title="Linux 下文件和目录的特点"></a>Linux 下文件和目录的特点</h4><ul><li>Linux <strong>文件</strong> 或者 <strong>目录</strong> 名称最长可以有 <code>256</code> 个字符</li><li>以 <code>.</code> 开头的文件为隐藏文件，需要用 -a 参数才能显示</li><li><strong>.</strong> 代表当前目录</li><li><strong>..</strong> 代表上一级目录</li></ul><h3 id="1-3-ls-常用选项"><a href="#1-3-ls-常用选项" class="headerlink" title="1.3 ls 常用选项"></a>1.3 ls 常用选项</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示指定目录下所有子目录与文件，包括隐藏文件</td></tr><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>配合 -l 以人性化的方式显示文件大小</td></tr></tbody></table><h4 id="计算机中文件大小的表示方式（科普）"><a href="#计算机中文件大小的表示方式（科普）" class="headerlink" title="计算机中文件大小的表示方式（科普）"></a>计算机中文件大小的表示方式（科普）</h4><table><thead><tr><th>单位</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td>字节</td><td>B（Byte）</td><td>在计算机中作为一个数字单元，一般为 8 位二进制数</td></tr><tr><td>千</td><td>K（Kibibyte）</td><td>1 KB &#x3D; 1024 B，千字节 （1024 &#x3D; 2 ** 10）</td></tr><tr><td>兆</td><td>M（Mebibyte）</td><td>1 MB &#x3D; 1024 KB，百万字节</td></tr><tr><td>千兆</td><td>G（Gigabyte）</td><td>1 GB &#x3D; 1024 MB，十亿字节，千兆字节</td></tr><tr><td>太</td><td>T（Terabyte）</td><td>1 TB &#x3D; 1024 GB，万亿字节，太字节</td></tr><tr><td>拍</td><td>P（Petabyte）</td><td>1 PB &#x3D; 1024 TB，千万亿字节，拍字节</td></tr><tr><td>艾</td><td>E（Exabyte）</td><td>1 EB &#x3D; 1024 PB，百亿亿字节，艾字节</td></tr><tr><td>泽</td><td>Z（Zettabyte）</td><td>1 ZB &#x3D; 1024 EB，十万亿亿字节，泽字节</td></tr><tr><td>尧</td><td>Y（Yottabyte）</td><td>1 YB &#x3D; 1024 ZB，一亿亿亿字节，尧字节</td></tr></tbody></table><h3 id="1-4-ls-通配符的使用"><a href="#1-4-ls-通配符的使用" class="headerlink" title="1.4 ls 通配符的使用"></a>1.4 ls 通配符的使用</h3><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任意个数个字符</td></tr><tr><td>?</td><td>代表任意一个字符，至少 1 个</td></tr><tr><td>[]</td><td>表示可以匹配字符组中的任一一个</td></tr><tr><td>[abc]</td><td>匹配 a、b、c 中的任意一个</td></tr><tr><td>[a-f]</td><td>匹配从 a 到 f 范围内的的任意一个字符</td></tr></tbody></table><h2 id="02-切换目录"><a href="#02-切换目录" class="headerlink" title="02. 切换目录"></a>02. 切换目录</h2><h3 id="2-1-cd"><a href="#2-1-cd" class="headerlink" title="2.1 cd"></a>2.1 <code>cd</code></h3><ul><li><code>cd</code> 是英文单词 <strong>change directory</strong> 的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一</li></ul><blockquote><p>注意：Linux 所有的 <strong>目录</strong> 和 <strong>文件名</strong> 都是大小写敏感的</p></blockquote><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd</td><td>切换到当前用户的主目录(&#x2F;home&#x2F;用户目录)</td></tr><tr><td>cd ~</td><td>切换到当前用户的主目录(&#x2F;home&#x2F;用户目录)</td></tr><tr><td>cd .</td><td>保持在当前目录不变</td></tr><tr><td>cd ..</td><td>切换到上级目录</td></tr><tr><td>cd -</td><td>可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h3 id="2-2-相对路径和绝对路径"><a href="#2-2-相对路径和绝对路径" class="headerlink" title="2.2 相对路径和绝对路径"></a>2.2 相对路径和绝对路径</h3><ul><li><strong>相对路径</strong> 在输入路径时，最前面不是 <strong>&#x2F;</strong> 或者 **~**，表示相对 <strong>当前目录</strong> 所在的目录位置</li><li><strong>绝对路径</strong> 在输入路径时，最前面是 <strong>&#x2F;</strong> 或者 **~**，表示从 <strong>根目录&#x2F;家目录</strong> 开始的具体目录位置</li></ul><h2 id="03-创建和删除操作"><a href="#03-创建和删除操作" class="headerlink" title="03. 创建和删除操作"></a>03. 创建和删除操作</h2><h3 id="3-1-touch"><a href="#3-1-touch" class="headerlink" title="3.1 touch"></a>3.1 <code>touch</code></h3><ul><li>创建文件或修改文件时间<ul><li>如果文件 <strong>不存在</strong>，可以创建一个空白文件</li><li>如果文件 <strong>已经存在</strong>，可以修改文件的末次修改日期</li></ul></li></ul><h3 id="3-2-mkdir"><a href="#3-2-mkdir" class="headerlink" title="3.2 mkdir"></a>3.2 <code>mkdir</code></h3><ul><li>创建一个新的目录</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>可以递归创建目录</td></tr></tbody></table><blockquote><p><strong>新建目录的名称</strong> 不能与当前目录中 <strong>已有的目录或文件</strong> 同名</p></blockquote><h3 id="3-3-rm"><a href="#3-3-rm" class="headerlink" title="3.3 rm"></a>3.3 <code>rm</code></h3><ul><li>删除文件或目录</li></ul><blockquote><p>使用 <code>rm</code> 命令要小心，因为文件删除后不能恢复</p></blockquote><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>强制删除，忽略不存在的文件，无需提示</td></tr><tr><td>-r</td><td>递归地删除目录下的内容，<strong>删除文件夹</strong> 时必须加此参数</td></tr></tbody></table><h2 id="04-拷贝和移动文件"><a href="#04-拷贝和移动文件" class="headerlink" title="04. 拷贝和移动文件"></a>04. 拷贝和移动文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>tree [目录名]</td><td>tree</td><td>以树状图列出文件目录结构</td></tr><tr><td>02</td><td>cp 源文件 目标文件</td><td>copy</td><td>复制文件或者目录</td></tr><tr><td>03</td><td>mv 源文件 目标文件</td><td>move</td><td>移动文件或者目录／文件或者目录重命名</td></tr></tbody></table><h3 id="4-1-tree"><a href="#4-1-tree" class="headerlink" title="4.1 tree"></a>4.1 <code>tree</code></h3><ul><li><code>tree</code> 命令可以以树状图列出文件目录结构</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>只显示目录</td></tr></tbody></table><h3 id="4-2-cp"><a href="#4-2-cp" class="headerlink" title="4.2 cp"></a>4.2 <code>cp</code></h3><ul><li><code>cp</code> 命令的功能是将给出的 <strong>文件</strong> 或 <strong>目录</strong> 复制到另一个 <strong>文件</strong> 或 <strong>目录</strong> 中，相当于 <strong>DOS</strong> 下的 <code>copy</code> 命令</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr><tr><td>-r</td><td>若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr></tbody></table><h3 id="4-3-mv"><a href="#4-3-mv" class="headerlink" title="4.3 mv"></a>4.3 <code>mv</code></h3><ul><li><code>mv</code> 命令可以用来 <strong>移动</strong> <strong>文件</strong> 或 <strong>目录</strong>，也可以给 <strong>文件或目录重命名</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr></tbody></table><h2 id="05-查看文件内容"><a href="#05-查看文件内容" class="headerlink" title="05. 查看文件内容"></a>05. 查看文件内容</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td></tr><tr><td>02</td><td>more 文件名</td><td>more</td><td>分屏显示文件内容</td></tr><tr><td>03</td><td>grep 搜索文本 文件名</td><td>grep</td><td>搜索文本文件内容</td></tr></tbody></table><h3 id="5-1-cat"><a href="#5-1-cat" class="headerlink" title="5.1 cat"></a>5.1 <code>cat</code></h3><ul><li><code>cat</code> 命令可以用来 <strong>查看文件内容</strong>、<strong>创建文件</strong>、<strong>文件合并</strong>、<strong>追加文件内容</strong> 等功能</li><li><code>cat</code> 会一次显示所有的内容，适合 <strong>查看内容较少</strong> 的文本文件</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>对非空输出行编号</td></tr><tr><td>-n</td><td>对输出的所有行编号</td></tr></tbody></table><blockquote><p>Linux 中还有一个 <code>nl</code> 的命令和 <code>cat -b</code> 的效果等价</p></blockquote><h3 id="5-2-more"><a href="#5-2-more" class="headerlink" title="5.2 more"></a>5.2 <code>more</code></h3><ul><li><code>more</code> 命令可以用于分屏显示文件内容，每次只显示一页内容</li><li>适合于 <strong>查看内容较多</strong>的文本文件</li></ul><p>使用 <code>more</code> 的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一屏</td></tr><tr><td>Enter 键</td><td>一次滚动手册页的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>&#x2F;word</td><td>搜索 <strong>word</strong> 字符串</td></tr></tbody></table><h3 id="5-3-grep"><a href="#5-3-grep" class="headerlink" title="5.3 grep"></a>5.3 <code>grep</code></h3><ul><li>Linux 系统中 <code>grep</code> 命令是一种强大的文本搜索工具</li><li><code>grep</code>允许对文本文件进行 <strong>模式</strong>查找，所谓模式查找，又被称为正则表达式，在就业班会详细讲解</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-v</td><td>显示不包含匹配文本的所有行（相当于求反）</td></tr><tr><td>-i</td><td>忽略大小写</td></tr></tbody></table><ul><li>常用的两种模式查找</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>^a</td><td>行首，搜寻以 <strong>a</strong> 开头的行</td></tr><tr><td>ke$</td><td>行尾，搜寻以 <strong>ke</strong> 结束的行</td></tr></tbody></table><h2 id="06-其他"><a href="#06-其他" class="headerlink" title="06. 其他"></a>06. 其他</h2><h3 id="6-1-echo-文字内容"><a href="#6-1-echo-文字内容" class="headerlink" title="6.1 echo 文字内容"></a>6.1 <code>echo 文字内容</code></h3><ul><li><code>echo</code> 会在终端中显示参数指定的文字，通常会和 <strong>重定向</strong> 联合使用</li></ul><h3 id="6-2-重定向-gt-和-gt-gt"><a href="#6-2-重定向-gt-和-gt-gt" class="headerlink" title="6.2 重定向 &gt; 和 &gt;&gt;"></a>6.2 重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></h3><ul><li>Linux 允许将命令执行结果 <strong>重定向</strong>到一个 <strong>文件</strong></li><li>将本应显示在<strong>终端上的内容</strong> <strong>输出／追加</strong> 到<strong>指定文件中</strong></li></ul><p>其中</p><ul><li><code>&gt;</code> 表示输出，会覆盖文件原有的内容</li><li><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</li></ul><h3 id="6-3-管道"><a href="#6-3-管道" class="headerlink" title="6.3 管道 |"></a>6.3 管道 <code>|</code></h3><ul><li>Linux 允许将 <strong>一个命令的输出</strong> 可以<strong>通过管道</strong> 做为 <strong>另一个命令的输入</strong></li><li>可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 <code>|</code> 的左右分为两端，左端塞东西（写），右端取东西（读）</li></ul><p>常用的管道命令有：</p><ul><li><code>more</code>：分屏显示内容</li><li><code>grep</code>：在命令执行结果的基础上查询指定的文本</li></ul><h1 id="09-远程管理常用命令"><a href="#09-远程管理常用命令" class="headerlink" title="09.远程管理常用命令"></a>09.远程管理常用命令</h1><h2 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h2><ul><li>关机&#x2F;重启<ul><li><code>shutdown</code></li></ul></li><li>查看或配置网卡信息<ul><li><code>ifconfig</code></li><li><code>ping</code></li></ul></li><li>远程登录和复制文件<ul><li><code>ssh</code></li><li><code>scp</code></li></ul></li></ul><h2 id="01-关机-x2F-重启"><a href="#01-关机-x2F-重启" class="headerlink" title="01. 关机&#x2F;重启"></a>01. 关机&#x2F;重启</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>shutdown 选项 时间</td><td>shutdown</td><td>关机／重新启动</td></tr></tbody></table><h3 id="1-1-shutdown"><a href="#1-1-shutdown" class="headerlink" title="1.1 shutdown"></a>1.1 <code>shutdown</code></h3><ul><li><code>shutdown</code> 命令可以 <strong>安全</strong> <strong>关闭</strong> 或者 <strong>重新启动系统</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>重新启动</td></tr></tbody></table><blockquote><p>提示：</p><ul><li><strong>不指定选项和参数</strong>，默认表示 <strong>1 分钟</strong>之后 <strong>关闭电脑</strong></li><li>远程维护服务器时，最好不要关闭系统，而应该重新启动系统</li></ul></blockquote><ul><li>常用命令示例</li></ul><pre class="line-numbers language-none"><code class="language-none"># 重新启动操作系统，其中 now 表示现在$ shutdown -r now# 立刻关机，其中 now 表示现在$ shutdown now# 系统在今天的 20:25 会关机$ shutdown 20:25# 系统再过十分钟后自动关机$ shutdown +10# 取消之前指定的关机计划$ shutdown -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="02-查看或配置网卡信息"><a href="#02-查看或配置网卡信息" class="headerlink" title="02. 查看或配置网卡信息"></a>02. 查看或配置网卡信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ifconfig</td><td>configure a network interface</td><td>查看&#x2F;配置计算机当前的网卡配置信息</td></tr><tr><td>02</td><td>ping ip地址</td><td>ping</td><td>检测到目标 ip地址 的连接是否正常</td></tr></tbody></table><h3 id="2-1-网卡-和-IP-地址"><a href="#2-1-网卡-和-IP-地址" class="headerlink" title="2.1 网卡 和 IP 地址"></a>2.1 网卡 和 IP 地址</h3><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><ul><li>网卡是一个专门负责网络通讯的硬件设备</li><li><strong>IP 地址</strong>是设置在网卡上的地址信息</li></ul><blockquote><p>我们可以把 <strong>电脑</strong> 比作 <strong>电话</strong>，<strong>网卡</strong> 相当于 <strong>SIM 卡</strong>，<strong>IP 地址</strong> 相当于 <strong>电话号码</strong></p></blockquote><h4 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h4><ul><li><strong>每台联网的电脑上</strong>都有 <strong>IP 地址</strong>，<strong>是保证电脑之间正常通讯的重要设置</strong></li></ul><blockquote><p>注意：每台电脑的 IP 地址不能相同，否则会出现 IP 地址冲突，并且没有办法正常通讯</p><p>提示：有关 <strong>IP 地址</strong>的详细内容，在就业班会详细讲解！</p></blockquote><h3 id="2-2-ifconfig"><a href="#2-2-ifconfig" class="headerlink" title="2.2 ifconfig"></a>2.2 <code>ifconfig</code></h3><ul><li><code>ifconfig</code> 可以查看／配置计算机当前的网卡配置信息</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看网卡配置信息$ ifconfig# 查看网卡对应的 IP 地址$ ifconfig | grep inet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：一台计算机中有可能会有一个 <strong>物理网卡</strong> 和 <strong>多个虚拟网卡</strong>，在 Linux 中物理网卡的名字通常以 <code>ensXX</code> 表示</p></blockquote><ul><li><code>127.0.0.1</code> 被称为 <strong>本地回环&#x2F;环回地址</strong>，一般用来测试本机网卡是否正常</li></ul><h3 id="2-3-ping"><a href="#2-3-ping" class="headerlink" title="2.3 ping"></a>2.3 <code>ping</code></h3><pre class="line-numbers language-none"><code class="language-none"># 检测到目标主机是否连接正常$ ping IP地址# 检测本地网卡工作正常$ ping 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ping</code> 一般用于检测当前计算机到目标计算机之间的网络 <strong>是否通畅</strong>，<strong>数值越大，速度越慢</strong></li></ul><blockquote><ul><li><code>ping</code> 的工作原理与潜水艇的声纳相似，<code>ping</code> 这个命令就是取自 <strong>声纳的声音</strong></li><li>网络管理员之间也常将 <code>ping</code> 用作动词 —— <strong>ping 一下计算机X，看他是否开着</strong></li></ul></blockquote><p>原理：网络上的机器都有 <strong>唯一确定的 IP 地址</strong>，我们给<strong>目标 IP 地址</strong>发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在</p><blockquote><p>提示：在 Linux 中，想要终止一个终端程序的执行，绝大多数都可以使用 <code>CTRL + C</code></p></blockquote><h2 id="03-远程登录和复制文件"><a href="#03-远程登录和复制文件" class="headerlink" title="03. 远程登录和复制文件"></a>03. 远程登录和复制文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ssh 用户名@ip</td><td>secure shell</td><td>关机／重新启动</td></tr><tr><td>02</td><td>scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径</td><td>secure copy</td><td>远程复制文件</td></tr></tbody></table><h3 id="3-1-ssh-基础（重点）"><a href="#3-1-ssh-基础（重点）" class="headerlink" title="3.1 ssh 基础（重点）"></a>3.1 <code>ssh</code> 基础（重点）</h3><p>在 Linux 中 SSH 是 <strong>非常常用</strong> 的工具，通过 <strong>SSH 客户端</strong> 我们可以连接到运行了 <strong>SSH 服务器</strong> 的远程机器上</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194637.png" alt="001_SSH示意图" loading="lazy">￼</p><ul><li><strong>SSH 客户端</strong>是一种使用 <code>Secure Shell（SSH）</code> 协议连接到远程计算机的软件程序</li><li><code>SSH</code> 是目前较可靠，<strong>专为远程登录会话和其他网络服务</strong> 提供安全性的协议<ul><li>利用 <code>SSH 协议</code> 可以有效<strong>防止远程管理过程中的信息泄露</strong></li><li>通过 <code>SSH 协议</code> 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗</li></ul></li><li><code>SSH</code> 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度</li></ul><h4 id="1-域名-和-端口号"><a href="#1-域名-和-端口号" class="headerlink" title="1) 域名 和 端口号"></a>1) 域名 和 端口号</h4><h5 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h5><ul><li>由一串 <strong>用点分隔</strong> 的名字组成，例如：<code>www.itcast.cn</code></li><li>是 <strong>IP 地址</strong> 的别名，方便用户记忆</li></ul><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h5><ul><li><p><strong>IP 地址</strong>：通过 <strong>IP 地址</strong> 找到网络上的 <strong>计算机</strong></p></li><li><p><strong>端口号</strong>：通过 <strong>端口号</strong> 可以找到 <strong>计算机上运行的应用程序</strong></p><ul><li><strong>SSH 服务器</strong> 的默认端口号是 <code>22</code>，如果是默认端口号，在连接的时候，可以省略</li></ul></li><li><p>常见服务端口号列表：</p></li></ul><table><thead><tr><th>序号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>01</td><td>SSH 服务器</td><td>22</td></tr><tr><td>02</td><td>Web 服务器</td><td>80</td></tr><tr><td>03</td><td>HTTPS</td><td>443</td></tr><tr><td>04</td><td>FTP 服务器</td><td>21</td></tr></tbody></table><blockquote><p>提示：有关 <strong>端口号</strong>的详细内容，在就业班会详细讲解！</p></blockquote><h4 id="2-SSH-客户端的简单使用"><a href="#2-SSH-客户端的简单使用" class="headerlink" title="2) SSH 客户端的简单使用"></a>2) SSH 客户端的简单使用</h4><pre class="line-numbers language-none"><code class="language-none">ssh [-p port] user@remote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>user</code> 是在远程机器上的用户名，如果不指定的话默认为当前用户</li><li><code>remote</code> 是远程机器的地址，可以是 <strong>IP</strong>／<strong>域名</strong>，或者是 <strong>后面会提到的别名</strong></li><li><code>port</code> 是 <strong>SSH Server 监听的端口</strong>，如果不指定，就为默认值 <code>22</code></li></ul><blockquote><p>提示：</p><ul><li>使用 <code>exit</code> 退出当前用户的登录</li></ul><p>注意：</p><ul><li><code>ssh</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code> 或者 <code>XShell</code> 客户端软件即可</li></ul><p>提示：</p><ul><li>在工作中，SSH 服务器的端口号很有可能<strong>不是 22</strong>，如果遇到这种情况就需要使用 <code>-p</code> 选项，指定正确的端口号，否则无法正常连接到服务器</li></ul></blockquote><h4 id="3-Windows-下-SSH-客户端的安装"><a href="#3-Windows-下-SSH-客户端的安装" class="headerlink" title="3) Windows 下 SSH 客户端的安装"></a>3) Windows 下 SSH 客户端的安装</h4><ul><li><code>Putty</code> <a href="http://www.chiark.greenend.org.uk/%7Esgtatham/putty/latest.html">http://www.chiark.greenend.org.uk/~sgtatham&#x2F;putty&#x2F;latest.html</a></li><li><code>XShell</code> <a href="http://xshellcn.com/">http://xshellcn.com</a></li></ul><blockquote><p>建议从官方网站下载正式的安装程序</p></blockquote><h3 id="3-2-scp（掌握）"><a href="#3-2-scp（掌握）" class="headerlink" title="3.2 scp（掌握）"></a>3.2 <code>scp</code>（掌握）</h3><ul><li>scp 就是 <code>secure copy</code>，是一个在 Linux 下用来进行 <strong>远程拷贝文件</strong> 的命令</li><li>它的<strong>地址格式与 ssh 基本相同</strong>，<strong>需要注意的是</strong>，在指定端口时用的是大写的 <code>-P</code> 而不是小写的</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194638.png" alt="002_SCP示意图" loading="lazy">￼</p><pre class="line-numbers language-none"><code class="language-none"># 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop&#x2F;01.py# 注意：&#96;:&#96; 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径scp -P port 01.py user@remote:Desktop&#x2F;01.py# 把远程 家目录下的 Desktop&#x2F;01.py 文件 复制到 本地当前目录下的 01.pyscp -P port user@remote:Desktop&#x2F;01.py 01.py# 加上 -r 选项可以传送文件夹# 把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktopscp -r demo user@remote:Desktop# 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹scp -r user@remote:Desktop demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td>-P</td><td>若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口</td></tr></tbody></table><blockquote><p>注意：</p><ul><li><code>scp</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code>，使用 <code>pscp</code> 命令行工具或者安装 <code>FileZilla</code> 使用 <code>FTP</code> 进行文件传输</li></ul></blockquote><h4 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a><code>FileZilla</code></h4><ul><li>官方网站：<a href="https://www.filezilla.cn/download/client">https://www.filezilla.cn/download/client</a></li><li><code>FileZilla</code> 在传输文件时，使用的是 <code>FTP 服务</code> 而不是 <code>SSH 服务</code>，因此端口号应该设置为 <code>21</code></li></ul><h3 id="3-3-SSH-高级（知道）"><a href="#3-3-SSH-高级（知道）" class="headerlink" title="3.3 SSH 高级（知道）"></a>3.3 SSH 高级（知道）</h3><ul><li>免密码登录</li><li>配置别名</li></ul><blockquote><p>提示：有关 SSH 配置信息都保存在用户家目录下的 <code>.ssh</code> 目录下</p></blockquote><h4 id="1）免密码登录"><a href="#1）免密码登录" class="headerlink" title="1）免密码登录"></a>1）免密码登录</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>配置公钥<ul><li>执行 <code>ssh-keygen</code> 即可生成 SSH 钥匙，一路回车即可</li></ul></li><li>上传公钥到服务器<ul><li>执行 <code>ssh-copy-id -p port user@remote</code>，可以让远程服务器记住我们的公钥</li></ul></li></ul><h5 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194639.png" alt="003_SSH 免密码示意图" loading="lazy">￼</p><blockquote><p>非对称加密算法</p><ul><li>使用 <strong>公钥</strong> 加密的数据，需要使用 <strong>私钥</strong> 解密</li><li>使用 <strong>私钥</strong> 加密的数据，需要使用 <strong>公钥</strong> 解密</li></ul></blockquote><h4 id="2-配置别名"><a href="#2-配置别名" class="headerlink" title="2) 配置别名"></a>2) 配置别名</h4><p>每次都输入 <code>ssh -p port user@remote</code>，时间久了会觉得很麻烦，特别是当 <code>user</code>, <code>remote</code> 和 <code>port</code> 都得输入，而且还不好记忆</p><p>而 <strong>配置别名</strong> 可以让我们进一步偷懒，譬如用：<code>ssh mac</code> 来替代上面这么一长串，那么就在 <code>~/.ssh/config</code> 里面追加以下内容：</p><pre class="line-numbers language-none"><code class="language-none">Host mac    HostName ip地址    User itheima    Port 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>保存之后，即可用 <code>ssh mac</code> 实现远程登录了，<code>scp</code> 同样可以使用</strong></p><h1 id="10-用户权限相关命令"><a href="#10-用户权限相关命令" class="headerlink" title="10.用户权限相关命令"></a>10.用户权限相关命令</h1><h2 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h2><ul><li><strong>用户</strong> 和 <strong>权限</strong> 的基本概念</li><li><strong>用户管理</strong> 终端命令</li><li><strong>组管理</strong> 终端命令</li><li><strong>修改权限</strong> 终端命令</li></ul><h2 id="01-用户-和-权限-的基本概念"><a href="#01-用户-和-权限-的基本概念" class="headerlink" title="01. 用户 和 权限 的基本概念"></a>01. <strong>用户</strong> 和 <strong>权限</strong> 的基本概念</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><ul><li><strong>用户</strong> 是 Linux 系统工作中重要的一环，用户管理包括 <strong>用户</strong> 与 <strong>组</strong> 管理</li><li>在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都<strong>必须拥有一个账号</strong>，并且<strong>对于不同的系统资源拥有不同的使用权限</strong></li><li>在 Linux 中，可以指定 <strong>每一个用户</strong> 针对 <strong>不同的文件或者目录</strong> 的 <strong>不同权限</strong></li><li>对 <strong>文件／目录</strong> 的权限包括：</li></ul><table><thead><tr><th>序号</th><th>权限</th><th>英文</th><th>缩写</th><th>数字代号</th></tr></thead><tbody><tr><td>01</td><td>读</td><td>read</td><td>r</td><td>4</td></tr><tr><td>02</td><td>写</td><td>write</td><td>w</td><td>2</td></tr><tr><td>03</td><td>执行</td><td>excute</td><td>x</td><td>1</td></tr></tbody></table><h3 id="1-2-组"><a href="#1-2-组" class="headerlink" title="1.2 组"></a>1.2 组</h3><ul><li>为了方便用户管理，提出了 <strong>组</strong> 的概念，如下图所示</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194646.png" alt="001_组示意图" loading="lazy">￼</p><ul><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul><h3 id="1-3-ls-l-扩展"><a href="#1-3-ls-l-扩展" class="headerlink" title="1.3 ls -l 扩展"></a>1.3 ls -l 扩展</h3><ul><li><p><code>ls -l</code> 可以查看文件夹下文件的详细信息，从左到右依次是：</p><ul><li><strong>权限</strong>，第 1 个字符如果是 <code>d</code> 表示目录</li><li><strong>硬链接数</strong>，通俗地讲，就是有多少种方式，可以访问到当前目录／文件</li><li><strong>拥有者</strong>，家目录下 文件／目录 的拥有者通常都是当前用户</li><li><strong>组</strong>，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲</li><li><strong>大小</strong></li><li><strong>时间</strong></li><li><strong>名称</strong></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194647.png" alt="002_权限示意图" loading="lazy">￼</p><h3 id="1-4-chmod-简单使用（重要）"><a href="#1-4-chmod-简单使用（重要）" class="headerlink" title="1.4 chmod 简单使用（重要）"></a>1.4 <code>chmod</code> 简单使用（重要）</h3><ul><li><code>chmod</code> 可以修改 <strong>用户／组</strong> 对 <strong>文件／目录</strong> 的权限</li><li>命令格式如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">chmod +&#x2F;-rwx 文件名|目录名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提示：以上方式会一次性修改 <code>拥有者</code> &#x2F; <code>组</code> 权限，有关 <code>chmod</code> 的高级用法，后续会讲</p></blockquote><h3 id="1-5-超级用户"><a href="#1-5-超级用户" class="headerlink" title="1.5 超级用户"></a>1.5 超级用户</h3><ul><li>Linux 系统中的 <code>root</code> 账号通常 <strong>用于系统的维护和管理</strong>，对操作系统的所有资源 <strong>具有所有访问权限</strong></li><li>在大多数版本的 Linux 中，都不推荐 <strong>直接使用 root 账号登录系统</strong></li><li>在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户”</li></ul><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><ul><li><code>su</code> 是 <code>substitute user</code> 的缩写，表示 <strong>使用另一个用户的身份</strong></li><li><code>sudo</code> 命令用来以其他身份来执行命令，预设的身份为 <code>root</code></li><li>用户使用 <code>sudo</code> 时，必须先输入密码，之后有 <strong>5 分钟的有效期限</strong>，超过期限则必须重新输入密码</li></ul><blockquote><p>若其未经授权的用户企图使用 <code>sudo</code>，则会发出警告邮件给管理员</p></blockquote><h2 id="02-组管理-终端命令"><a href="#02-组管理-终端命令" class="headerlink" title="02. 组管理 终端命令"></a>02. <strong>组管理</strong> 终端命令</h2><blockquote><p>提示：<strong>创建组</strong> &#x2F; <strong>删除组</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>groupadd 组名</td><td>添加组</td></tr><tr><td>02</td><td>groupdel 组名</td><td>删除组</td></tr><tr><td>03</td><td>cat &#x2F;etc&#x2F;group</td><td>确认组信息</td></tr><tr><td>04</td><td>chgrp -R 组名 文件&#x2F;目录名</td><td>递归修改文件&#x2F;目录的所属组</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>组信息保存在 <code>/etc/group</code> 文件中</li><li><code>/etc</code> 目录是专门用来保存 <strong>系统配置信息</strong> 的目录</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194646.png" alt="001_组示意图" loading="lazy">￼</p><ul><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul><h4 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h4><ol><li>在 <code>python</code> 用户的桌面文件夹下创建 <code>Python学习</code> 目录</li><li>新建 <code>dev</code> 组</li><li>将 <code>Python学习</code> 目录的组修改为 <code>dev</code></li></ol><h2 id="03-用户管理-终端命令"><a href="#03-用户管理-终端命令" class="headerlink" title="03. 用户管理 终端命令"></a>03. <strong>用户管理</strong> 终端命令</h2><blockquote><p>提示：<strong>创建用户</strong> &#x2F; <strong>删除用户</strong> &#x2F; <strong>修改其他用户密码</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><h3 id="3-1-创建用户／设置密码／删除用户"><a href="#3-1-创建用户／设置密码／删除用户" class="headerlink" title="3.1 创建用户／设置密码／删除用户"></a>3.1 创建用户／设置密码／删除用户</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>useradd -m -g 组 新建用户名</td><td>添加新用户</td><td></td></tr></tbody></table><ul><li>-m 自动建立用户家目录</li><li>-g 指定用户所在的组，否则会建立一个和同名的组</li></ul><p> |<br>| 02 | passwd 用户名 | 设置用户密码 | 如果是普通用户，直接用 passwd 可以修改自己的账户密码 |<br>| 03 | userdel -r 用户名 | 删除用户 | -r 选项会自动删除用户家目录 |<br>| 04 | cat &#x2F;etc&#x2F;passwd | grep 用户名 | 确认用户信息 | 新建用户后，用户信息会保存在 &#x2F;etc&#x2F;passwd 文件中 |</p><blockquote><p>提示：</p><ul><li>创建用户时，如果忘记添加 <code>-m</code> 选项指定新用户的家目录 —— 最简单的方法就是<strong>删除用户，重新创建</strong></li><li>创建用户时，默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong></li><li>用户信息保存在 <code>/etc/passwd</code> 文件中</li></ul></blockquote><h3 id="3-2-查看用户信息"><a href="#3-2-查看用户信息" class="headerlink" title="3.2 查看用户信息"></a>3.2 查看用户信息</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>id [用户名]</td><td>查看用户 UID 和 GID 信息</td></tr><tr><td>02</td><td>who</td><td>查看当前所有登录的用户列表</td></tr><tr><td>03</td><td>whoami</td><td>查看当前登录用户的账户名</td></tr></tbody></table><h4 id="passwd-文件"><a href="#passwd-文件" class="headerlink" title="passwd 文件"></a>passwd 文件</h4><p><code>/etc/passwd</code> 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p><ol><li>用户名</li><li>密码（x，表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地帐号</li><li>家目录</li><li>登录使用的 Shell，就是登录之后，使用的终端命令，<code>ubuntu</code> 默认是 <code>dash</code></li></ol><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><ul><li><code>usermod</code> 可以用来设置 <strong>用户</strong> 的 <strong>主组</strong> ／ <strong>附加组</strong> 和 <strong>登录 Shell</strong>，命令格式如下：</li><li><strong>主组</strong>：通常在新建用户时指定，在 <code>etc/passwd</code> 的第 4 列 <strong>GID 对应的组</strong></li><li><strong>附加组</strong>：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定 <strong>用户的附加权限</strong></li></ul><blockquote><p>提示：设置了用户的附加组之后，需要重新登录才能生效！</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 修改用户的主组（passwd 中的 GID）usermod -g 组 用户名# 修改用户的附加组usermod -G 组 用户名# 修改用户登录 Shellusermod -s &#x2F;bin&#x2F;bash 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：默认使用 <code>useradd</code> 添加的用户是没有权限使用 <code>sudo</code> 以 <code>root</code> 身份执行命令的，可以使用以下命令，将用户添加到 <code>sudo</code> 附加组中</p></blockquote><pre class="line-numbers language-none"><code class="language-none">usermod -G sudo 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="which（重要）"><a href="#which（重要）" class="headerlink" title="which（重要）"></a>which（重要）</h4><blockquote><p>提示</p><ul><li><code>/etc/passwd</code> 是用于保存用户信息的文件</li><li><code>/usr/bin/passwd</code> 是用于修改用户密码的程序</li></ul></blockquote><ul><li><code>which</code> 命令可以查看执行命令所在位置，例如：</li></ul><pre class="line-numbers language-none"><code class="language-none">which ls# 输出# &#x2F;bin&#x2F;lswhich useradd# 输出# &#x2F;usr&#x2F;sbin&#x2F;useradd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bin-和-sbin"><a href="#bin-和-sbin" class="headerlink" title="bin 和 sbin"></a><code>bin</code> 和 <code>sbin</code></h5><ul><li>在 <code>Linux</code> 中，绝大多数可执行文件都是保存在 <code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code></li><li><code>/bin</code>（<code>binary</code>）是二进制执行文件目录，主要用于具体应用</li><li><code>/sbin</code>（<code>system binary</code>）是系统管理员专用的二进制代码存放目录，主要用于系统管理</li><li><code>/usr/bin</code>（<code>user commands for applications</code>）后期安装的一些软件</li><li><code>/usr/sbin</code>（<code>super user commands for applications</code>）超级用户的一些管理程序</li></ul><blockquote><p>提示：</p><ul><li><code>cd</code> 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 <code>which</code> 无法找到 <code>cd</code> 命令的位置</li></ul></blockquote><h3 id="3-3-切换用户"><a href="#3-3-切换用户" class="headerlink" title="3.3 切换用户"></a>3.3 切换用户</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>su - 用户名</td><td>切换用户，并且切换目录</td><td>- 可以切换到用户家目录，否则保持位置不变</td></tr><tr><td>02</td><td>exit</td><td>退出当前登录账户</td><td></td></tr></tbody></table><ul><li><code>su</code> 不接用户名，可以切换到 <code>root</code>，但是不推荐使用，因为不安全</li><li><code>exit</code> 示意图如下：</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194648.png" alt="003_su和exit示意图" loading="lazy">￼</p><h2 id="04-修改文件权限"><a href="#04-修改文件权限" class="headerlink" title="04. 修改文件权限"></a>04. 修改文件权限</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>chown</td><td>修改拥有者</td></tr><tr><td>02</td><td>chgrp</td><td>修改组</td></tr><tr><td>03</td><td>chmod</td><td>修改权限</td></tr></tbody></table><ul><li>命令格式如下：</li></ul><pre class="line-numbers language-none"><code class="language-none"># 修改文件|目录的拥有者chown 用户名 文件名|目录名# 递归修改文件|目录的组chgrp -R 组名 文件名|目录名# 递归修改文件权限chmod -R 755 文件名|目录名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>chmod</code> 在设置权限时，可以简单地使用三个数字分别对应 <strong>拥有者</strong> ／ <strong>组</strong> 和 <strong>其他</strong> 用户的权限</li></ul><pre class="line-numbers language-none"><code class="language-none"># 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他chmod +&#x2F;-rwx 文件名|目录名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194649.png" alt="004_文件权限示意图" loading="lazy">￼</p><ul><li>常见数字组合有（<code>u</code>表示用户／<code>g</code>表示组／<code>o</code>表示其他）：<ul><li><code>777</code> &#x3D;&#x3D;&#x3D;&gt; <code>u=rwx,g=rwx,o=rwx</code></li><li><code>755</code> &#x3D;&#x3D;&#x3D;&gt; <code>u=rwx,g=rx,o=rx</code></li><li><code>644</code> &#x3D;&#x3D;&#x3D;&gt; <code>u=rw,g=r,o=r</code></li></ul></li></ul><h4 id="chmod-演练目标"><a href="#chmod-演练目标" class="headerlink" title="chmod 演练目标"></a><code>chmod</code> 演练目标</h4><ol><li>将 <code>01.py</code> 的权限修改为 <code>u=rwx,g=rx,o=r</code></li><li>将 <code>123.txt</code> 的权限修改为 <code>u=rw,g=r,o=-</code></li><li>将 <code>test</code> 目录以及目录下的 <strong>所有</strong> 文件权限修改为 <code>u=rwx,g=rwx,o=rx</code></li></ol><h1 id="11-系统信息相关命令"><a href="#11-系统信息相关命令" class="headerlink" title="11.系统信息相关命令"></a>11.系统信息相关命令</h1><ul><li>本节内容主要是为了方便通过远程终端维护服务器时，查看服务器上当前 <strong>系统日期和时间</strong> ／ <strong>磁盘空间占用情况</strong> ／ <strong>程序执行情况</strong></li><li>本小结学习的终端命令基本都是查询命令，通过这些命令对系统资源的使用情况有个了解</li></ul><h2 id="目标-9"><a href="#目标-9" class="headerlink" title="目标"></a>目标</h2><ul><li>时间和日期<ul><li><code>date</code></li><li><code>cal</code></li></ul></li><li>磁盘和目录空间<ul><li><code>df</code></li><li><code>du</code></li></ul></li><li>进程信息<ul><li><code>ps</code></li><li><code>top</code></li><li><code>kill</code></li></ul></li></ul><h2 id="01-时间和日期"><a href="#01-时间和日期" class="headerlink" title="01. 时间和日期"></a>01. 时间和日期</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>date</td><td>查看系统时间</td></tr><tr><td>02</td><td>cal</td><td><code>calendar</code> 查看日历，<code>-y</code> 选项可以查看一年的日历</td></tr></tbody></table><h2 id="02-磁盘信息"><a href="#02-磁盘信息" class="headerlink" title="02. 磁盘信息"></a>02. 磁盘信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>df -h</td><td><code>disk free</code> 显示磁盘剩余空间</td></tr><tr><td>02</td><td>du -h [目录名]</td><td><code>disk usage</code> 显示目录下的文件大小</td></tr></tbody></table><ul><li>选项说明</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-h</td><td>以人性化的方式显示文件大小</td></tr></tbody></table><h2 id="03-进程信息"><a href="#03-进程信息" class="headerlink" title="03. 进程信息"></a>03. 进程信息</h2><ul><li>所谓 <strong>进程</strong>，通俗地说就是 <strong>当前正在执行的一个程序</strong></li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ps aux</td><td><code>process status</code> 查看进程的详细状况</td></tr><tr><td>02</td><td>top</td><td>动态显示运行中的进程并且排序</td></tr><tr><td>03</td><td>kill [-9] 进程代号</td><td>终止指定代号的进程，<code>-9</code> 表示强行终止</td></tr></tbody></table><blockquote><p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序</p></blockquote><ul><li><code>ps</code> 选项说明功能</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td>u</td><td>显示进程的详细状态</td></tr><tr><td>x</td><td>显示没有控制终端的进程</td></tr></tbody></table><blockquote><p>提示：使用 <code>kill</code> 命令时，最好只终止由当前用户开启的进程，而不要终止 <code>root</code> 身份开启的进程，否则可能导致系统崩溃</p><ul><li>要退出 <code>top</code> 可以直接输入 <code>q</code></li></ul></blockquote><h1 id="12-其他命令"><a href="#12-其他命令" class="headerlink" title="12.其他命令"></a>12.其他命令</h1><h2 id="目标-10"><a href="#目标-10" class="headerlink" title="目标"></a>目标</h2><ul><li>查找文件<ul><li><code>find</code></li></ul></li><li>软链接<ul><li><code>ln</code></li></ul></li><li>打包和压缩<ul><li><code>tar</code></li></ul></li><li>软件安装<ul><li><code>apt-get</code></li></ul></li></ul><h2 id="01-查找文件"><a href="#01-查找文件" class="headerlink" title="01. 查找文件"></a>01. 查找文件</h2><ul><li><code>find</code> 命令功能非常强大，通常用来在 <strong>特定的目录下</strong> <strong>搜索</strong> 符合条件的文件</li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>find [路径] -name “*.py”</td><td>查找指定路径下扩展名是 <code>.py</code> 的文件，包括子目录</td></tr></tbody></table><ul><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用 <code>find</code> 命令时同时可用</li><li>有关 <code>find</code> 的高级使用，在就业班会讲</li></ul><h3 id="演练目标-1"><a href="#演练目标-1" class="headerlink" title="演练目标"></a>演练目标</h3><ul><li>1. 搜索桌面目录下，文件名包含 <code>1</code> 的文件</li></ul><pre class="line-numbers language-none"><code class="language-none">find -name &quot;*1*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>2. 搜索桌面目录下，所有以 <code>.txt</code> 为扩展名的文件</li></ul><pre class="line-numbers language-none"><code class="language-none">find -name &quot;*.txt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>3. 搜索桌面目录下，以数字 <code>1</code> 开头的文件</li></ul><pre class="line-numbers language-none"><code class="language-none">find -name &quot;1*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="02-软链接"><a href="#02-软链接" class="headerlink" title="02. 软链接"></a>02. 软链接</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ln -s 被链接的源文件 链接文件</td><td>建立文件的软链接，用通俗的方式讲<strong>类似于</strong> Windows 下的<strong>快捷方式</strong></td></tr></tbody></table><ul><li>注意：</li><li>1. 没有 <code>-s</code> 选项建立的是一个 <strong>硬链接文件</strong><ul><li>两个文件占用相同大小的硬盘空间，<strong>工作中几乎不会建立文件的硬链接</strong></li></ul></li><li>2. <strong>源文件要使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</li></ul><h3 id="演练目标-2"><a href="#演练目标-2" class="headerlink" title="演练目标"></a>演练目标</h3><ul><li>1. 将桌面目录下的 <code>01.py</code> <strong>移动</strong>到 <code>demo/b/c</code> 目录下</li><li>2. 在桌面目录下新建 <code>01.py</code> 的 <strong>软链接</strong> <code>FirstPython</code><ul><li>分别使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 建立 <code>FirstPython</code> 的软链接</li></ul></li><li>3. 将 <code>FirstPython</code> <strong>移动</strong>到 <code>demo</code> 目录下，对比使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 的区别</li></ul><h3 id="硬链接简介（知道）"><a href="#硬链接简介（知道）" class="headerlink" title="硬链接简介（知道）"></a>硬链接简介（知道）</h3><ul><li>在使用 <code>ln</code> 创建链接时，如果没有 <code>-s</code> 选项，会创建一个 <strong>硬链接</strong>，而不是软链接</li></ul><h4 id="硬链接演练"><a href="#硬链接演练" class="headerlink" title="硬链接演练"></a>硬链接演练</h4><ul><li>1. 在 <code>~/Desktop/demo</code> 目录下建立 <code>~/Desktop/demo/b/c/01.py</code> 的硬链接 <code>01_hard</code></li><li>2. 使用 <code>ls -l</code> 查看文件的<strong>硬链接数</strong>（硬链接——有多少种方式可以访问文件或者目录）</li><li>3. 删除 <code>~/Desktop/demo/b/c/01.py</code>，并且使用 <code>tree</code> 来确认 <code>demo</code> 目录下的三个链接文件</li></ul><h4 id="文件软硬链接的示意图"><a href="#文件软硬链接的示意图" class="headerlink" title="文件软硬链接的示意图"></a>文件软硬链接的示意图</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194703.png" alt="001_文件软硬链接示意图" loading="lazy">￼</p><blockquote><p>在 Linux 中，<strong>文件名</strong> 和 <strong>文件的数据</strong> 是分开存储的</p></blockquote><ul><li>提示：<ul><li>在 Linux 中，只有文件的 <code>硬链接数 == 0</code> 才会被删除</li><li>使用 <code>ls -l</code> 可以查看一个文件的硬链接的数量</li><li>在日常工作中，几乎不会建立文件的硬链接，知道即可</li></ul></li></ul><h2 id="03-打包压缩"><a href="#03-打包压缩" class="headerlink" title="03. 打包压缩"></a>03. 打包压缩</h2><ul><li><strong>打包压缩</strong> 是日常工作中备份文件的一种方式</li><li>在不同操作系统中，常用的打包压缩方式是不同的<ul><li><code>Windows</code> 常用 <code>rar</code></li><li><code>Mac</code> 常用 <code>zip</code></li><li><code>Linux</code> 常用 <code>tar.gz</code></li></ul></li></ul><h3 id="3-1-打包-／-解包"><a href="#3-1-打包-／-解包" class="headerlink" title="3.1 打包 ／ 解包"></a>3.1 打包 ／ 解包</h3><ul><li><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong></li><li><code>tar</code> 的命令格式如下：</li></ul><pre class="line-numbers language-none"><code class="language-none"># 打包文件tar -cvf 打包文件.tar 被打包的文件／路径...# 解包文件tar -xvf 打包文件.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tar</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>生成档案文件，创建打包文件</td></tr><tr><td>x</td><td>解开档案文件</td></tr><tr><td>v</td><td>列出归档解档的详细过程，显示进度</td></tr><tr><td>f</td><td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td></tr></tbody></table><blockquote><p>注意：<code>f</code> 选项必须放在最后，其他选项顺序可以随意</p></blockquote><h4 id="打包解包演练"><a href="#打包解包演练" class="headerlink" title="打包解包演练"></a>打包解包演练</h4><ol><li>删除桌面下的所有内容</li><li>在桌面下新建三个空白文件 <code>01.py</code>、<code>02.py</code>、<code>03.py</code></li><li>将这三个文件打一个 <code>py.tar</code> 的包</li><li>新建 <code>tar</code> 目录，并且将 <code>py.tar</code> 移动到 <code>tar</code> 目录下</li><li>解包 <code>py.tar</code></li></ol><h3 id="3-2-压缩／解压缩"><a href="#3-2-压缩／解压缩" class="headerlink" title="3.2 压缩／解压缩"></a>3.2 压缩／解压缩</h3><h4 id="1-gzip"><a href="#1-gzip" class="headerlink" title="1) gzip"></a>1) <code>gzip</code></h4><ul><li><code>tar</code> 与 <code>gzip</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong><ul><li><code>tar</code> 只负责打包文件，但不压缩</li><li>用 <code>gzip</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.gz</code></li></ul></li></ul><blockquote><p>在 <code>Linux</code> 中，最常见的压缩文件格式就是 <code>xxx.tar.gz</code></p></blockquote><ul><li><p>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code>，从而可以方便的实现压缩和解压缩的功能</p></li><li><p>命令格式如下：</p></li></ul><pre class="line-numbers language-none"><code class="language-none"># 压缩文件tar -zcvf 打包文件.tar.gz 被压缩的文件／路径...# 解压缩文件tar -zxvf 打包文件.tar.gz# 解压缩到指定路径tar -zxvf 打包文件.tar.gz -C 目标路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-C</td><td>解压缩到指定目录，注意：要解压缩的目录必须存在</td></tr></tbody></table><h4 id="2-bzip2-two"><a href="#2-bzip2-two" class="headerlink" title="2) bzip2(two)"></a>2) <code>bzip2(two)</code></h4><ul><li><p><code>tar</code> 与 <code>bzip2</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong>（用法和 <code>gzip</code> 一样）</p><ul><li><code>tar</code> 只负责打包文件，但不压缩，</li><li>用 <code>bzip2</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.bz2</code></li></ul></li><li><p>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code>，从而可以方便的实现压缩和解压缩的功能</p></li><li><p>命令格式如下：</p></li></ul><pre class="line-numbers language-none"><code class="language-none"># 压缩文件tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径...# 解压缩文件tar -jxvf 打包文件.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-软件安装"><a href="#04-软件安装" class="headerlink" title="04. 软件安装"></a>04. 软件安装</h2><h2 id="4-1-通过-apt-安装／卸载软件"><a href="#4-1-通过-apt-安装／卸载软件" class="headerlink" title="4.1 通过 apt 安装／卸载软件"></a>4.1 通过 apt 安装／卸载软件</h2><ul><li>apt 是 <code>Advanced Packaging Tool</code>，是 Linux 下的一款安装包管理工具</li><li>可以在终端中方便的 <strong>安装</strong>／<strong>卸载</strong>／<strong>更新软件包</strong></li></ul><pre class="line-numbers language-none"><code class="language-none"># 1. 安装软件$ sudo apt install 软件包# 2. 卸载软件$ sudo apt remove 软件名# 3. 更新已安装的包$ sudo apt upgrade <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装演练"><a href="#安装演练" class="headerlink" title="安装演练"></a>安装演练</h3><pre class="line-numbers language-none"><code class="language-none"># 一个小火车提示$ sudo apt install sl# 一个比较漂亮的查看当前进程排名的软件$ sudo apt install htop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-配置软件源"><a href="#4-2-配置软件源" class="headerlink" title="4.2 配置软件源"></a>4.2 配置软件源</h2><ul><li>如果希望在 <code>ubuntu</code> 中安装软件，<strong>更加快速</strong>，可以通过设置<strong>镜像源</strong>，选择一个访问网速更快的服务器，来提供软件下载／安装服务</li><li>提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了</li></ul><blockquote><p>所谓镜像源，就是<strong>所有服务器的内容是相同的（镜像）</strong>，但是根据所在位置不同，国内服务器通常速度会更快一些！</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194704.png" alt="003_镜像服务器示意图" loading="lazy">￼</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220118194705.png" alt="001_ubuntu设置软件源" loading="lazy">￼</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-Python-基础课程安排&quot;&gt;&lt;a href=&quot;#01-Python-基础课程安排&quot; class=&quot;headerlink&quot; title=&quot;01.Python 基础课程安排&quot;&gt;&lt;/a&gt;01.Python 基础课程安排&lt;/h1&gt;&lt;h2 id=&quot;分享&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="linux" scheme="http://ccsu.top/categories/linux/"/>
    
    
    <category term="linux基础" scheme="http://ccsu.top/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Docker进阶</title>
    <link href="http://ccsu.top/posts/b3ee7ac2/"/>
    <id>http://ccsu.top/posts/b3ee7ac2/</id>
    <published>2022-03-07T01:18:00.000Z</published>
    <updated>2022-03-07T01:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=243999746&bvid=BV1kv411q7Qc&cid=216242319&page=1" style="width: 100%; height: 500px; max-width: 100%；align:center; padding:20px 0;" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker的理念回顾</strong></p><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！需求：数据可以持久化</p><p>MySQL，容器删除了，删库跑路！需求：MySQL数据可以存储在本地！</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181015.png" alt="image-20200611220811766" loading="lazy"></p><p><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> run -it -v 主机目录:容器目录<span class="token comment"># 测试</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker run -it -v /home/ceshi:/home  centos  /bin/bash</span><span class="token comment"># 启动起来的时候，我们可以通过docker inspect 容器id 来查看挂载情况：（见下图）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181016.png" alt="image-20200611224010091" loading="lazy"></p><p>测试文件的同步</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181017.png" alt="image-20200611224046109" loading="lazy"></p><p>在容器内指定目录下添加或修改一个文件，会同步到主机指定目录下！反之，在主机目录下做相关操作，也会同步到容器对应的目录下！</p><p>再来测试！</p><p>1、停止容器</p><p>2、宿主机修改文件</p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181018.png" alt="image-20200611224137284" loading="lazy"></p><p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</p><h2 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h2><p>思考：MySQL的数据持久化的问题！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 获取镜像</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker pull mysql:5.7</span><span class="token comment"># 运行容器，需要做数据挂载！ # 安装mysql,需要配置密码，这是要注意的点！</span><span class="token comment"># 官方测试：docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><span class="token comment"># 启动我们的MySQL容器</span>-d后台运行-p端口映射-v卷挂载-e  环境配置--name  容器名字<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><span class="token comment"># 启动成功之后，我们在本地使用sqlyog 连接测试一下</span><span class="token comment"># sqlyog —— 连接到服务器的3310 —— 3310和容器内的3306映射，这个时候我们就可以连接上了！</span><span class="token comment"># 本地测试创建一个数据库，查看一下我们的映射的路径是否ok!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设我们将容器删除</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181019.png" alt="image-20200611230752177" loading="lazy"></p><p>发现，我们挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能！</p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 匿名挂载</span>-v 容器内路径<span class="token function">docker</span> run -d -P --name nginx01 -v /etc/nginx nginx<span class="token comment"># 查看所有卷的情况</span><span class="token punctuation">[</span>root@localhost data<span class="token punctuation">]</span><span class="token comment"># docker volume ls</span>DRIVER              VOLUME NAME<span class="token builtin class-name">local</span>               2dd0379216c9ee4441ed56f8ce53461c19abe78b8cfd024ac5fbe07c3b8f09ba<span class="token comment"># 这里发现，这种就是匿名挂载，我们在 -v 后只写了容器内的路径，没有写容器外的路径！</span><span class="token comment"># 具名挂载</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span>5ba5708389bf71b2156fdbcedc50a62b16ac27adb2a3dfac42c52e9da5ace79f<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker volume ls</span>DRIVER              VOLUME NAME<span class="token builtin class-name">local</span>               juming-nginx<span class="token comment"># 通过 -v 卷名：容器内路径</span><span class="token comment"># 查看一下这个卷  # 先找到卷所在路径 docker volume inspect 卷名，如下图：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181020.png" alt="image-20200611235522418" loading="lazy"></p><p>所有的docker容器内的卷，没有指定目录的情况下都是在**&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;xxxx&#x2F;_data**下！<br>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况使用 <strong>具名挂载</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！</span>-v容器内路径       <span class="token comment"># 匿名挂载</span>-v卷名:容器内路径  <span class="token comment"># 具名挂载</span>-v/宿主机路径:容器内路径   <span class="token comment"># 指定路径挂载！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拓展：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 通过 -v 容器内路径：ro 或 rw   改变读写权限</span>ro <span class="token comment">#readonly 只读</span>rw <span class="token comment">#readwrite 可读可写</span><span class="token comment"># 一旦创建容器时设置了容器权限，容器对我们挂载出来的内容就有限定了！</span><span class="token function">docker</span> run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx<span class="token function">docker</span> run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx<span class="token comment"># 默认是 rw</span><span class="token comment"># ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始Dockerfile"><a href="#初始Dockerfile" class="headerlink" title="初始Dockerfile"></a>初始Dockerfile</h2><p>Dockerfile 就是用来构建 docker镜像的构建文件！命令脚本！ 先体验一下！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是最终镜像的一层！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建一个dockerfile文件，名字可以随机，建议 dockerfile</span><span class="token punctuation">[</span>root@localhost docker-test-volume<span class="token punctuation">]</span><span class="token comment"># vim dockerfile</span><span class="token comment"># 文件中的内容：指令(大写) 参数</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span><span class="token string">"----end----"</span>CMD /bin/bash<span class="token comment"># 这里的每个命令，就是镜像的一层！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181021.png" alt="image-20200612003052844" loading="lazy"></p><p>注意：我们这里的 dockerfile  是我们编写的文件名哦！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181022.png" alt="image-20200612003717223" loading="lazy"></p><p>这两个卷和外部一定有两个同步的目录！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181023.png" alt="image-20200612003946028" loading="lazy"></p><p>查看一下卷挂载在主机上的路径</p><p><strong>docker inspect 容器id</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181024.png" alt="image-20200612004608027" loading="lazy"></p><p>测试一下刚才的文件是否同步出去了！</p><p>这种方式我们未来使用十分的多，因为我们通常会构建自己的镜像！</p><p>假设构建镜像的时候没有挂在卷，要手动镜像挂载即可： (参考上文<strong>具名和匿名挂载</strong>)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-v 卷名:容器内路径 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p><strong>多个mysql同步数据！</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181025.png" alt="image-20200612223759573" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181026.png" alt="image-20200612224621379" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181027.png" alt="image-20200612225358172" loading="lazy"></p><p>在docker03下创建docker03文件后，进入docker01发现也依旧会同步过来：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181028.png" alt="image-20200612225641266" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 测试1：删除docker01后，docker02和docker03是否还可以访问原来docker01下创建的的文件？</span><span class="token comment"># 测试1的结果为：依旧可以访问！！！</span><span class="token comment"># 测试2：删除docker01后，docker02和docker03之间是否可以相互同步文件？</span><span class="token comment"># 测试2的结果为：docket02和docker03之间一九可以完成同步！！！ 见下图：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181029.png" alt="image-20200612231431551" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181030.png" alt="image-20200612231603498" loading="lazy"></p><p><strong>多个mysql实现数据共享</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">➜  ~ <span class="token function">docker</span> run -d -p <span class="token number">3306</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql01 mysql:5.7➜  ~ <span class="token function">docker</span> run -d -p <span class="token number">3307</span>:3306 -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql02 --volumes-from mysql01  mysql:5.7<span class="token comment"># 这个时候，可以实现两个容器数据同步！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结论：</strong></p><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><hr><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h2><p><code>dockerfile</code>是用来构建docker镜像的文件！命令参数脚本！</p><p><strong>构建步骤：</strong></p><p>1、 编写一个dockerfile文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run运行镜像</p><p>4、 docker push发布镜像（DockerHub 、阿里云仓库)</p><p>查看官方是怎么做的！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181031.png" alt="image-20200612233951676" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181032.png" alt="image-20200612234022746" loading="lazy"></p><p>很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像！</p><p>官方既然可以制作镜像，那我们也可以！</p><h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p><strong>基础知识：</strong></p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、# 表示注释</p><p>4、每一个指令都会创建提交一个新的镜像曾，并提交！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181033.png" alt="image-20200612234419262" loading="lazy"></p><p>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><p>Docker容器：容器就是镜像运行起来提供服务。</p><h2 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM<span class="token comment"># 基础镜像，一切从这里开始构建</span>MAINTAINER<span class="token comment"># 镜像是谁写的，姓名+邮箱</span>RUN<span class="token comment"># 镜像构建的时候需要运行的命令</span>ADD<span class="token comment"># 步骤：tomcat镜像，这个tomcat压缩包！ 添加内容</span>WORKDIR<span class="token comment"># 镜像的工作目录</span>VOLUME<span class="token comment"># 挂载的目录</span>EXPOSE          <span class="token comment"># 暴露端口配置，跟 -p 是一个道理</span>CMD<span class="token comment"># 指定这个容器启动时要执行的命令,只有最后一个命令会生效，可悲替代</span>ENTRYPOINT<span class="token comment"># 指定这个容器启动的时候要执行的命令，可以追加命令</span>ONBUILD<span class="token comment"># 当构建一个被继承DockerFile 这个时候就会运行ONBUILD的指令。触发指令</span>COPY<span class="token comment"># 类似ADD,将我们文件拷贝到镜像中</span>ENV<span class="token comment"># 构建的时候设置环境变量，跟 -e 是一个意思</span><span class="token comment"># CMD 和 ENTRYPOINT 的区别说明：（后面也会介绍）</span><span class="token comment"># 若CMD 和 ENTRYPOINT 后跟的都是 ls -a 这个命令，当docker run 一个容器时，添加了 -l 选项，则CMD里的ls -a 命令就会被替换成-l;而ENTRYPOINT中的 ls -a会追加-l变成 ls -a -l  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181034.png" alt="image-20200613000838850" loading="lazy"></p><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub中99%镜像都是从这个基础镜像过来的( <strong>FROM scratch</strong> )，然后配置需要的软件和配置来构建。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181035.png" alt="image-20200613001130237" loading="lazy"></p><blockquote><p>创建一个自己的 centos</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 1、编写DockerFile文件，内容如下：</span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># cat mydockerfile-centos</span>FROM centosMAINTAINER ztx<span class="token operator">&lt;</span><span class="token number">123456</span>@qq.com<span class="token operator">></span> ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>RUN yum -y <span class="token function">install</span> <span class="token function">vim</span>RUN yum -y <span class="token function">install</span> net-toolsEXPOSE <span class="token number">80</span>CMD <span class="token builtin class-name">echo</span> <span class="token variable">$MYPATH</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"----end----"</span>CMD /bin/bash<span class="token comment"># 2、通过这个文件构建镜像</span><span class="token comment"># 命令docker build -f dockerfile文件路径 -t 镜像名:[tag] .</span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># docker build -f mydockerfile-centos -t mycentos:0.1 .</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Successfully built c987078b06cbSuccessfully tagged mycentos:0.1<span class="token comment"># 3、测试运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比：</strong></p><p><strong>之前的原生的centos</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181036.png" alt="image-20200613004551789" loading="lazy"></p><p><strong>我们增加之后的镜像</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181037.png" alt="image-20200613005056516" loading="lazy"></p><p>注：net-tools 包含一系列程序，构成了 Linux 网络的基础。</p><p>我们可以列出本地镜像的变更历史：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181038.png" alt="image-20200613005625844" loading="lazy"></p><p>我们平时拿到一个镜像，可以研究一下它是怎么做的！</p><blockquote><p>CMD 和 ENTRYPOINT 的区别</p></blockquote><p><strong>测试CMD</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 编写dockerfile文件</span>$ <span class="token function">vim</span> dockerfile-test-cmdFROM centosCMD <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token comment"># 构建镜像</span>$ <span class="token function">docker</span> build  -f dockerfile-test-cmd -t cmd-test:0.1 <span class="token builtin class-name">.</span><span class="token comment"># 运行镜像</span>$ <span class="token function">docker</span> run cmd-test:0.1<span class="token builtin class-name">.</span><span class="token punctuation">..</span>.dockerenvbindev<span class="token comment"># 想追加一个命令  -l 成为ls -al</span>$ <span class="token function">docker</span> run cmd-test:0.1 -ldocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="token string">"exec: <span class="token entity" title="\&quot;">\"</span>-l<span class="token entity" title="\&quot;">\"</span>: executable file not found in <span class="token environment constant">$PATH</span>"</span><span class="token builtin class-name">:</span> unknown.ERRO<span class="token punctuation">[</span>0000<span class="token punctuation">]</span> error waiting <span class="token keyword">for</span> container: context canceled <span class="token comment"># cmd的情况下 -l 替换了CMD["ls","-l"]。 -l  不是命令,所以报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试ENTRYPOINT</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 编写dockerfile文件</span>$ <span class="token function">vim</span> dockerfile-test-entrypointFROM centosENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span>$ <span class="token function">docker</span> run entrypoint-test:0.1<span class="token builtin class-name">.</span><span class="token punctuation">..</span>.dockerenvbindevetchomeliblib64lost+found <span class="token punctuation">..</span>.<span class="token comment"># 我们的命令，是直接拼接在我们的ENTRYPOINT命令后面的</span>$ <span class="token function">docker</span> run entrypoint-test:0.1 -ltotal <span class="token number">56</span>drwxr-xr-x   <span class="token number">1</span> root root <span class="token number">4096</span> May <span class="token number">16</span> 06:32 <span class="token builtin class-name">.</span>drwxr-xr-x   <span class="token number">1</span> root root <span class="token number">4096</span> May <span class="token number">16</span> 06:32 <span class="token punctuation">..</span>-rwxr-xr-x   <span class="token number">1</span> root root    <span class="token number">0</span> May <span class="token number">16</span> 06:32 .dockerenvlrwxrwxrwx   <span class="token number">1</span> root root    <span class="token number">7</span> May <span class="token number">11</span>  <span class="token number">2019</span> bin -<span class="token operator">></span> usr/bindrwxr-xr-x   <span class="token number">5</span> root root  <span class="token number">340</span> May <span class="token number">16</span> 06:32 devdrwxr-xr-x   <span class="token number">1</span> root root <span class="token number">4096</span> May <span class="token number">16</span> 06:32 etcdrwxr-xr-x   <span class="token number">2</span> root root <span class="token number">4096</span> May <span class="token number">11</span>  <span class="token number">2019</span> homelrwxrwxrwx   <span class="token number">1</span> root root    <span class="token number">7</span> May <span class="token number">11</span>  <span class="token number">2019</span> lib -<span class="token operator">></span> usr/liblrwxrwxrwx   <span class="token number">1</span> root root    <span class="token number">9</span> May <span class="token number">11</span>  <span class="token number">2019</span> lib64 -<span class="token operator">></span> usr/lib64 <span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！</p><h2 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h2><p>1、准备镜像文件tomcat压缩包，jdk压缩包！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181039.png" alt="image-20200613151500712" loading="lazy"></p><p>2、编写Dockerfile文件，官方命名: <strong>Dockerfile</strong> ，build会自动寻找这个文件，就不要 -f 指定了！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM centosMAINTAINER kuangshen<span class="token operator">&lt;</span><span class="token number">123456</span>@qq.com<span class="token operator">></span>COPY readme.txt /usr/local/readme.txtADD jdk-8u161-linux-x64.tar.gz    /usr/local/ADD apache-tomcat-8.0.53.tar.gz   /usr/localRUN yum -y <span class="token function">install</span> <span class="token function">vim</span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>ENV JAVA_HOME /usr/local/jdk1.8.0_161ENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-8.0.53ENV CATALINA_BASH /usr/local/apache-tomcat-8.0.53ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/binEXPOSE <span class="token number">8080</span>CMD /usr/local/apache-tomcat-8.0.53/bin/startup.sh <span class="token operator">&amp;&amp;</span> <span class="token function">tail</span> -F /usr/local/apache-tomcat-8.0.53/bin/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、构建镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># docker build -t diytomcat .     diytomcat是定义的镜像名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、启动镜像，创建容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># docker run -d -p 9090:8080 --name kuangshentomcat02 -v /home/kuangshen/build/tomcat/test:/usr/local/apache-tomcat-8.0.53/webapps/test -v /home/kuangshen/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-8.0.53/logs diytomcat</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、访问测试</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181040.png" alt="image-20200613175551231" loading="lazy"></p><p>6、发布项目（由于做了卷挂载，我们就可以直接在本地发布项目了）</p><p>在&#x2F;home&#x2F;kuangshen&#x2F;build&#x2F;tomcat&#x2F;test目录下创建WEB-INF目录，在里面创建web.xml文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee                               http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在回到test目录，添加一个index.jsp页面：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>vim<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>&lt;%System.out.println("---my test web logs---");%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现：test项目部署成功，可以直接访问！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181041.png" alt="image-20200613180033633" loading="lazy"></p><p>注意：这时进入&#x2F;home&#x2F;kuangshen&#x2F;build&#x2F;tomcat&#x2F;tomcatlogs&#x2F;目录下就可以看到日志信息了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost tomcatlogs<span class="token punctuation">]</span><span class="token comment"># cat catalina.out </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181042.png" alt="image-20200613180355186" loading="lazy"></p><p>之前一直访问失败是web.xml配置有问题，最后也是查看该日志提示，才得以解决！！！</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>Docker Hub</p></blockquote><p>1、地址 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>2、确定这个账号可以登录</p><p>3、在我们服务器上提交自己的镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost tomcat<span class="token punctuation">]</span><span class="token comment"># docker login --help</span>Usage:<span class="token function">docker</span> login <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>SERVER<span class="token punctuation">]</span>Log <span class="token keyword">in</span> to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username<span class="token comment"># 登录dockerhub</span><span class="token punctuation">[</span>root@localhost tomcat<span class="token punctuation">]</span><span class="token comment"># docker login -u ztx115</span>Password: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、登录完毕后就可以提交镜像了，就是一步 docker push</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># push自己的镜像到服务器上！</span><span class="token punctuation">[</span>root@localhost tomcat<span class="token punctuation">]</span><span class="token comment"># docker push diytomcat</span>The push refers to repository <span class="token punctuation">[</span>docker.io/library/diytomcat<span class="token punctuation">]</span>c5593011cd68: Preparing d3ce40b8178e: Preparing 02084c67dcc9: Preparing 2b7c1c6c89c5: Preparing 0683de282177: Preparing denied: requested access to the resource is denied  <span class="token comment"># 拒绝</span><span class="token comment"># push镜像的问题？</span><span class="token comment"># 解决：增加一个tag         docker tag  指定镜像的id   dockerhub的用户名/镜像重命名:[tag]</span><span class="token punctuation">[</span>root@localhost tomcat<span class="token punctuation">]</span><span class="token comment"># docker tag bb64ab96b432 ztx115/tomcat:1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181043.png" alt="image-20200613211709842" loading="lazy"></p><p><strong>注意：镜像的重命名前一定要加当前的dockerhub的用户名，否则将会push失败！！！！</strong>（如：把ztx115改成ztx,  push一定失败！）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># docekr push上去即可！  自己平时发布的镜像尽量带上版本号</span><span class="token punctuation">[</span>root@localhost tomcat<span class="token punctuation">]</span><span class="token comment"># docker push ztx115/tomcat:1.0</span>The push refers to repository <span class="token punctuation">[</span>docker.io/ztx115/tomcat<span class="token punctuation">]</span>c5593011cd68: Pushed d3ce40b8178e: Pushed 02084c67dcc9: Pushed 2b7c1c6c89c5: Pushed 0683de282177: Pushed <span class="token number">1.0</span>: digest: sha256:b6733deccf85ad66c6f4302215dd9ea63e1579817f15a099b5858785708ed408 size: <span class="token number">1372</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181044.png" alt="image-20200613210147709" loading="lazy"></p><p>发现，提交时也是按照镜像的层级来进行提交的！</p><blockquote><p>发布到阿里云镜像服务上（狂神视频截图）</p></blockquote><p>1、登录阿里云</p><p>2、找到容器镜像服务</p><p>3、创建命名空间</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181045.png" alt="image-20200613212823736" loading="lazy"></p><p>4、创建容器镜像仓库</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181046.png" alt="image-20200613213014849" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181047.png" alt="image-20200613213135466" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181048.png" alt="image-20200613213222587" loading="lazy"></p><p>5、浏览阿里云</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181049.png" alt="image-20200613214159792" loading="lazy"></p><p>使用阿里云容器镜像的参考官方指南即可！！！（即上图）</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181050.png" alt="image-20200613214846464" loading="lazy"></p><hr><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h2><p>清空所有环境</p><blockquote><p>测试</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181051.png" alt="image-20200613224119526" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 问题： docker是如何处理容器网络访问的？</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181052.png" alt="image-20200613220806390" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># [root@localhost /]# docker run -d -P --name tomcat01 tomcat</span><span class="token comment"># 查看容器的内部网络地址   ip addr,  发现容器启动的时候会得到一个 eth0@if43 ip地址，docker分配的！</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat01 ip addr</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever<span class="token number">42</span>: eth0@if43: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>    inet <span class="token number">172.17</span>.0.2/16 brd <span class="token number">172.17</span>.255.255 scope global eth0       valid_lft forever preferred_lft forever<span class="token comment"># 思考：linux能不能ping通docker容器内部！</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># ping 172.17.0.2</span>PING <span class="token number">172.17</span>.0.2 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.476</span> ms<span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.099</span> ms<span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.105</span> ms<span class="token punctuation">..</span>.<span class="token comment"># linux 可以ping通docker容器内部</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原理</p></blockquote><p>1、我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要装了docker，就会有一个docker01网卡。</p><p>桥接模式，使用的技术是veth-pair技术！</p><p>再次测试 ip addr，发现多了一对网卡 : </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181053.png" alt="image-20200613224311838" loading="lazy"></p><p>2、再启动一个容器测试，发现又多了一对网卡！！！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181054.png" alt="image-20200613224610781" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 我们发现这个容器带来网卡，都是一对对的</span><span class="token comment"># veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连</span><span class="token comment"># 正因为有这个特性，veth-pair 充当一个桥梁，连接各种虚拟网络设备</span><span class="token comment"># OpenStack，Docker容器之间的连接，OVS的连接都是使用veth-pair技术</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、我们来测试下tomcat01和tomcat02是否可以ping通！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat02 ping 172.17.0.2</span>PING <span class="token number">172.17</span>.0.2 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.556</span> ms<span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.096</span> ms<span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.111</span> ms<span class="token punctuation">..</span>.<span class="token comment"># 结论：容器与容器之间是可以相互ping通的！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>绘制一个网络模型图：</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181055.png" alt="image-20200613231046553" loading="lazy"></p><p><strong>结论：tomcat01 和 tomcat02 是公用一个路由器，即 docker0 !</strong> </p><p>所有的容器不指定网络的情况下，都是经 docker0 路由的，docker 会给我们的容器分配一个默认的可用ip</p><blockquote><p>小结</p></blockquote><p>Docker使用的是Linux的桥接技术，宿主机是一个Docker容器的网桥 docker0</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181056.png" alt="image-20200613232031835" loading="lazy"></p><p><strong>注意：</strong>Docker中所有网络接口都是虚拟的，虚拟的转发效率高！（内网传递文件）</p><p>只要容器一删除，对应的一对网桥就没有！</p><h2 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h2><blockquote><p>思考一个场景：我们编写了一个微服务，database url &#x3D; ip ，项目不重启，数据库ip换掉了，我们希望可以处理这个问题，可以通过名字来访问容器？</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># tomcat02 想通过直接ping 容器名（即"tomcat01"）来ping通，而不是ip，发现失败了！</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat02 ping tomcat01</span>ping: tomcat01: Name or <span class="token function">service</span> not known<span class="token comment"># 如何解决这个问题呢？</span><span class="token comment"># 通过--link 就可以解决这个网络联通问题了！！！      发现新建的tomcat03可以ping通tomcat02</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker run -d -P --name tomcat03 --link tomcat02 tomcat</span>87a0e5f5e6da34a7f043ff6210b57f92f40b24d0d4558462e7746b2e19902721<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat03 ping tomcat02</span>PING tomcat02 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.3<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from tomcat02 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.132</span> ms<span class="token number">64</span> bytes from tomcat02 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.116</span> ms<span class="token number">64</span> bytes from tomcat02 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.116</span> ms<span class="token number">64</span> bytes from tomcat02 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.116</span> ms<span class="token comment"># 反向能ping通吗？       发现tomcat02不能oing通tomcat03</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat02 ping tomcat03</span>ping: tomcat03: Name or <span class="token function">service</span> not known<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>探究：inspect  ！！！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181057.png" alt="image-20200614002609300" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181058.png" alt="image-20200614002832045" loading="lazy"></p><p>其实这个tomcat03就是在本地配置了到tomcat02的映射：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看hosts 配置，在这里发现原理！  </span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat03 cat /etc/hosts</span><span class="token number">127.0</span>.0.1localhost::1localhost ip6-localhost ip6-loopbackfe00::0ip6-localnetff00::0ip6-mcastprefixff02::1ip6-allnodesff02::2ip6-allrouters<span class="token number">172.17</span>.0.3tomcat02 95303c12f6d9    <span class="token comment"># 就像windows中的 host 文件一样，做了地址绑定</span><span class="token number">172.17</span>.0.487a0e5f5e6da<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质探究：–link  就是我们在hosts 配置中增加了一个 172.17.0.3    tomcat02   95303c12f6d9 （三条信息都是tomcat02 的）</p><p>我们现在玩Docker已经不建议使用 –link 了！！！</p><p><strong>自定义网络，不使用docker0！</strong></p><p>docker0问题：不支持容器名连接访问！</p><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote><p>查看所有的docker网络</p></blockquote><p>‘<img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181059.png" alt="image-20200614004445923" loading="lazy"></p><p><strong>网络模式</strong></p><p>bridge  ：桥接 （docker默认，自己创建也使用bridge模式！）</p><p>none ：不配置网络</p><p>host  ：和宿主机共享网络</p><p>container  ：容器网络连通，容器直接互联！（用的少！局限很大！）</p><p><strong>测试</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 我们之前直接启动的命令 (默认是使用--net bridge，可省)，这个bridge就是我们的docker0 </span><span class="token function">docker</span> run -d -P --name tomcat01 tomcat   <span class="token function">docker</span> run -d -P --name tomcat01 --net bridge tomcat<span class="token comment"># 上面两句等价</span><span class="token comment"># docker0（即bridge）默认不支持域名访问 ！ --link可以打通连接，即支持域名访问！</span><span class="token comment"># 我们可以自定义一个网络！</span><span class="token comment"># --driver bridge    网络模式定义为 ：桥接</span><span class="token comment"># --subnet 192.168.0.0/16定义子网 ，范围为：192.168.0.2 ~ 192.168.255.255</span><span class="token comment"># --gateway 192.168.0.1子网网关设为： 192.168.0.1 </span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span>7ee3adf259c8c3d86fce6fd2c2c9f85df94e6e57c2dce5449e69a5b024efc28c<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>NETWORK ID          NAME                DRIVER              SCOPE461bf576946c        bridge              bridge              <span class="token builtin class-name">local</span>c501704cf28e        <span class="token function">host</span>                <span class="token function">host</span>                <span class="token builtin class-name">local</span>7ee3adf259c8        mynet               bridge              <span class="token builtin class-name">local</span>  <span class="token comment">#自定义的网络</span>9354fbcc160f        none                null                <span class="token builtin class-name">local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自己的网络就创建好了：</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181100.png" alt="image-20200614011229854" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker run -d -P --name tomcat-net-01 --net mynet tomcat</span>b168a37d31fcdc2ff172fd969e4de6de731adf53a2960eeae3dd9c24e14fac67<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker run -d -P --name tomcat-net-02 --net mynet tomcat</span>c07d634e17152ca27e318c6fcf6c02e937e6d5e7a1631676a39166049a44c03c<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker network inspect mynet</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"mynet"</span>,        <span class="token string">"Id"</span><span class="token builtin class-name">:</span> <span class="token string">"7ee3adf259c8c3d86fce6fd2c2c9f85df94e6e57c2dce5449e69a5b024efc28c"</span>,        <span class="token string">"Created"</span><span class="token builtin class-name">:</span> <span class="token string">"2020-06-14T01:03:53.767960765+08:00"</span>,        <span class="token string">"Scope"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,        <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"bridge"</span>,        <span class="token string">"EnableIPv6"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"IPAM"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"default"</span>,            <span class="token string">"Options"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,            <span class="token string">"Config"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token string">"Subnet"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.0/16"</span>,                    <span class="token string">"Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.1"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"Internal"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"Attachable"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"Ingress"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"ConfigFrom"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Network"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"ConfigOnly"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"Containers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"b168a37d31fcdc2ff172fd969e4de6de731adf53a2960eeae3dd9c24e14fac67"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"tomcat-net-01"</span>,                <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"f0af1c33fc5d47031650d07d5bc769e0333da0989f73f4503140151d0e13f789"</span>,                <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:c0:a8:00:02"</span>,                <span class="token string">"IPv4Address"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.2/16"</span>,                <span class="token string">"IPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"c07d634e17152ca27e318c6fcf6c02e937e6d5e7a1631676a39166049a44c03c"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"tomcat-net-02"</span>,                <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"ba114b9bd5f3b75983097aa82f71678653619733efc1835db857b3862e744fbc"</span>,                <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:c0:a8:00:03"</span>,                <span class="token string">"IPv4Address"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.3/16"</span>,                <span class="token string">"IPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"Options"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,        <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># 再次测试 ping 连接</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat-net-01 ping 192.168.0.3</span>PING <span class="token number">192.168</span>.0.3 <span class="token punctuation">(</span><span class="token number">192.168</span>.0.3<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.3: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.199</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.3: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.121</span> ms^C--- <span class="token number">192.168</span>.0.3 <span class="token function">ping</span> statistics ---<span class="token number">2</span> packets transmitted, <span class="token number">2</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 2msrtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.121</span>/0.160/0.199/0.039 ms<span class="token comment"># 现在不使用 --link,也可以ping 名字了！！！！！！</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat-net-01 ping tomcat-net-02</span>PING tomcat-net-02 <span class="token punctuation">(</span><span class="token number">192.168</span>.0.3<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from tomcat-net-02.mynet <span class="token punctuation">(</span><span class="token number">192.168</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.145</span> ms<span class="token number">64</span> bytes from tomcat-net-02.mynet <span class="token punctuation">(</span><span class="token number">192.168</span>.0.3<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.117</span> ms^C--- tomcat-net-02 <span class="token function">ping</span> statistics ---<span class="token number">2</span> packets transmitted, <span class="token number">2</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 3msrtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.117</span>/0.131/0.145/0.014 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在使用自定义的网络时，docker都已经帮我们维护好了对应关系，推荐我们平时这样使用网络！！！</p><p>好处：</p><p>redis——不同的集群使用不同的网络，保证了集群的安全和健康</p><p>mysql——不同的集群使用不同的网络，保证了集群的安全和健康</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181101.png" alt="image-20200614015209053" loading="lazy"></p><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181102.png" alt="image-20200614013625192" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181103.png" alt="image-20200614013801842" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 测试打通 tomcat01 — mynet</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker network connect mynet tomcat01</span><span class="token comment"># 连通之后就是将 tomcat01 放到了 mynet 网络下！ （见下图）</span><span class="token comment"># 这就产生了 一个容器有两个ip地址 ! 参考阿里云的公有ip和私有ip</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker network inspect mynet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181104.png" alt="image-20200614014544797" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># tomcat01 连通ok</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat01 ping tomcat-net-01</span>PING tomcat-net-01 <span class="token punctuation">(</span><span class="token number">192.168</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from tomcat-net-01.mynet <span class="token punctuation">(</span><span class="token number">192.168</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.124</span> ms<span class="token number">64</span> bytes from tomcat-net-01.mynet <span class="token punctuation">(</span><span class="token number">192.168</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.162</span> ms<span class="token number">64</span> bytes from tomcat-net-01.mynet <span class="token punctuation">(</span><span class="token number">192.168</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.107</span> ms^C--- tomcat-net-01 <span class="token function">ping</span> statistics ---<span class="token number">3</span> packets transmitted, <span class="token number">3</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 3msrtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.107</span>/0.131/0.162/0.023 ms<span class="token comment"># tomcat02 是依旧打不通的</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat02 ping tomcat-net-01</span>ping: tomcat-net-01: Name or <span class="token function">service</span> not known<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论：</strong>假设要跨网络操作别人，就需要使用docker network connect  连通。。。</p><h2 id="实战：部署Redis集群"><a href="#实战：部署Redis集群" class="headerlink" title="实战：部署Redis集群"></a>实战：部署Redis集群</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181105.png" alt="image-20200614124559172" loading="lazy"></p><p>启动6个redis容器，上面三个是主，下面三个是备！</p><p>使用shell脚本启动！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建redis集群网络</span><span class="token function">docker</span> network create redis --subnet <span class="token number">172.38</span>.0.0/16<span class="token comment"># 通过脚本创建六个redis配置</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># for port in $(seq 1 6);\</span><span class="token operator">></span> <span class="token keyword">do</span> <span class="token punctuation">\</span><span class="token operator">></span> <span class="token function">mkdir</span> -p /mydata/redis/node-<span class="token variable">$&#123;port&#125;</span>/conf<span class="token operator">></span> <span class="token function">touch</span> /mydata/redis/node-<span class="token variable">$&#123;port&#125;</span>/conf/redis.conf<span class="token operator">></span> <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF<span class="token operator">>></span>/mydata/redis/node-<span class="token variable">$&#123;port&#125;</span>/conf/redis.conf<span class="token operator">></span> port <span class="token number">6379</span><span class="token operator">></span> <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0<span class="token operator">></span> cluster-enabled <span class="token function">yes</span><span class="token operator">></span> cluster-config-file nodes.conf<span class="token operator">></span> cluster-node-timeout <span class="token number">5000</span><span class="token operator">></span> cluster-announce-ip <span class="token number">172.38</span>.0.1<span class="token variable">$&#123;port&#125;</span><span class="token operator">></span> cluster-announce-port <span class="token number">6379</span><span class="token operator">></span> cluster-announce-bus-port <span class="token number">16379</span><span class="token operator">></span> appendonly <span class="token function">yes</span><span class="token operator">></span> EOF<span class="token operator">></span> <span class="token keyword">done</span><span class="token comment"># 查看创建的六个redis</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># cd /mydata/</span><span class="token punctuation">[</span>root@localhost mydata<span class="token punctuation">]</span><span class="token comment"># \ls</span>redis<span class="token punctuation">[</span>root@localhost mydata<span class="token punctuation">]</span><span class="token comment"># cd redis/</span><span class="token punctuation">[</span>root@localhost redis<span class="token punctuation">]</span><span class="token comment"># ls</span>node-1  node-2  node-3  node-4  node-5  node-6<span class="token comment"># 查看redis-1的配置信息</span><span class="token punctuation">[</span>root@localhost redis<span class="token punctuation">]</span><span class="token comment"># cd node-1</span><span class="token punctuation">[</span>root@localhost node-1<span class="token punctuation">]</span><span class="token comment"># ls</span>conf<span class="token punctuation">[</span>root@localhost node-1<span class="token punctuation">]</span><span class="token comment"># cd conf/</span><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># ls</span>redis.conf<span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># cat redis.conf </span>port <span class="token number">6379</span><span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0cluster-enabled <span class="token function">yes</span>cluster-config-file nodes.confcluster-node-timeout <span class="token number">5000</span>cluster-announce-ip <span class="token number">172.38</span>.0.11cluster-announce-port <span class="token number">6379</span>cluster-announce-bus-port <span class="token number">16379</span>appendonly <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> run -p <span class="token number">6371</span>:6379 -p <span class="token number">16371</span>:16379 --name redis-1 <span class="token punctuation">\</span>-v /mydata/redis/node-1/data:/data <span class="token punctuation">\</span>-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>-d --net redis --ip <span class="token number">172.38</span>.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token function">docker</span> run -p <span class="token number">6372</span>:6379 -p <span class="token number">16372</span>:16379 --name redis-2 <span class="token punctuation">\</span>-v /mydata/redis/node-2/data:/data <span class="token punctuation">\</span>-v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>-d --net redis --ip <span class="token number">172.38</span>.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token function">docker</span> run -p <span class="token number">6373</span>:6379 -p <span class="token number">16373</span>:16379 --name redis-3 <span class="token punctuation">\</span>-v /mydata/redis/node-3/data:/data <span class="token punctuation">\</span>-v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>-d --net redis --ip <span class="token number">172.38</span>.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token function">docker</span> run -p <span class="token number">6374</span>:6379 -p <span class="token number">16374</span>:16379 --name redis-4 <span class="token punctuation">\</span>-v /mydata/redis/node-4/data:/data <span class="token punctuation">\</span>-v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>-d --net redis --ip <span class="token number">172.38</span>.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token function">docker</span> run -p <span class="token number">6375</span>:6379 -p <span class="token number">16375</span>:16379 --name redis-5 <span class="token punctuation">\</span>-v /mydata/redis/node-5/data:/data <span class="token punctuation">\</span>-v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>-d --net redis --ip <span class="token number">172.38</span>.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token function">docker</span> run -p <span class="token number">6376</span>:6379 -p <span class="token number">16376</span>:16379 --name redis-6 <span class="token punctuation">\</span>-v /mydata/redis/node-6/data:/data <span class="token punctuation">\</span>-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span>-d --net redis --ip <span class="token number">172.38</span>.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181106.png" alt="image-20200614133829277" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># docker exec -it redis-1 /bin/sh</span>/data <span class="token comment"># ls</span>appendonly.aof  nodes.conf/data <span class="token comment"># redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><span class="token operator">>></span><span class="token operator">></span> Performing <span class="token builtin class-name">hash</span> slots allocation on <span class="token number">6</span> nodes<span class="token punctuation">..</span>.Master<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">0</span> - <span class="token number">5460</span>Master<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">5461</span> - <span class="token number">10922</span>Master<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> -<span class="token operator">></span> Slots <span class="token number">10923</span> - <span class="token number">16383</span>Adding replica <span class="token number">172.38</span>.0.15:6379 to <span class="token number">172.38</span>.0.11:6379Adding replica <span class="token number">172.38</span>.0.16:6379 to <span class="token number">172.38</span>.0.12:6379Adding replica <span class="token number">172.38</span>.0.14:6379 to <span class="token number">172.38</span>.0.13:6379M: c5551e2a30c220fc9de9df2e34692f20f3382b32 <span class="token number">172.38</span>.0.11:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterM: d12ebd8c9e12dbbe22e7b9b18f0f143bdc14e94b <span class="token number">172.38</span>.0.12:6379   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> masterM: 825146ce6ab80fbb46ec43fcfec1c6e2dac55157 <span class="token number">172.38</span>.0.13:6379   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> masterS: 9f810c0e15ac99af68e114a0ee4e32c4c7067e2b <span class="token number">172.38</span>.0.14:6379   replicates 825146ce6ab80fbb46ec43fcfec1c6e2dac55157S: e370225bf57d6ef6d54ad8e3d5d745a52b382d1a <span class="token number">172.38</span>.0.15:6379   replicates c5551e2a30c220fc9de9df2e34692f20f3382b32S: 79428c1d018dd29cf191678658008cbe5100b714 <span class="token number">172.38</span>.0.16:6379   replicates d12ebd8c9e12dbbe22e7b9b18f0f143bdc14e94bCan I <span class="token builtin class-name">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span><span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each <span class="token function">node</span><span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the clusterWaiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using <span class="token function">node</span> <span class="token number">172.38</span>.0.11:6379<span class="token punctuation">)</span>M: c5551e2a30c220fc9de9df2e34692f20f3382b32 <span class="token number">172.38</span>.0.11:6379   slots:<span class="token punctuation">[</span><span class="token number">0</span>-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 79428c1d018dd29cf191678658008cbe5100b714 <span class="token number">172.38</span>.0.16:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates d12ebd8c9e12dbbe22e7b9b18f0f143bdc14e94bM: d12ebd8c9e12dbbe22e7b9b18f0f143bdc14e94b <span class="token number">172.38</span>.0.12:6379   slots:<span class="token punctuation">[</span><span class="token number">5461</span>-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5462</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: e370225bf57d6ef6d54ad8e3d5d745a52b382d1a <span class="token number">172.38</span>.0.15:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates c5551e2a30c220fc9de9df2e34692f20f3382b32S: 9f810c0e15ac99af68e114a0ee4e32c4c7067e2b <span class="token number">172.38</span>.0.14:6379   slots: <span class="token punctuation">(</span><span class="token number">0</span> slots<span class="token punctuation">)</span> slave   replicates 825146ce6ab80fbb46ec43fcfec1c6e2dac55157M: 825146ce6ab80fbb46ec43fcfec1c6e2dac55157 <span class="token number">172.38</span>.0.13:6379   slots:<span class="token punctuation">[</span><span class="token number">10923</span>-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5461</span> slots<span class="token punctuation">)</span> master   <span class="token number">1</span> additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All <span class="token number">16384</span> slots covered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker搭建redis集群完成！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181107.png" alt="image-20200614141549867" loading="lazy"></p><p>我们使用docker之后，所有的技术都会慢慢变得简单起来！</p><hr><h1 id="Springboot微服务打包Docker镜像"><a href="#Springboot微服务打包Docker镜像" class="headerlink" title="Springboot微服务打包Docker镜像"></a>Springboot微服务打包Docker镜像</h1><p>1、构建springboot项目，打包应用</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181108.png" alt="image-20200614155721369" loading="lazy"></p><p>2、编写Dockerfile，连同项目的jar包一并上传指定目录下</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181109.png" alt="image-20200614153734161" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181110.png" alt="image-20200614154114656" loading="lazy"></p><p>3、构建镜像</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181111.png" alt="image-20200614154355597" loading="lazy"></p><p>4、创建项目容器，发布运行！！！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181112.png" alt="image-20200614155034087" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181113.png" alt="image-20200614155340519" loading="lazy"></p><p>以后我们使用了Docker之后，给别人交付就是一个镜像即可！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=243999746&amp;bvid=BV1kv411q7Qc&amp;cid=216242319&amp;page=1&quot; style=&quot;width: 100%; height: 500px; max-</summary>
      
    
    
    
    <category term="Docker" scheme="http://ccsu.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://ccsu.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker概述</title>
    <link href="http://ccsu.top/posts/fb618b33/"/>
    <id>http://ccsu.top/posts/fb618b33/</id>
    <published>2022-03-07T01:16:00.000Z</published>
    <updated>2022-03-07T01:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=838132893&bvid=BV1og4y1q7M4&cid=191591129&page=1" style="width: 100%; height: 500px; max-width: 100%；align:center; padding:20px 0;" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="Docker为什么会出现？"><a href="#Docker为什么会出现？" class="headerlink" title="Docker为什么会出现？"></a>Docker为什么会出现？</h2><p>一款产品： 开发–上线 两套环境！应用环境，应用配置！</p><p>开发 — 运维。 问题：我在我的电脑上可以允许！版本更新，导致服务不可用！对于运维来说考验十分大？</p><p>环境配置是十分的麻烦，每一个及其都要部署环境(集群Redis、ES、Hadoop…) !费事费力。</p><p>发布一个项目( jar + (Redis MySQL JDK ES) ),项目能不能带上环境安装打包！</p><p>之前在服务器配置一个应用的环境 Redis MySQL JDK ES Hadoop 配置超麻烦了，不能够跨平台。</p><p>开发环境Windows，最后发布到Linux！</p><p><strong>传统：</strong>开发jar，运维来做！</p><p><strong>现在：</strong>开发打包部署上线，一套流程做完！</p><p><strong>安卓流程：</strong>java — apk —发布（应用商店）一 张三使用apk一安装即可用！</p><p><strong>docker流程：</strong> java-jar（环境）— 打包项目帯上环境（镜像）— ( Docker仓库：商店）—下载我们发布的镜像 —直接运行即可！</p><p>Docker给以上的问题，提出了解决方案！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181149.png" alt="image-20200610142308099" loading="lazy"></p><p>Docker的思想来源于集装箱！</p><p>JRE —多个应用（端口冲突）—原来都是交叉的！</p><p>隔离：Docker核心思想！打包装箱！每个箱子都是相互隔离的。</p><p>Docker通过隔离机制可以将服务器利用到极致！</p><p>本质：所有的技术都是因为出现了一些问题，我们需要去解决，才去学习！</p><h2 id="Docker的历史"><a href="#Docker的历史" class="headerlink" title="Docker的历史"></a>Docker的历史</h2><p>2010年，几个的年轻人，就在美国成立了一家公司 <strong>dotcloud</strong></p><p>做一些pass的云计算服务！LXC（Linux Container容器）有关的容器技术！</p><p>Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。</p><p>他们将自己的技术（容器化技术）命名就是 Docker</p><p>Docker刚刚延生的时候，没有引起行业的注意！dotCloud，就活不下去！</p><p><strong>开源</strong></p><p>2013年，Docker开源！</p><p>越来越多的人发现docker的优点！火了。Docker每个月都会更新一个版本！</p><p>2014年4月9日，Docker1.0发布！</p><p>docker为什么这么火？十分的轻巧！</p><p>在容器技术出来之前，我们都是使用虚拟机技术！</p><p>虚拟机：在window中装一个VMware，通过这个软件我们可以虚拟出来一台或者多台电脑！笨重！</p><p>虚拟机也属于虚拟化技术，Docker容器技术，也是一种虚拟化技术！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">VMware <span class="token builtin class-name">:</span> linux centos 原生镜像（一个电脑！） 隔离、需要开启多个虚拟机！ 几个G 几分钟docker: 隔离，镜像（最核心的环境 4m + jdk + mysql）十分的小巧，运行镜像就可以了！小巧！ 几个M 秒级启动！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>聊聊Docker</p></blockquote><p>Docker基于Go语言开发的！开源项目！</p><p>docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181150.png" alt="image-20200610143923433" loading="lazy"></p><p>文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a> Docker的文档是超级详细的！</p><p>仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h2 id="Docker能干嘛"><a href="#Docker能干嘛" class="headerlink" title="Docker能干嘛"></a>Docker能干嘛</h2><blockquote><p>之前的虚拟机技术</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181151.png" alt="image-20200610144126122" loading="lazy"></p><blockquote><p>虚拟机技术缺点</p></blockquote><p>1、 资源占用十分多</p><p>2、 冗余步骤多</p><p>3、 启动很慢！</p><blockquote><p>容器技术</p></blockquote><p>容器化技术不是模拟一个完整的操作系统</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181152.png" alt="image-20200610144338073" loading="lazy"></p><p>比较Docker和虚拟机技术的不同：</p><ul><li>传统虚拟机，虚拟出一套容器内的应用直接运行在宿主机硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li><li>容器内的应用直接运行在宿主机内，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</li><li>每个容器间是相互隔离的，每个容器内都有一个属于自己的文件系统，互不影响</li></ul><blockquote><p>DevOps (开发、运维)</p></blockquote><p><strong>应用更快速的交付和部署</strong></p><p>传统：一堆帮助文档，安装程序</p><p>Docker：打包镜像发布测试，一键运行</p><p><strong>更便捷的升级和扩缩容</strong></p><p>使用了Docker之后，我们部署应用就和搭积木一样！</p><p>项目打包为一个镜像，扩展服务器A! 服务器B</p><p><strong>更简单的系统运维</strong></p><p>在容器化之后，我们的开发，测试环境都是高度一致的。</p><p><strong>更高效的计算资源利用</strong></p><p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多个容器实例！服务器的性能可以被压榨到极致。</p><hr><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181153.png" alt="image-20200610145818895" loading="lazy"></p><p><strong>镜像（image）：</strong></p><p>docker镜像就好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像&#x3D;&#x3D;&gt;run&#x3D;&#x3D;&gt;容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</p><p><strong>容器（container）:</strong></p><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的.</p><p>启动，停止，删除，基本命令</p><p>目前就可以把这个容器理解为就是一个简易的 Linux系统。</p><p><strong>仓库（repository）:</strong></p><p>仓库就是存放镜像的地方！</p><p>仓库分为公有仓库和私有仓库。(很类似git)</p><p>Docker Hub是国外的。</p><p>阿里云…都有容器服务器 (配置镜像加速!)</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote><p>环境准备</p></blockquote><p>1.Linux要求内核3.0以上</p><p>2.CentOS 7</p><blockquote><p>环境查看</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#系统内核要求3.0以上</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># uname -r</span><span class="token number">3.10</span>.0-1062.el7.x86_64<span class="token comment">#系统版本</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/os-release </span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"CentOS Linux"</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"7 (Core)"</span><span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token string">"centos"</span><span class="token assign-left variable">ID_LIKE</span><span class="token operator">=</span><span class="token string">"rhel fedora"</span><span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"7"</span><span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"CentOS Linux 7 (Core)"</span><span class="token assign-left variable">ANSI_COLOR</span><span class="token operator">=</span><span class="token string">"0;31"</span><span class="token assign-left variable">CPE_NAME</span><span class="token operator">=</span><span class="token string">"cpe:/o:centos:centos:7"</span><span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://www.centos.org/"</span><span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://bugs.centos.org/"</span><span class="token assign-left variable">CENTOS_MANTISBT_PROJECT</span><span class="token operator">=</span><span class="token string">"CentOS-7"</span><span class="token assign-left variable">CENTOS_MANTISBT_PROJECT_VERSION</span><span class="token operator">=</span><span class="token string">"7"</span><span class="token assign-left variable">REDHAT_SUPPORT_PRODUCT</span><span class="token operator">=</span><span class="token string">"centos"</span><span class="token assign-left variable">REDHAT_SUPPORT_PRODUCT_VERSION</span><span class="token operator">=</span><span class="token string">"7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装</p></blockquote><p>帮助文档：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#1.卸载旧版本</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span><span class="token operator">></span>                   docker-client <span class="token punctuation">\</span><span class="token operator">></span>                   docker-client-latest <span class="token punctuation">\</span><span class="token operator">></span>                   docker-common <span class="token punctuation">\</span><span class="token operator">></span>                   docker-latest <span class="token punctuation">\</span><span class="token operator">></span>                   docker-latest-logrotate <span class="token punctuation">\</span><span class="token operator">></span>                   docker-logrotate <span class="token punctuation">\</span><span class="token operator">></span>                   docker-engine<span class="token comment">#2.需要的安装包</span>yum <span class="token function">install</span> -y yum-utils<span class="token comment">#3.设置镜像的仓库</span>yum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>    https://download.docker.com/linux/centos/docker-ce.repo<span class="token comment">#上述方法默认是从国外的，不推荐</span><span class="token comment">#推荐使用国内的</span>yum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  <span class="token comment">#更新软件包索引</span>yum makecache fast<span class="token comment">#4.安装docker docker-ce 社区版 而ee是企业版</span>yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io <span class="token comment"># 这里我们使用社区版即可</span><span class="token comment">#5.启动docker</span>systemctl start <span class="token function">docker</span><span class="token comment">#6.使用docker version 查看是否安装成功</span><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181154.png" alt="image-20200610153718450" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#7.测试</span><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181155.png" alt="image-20200610154108118" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#8.查看一下下载的hello-world镜像</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        <span class="token number">5</span> months ago        <span class="token number">13</span>.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>了解：卸载docker</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#1.卸载依赖</span>yum remove docker-ce docker-ce-cli containerd.io<span class="token comment">#2. 删除资源</span><span class="token function">rm</span> -rf /var/lib/docker<span class="token comment"># /var/lib/docker 是docker的默认工作路径！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阿里云镜像加速</p><p><strong>1、登录阿里云找到容器服务——&gt;镜像加速器</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181156.png" alt="image-20200610155156310" loading="lazy"></p><p><strong>2、配置使用</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://cdoid6va.mirror.aliyuncs.com"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回顾hello-world流程"><a href="#回顾hello-world流程" class="headerlink" title="回顾hello-world流程"></a>回顾hello-world流程</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181157.png" alt="image-20200610160359287" loading="lazy"></p><p><strong>docker run 流程图</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181158.png" alt="image-20200610160609037" loading="lazy"></p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p><strong>Docker是怎么工作的？</strong></p><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在宿主机上，通过Socket从客户端访问！</p><p>DockerServer接受到Docker-Client的指令，就会执行这个命令！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181159.png" alt="image-20200610161147612" loading="lazy"></p><p><strong>Docker为什么比VM快？</strong></p><p>1、Docker有着比虚拟机更少的抽象层</p><p>2、Docker利用的是宿主机的内核，vm需要Guest Os。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181200.png" alt="image-20200610161342662" loading="lazy"></p><p>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guest Os，分钟级别的，而docker是利用当前宿主机的操作系统，省略了复杂的过程，秒级的！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181201.png" alt="image-20200610161845790" loading="lazy"></p><hr><h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> version     <span class="token comment"># 显示docker的版本信息</span><span class="token function">docker</span> info        <span class="token comment"># 显示docker的系统信息，包括镜像和容器的数量</span><span class="token function">docker</span> 命令 --help  <span class="token comment"># 帮助命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        <span class="token number">5</span> months ago        <span class="token number">13</span>.3kB<span class="token comment">#解释</span>REPOSITORY  镜像的仓库源TAG         镜像标签IMAGE ID    镜像idCREATED     镜像的创建时间SIZE        镜像的大小<span class="token comment">#可选项</span>Options:  -a, --all             <span class="token comment"># 列出所有镜像</span>  -q, --quiet           <span class="token comment"># 只显示镜像id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker search 搜索镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker search mysql</span>NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   <span class="token number">9604</span>                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                mariadb                           MariaDB is a community-developed fork of MyS…   <span class="token number">3490</span>                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                <span class="token comment">#可选项，通过收藏来过滤</span>--filter<span class="token operator">=</span>STARS<span class="token operator">=</span><span class="token number">3000</span>  <span class="token comment">#搜索出来的镜像就是STARS大于3000的</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker search mysql --filter=STARS=3000</span>NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql               MySQL is a widely used, open-source relation…   <span class="token number">9604</span>                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                mariadb             MariaDB is a community-developed fork of MyS…   <span class="token number">3490</span>                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker pull 下载镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 下载镜像 docker pull 镜像名[:tag]</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker pull mysql</span>Using default tag: latest    <span class="token comment"># 如果不写 tag,默认就是latest</span>latest: Pulling from library/mysql8559a31e96f4: Pull complete  <span class="token comment"># 分层下载，docker image的核心 联合文件系统</span>d51ce1c2e575: Pull complete c2344adc4858: Pull complete fcf3ceff18fc: Pull complete 16da0c38dc5b: Pull complete b905d1797e97: Pull complete 4b50d1c6b05c: Pull complete c75914a65ca2: Pull complete 1ae8042bdd09: Pull complete 453ac13c00a3: Pull complete 9e680cd72f08: Pull complete a6b5dc864b6c: Pull complete Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6 <span class="token comment"># 签名</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest  <span class="token comment"># 真实地址</span><span class="token function">docker</span> pull mysql 等价于: <span class="token function">docker</span> pull docker.io/library/mysql:latest<span class="token comment"># 指定版本下载</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker pull mysql:5.7</span><span class="token number">5.7</span>: Pulling from library/mysql8559a31e96f4: Already exists   <span class="token comment"># 联合文件系统的好处：上面下载过的MySQL与5.7版本的MySQL有相同的文件时不需要重复下载</span>d51ce1c2e575: Already exists c2344adc4858: Already exists fcf3ceff18fc: Already exists 16da0c38dc5b: Already exists b905d1797e97: Already exists 4b50d1c6b05c: Already exists d85174a87144: Pull complete a4ad33703fa8: Pull complete f7a5433ce20d: Pull complete 3dcd2a278b4a: Pull complete Digest: sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854Status: Downloaded newer image <span class="token keyword">for</span> mysql:5.7docker.io/library/mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181202.png" alt="image-20200610165130055" loading="lazy"></p><p><strong>docker rmi 删除镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker rmi -f 镜像id   #删除指定镜像</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker rmi -f 镜像id 镜像id 镜像id     #删除多个镜像</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker rmi -f $(docker images -aq)     #删除全部镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器，linux,下载一个centos镜像来学习</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>新建容器并启动</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image<span class="token comment"># 参数说明</span>--name<span class="token operator">=</span><span class="token string">"Name"</span>容器名字 tomcat01 tomcat02 ，用来区分容器-d              后台方式运行-it             使用交互方式运行，进入容器查看内容-p              指定容器的端口 -p <span class="token number">8080</span>:80-p  ip:主机<span class="token punctuation">(</span>即宿主机<span class="token punctuation">)</span>端口：容器端口-p  主机端口：容器端口  <span class="token comment">#这种方式常用</span>-p  容器端口容器端口P-P              随机指定端口<span class="token punctuation">(</span>大写P<span class="token punctuation">)</span><span class="token comment"># 测试，启动并进入容器</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker run -it centos /bin/bash</span><span class="token punctuation">[</span>root@8b4c74381205 /<span class="token punctuation">]</span><span class="token comment"># ls     #查看容器内的centos,基础版本，很多命令都是不完善的！</span>bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  vardev  home  lib64  media       opt  root  sbin  sys  usr<span class="token comment"># 从容器中退回主机</span><span class="token punctuation">[</span>root@8b4c74381205 /<span class="token punctuation">]</span><span class="token comment"># exit</span><span class="token builtin class-name">exit</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token number">123</span>  bin   dev  home  lib64  mnt  proc  run   srv  tmp  var<span class="token number">222</span>  boot  etc  lib   media  opt  root  sbin  sys  usr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>列出所有运行的容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># docker ps 命令</span><span class="token punctuation">(</span>不加） <span class="token comment"># 列出当前正在运行的容器</span>-a     <span class="token comment"># 列出当前正在运行的容器 + 带出历史运行过的容器</span>-n<span class="token operator">=</span>?   <span class="token comment"># 显示最近创建的容器</span>-q    <span class="token comment"># 只显示当前容器的编号</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES8b4c74381205        centos              <span class="token string">"/bin/bash"</span>         <span class="token number">4</span> minutes ago       Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> About a minute ago                       epic_wilsonfb87667bbc19        bf756fb1ae65        <span class="token string">"/hello"</span>            <span class="token number">2</span> hours ago         Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">2</span> hours ago                              awesome_banach<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker ps -a -n=1</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES8b4c74381205        centos              <span class="token string">"/bin/bash"</span>         <span class="token number">9</span> minutes ago       Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">6</span> minutes ago                       epic_wilson<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker ps -aq</span>8b4c74381205fb87667bbc19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>退出容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">exit</span>   <span class="token comment"># 直接退出容器</span>Ctrl + p + q  <span class="token comment"># 容器不停止退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>删除容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> <span class="token function">rm</span> 容器id   <span class="token comment"># 删除指定容器，不能删除正在运行的容器，如果要强制删除 rm -f</span><span class="token function">docker</span> <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> -aq<span class="token variable">)</span></span>    <span class="token comment"># 删除所有容器 </span><span class="token function">docker</span> <span class="token function">ps</span> -a -q<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>  <span class="token comment"># 删除所有容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>启动和停止容器的操作</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> start 容器id     <span class="token comment"># 启动容器</span><span class="token function">docker</span> restart 容器id   <span class="token comment"># 重启容器</span><span class="token function">docker</span> stop 容器id      <span class="token comment"># 停止当前正在运行的容器</span><span class="token function">docker</span> <span class="token function">kill</span> 容器id      <span class="token comment"># 强制停止当前正在运行的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 命令 docker run -d 镜像名</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker run -d centos</span>e9d60f206fa19963203db6c42c2f83c5120eb90eeee2b7ba9fdc4589370fd6b6<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token comment"># 问题docker ps,发现 centos 停止了</span><span class="token comment"># 常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span><span class="token comment"># nginx,容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看日志</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> logs -f -t --tail 数字 容器id<span class="token comment"># 显示日志</span>-tf <span class="token comment"># 显示日志</span>--tail  <span class="token comment"># 要显示的日志条数</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker logs -tf --tail 10 ce989f90023d </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看容器中进程信息</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 命令 docker top 容器id</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker top ce989f90023d</span><span class="token environment constant">UID</span>                 PID                 <span class="token environment constant">PPID</span>                C                   STIME               TTY                 TIME     root                <span class="token number">12249</span>               <span class="token number">12232</span>               <span class="token number">0</span>                   <span class="token number">22</span>:44               pts/0               00:00:00 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看镜像的元数据</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 命令</span><span class="token function">docker</span> inspect 容器id<span class="token comment"># 测试</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker inspect ce989f90023d</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"Id"</span><span class="token builtin class-name">:</span> <span class="token string">"ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244"</span>,        <span class="token string">"Created"</span><span class="token builtin class-name">:</span> <span class="token string">"2020-06-10T14:44:45.025360147Z"</span>,        <span class="token string">"Path"</span><span class="token builtin class-name">:</span> <span class="token string">"/bin/bash"</span>,        <span class="token string">"Args"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,        <span class="token string">"State"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Status"</span><span class="token builtin class-name">:</span> <span class="token string">"running"</span>,            <span class="token string">"Running"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"Paused"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Restarting"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"OOMKilled"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Dead"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Pid"</span><span class="token builtin class-name">:</span> <span class="token number">12249</span>,            <span class="token string">"ExitCode"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"Error"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"StartedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"2020-06-10T14:44:45.770227584Z"</span>,            <span class="token string">"FinishedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"0001-01-01T00:00:00Z"</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"Image"</span><span class="token builtin class-name">:</span> <span class="token string">"sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee"</span>,        <span class="token string">"ResolvConfPath"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/resolv.conf"</span>,        <span class="token string">"HostnamePath"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/hostname"</span>,        <span class="token string">"HostsPath"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/hosts"</span>,        <span class="token string">"LogPath"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244-json.log"</span>,        <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"/nifty_johnson"</span>,        <span class="token string">"RestartCount"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,        <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"overlay2"</span>,        <span class="token string">"Platform"</span><span class="token builtin class-name">:</span> <span class="token string">"linux"</span>,        <span class="token string">"MountLabel"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"ProcessLabel"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"AppArmorProfile"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"ExecIDs"</span><span class="token builtin class-name">:</span> null,        <span class="token string">"HostConfig"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Binds"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"ContainerIDFile"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"LogConfig"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"json-file"</span>,                <span class="token string">"Config"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"NetworkMode"</span><span class="token builtin class-name">:</span> <span class="token string">"default"</span>,            <span class="token string">"PortBindings"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,            <span class="token string">"RestartPolicy"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"no"</span>,                <span class="token string">"MaximumRetryCount"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"AutoRemove"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"VolumeDriver"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"VolumesFrom"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CapAdd"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CapDrop"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Capabilities"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Dns"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsOptions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsSearch"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"ExtraHosts"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"GroupAdd"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"IpcMode"</span><span class="token builtin class-name">:</span> <span class="token string">"private"</span>,            <span class="token string">"Cgroup"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Links"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"OomScoreAdj"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"PidMode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Privileged"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"PublishAllPorts"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"ReadonlyRootfs"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"SecurityOpt"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"UTSMode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"UsernsMode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"ShmSize"</span><span class="token builtin class-name">:</span> <span class="token number">67108864</span>,            <span class="token string">"Runtime"</span><span class="token builtin class-name">:</span> <span class="token string">"runc"</span>,            <span class="token string">"ConsoleSize"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token number">0</span>,                <span class="token number">0</span>            <span class="token punctuation">]</span>,            <span class="token string">"Isolation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"CpuShares"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"Memory"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"NanoCpus"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CgroupParent"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"BlkioWeight"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"BlkioWeightDevice"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"BlkioDeviceReadBps"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"BlkioDeviceWriteBps"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"BlkioDeviceReadIOps"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"BlkioDeviceWriteIOps"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CpuPeriod"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpuQuota"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpuRealtimePeriod"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpuRealtimeRuntime"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpusetCpus"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"CpusetMems"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Devices"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DeviceCgroupRules"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"DeviceRequests"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"KernelMemory"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"KernelMemoryTCP"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"MemoryReservation"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"MemorySwap"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"MemorySwappiness"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"OomKillDisable"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"PidsLimit"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Ulimits"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"CpuCount"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"CpuPercent"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"IOMaximumIOps"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"IOMaximumBandwidth"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"MaskedPaths"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/asound"</span>,                <span class="token string">"/proc/acpi"</span>,                <span class="token string">"/proc/kcore"</span>,                <span class="token string">"/proc/keys"</span>,                <span class="token string">"/proc/latency_stats"</span>,                <span class="token string">"/proc/timer_list"</span>,                <span class="token string">"/proc/timer_stats"</span>,                <span class="token string">"/proc/sched_debug"</span>,                <span class="token string">"/proc/scsi"</span>,                <span class="token string">"/sys/firmware"</span>            <span class="token punctuation">]</span>,            <span class="token string">"ReadonlyPaths"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/bus"</span>,                <span class="token string">"/proc/fs"</span>,                <span class="token string">"/proc/irq"</span>,                <span class="token string">"/proc/sys"</span>,                <span class="token string">"/proc/sysrq-trigger"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"GraphDriver"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"LowerDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641-init/diff:/var/lib/docker/overlay2/d4cd3bedb1e7340e62bb292c1e0d5ae37b1d1689ffc1640da67b2a8325facc21/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/work"</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"Mounts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,        <span class="token string">"Config"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Hostname"</span><span class="token builtin class-name">:</span> <span class="token string">"ce989f90023d"</span>,            <span class="token string">"Domainname"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"AttachStdout"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"AttachStderr"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"Tty"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"OpenStdin"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"StdinOnce"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"Env"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"/bin/bash"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Image"</span><span class="token builtin class-name">:</span> <span class="token string">"centos"</span>,            <span class="token string">"Volumes"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"WorkingDir"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Entrypoint"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"OnBuild"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"org.label-schema.build-date"</span><span class="token builtin class-name">:</span> <span class="token string">"20200114"</span>,                <span class="token string">"org.label-schema.license"</span><span class="token builtin class-name">:</span> <span class="token string">"GPLv2"</span>,                <span class="token string">"org.label-schema.name"</span><span class="token builtin class-name">:</span> <span class="token string">"CentOS Base Image"</span>,                <span class="token string">"org.label-schema.schema-version"</span><span class="token builtin class-name">:</span> <span class="token string">"1.0"</span>,                <span class="token string">"org.label-schema.vendor"</span><span class="token builtin class-name">:</span> <span class="token string">"CentOS"</span>,                <span class="token string">"org.opencontainers.image.created"</span><span class="token builtin class-name">:</span> <span class="token string">"2020-01-14 00:00:00-08:00"</span>,                <span class="token string">"org.opencontainers.image.licenses"</span><span class="token builtin class-name">:</span> <span class="token string">"GPL-2.0-only"</span>,                <span class="token string">"org.opencontainers.image.title"</span><span class="token builtin class-name">:</span> <span class="token string">"CentOS Base Image"</span>,                <span class="token string">"org.opencontainers.image.vendor"</span><span class="token builtin class-name">:</span> <span class="token string">"CentOS"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"NetworkSettings"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Bridge"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"SandboxID"</span><span class="token builtin class-name">:</span> <span class="token string">"74d140bbc60432c5fdce865fa48f78c1138923dd292e708a25c4de17de812d56"</span>,            <span class="token string">"HairpinMode"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"LinkLocalIPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"LinkLocalIPv6PrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"Ports"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,            <span class="token string">"SandboxKey"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/run/docker/netns/74d140bbc604"</span>,            <span class="token string">"SecondaryIPAddresses"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"SecondaryIPv6Addresses"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc"</span>,            <span class="token string">"Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">"172.17.0.1"</span>,            <span class="token string">"GlobalIPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"IPAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"172.17.0.3"</span>,            <span class="token string">"IPPrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">16</span>,            <span class="token string">"IPv6Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:ac:11:00:03"</span>,            <span class="token string">"Networks"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"bridge"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"IPAMConfig"</span><span class="token builtin class-name">:</span> null,                    <span class="token string">"Links"</span><span class="token builtin class-name">:</span> null,                    <span class="token string">"Aliases"</span><span class="token builtin class-name">:</span> null,                    <span class="token string">"NetworkID"</span><span class="token builtin class-name">:</span> <span class="token string">"58fd9703e96d12128c30f244be3205e3fe31fc7d1fb7fffdddba72d981e782f4"</span>,                    <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc"</span>,                    <span class="token string">"Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">"172.17.0.1"</span>,                    <span class="token string">"IPAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"172.17.0.3"</span>,                    <span class="token string">"IPPrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">16</span>,                    <span class="token string">"IPv6Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,                    <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:ac:11:00:03"</span>,                    <span class="token string">"DriverOpts"</span><span class="token builtin class-name">:</span> null                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>进入当前正在运行的容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span><span class="token comment"># 命令</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器id bashShell<span class="token comment"># 测试</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it ce989f90023d /bin/bash</span><span class="token punctuation">[</span>root@ce989f90023d /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token punctuation">[</span>root@ce989f90023d /<span class="token punctuation">]</span><span class="token comment"># ps -ef</span><span class="token environment constant">UID</span>         PID   <span class="token environment constant">PPID</span>  C STIME TTY          TIME CMDroot          <span class="token number">1</span>      <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">14</span>:44 pts/0    00:00:00 /bin/bashroot         <span class="token number">15</span>      <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">15</span>:19 pts/1    00:00:00 /bin/bashroot         <span class="token number">29</span>     <span class="token number">15</span>  <span class="token number">0</span> <span class="token number">15</span>:20 pts/1    00:00:00 <span class="token function">ps</span> -ef<span class="token comment"># 方式二</span><span class="token function">docker</span> attach 容器id<span class="token comment"># 测试</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker attach ce989f90023d</span>正在执行当前的代码<span class="token punctuation">..</span>.<span class="token comment"># docker exec# 进入容器后开启一个新的终端，可以在里面操作（常用）</span><span class="token comment"># docker attach # 进入容器正在执行的终端，不会启动新的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>从容器内拷贝文件到主机上</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> <span class="token function">cp</span> 容器id:容器内目标文件路径  目的主机路径<span class="token comment"># 查看当前主机目录</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># ls</span>ztx<span class="token comment"># 进入docker容器内部</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker attach ce989f90023d</span><span class="token punctuation">[</span>root@ce989f90023d /<span class="token punctuation">]</span><span class="token comment"># cd /home/</span><span class="token punctuation">[</span>root@ce989f90023d home<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token comment"># 在容器内新建一个文件</span><span class="token punctuation">[</span>root@ce989f90023d home<span class="token punctuation">]</span><span class="token comment"># touch test.java</span><span class="token punctuation">[</span>root@ce989f90023d home<span class="token punctuation">]</span><span class="token comment"># exit</span><span class="token builtin class-name">exit</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>CONTAINER ID     IMAGE      COMMAND       CREATED           STATUS                PORTS           NAMESce989f90023d     centos  <span class="token string">"/bin/bash"</span>  <span class="token number">44</span> minutes ago  Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">46</span> seconds ago               nifty_johnson<span class="token comment"># 将docker内文件拷贝到主机上</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker cp ce989f90023d:/home/test.java /home</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># ls</span>test.java  ztx<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># </span><span class="token comment"># 拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现自动同步 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="C:\Users\ZTX\Desktop\markdownx学习\Docker概述(1).assets\image-20200611085918923.png" alt="image-20200611085918923" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">attach      Attach to a running container       <span class="token comment"># 当前shell下attach连接指定运行的镜像</span>build       Build an image from a Dockerfile        <span class="token comment"># 通过Dockerfile定制镜像</span>commit      Create a new image from a container changes  <span class="token comment">#提交当前容器为新的镜像</span><span class="token function">cp</span>          Copy files/folders between a container and the <span class="token builtin class-name">local</span> filesystem <span class="token comment">#从容器中拷贝指定文件或目录到宿主机中</span>create      Create a new container   <span class="token comment"># 创建一个新的容器，同run,但不启动容器</span><span class="token function">diff</span>        Inspect changes to files or directories on a container's filesystem <span class="token comment">#查看docker容器的变化</span>events      Get real <span class="token function">time</span> events from the server   <span class="token comment"># 从docker服务获取容器实时事件</span><span class="token builtin class-name">exec</span>        Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a running container    <span class="token comment"># 在已存在的容器上运行命令</span><span class="token builtin class-name">export</span>      Export a container filesystem as a <span class="token function">tar</span> archive <span class="token comment"># 导出容器的内容流作为一个tar归档文件[对应import]</span><span class="token function">history</span>     Show the <span class="token function">history</span> of an image            <span class="token comment"># 展示一个镜像形成历史</span>images      List images                             <span class="token comment"># 列出系统当前的镜像</span><span class="token function">import</span>      Import the contents from a tarball to create a filesystem image <span class="token comment"># 从tar包中的内容创建一个新的文件系统镜像[对应export]</span>info        Display system-wide information         <span class="token comment"># 显示系统相关信息</span>inspect     Return low-level information on Docker objects <span class="token comment"># 查看容器详细信息</span><span class="token function">kill</span>        Kill one or <span class="token function">more</span> running containers     <span class="token comment"># 杀死指定的docker容器</span>load        Load an image from a <span class="token function">tar</span> archive or STDIN <span class="token comment"># 从一个tar包加载一个镜像[对应save]</span>login       Log <span class="token keyword">in</span> to a Docker registry  <span class="token comment"># 注册或者登录一个docker源服务器</span><span class="token builtin class-name">logout</span>      Log out from a Docker registry  <span class="token comment"># 从当前Docker registry退出</span>logs        Fetch the logs of a container  <span class="token comment"># 输出当前容器日志信息</span>pause       Pause all processes within one or <span class="token function">more</span> containers      <span class="token comment"># 暂停容器</span>port        List port mappings or a specific mapping <span class="token keyword">for</span> the container <span class="token comment"># 查看映射端口对应容器内部源端口</span><span class="token function">ps</span>          List containers  <span class="token comment"># 列出容器列表</span>pull        Pull an image or a repository from a registry <span class="token comment"># 从docker镜像源服务器拉取指定镜像或库镜像</span>push        Push an image or a repository to a registry   <span class="token comment"># 推送指定镜像或者库镜像至docker源服务器</span><span class="token function">rename</span>      Rename a container  <span class="token comment"># 给docker容器重新命名</span>restart     Restart one or <span class="token function">more</span> containers  <span class="token comment"># 重启运行的容器</span><span class="token function">rm</span>          Remove one or <span class="token function">more</span> containers  <span class="token comment"># 移除一个或者多个容器</span>rmi         Remove one or <span class="token function">more</span> images  <span class="token comment"># 移除一个或者多个镜像[无容器使用该镜像时才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span>run         Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a new container  <span class="token comment"># 创建一个新的容器并运行一个命令</span>save        Save one or <span class="token function">more</span> images to a <span class="token function">tar</span> archive <span class="token punctuation">(</span>streamed to STDOUT by default<span class="token punctuation">)</span> <span class="token comment"># 保存一个镜像为一个tar包[对应load]</span>search      Search the Docker Hub <span class="token keyword">for</span> images  <span class="token comment"># 在docker hub中搜索镜像</span>start       Start one or <span class="token function">more</span> stopped containers  <span class="token comment"># 启动容器</span>stats       Display a live stream of container<span class="token punctuation">(</span>s<span class="token punctuation">)</span> resource usage statistics <span class="token comment"># 实时显示容器资源使用统计</span>stop        Stop one or <span class="token function">more</span> running containers  <span class="token comment"># 停止容器</span>tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE <span class="token comment"># 给源中镜像打标签</span><span class="token function">top</span>         Display the running processes of a container     <span class="token comment"># 查看容器中运行的进程信息</span>unpause     Unpause all processes within one or <span class="token function">more</span> containers <span class="token comment"># 取消暂停容器</span>update      Update configuration of one or <span class="token function">more</span> containers  <span class="token comment"># 更新一个或多个容器配置</span>version     Show the Docker version information  <span class="token comment"># 查看docker版本号 </span><span class="token function">wait</span>        Block <span class="token keyword">until</span> one or <span class="token function">more</span> containers stop, <span class="token keyword">then</span> print their <span class="token builtin class-name">exit</span> codes <span class="token comment"># 截取容器停止时的退出状态值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h2><blockquote><p>作业1：Docker 安装Nginx</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 1.搜索镜像 search 建议去docker搜索，可以看到帮助文档</span><span class="token comment"># 2.下载镜像 pull</span><span class="token comment"># 3.运行测试</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               latest              2622e6cca7eb        <span class="token number">23</span> hours ago        132MBcentos              latest              470671670cac        <span class="token number">4</span> months ago        237MB<span class="token comment"># -d 后台运行</span><span class="token comment"># --name 给容器命名</span><span class="token comment"># -p 宿主机端口：容器内部端口   【端口映射操作】</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker run -d --name nginx01 -p 3344:80 nginx</span>d60570d1e45024e3687e3bf3105a6959af8ee68d34f0c62a7deee1c16ec6579fCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMESd60570d1e450        nginx               <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">2</span> minutes ago       Up <span class="token number">2</span> minutes        <span class="token number">0.0</span>.0.0:3344-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx01<span class="token comment"># 本地测试访问nginx</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># curl localhost:3344</span><span class="token comment"># 进入容器</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it nginx01 /bin/bash</span>root@d60570d1e450:/<span class="token comment"># whereis nginx</span>nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginxroot@d60570d1e450:/<span class="token comment"># cd /etc/nginx/</span>root@d60570d1e450:/etc/nginx<span class="token comment"># ls</span>conf.dfastcgi_paramskoi-utf  koi-win  mime.types  modules  nginx.conf  scgi_paramsuwsgi_params  win-utf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>端口暴露的概念</strong></p><p><img src="C:\Users\ZTX\Desktop\markdownx学习\Docker概述(1).assets\image-20200611085948617.png" alt="image-20200611085948617" loading="lazy"></p><p><strong>思考问题：</strong>我们每次改动nginx配置文件，都需要进入容器内部？十分麻烦，我要是可以在容器外部提供一个映射路径，达到在容器外部修改文件名，容器内部就可以自动修改？-v 数据卷 技术！</p><blockquote><p>作业2：Docker来装一个tomcat</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 官方文档</span><span class="token function">docker</span> run -it --rm tomcat:9.0<span class="token comment"># 我们之前的启动都是后台，停止了容器之后，容器还是可以查到 docker run -it --rm,一般用来测试，用完就删除</span><span class="token comment"># 下载再启动</span><span class="token function">docker</span> pull tomcat<span class="token comment"># 启动运行</span><span class="token function">docker</span> run -d -p <span class="token number">3355</span>:8080 --name tomcat01 tomcat<span class="token comment">#测试访问没有问题</span><span class="token comment"># 进入容器</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat01 /bin/bash</span><span class="token comment"># 发现问题：1、linux命令少了 2、webapps内没有内容（这是阿里云镜像的原因：默认是最小镜像，所有不必要的都删除）</span><span class="token comment"># 保证最小可运行环境</span><span class="token comment">#解决方法：将webapps.dist目录下内容拷至webapps下</span>root@c435d5b974a7:/usr/local/tomcat<span class="token comment"># cd webapps</span>root@c435d5b974a7:/usr/local/tomcat/webapps<span class="token comment"># ls</span>root@c435d5b974a7:/usr/local/tomcat/webapps<span class="token comment"># cd ..</span>root@c435d5b974a7:/usr/local/tomcat<span class="token comment"># ls</span>BUILDING.txt  CONTRIBUTING.md  LICENSENOTICEREADME.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  native-jni-lib  temp  webapps  webapps.dist  workroot@c435d5b974a7:/usr/local/tomcat<span class="token comment"># cd webapps.dist/</span>root@c435d5b974a7:/usr/local/tomcat/webapps.dist<span class="token comment"># ls</span>ROOT  docs  examples  host-manager  managerroot@c435d5b974a7:/usr/local/tomcat/webapps.dist<span class="token comment"># cd ..</span>root@c435d5b974a7:/usr/local/tomcat<span class="token comment"># cp -r webapps.dist/* webapps </span>root@c435d5b974a7:/usr/local/tomcat<span class="token comment"># cd webapps</span>root@c435d5b974a7:/usr/local/tomcat/webapps<span class="token comment"># ls</span>ROOT  docs  examples  host-manager  manager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拷贝完成就可以访问了：</p><p><img src="C:\Users\ZTX\Desktop\markdownx学习\Docker概述(1).assets\image-20200611090019494.png" alt="image-20200611090019494" loading="lazy"></p><p><strong>思考问题：</strong>我们以后要部署项目，如果每次都要进入容器是不是十分麻烦？我要是可以在容器外部提供映射路径，webapps,我们在外部放置项目，就自动同步到内部就好了！</p><blockquote><p>作业3：部署es+kibana</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># es 暴露的端口很多！</span><span class="token comment"># es 十分耗内存</span><span class="token comment"># es 的数据一般需要放置到安全目录！挂载</span><span class="token comment"># --net somenetwork？网络配置</span><span class="token comment"># 启动 elasticsearch</span><span class="token function">docker</span> run -d --name elasticsearch -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 -e <span class="token string">"discovery.type=single-node"</span> elasticsearch:7.6.2<span class="token comment"># 启动了 Linux就可卡住了   docker stats 查看cpu的状态</span><span class="token comment"># es 是十分耗内存的</span><span class="token comment"># 测试一下es是否成功了</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># curl localhost:9200</span><span class="token punctuation">&#123;</span>  <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"83b0d5dca26e"</span>,  <span class="token string">"cluster_name"</span> <span class="token builtin class-name">:</span> <span class="token string">"docker-cluster"</span>,  <span class="token string">"cluster_uuid"</span> <span class="token builtin class-name">:</span> <span class="token string">"MjhNfYTvRVui1UCrAwMdqw"</span>,  <span class="token string">"version"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"number"</span> <span class="token builtin class-name">:</span> <span class="token string">"7.6.2"</span>,    <span class="token string">"build_flavor"</span> <span class="token builtin class-name">:</span> <span class="token string">"default"</span>,    <span class="token string">"build_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"docker"</span>,    <span class="token string">"build_hash"</span> <span class="token builtin class-name">:</span> <span class="token string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,    <span class="token string">"build_date"</span> <span class="token builtin class-name">:</span> <span class="token string">"2020-03-26T06:34:37.794943Z"</span>,    <span class="token string">"build_snapshot"</span> <span class="token builtin class-name">:</span> false,    <span class="token string">"lucene_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"8.4.0"</span>,    <span class="token string">"minimum_wire_compatibility_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"6.8.0"</span>,    <span class="token string">"minimum_index_compatibility_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"6.0.0-beta1"</span>  <span class="token punctuation">&#125;</span>,  <span class="token string">"tagline"</span> <span class="token builtin class-name">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">&#125;</span><span class="token comment"># 查看docker容器占用资源情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181203.png" alt="image-20200611124706727" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 赶紧关闭容器，增加内存限制，修改配置文件 -e 环境配置修改</span><span class="token function">docker</span> run -d --name elasticsearch02 -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 -e <span class="token string">"discovery.type=single-node"</span> -e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms64m -Xmx512m"</span> elasticsearch:7.6.2  <span class="token comment"># 查看docker容器占用资源情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181204.png" alt="image-20200611124755826" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># curl localhost:9200</span><span class="token punctuation">&#123;</span>  <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"5a262b522bbf"</span>,  <span class="token string">"cluster_name"</span> <span class="token builtin class-name">:</span> <span class="token string">"docker-cluster"</span>,  <span class="token string">"cluster_uuid"</span> <span class="token builtin class-name">:</span> <span class="token string">"rGMaCpVXScGaZcv_UtK3gQ"</span>,  <span class="token string">"version"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"number"</span> <span class="token builtin class-name">:</span> <span class="token string">"7.6.2"</span>,    <span class="token string">"build_flavor"</span> <span class="token builtin class-name">:</span> <span class="token string">"default"</span>,    <span class="token string">"build_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"docker"</span>,    <span class="token string">"build_hash"</span> <span class="token builtin class-name">:</span> <span class="token string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,    <span class="token string">"build_date"</span> <span class="token builtin class-name">:</span> <span class="token string">"2020-03-26T06:34:37.794943Z"</span>,    <span class="token string">"build_snapshot"</span> <span class="token builtin class-name">:</span> false,    <span class="token string">"lucene_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"8.4.0"</span>,    <span class="token string">"minimum_wire_compatibility_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"6.8.0"</span>,    <span class="token string">"minimum_index_compatibility_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"6.0.0-beta1"</span>  <span class="token punctuation">&#125;</span>,  <span class="token string">"tagline"</span> <span class="token builtin class-name">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>作业4：使用 kibana 连接 es ? 思考网络如何才能连接过去！</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181205.png" alt="image-20200611125352717" loading="lazy"></p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li>portainer（线用这个）</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> run -d -p <span class="token number">8088</span>:9000 <span class="token punctuation">\</span>--restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock --privileged<span class="token operator">=</span>true portainer/portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Rancher （CI&#x2F;CD再用）</li></ul><h2 id="什么是portainer"><a href="#什么是portainer" class="headerlink" title="什么是portainer ?"></a>什么是portainer ?</h2><p>Docker图形化界面管理工具！提供一个后台面板供我们操作！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> run -d -p <span class="token number">8088</span>:9000 <span class="token punctuation">\</span>--restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock --privileged<span class="token operator">=</span>true portainer/portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>外部访问测试：<a href="http://ip:8088/">http://ip:8088/</a></p><p>通过它来访问了;</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181206.png" alt="image-20200611141621853" loading="lazy"></p><p>选择本地的：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181207.png" alt="image-20200611142004773" loading="lazy"></p><p>进入之后的面板：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181208.png" alt="image-20200611144838665" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181209.png" alt="image-20200611144900114" loading="lazy"></p><p>可视化面板我们平时不会使用，大家自己测试玩玩即可！</p><h1 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件。</p><p>所有应用，直接打包docker镜像，就可以直接跑起来！</p><p><strong>如何得到镜像</strong></p><ul><li>从远程仓库下载</li><li>别人拷贝给你</li><li>自己制作一个镜像 DockerFile</li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote><p>UnionFs （联合文件系统）</p></blockquote><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加载 kernel, Linux刚启动时会加载bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包括bootloader和 Kernel。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中的&#x2F;dev,&#x2F;proc,&#x2F;bin,&#x2F;etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。<br><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181210.png" alt="image-20200611162007055" loading="lazy"></p><p>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181211.png" alt="image-20200611162057734" loading="lazy"></p><p>对于个精简的OS, rootfs可以很小，只需要包合最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的Linux发行版， boots基本是一致的， rootfs会有差別，因此不同的发行版可以公用bootfs.</p><p>虚拟机是分钟级别，容器是秒级！</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><blockquote><p>分层的镜像</p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载！<img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181212.png" alt="image-20200611163839741" loading="lazy"></p><p><strong>思考：为什么Docker镜像要采用这种分层的结构呢？</strong></p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过docker image inspect 命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">➜  / <span class="token function">docker</span> image inspect redis          <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"Id"</span><span class="token builtin class-name">:</span> <span class="token string">"sha256:f9b9909726890b00d2098081642edf32e5211b7ab53563929a47f250bcdc1d7c"</span>,        <span class="token string">"RepoTags"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token string">"redis:latest"</span>        <span class="token punctuation">]</span>,        <span class="token string">"RepoDigests"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token string">"redis@sha256:399a9b17b8522e24fbe2fd3b42474d4bb668d3994153c4b5d38c3dafd5903e32"</span>        <span class="token punctuation">]</span>,        <span class="token string">"Parent"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"Comment"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"Created"</span><span class="token builtin class-name">:</span> <span class="token string">"2020-05-02T01:40:19.112130797Z"</span>,        <span class="token string">"Container"</span><span class="token builtin class-name">:</span> <span class="token string">"d30c0bcea88561bc5139821227d2199bb027eeba9083f90c701891b4affce3bc"</span>,        <span class="token string">"ContainerConfig"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Hostname"</span><span class="token builtin class-name">:</span> <span class="token string">"d30c0bcea885"</span>,            <span class="token string">"Domainname"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStdout"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStderr"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"ExposedPorts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"6379/tcp"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"Tty"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"OpenStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"StdinOnce"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Env"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,                <span class="token string">"GOSU_VERSION=1.12"</span>,                <span class="token string">"REDIS_VERSION=6.0.1"</span>,                <span class="token string">"REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.1.tar.gz"</span>,                <span class="token string">"REDIS_DOWNLOAD_SHA=b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"/bin/sh"</span>,                <span class="token string">"-c"</span>,                <span class="token string">"#(nop) "</span>,                <span class="token string">"CMD [<span class="token entity" title="\&quot;">\"</span>redis-server<span class="token entity" title="\&quot;">\"</span>]"</span>            <span class="token punctuation">]</span>,            <span class="token string">"ArgsEscaped"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"Image"</span><span class="token builtin class-name">:</span> <span class="token string">"sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0"</span>,            <span class="token string">"Volumes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"/data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"WorkingDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/data"</span>,            <span class="token string">"Entrypoint"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"docker-entrypoint.sh"</span>            <span class="token punctuation">]</span>,            <span class="token string">"OnBuild"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"DockerVersion"</span><span class="token builtin class-name">:</span> <span class="token string">"18.09.7"</span>,        <span class="token string">"Author"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,        <span class="token string">"Config"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Hostname"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"Domainname"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStdout"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"AttachStderr"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"ExposedPorts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"6379/tcp"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"Tty"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"OpenStdin"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"StdinOnce"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Env"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,                <span class="token string">"GOSU_VERSION=1.12"</span>,                <span class="token string">"REDIS_VERSION=6.0.1"</span>,                <span class="token string">"REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.1.tar.gz"</span>,                <span class="token string">"REDIS_DOWNLOAD_SHA=b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"redis-server"</span>            <span class="token punctuation">]</span>,            <span class="token string">"ArgsEscaped"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"Image"</span><span class="token builtin class-name">:</span> <span class="token string">"sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0"</span>,            <span class="token string">"Volumes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"/data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"WorkingDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/data"</span>,            <span class="token string">"Entrypoint"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"docker-entrypoint.sh"</span>            <span class="token punctuation">]</span>,            <span class="token string">"OnBuild"</span><span class="token builtin class-name">:</span> null,            <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> null        <span class="token punctuation">&#125;</span>,        <span class="token string">"Architecture"</span><span class="token builtin class-name">:</span> <span class="token string">"amd64"</span>,        <span class="token string">"Os"</span><span class="token builtin class-name">:</span> <span class="token string">"linux"</span>,        <span class="token string">"Size"</span><span class="token builtin class-name">:</span> <span class="token number">104101893</span>,        <span class="token string">"VirtualSize"</span><span class="token builtin class-name">:</span> <span class="token number">104101893</span>,        <span class="token string">"GraphDriver"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"LowerDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/adea96bbe6518657dc2d4c6331a807eea70567144abda686588ef6c3bb0d778a/diff:/var/lib/docker/overlay2/66abd822d34dc6446e6bebe73721dfd1dc497c2c8063c43ffb8cf8140e2caeb6/diff:/var/lib/docker/overlay2/d19d24fb6a24801c5fa639c1d979d19f3f17196b3c6dde96d3b69cd2ad07ba8a/diff:/var/lib/docker/overlay2/a1e95aae5e09ca6df4f71b542c86c677b884f5280c1d3e3a1111b13644b221f9/diff:/var/lib/docker/overlay2/cd90f7a9cd0227c1db29ea992e889e4e6af057d9ab2835dd18a67a019c18bab4/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/work"</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"RootFS"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"layers"</span>,            <span class="token string">"Layers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"sha256:c2adabaecedbda0af72b153c6499a0555f3a769d52370469d8f6bd6328af9b13"</span>,                <span class="token string">"sha256:744315296a49be711c312dfa1b3a80516116f78c437367ff0bc678da1123e990"</span>,                <span class="token string">"sha256:379ef5d5cb402a5538413d7285b21aa58a560882d15f1f553f7868dc4b66afa8"</span>,                <span class="token string">"sha256:d00fd460effb7b066760f97447c071492d471c5176d05b8af1751806a1f905f8"</span>,                <span class="token string">"sha256:4d0c196331523cfed7bf5bafd616ecb3855256838d850b6f3d5fba911f6c4123"</span>,                <span class="token string">"sha256:98b4a6242af2536383425ba2d6de033a510e049d9ca07ff501b95052da76e894"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"Metadata"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"LastTagTime"</span><span class="token builtin class-name">:</span> <span class="token string">"0001-01-01T00:00:00Z"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>理解：</strong></p><p>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181213.png" alt="image-20200611163818495" loading="lazy"></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而整体的大镜像包含了来自两个镜像层的6个文件。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181214.png" alt="image-20200611164322267" loading="lazy"></p><p>上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181215.png" alt="image-20200611164447964" loading="lazy"></p><p>这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的文件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW [1]。</p><blockquote><p>特点</p></blockquote><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！<img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181216.png" alt="image-20200611165355825" loading="lazy"></p><p>如何提交一个自己的镜像？</p><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> commit 提交容器成为一个新的副本<span class="token comment"># 命令和git原理类似</span><span class="token function">docker</span> commit -m<span class="token operator">=</span><span class="token string">"描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>版本TAG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实战测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#1、启动一个默认的tomcat</span><span class="token comment">#2、发现这个默认的tomcat是没有webapps应用的，镜像的原因。官方的镜像默认webapps下面是没有文件的！</span><span class="token comment">#3、我自己将webapp.dist下文件拷贝至webapps下</span><span class="token comment">#4、将我们操作过的容器通过commit提交为一个镜像！我们以后就可以使用我们修改过的镜像了，这就是我们自己的一个修改的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181217.png" alt="image-20200611172701729" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">如果你想要保存当前容器的状态，就可以通过commit来提交，获得一个镜像，就好比我们我们使用虚拟机的快照。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到了这里就算是入门Docker了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=838132893&amp;bvid=BV1og4y1q7M4&amp;cid=191591129&amp;page=1&quot; style=&quot;width: 100%; height: 500px; max-</summary>
      
    
    
    
    <category term="Docker" scheme="http://ccsu.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://ccsu.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>计算机存储容量单位换算</title>
    <link href="http://ccsu.top/posts/3b245245/"/>
    <id>http://ccsu.top/posts/3b245245/</id>
    <published>2022-02-24T08:40:00.000Z</published>
    <updated>2022-02-24T08:40:41.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>1、比特Bit(位、b)：表示信息的最小单位，即计算机最小的存储单位，是二进制数的一位包含的信息或2个选项中特别指定1个的需要信息量【它代表从一个二进制数组中选出一元（0或1）所提供的信息量（若此二元出现的概率相等）】</p><p>2、字节Byte(B)：二进制数据的单位，计算机中数据基本单位，一个字节通常8位长。各种信息在计算机中存储、处理至少需要一个字节。例一个ASCII码用一个字节表示，一个汉字用两个字节表示</p><p>3、千字节Kilobytes(KB)：计算机存储容量的单位，也常用KB来表示。1KB&#x3D;1024字节</p><p>4、兆字节Megabytes(MB)：计算机存储容量的单位，也常用MB来表示。1MB&#x3D;1024*1024字节</p><p>5、吉字节Gigabyte(GB) ：又称千兆字节，是计算机存储容量单位，简称GB，是兆字节(MB)的1024倍，即 1024MB。</p><p>6、太字节terabyte(TB)：计算机存储容量单位，也常用TB来表示。1TB&#x3D;1024GB&#x3D;2^40字节。</p><p>PS：KB（即baiK）、MB（即M）、GB（即G）等都是基于字节换算的存储单位。</p><h1 id="二、转换"><a href="#二、转换" class="headerlink" title="二、转换"></a>二、转换</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c">字节<span class="token punctuation">(</span>Byte<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span>位<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>                               <span class="token number">1</span>B<span class="token operator">=</span><span class="token number">8</span>b <span class="token number">1</span>KB<span class="token punctuation">(</span> Kilobyte，千字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>B                      <span class="token number">1</span>KB<span class="token operator">=</span><span class="token number">1024</span>B <span class="token number">1</span>MB<span class="token punctuation">(</span> Megabyte，兆字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>KB                     <span class="token number">1</span>MB<span class="token operator">=</span><span class="token number">1024</span>KB <span class="token number">1</span>GB<span class="token punctuation">(</span> Gigabyte，吉字节，千兆<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>MB               <span class="token number">1</span>GB<span class="token operator">=</span><span class="token number">1024</span>MB <span class="token number">1</span>TB<span class="token punctuation">(</span> Trillionbyte，万亿字节，太字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>GB       <span class="token number">1</span>TB<span class="token operator">=</span><span class="token number">1024</span>GB <span class="token number">1</span>PB<span class="token punctuation">(</span> Petabyte，千万亿字节，拍字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>TB         <span class="token number">1</span>PB<span class="token operator">=</span><span class="token number">1024</span>TB <span class="token number">1</span>EB<span class="token punctuation">(</span> Exabyte，百亿亿字节，艾字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>PB          <span class="token number">1</span>EB<span class="token operator">=</span><span class="token number">1024</span>PB <span class="token number">1</span>ZB<span class="token punctuation">(</span>Zettabyte，十万亿亿字节，泽字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>EB       <span class="token number">1</span>ZB<span class="token operator">=</span><span class="token number">1024</span>EB <span class="token number">1</span>YB<span class="token punctuation">(</span> Yottabyte，一亿亿亿字节，尧字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>ZB      <span class="token number">1</span>YB<span class="token operator">=</span><span class="token number">1024</span>ZB    <span class="token number">1</span>BB<span class="token punctuation">(</span> Brontobyte，千亿亿亿字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>YB             <span class="token number">1</span>BB<span class="token operator">=</span><span class="token number">1024</span>YB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线转换工具：<a href="https://calc.itzmx.com/">PC字节计算器</a></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220224141737.png" alt="image-20220224141737338" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; title=&quot;一、概念&quot;&gt;&lt;/a&gt;一、概念&lt;/h1&gt;&lt;p&gt;1、比特Bit(位、b)：表示信息的最小单位，即计算机最小的存储单位，是二进制数的一位包含的信息或2个选项中特别指定1个的需</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://ccsu.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="计算机等级考试" scheme="http://ccsu.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95/"/>
    
    
    <category term="嵌入式" scheme="http://ccsu.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>树莓派GPIO串口配置</title>
    <link href="http://ccsu.top/posts/149c75f2/"/>
    <id>http://ccsu.top/posts/149c75f2/</id>
    <published>2022-02-17T12:18:00.000Z</published>
    <updated>2022-05-09T01:59:12.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外设IO口定义说明"><a href="#外设IO口定义说明" class="headerlink" title="外设IO口定义说明"></a>外设IO口定义说明</h1><p>从树莓派的相关资料我们可以看到，树莓派有两个串口可以使用，一个是硬件串口（&#x2F;dev&#x2F;ttyAMA0）,另一个是mini串口（&#x2F;dev&#x2F;ttyS0）。硬件串口有单独的波特率时钟源，性能好，稳定性强；mini串口功能简单，稳定性较差，波特率由CPU内核时钟提供，受内核时钟影响。<br>树莓派（3&#x2F;4代）板载蓝牙模块，默认的硬件串口是分配给蓝牙模块使用的，而性能较差的mini串口是分配给GPIO串口 TXD0、RXD0。</p><p><img src="https://i.loli.net/2020/12/19/BhRGtWprT3yYZ6m.png" alt="image-20201027193659980" loading="lazy"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m serial<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>list_ports <span class="token comment">#命令python查看安装到系统上的串口</span>ls <span class="token operator">-</span>l <span class="token operator">/</span>dev<span class="token operator">/</span>tty<span class="token operator">*</span>  <span class="token comment">#查看识别的串口号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Serial-配置"><a href="#Serial-配置" class="headerlink" title="Serial 配置"></a>Serial 配置</h1><p>首先运行<code>ls /dev -al</code>命令查看到默认的串口分配方式，如下图所示：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220125213416.png" alt="image-20220125213416058" loading="lazy"></p><p>由于硬件串口分配给板载蓝牙使用，所以要释放掉,并设置硬件串口分配给GPIO串口。<br>首先登陆终端后，输入<code>sudo raspi-config</code>命令进入树莓派系统配置界面,选择第五个<code>Interfacing Options</code>：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220125213519.png" alt="image-20220125213519894" loading="lazy"></p><p>进入P6 Serial</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220125213546.png" alt="image-20220125213546164" loading="lazy"></p><p>选择关闭串口登录功能，打开硬件串口调试功能：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220125213610.png" alt="image-20220125213609989" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220125213626.png" alt="image-20220125213626861" loading="lazy"></p><p>完成后提示以下界面，按OK</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220125213655.png" alt="image-20220125213655132" loading="lazy"></p><h1 id="设置硬件串口为GPIO串口"><a href="#设置硬件串口为GPIO串口" class="headerlink" title="设置硬件串口为GPIO串口"></a>设置硬件串口为GPIO串口</h1><p>接着将串口配置为我们的GPIO串口，对输入<code>sudo nano /boot/config.txt</code>命令，将下面两行内容添加到最后:</p><p><code>dtoverlay=pi3-miniuart-bt </code></p><p><code>force_turbo=1</code></p><p>修改后保存并退出，内容如下图片所示：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220125213830.png" alt="image-20220125213830309" loading="lazy"></p><p>重启树莓派后，再次输入<code>ls /dev -al</code>，可以看到两个串口已经互相换了位置：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220125213908.png" alt="image-20220125213908406" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;外设IO口定义说明&quot;&gt;&lt;a href=&quot;#外设IO口定义说明&quot; class=&quot;headerlink&quot; title=&quot;外设IO口定义说明&quot;&gt;&lt;/a&gt;外设IO口定义说明&lt;/h1&gt;&lt;p&gt;从树莓派的相关资料我们可以看到，树莓派有两个串口可以使用，一个是硬件串口（&amp;#x2F</summary>
      
    
    
    
    <category term="毕业设计" scheme="http://ccsu.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="树莓派" scheme="http://ccsu.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="串口" scheme="http://ccsu.top/tags/%E4%B8%B2%E5%8F%A3/"/>
    
  </entry>
  
</feed>
