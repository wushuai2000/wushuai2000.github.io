<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>explorerの博客</title>
  
  
  <link href="http://ccsu.top/atom.xml" rel="self"/>
  
  <link href="http://ccsu.top/"/>
  <updated>2022-03-07T01:18:00.000Z</updated>
  <id>http://ccsu.top/</id>
  
  <author>
    <name>Explorer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker进阶</title>
    <link href="http://ccsu.top/posts/b3ee7ac2/"/>
    <id>http://ccsu.top/posts/b3ee7ac2/</id>
    <published>2022-03-07T01:18:00.000Z</published>
    <updated>2022-03-07T01:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=243999746&bvid=BV1kv411q7Qc&cid=216242319&page=1" style="width: 100%; height: 500px; max-width: 100%；align:center; padding:20px 0;" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker的理念回顾</strong></p><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！需求：数据可以持久化</p><p>MySQL，容器删除了，删库跑路！需求：MySQL数据可以存储在本地！</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181015.png" alt="image-20200611220811766" loading="lazy"></p><p><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -it -v 主机目录:容器目录# 测试[root@localhost home]# docker run -it -v &#x2F;home&#x2F;ceshi:&#x2F;home  centos  &#x2F;bin&#x2F;bash# 启动起来的时候，我们可以通过docker inspect 容器id 来查看挂载情况：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181016.png" alt="image-20200611224010091" loading="lazy"></p><p>测试文件的同步</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181017.png" alt="image-20200611224046109" loading="lazy"></p><p>在容器内指定目录下添加或修改一个文件，会同步到主机指定目录下！反之，在主机目录下做相关操作，也会同步到容器对应的目录下！</p><p>再来测试！</p><p>1、停止容器</p><p>2、宿主机修改文件</p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181018.png" alt="image-20200611224137284" loading="lazy"></p><p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</p><h2 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h2><p>思考：MySQL的数据持久化的问题！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 获取镜像[root@localhost home]# docker pull mysql:5.7# 运行容器，需要做数据挂载！ # 安装mysql,需要配置密码，这是要注意的点！# 官方测试：docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag# 启动我们的MySQL容器-d后台运行-p端口映射-v卷挂载-e  环境配置--name  容器名字[root@localhost home]# docker run -d -p 3310:3306 -v &#x2F;home&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 --name mysql01 mysql:5.7# 启动成功之后，我们在本地使用sqlyog 连接测试一下# sqlyog —— 连接到服务器的3310 —— 3310和容器内的3306映射，这个时候我们就可以连接上了！# 本地测试创建一个数据库，查看一下我们的映射的路径是否ok!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设我们将容器删除</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181019.png" alt="image-20200611230752177" loading="lazy"></p><p>发现，我们挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能！</p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 匿名挂载-v 容器内路径docker run -d -P --name nginx01 -v &#x2F;etc&#x2F;nginx nginx# 查看所有卷的情况[root@localhost data]# docker volume lsDRIVER              VOLUME NAMElocal               2dd0379216c9ee4441ed56f8ce53461c19abe78b8cfd024ac5fbe07c3b8f09ba# 这里发现，这种就是匿名挂载，我们在 -v 后只写了容器内的路径，没有写容器外的路径！# 具名挂载[root@localhost home]# docker run -d -P --name nginx02 -v juming-nginx:&#x2F;etc&#x2F;nginx nginx5ba5708389bf71b2156fdbcedc50a62b16ac27adb2a3dfac42c52e9da5ace79f[root@localhost home]# docker volume lsDRIVER              VOLUME NAMElocal               juming-nginx# 通过 -v 卷名：容器内路径# 查看一下这个卷  # 先找到卷所在路径 docker volume inspect 卷名，如下图：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181020.png" alt="image-20200611235522418" loading="lazy"></p><p>所有的docker容器内的卷，没有指定目录的情况下都是在**&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;xxxx&#x2F;_data**下！<br>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况使用 <strong>具名挂载</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！-v容器内路径       # 匿名挂载-v卷名:容器内路径  # 具名挂载-v&#x2F;宿主机路径:容器内路径   # 指定路径挂载！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拓展：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 通过 -v 容器内路径：ro 或 rw   改变读写权限ro #readonly 只读rw #readwrite 可读可写# 一旦创建容器时设置了容器权限，容器对我们挂载出来的内容就有限定了！docker run -d -P --name nginx05 -v juming:&#x2F;etc&#x2F;nginx:ro nginxdocker run -d -P --name nginx05 -v juming:&#x2F;etc&#x2F;nginx:rw nginx# 默认是 rw# ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始Dockerfile"><a href="#初始Dockerfile" class="headerlink" title="初始Dockerfile"></a>初始Dockerfile</h2><p>Dockerfile 就是用来构建 docker镜像的构建文件！命令脚本！ 先体验一下！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是最终镜像的一层！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个dockerfile文件，名字可以随机，建议 dockerfile[root@localhost docker-test-volume]# vim dockerfile# 文件中的内容：指令(大写) 参数FROM centosVOLUME [&quot;volume01&quot;,&quot;volume02&quot;]CMD echo&quot;----end----&quot;CMD &#x2F;bin&#x2F;bash# 这里的每个命令，就是镜像的一层！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181021.png" alt="image-20200612003052844" loading="lazy"></p><p>注意：我们这里的 dockerfile  是我们编写的文件名哦！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181022.png" alt="image-20200612003717223" loading="lazy"></p><p>这两个卷和外部一定有两个同步的目录！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181023.png" alt="image-20200612003946028" loading="lazy"></p><p>查看一下卷挂载在主机上的路径</p><p><strong>docker inspect 容器id</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181024.png" alt="image-20200612004608027" loading="lazy"></p><p>测试一下刚才的文件是否同步出去了！</p><p>这种方式我们未来使用十分的多，因为我们通常会构建自己的镜像！</p><p>假设构建镜像的时候没有挂在卷，要手动镜像挂载即可： (参考上文<strong>具名和匿名挂载</strong>)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-v 卷名:容器内路径 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p><strong>多个mysql同步数据！</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181025.png" alt="image-20200612223759573" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181026.png" alt="image-20200612224621379" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181027.png" alt="image-20200612225358172" loading="lazy"></p><p>在docker03下创建docker03文件后，进入docker01发现也依旧会同步过来：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181028.png" alt="image-20200612225641266" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 测试1：删除docker01后，docker02和docker03是否还可以访问原来docker01下创建的的文件？# 测试1的结果为：依旧可以访问！！！# 测试2：删除docker01后，docker02和docker03之间是否可以相互同步文件？# 测试2的结果为：docket02和docker03之间一九可以完成同步！！！ 见下图：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181029.png" alt="image-20200612231431551" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181030.png" alt="image-20200612231603498" loading="lazy"></p><p><strong>多个mysql实现数据共享</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">➜  ~ docker run -d -p 3306:3306 -v &#x2F;home&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 --name mysql01 mysql:5.7➜  ~ docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 --name mysql02 --volumes-from mysql01  mysql:5.7# 这个时候，可以实现两个容器数据同步！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结论：</strong></p><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><hr><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h2><p><code>dockerfile</code>是用来构建docker镜像的文件！命令参数脚本！</p><p><strong>构建步骤：</strong></p><p>1、 编写一个dockerfile文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run运行镜像</p><p>4、 docker push发布镜像（DockerHub 、阿里云仓库)</p><p>查看官方是怎么做的！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181031.png" alt="image-20200612233951676" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181032.png" alt="image-20200612234022746" loading="lazy"></p><p>很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像！</p><p>官方既然可以制作镜像，那我们也可以！</p><h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p><strong>基础知识：</strong></p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、# 表示注释</p><p>4、每一个指令都会创建提交一个新的镜像曾，并提交！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181033.png" alt="image-20200612234419262" loading="lazy"></p><p>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><p>Docker容器：容器就是镜像运行起来提供服务。</p><h2 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM# 基础镜像，一切从这里开始构建MAINTAINER# 镜像是谁写的，姓名+邮箱RUN# 镜像构建的时候需要运行的命令ADD# 步骤：tomcat镜像，这个tomcat压缩包！ 添加内容WORKDIR# 镜像的工作目录VOLUME# 挂载的目录EXPOSE          # 暴露端口配置，跟 -p 是一个道理CMD# 指定这个容器启动时要执行的命令,只有最后一个命令会生效，可悲替代ENTRYPOINT# 指定这个容器启动的时候要执行的命令，可以追加命令ONBUILD# 当构建一个被继承DockerFile 这个时候就会运行ONBUILD的指令。触发指令COPY# 类似ADD,将我们文件拷贝到镜像中ENV# 构建的时候设置环境变量，跟 -e 是一个意思# CMD 和 ENTRYPOINT 的区别说明：（后面也会介绍）# 若CMD 和 ENTRYPOINT 后跟的都是 ls -a 这个命令，当docker run 一个容器时，添加了 -l 选项，则CMD里的ls -a 命令就会被替换成-l;而ENTRYPOINT中的 ls -a会追加-l变成 ls -a -l  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181034.png" alt="image-20200613000838850" loading="lazy"></p><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub中99%镜像都是从这个基础镜像过来的( <strong>FROM scratch</strong> )，然后配置需要的软件和配置来构建。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181035.png" alt="image-20200613001130237" loading="lazy"></p><blockquote><p>创建一个自己的 centos</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、编写DockerFile文件，内容如下：[root@localhost dockerfile]# cat mydockerfile-centosFROM centosMAINTAINER ztx&lt;123456@qq.com&gt; ENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo &quot;----end----&quot;CMD &#x2F;bin&#x2F;bash# 2、通过这个文件构建镜像# 命令docker build -f dockerfile文件路径 -t 镜像名:[tag] .[root@localhost dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .....Successfully built c987078b06cbSuccessfully tagged mycentos:0.1# 3、测试运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比：</strong></p><p><strong>之前的原生的centos</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181036.png" alt="image-20200613004551789" loading="lazy"></p><p><strong>我们增加之后的镜像</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181037.png" alt="image-20200613005056516" loading="lazy"></p><p>注：net-tools 包含一系列程序，构成了 Linux 网络的基础。</p><p>我们可以列出本地镜像的变更历史：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181038.png" alt="image-20200613005625844" loading="lazy"></p><p>我们平时拿到一个镜像，可以研究一下它是怎么做的！</p><blockquote><p>CMD 和 ENTRYPOINT 的区别</p></blockquote><p><strong>测试CMD</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 编写dockerfile文件$ vim dockerfile-test-cmdFROM centosCMD [&quot;ls&quot;,&quot;-a&quot;]# 构建镜像$ docker build  -f dockerfile-test-cmd -t cmd-test:0.1 .# 运行镜像$ docker run cmd-test:0.1....dockerenvbindev# 想追加一个命令  -l 成为ls -al$ docker run cmd-test:0.1 -ldocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;: unknown.ERRO[0000] error waiting for container: context canceled # cmd的情况下 -l 替换了CMD[&quot;ls&quot;,&quot;-l&quot;]。 -l  不是命令,所以报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试ENTRYPOINT</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 编写dockerfile文件$ vim dockerfile-test-entrypointFROM centosENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]$ docker run entrypoint-test:0.1....dockerenvbindevetchomeliblib64lost+found ...# 我们的命令，是直接拼接在我们的ENTRYPOINT命令后面的$ docker run entrypoint-test:0.1 -ltotal 56drwxr-xr-x   1 root root 4096 May 16 06:32 .drwxr-xr-x   1 root root 4096 May 16 06:32 ..-rwxr-xr-x   1 root root    0 May 16 06:32 .dockerenvlrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr&#x2F;bindrwxr-xr-x   5 root root  340 May 16 06:32 devdrwxr-xr-x   1 root root 4096 May 16 06:32 etcdrwxr-xr-x   2 root root 4096 May 11  2019 homelrwxrwxrwx   1 root root    7 May 11  2019 lib -&gt; usr&#x2F;liblrwxrwxrwx   1 root root    9 May 11  2019 lib64 -&gt; usr&#x2F;lib64 ....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！</p><h2 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h2><p>1、准备镜像文件tomcat压缩包，jdk压缩包！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181039.png" alt="image-20200613151500712" loading="lazy"></p><p>2、编写Dockerfile文件，官方命名: <strong>Dockerfile</strong> ，build会自动寻找这个文件，就不要 -f 指定了！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM centosMAINTAINER kuangshen&lt;123456@qq.com&gt;COPY readme.txt &#x2F;usr&#x2F;local&#x2F;readme.txtADD jdk-8u161-linux-x64.tar.gz    &#x2F;usr&#x2F;local&#x2F;ADD apache-tomcat-8.0.53.tar.gz   &#x2F;usr&#x2F;localRUN yum -y install vimENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATHENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_161ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.0.53ENV CATALINA_BASH &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.0.53ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;binEXPOSE 8080CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.0.53&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.0.53&#x2F;bin&#x2F;logs&#x2F;catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、构建镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker build -t diytomcat .     diytomcat是定义的镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、启动镜像，创建容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker run -d -p 9090:8080 --name kuangshentomcat02 -v &#x2F;home&#x2F;kuangshen&#x2F;build&#x2F;tomcat&#x2F;test:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.0.53&#x2F;webapps&#x2F;test -v &#x2F;home&#x2F;kuangshen&#x2F;build&#x2F;tomcat&#x2F;tomcatlogs&#x2F;:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.0.53&#x2F;logs diytomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、访问测试</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181040.png" alt="image-20200613175551231" loading="lazy"></p><p>6、发布项目（由于做了卷挂载，我们就可以直接在本地发布项目了）</p><p>在&#x2F;home&#x2F;kuangshen&#x2F;build&#x2F;tomcat&#x2F;test目录下创建WEB-INF目录，在里面创建web.xml文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee                               http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在回到test目录，添加一个index.jsp页面：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>vim<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>&lt;%System.out.println("---my test web logs---");%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现：test项目部署成功，可以直接访问！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181041.png" alt="image-20200613180033633" loading="lazy"></p><p>注意：这时进入&#x2F;home&#x2F;kuangshen&#x2F;build&#x2F;tomcat&#x2F;tomcatlogs&#x2F;目录下就可以看到日志信息了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost tomcatlogs]# cat catalina.out <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181042.png" alt="image-20200613180355186" loading="lazy"></p><p>之前一直访问失败是web.xml配置有问题，最后也是查看该日志提示，才得以解决！！！</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>Docker Hub</p></blockquote><p>1、地址 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>2、确定这个账号可以登录</p><p>3、在我们服务器上提交自己的镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost tomcat]# docker login --helpUsage:docker login [OPTIONS] [SERVER]Log in to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username# 登录dockerhub[root@localhost tomcat]# docker login -u ztx115Password: WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.Configure a credential helper to remove this warning. Seehttps:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-storeLogin Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、登录完毕后就可以提交镜像了，就是一步 docker push</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># push自己的镜像到服务器上！[root@localhost tomcat]# docker push diytomcatThe push refers to repository [docker.io&#x2F;library&#x2F;diytomcat]c5593011cd68: Preparing d3ce40b8178e: Preparing 02084c67dcc9: Preparing 2b7c1c6c89c5: Preparing 0683de282177: Preparing denied: requested access to the resource is denied  # 拒绝# push镜像的问题？# 解决：增加一个tag         docker tag  指定镜像的id   dockerhub的用户名&#x2F;镜像重命名:[tag][root@localhost tomcat]# docker tag bb64ab96b432 ztx115&#x2F;tomcat:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181043.png" alt="image-20200613211709842" loading="lazy"></p><p><strong>注意：镜像的重命名前一定要加当前的dockerhub的用户名，否则将会push失败！！！！</strong>（如：把ztx115改成ztx,  push一定失败！）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docekr push上去即可！  自己平时发布的镜像尽量带上版本号[root@localhost tomcat]# docker push ztx115&#x2F;tomcat:1.0The push refers to repository [docker.io&#x2F;ztx115&#x2F;tomcat]c5593011cd68: Pushed d3ce40b8178e: Pushed 02084c67dcc9: Pushed 2b7c1c6c89c5: Pushed 0683de282177: Pushed 1.0: digest: sha256:b6733deccf85ad66c6f4302215dd9ea63e1579817f15a099b5858785708ed408 size: 1372<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181044.png" alt="image-20200613210147709" loading="lazy"></p><p>发现，提交时也是按照镜像的层级来进行提交的！</p><blockquote><p>发布到阿里云镜像服务上（狂神视频截图）</p></blockquote><p>1、登录阿里云</p><p>2、找到容器镜像服务</p><p>3、创建命名空间</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181045.png" alt="image-20200613212823736" loading="lazy"></p><p>4、创建容器镜像仓库</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181046.png" alt="image-20200613213014849" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181047.png" alt="image-20200613213135466" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181048.png" alt="image-20200613213222587" loading="lazy"></p><p>5、浏览阿里云</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181049.png" alt="image-20200613214159792" loading="lazy"></p><p>使用阿里云容器镜像的参考官方指南即可！！！（即上图）</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181050.png" alt="image-20200613214846464" loading="lazy"></p><hr><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h2><p>清空所有环境</p><blockquote><p>测试</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181051.png" alt="image-20200613224119526" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 问题： docker是如何处理容器网络访问的？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181052.png" alt="image-20200613220806390" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># [root@localhost &#x2F;]# docker run -d -P --name tomcat01 tomcat# 查看容器的内部网络地址   ip addr,  发现容器启动的时候会得到一个 eth0@if43 ip地址，docker分配的！[root@localhost &#x2F;]# docker exec -it tomcat01 ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever42: eth0@if43: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link&#x2F;ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2&#x2F;16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever# 思考：linux能不能ping通docker容器内部！[root@localhost &#x2F;]# ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.476 ms64 bytes from 172.17.0.2: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.099 ms64 bytes from 172.17.0.2: icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.105 ms...# linux 可以ping通docker容器内部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原理</p></blockquote><p>1、我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要装了docker，就会有一个docker01网卡。</p><p>桥接模式，使用的技术是veth-pair技术！</p><p>再次测试 ip addr，发现多了一对网卡 : </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181053.png" alt="image-20200613224311838" loading="lazy"></p><p>2、再启动一个容器测试，发现又多了一对网卡！！！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181054.png" alt="image-20200613224610781" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 我们发现这个容器带来网卡，都是一对对的# veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连# 正因为有这个特性，veth-pair 充当一个桥梁，连接各种虚拟网络设备# OpenStack，Docker容器之间的连接，OVS的连接都是使用veth-pair技术<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、我们来测试下tomcat01和tomcat02是否可以ping通！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost &#x2F;]# docker exec -it tomcat02 ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.556 ms64 bytes from 172.17.0.2: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.096 ms64 bytes from 172.17.0.2: icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.111 ms...# 结论：容器与容器之间是可以相互ping通的！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>绘制一个网络模型图：</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181055.png" alt="image-20200613231046553" loading="lazy"></p><p><strong>结论：tomcat01 和 tomcat02 是公用一个路由器，即 docker0 !</strong> </p><p>所有的容器不指定网络的情况下，都是经 docker0 路由的，docker 会给我们的容器分配一个默认的可用ip</p><blockquote><p>小结</p></blockquote><p>Docker使用的是Linux的桥接技术，宿主机是一个Docker容器的网桥 docker0</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181056.png" alt="image-20200613232031835" loading="lazy"></p><p><strong>注意：</strong>Docker中所有网络接口都是虚拟的，虚拟的转发效率高！（内网传递文件）</p><p>只要容器一删除，对应的一对网桥就没有！</p><h2 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h2><blockquote><p>思考一个场景：我们编写了一个微服务，database url &#x3D; ip ，项目不重启，数据库ip换掉了，我们希望可以处理这个问题，可以通过名字来访问容器？</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># tomcat02 想通过直接ping 容器名（即&quot;tomcat01&quot;）来ping通，而不是ip，发现失败了！[root@localhost &#x2F;]# docker exec -it tomcat02 ping tomcat01ping: tomcat01: Name or service not known# 如何解决这个问题呢？# 通过--link 就可以解决这个网络联通问题了！！！      发现新建的tomcat03可以ping通tomcat02[root@localhost &#x2F;]# docker run -d -P --name tomcat03 --link tomcat02 tomcat87a0e5f5e6da34a7f043ff6210b57f92f40b24d0d4558462e7746b2e19902721[root@localhost &#x2F;]# docker exec -it tomcat03 ping tomcat02PING tomcat02 (172.17.0.3) 56(84) bytes of data.64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.132 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.116 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.116 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;4 ttl&#x3D;64 time&#x3D;0.116 ms# 反向能ping通吗？       发现tomcat02不能oing通tomcat03[root@localhost &#x2F;]# docker exec -it tomcat02 ping tomcat03ping: tomcat03: Name or service not known<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>探究：inspect  ！！！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181057.png" alt="image-20200614002609300" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181058.png" alt="image-20200614002832045" loading="lazy"></p><p>其实这个tomcat03就是在本地配置了到tomcat02的映射：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看hosts 配置，在这里发现原理！  [root@localhost &#x2F;]# docker exec -it tomcat03 cat &#x2F;etc&#x2F;hosts127.0.0.1localhost::1localhost ip6-localhost ip6-loopbackfe00::0ip6-localnetff00::0ip6-mcastprefixff02::1ip6-allnodesff02::2ip6-allrouters172.17.0.3tomcat02 95303c12f6d9    # 就像windows中的 host 文件一样，做了地址绑定172.17.0.487a0e5f5e6da<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质探究：–link  就是我们在hosts 配置中增加了一个 172.17.0.3    tomcat02   95303c12f6d9 （三条信息都是tomcat02 的）</p><p>我们现在玩Docker已经不建议使用 –link 了！！！</p><p><strong>自定义网络，不使用docker0！</strong></p><p>docker0问题：不支持容器名连接访问！</p><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote><p>查看所有的docker网络</p></blockquote><p>‘<img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181059.png" alt="image-20200614004445923" loading="lazy"></p><p><strong>网络模式</strong></p><p>bridge  ：桥接 （docker默认，自己创建也使用bridge模式！）</p><p>none ：不配置网络</p><p>host  ：和宿主机共享网络</p><p>container  ：容器网络连通，容器直接互联！（用的少！局限很大！）</p><p><strong>测试</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 我们之前直接启动的命令 (默认是使用--net bridge，可省)，这个bridge就是我们的docker0 docker run -d -P --name tomcat01 tomcat   docker run -d -P --name tomcat01 --net bridge tomcat# 上面两句等价# docker0（即bridge）默认不支持域名访问 ！ --link可以打通连接，即支持域名访问！# 我们可以自定义一个网络！# --driver bridge    网络模式定义为 ：桥接# --subnet 192.168.0.0&#x2F;16定义子网 ，范围为：192.168.0.2 ~ 192.168.255.255# --gateway 192.168.0.1子网网关设为： 192.168.0.1 [root@localhost &#x2F;]# docker network create --driver bridge --subnet 192.168.0.0&#x2F;16 --gateway 192.168.0.1 mynet7ee3adf259c8c3d86fce6fd2c2c9f85df94e6e57c2dce5449e69a5b024efc28c[root@localhost &#x2F;]# docker network lsNETWORK ID          NAME                DRIVER              SCOPE461bf576946c        bridge              bridge              localc501704cf28e        host                host                local7ee3adf259c8        mynet               bridge              local  #自定义的网络9354fbcc160f        none                null                local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自己的网络就创建好了：</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181100.png" alt="image-20200614011229854" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost &#x2F;]# docker run -d -P --name tomcat-net-01 --net mynet tomcatb168a37d31fcdc2ff172fd969e4de6de731adf53a2960eeae3dd9c24e14fac67[root@localhost &#x2F;]# docker run -d -P --name tomcat-net-02 --net mynet tomcatc07d634e17152ca27e318c6fcf6c02e937e6d5e7a1631676a39166049a44c03c[root@localhost &#x2F;]# docker network inspect mynet[    &#123;        &quot;Name&quot;: &quot;mynet&quot;,        &quot;Id&quot;: &quot;7ee3adf259c8c3d86fce6fd2c2c9f85df94e6e57c2dce5449e69a5b024efc28c&quot;,        &quot;Created&quot;: &quot;2020-06-14T01:03:53.767960765+08:00&quot;,        &quot;Scope&quot;: &quot;local&quot;,        &quot;Driver&quot;: &quot;bridge&quot;,        &quot;EnableIPv6&quot;: false,        &quot;IPAM&quot;: &#123;            &quot;Driver&quot;: &quot;default&quot;,            &quot;Options&quot;: &#123;&#125;,            &quot;Config&quot;: [                &#123;                    &quot;Subnet&quot;: &quot;192.168.0.0&#x2F;16&quot;,                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;                &#125;            ]        &#125;,        &quot;Internal&quot;: false,        &quot;Attachable&quot;: false,        &quot;Ingress&quot;: false,        &quot;ConfigFrom&quot;: &#123;            &quot;Network&quot;: &quot;&quot;        &#125;,        &quot;ConfigOnly&quot;: false,        &quot;Containers&quot;: &#123;            &quot;b168a37d31fcdc2ff172fd969e4de6de731adf53a2960eeae3dd9c24e14fac67&quot;: &#123;                &quot;Name&quot;: &quot;tomcat-net-01&quot;,                &quot;EndpointID&quot;: &quot;f0af1c33fc5d47031650d07d5bc769e0333da0989f73f4503140151d0e13f789&quot;,                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,                &quot;IPv4Address&quot;: &quot;192.168.0.2&#x2F;16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            &#125;,            &quot;c07d634e17152ca27e318c6fcf6c02e937e6d5e7a1631676a39166049a44c03c&quot;: &#123;                &quot;Name&quot;: &quot;tomcat-net-02&quot;,                &quot;EndpointID&quot;: &quot;ba114b9bd5f3b75983097aa82f71678653619733efc1835db857b3862e744fbc&quot;,                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,                &quot;IPv4Address&quot;: &quot;192.168.0.3&#x2F;16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            &#125;        &#125;,        &quot;Options&quot;: &#123;&#125;,        &quot;Labels&quot;: &#123;&#125;    &#125;]# 再次测试 ping 连接[root@localhost &#x2F;]# docker exec -it tomcat-net-01 ping 192.168.0.3PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.64 bytes from 192.168.0.3: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.199 ms64 bytes from 192.168.0.3: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.121 ms^C--- 192.168.0.3 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 2msrtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.121&#x2F;0.160&#x2F;0.199&#x2F;0.039 ms# 现在不使用 --link,也可以ping 名字了！！！！！！[root@localhost &#x2F;]# docker exec -it tomcat-net-01 ping tomcat-net-02PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.145 ms64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.117 ms^C--- tomcat-net-02 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 3msrtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.117&#x2F;0.131&#x2F;0.145&#x2F;0.014 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在使用自定义的网络时，docker都已经帮我们维护好了对应关系，推荐我们平时这样使用网络！！！</p><p>好处：</p><p>redis——不同的集群使用不同的网络，保证了集群的安全和健康</p><p>mysql——不同的集群使用不同的网络，保证了集群的安全和健康</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181101.png" alt="image-20200614015209053" loading="lazy"></p><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181102.png" alt="image-20200614013625192" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181103.png" alt="image-20200614013801842" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 测试打通 tomcat01 — mynet[root@localhost &#x2F;]# docker network connect mynet tomcat01# 连通之后就是将 tomcat01 放到了 mynet 网络下！ （见下图）# 这就产生了 一个容器有两个ip地址 ! 参考阿里云的公有ip和私有ip[root@localhost &#x2F;]# docker network inspect mynet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181104.png" alt="image-20200614014544797" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># tomcat01 连通ok[root@localhost &#x2F;]# docker exec -it tomcat01 ping tomcat-net-01PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.124 ms64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.162 ms64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.107 ms^C--- tomcat-net-01 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 3msrtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.107&#x2F;0.131&#x2F;0.162&#x2F;0.023 ms# tomcat02 是依旧打不通的[root@localhost &#x2F;]# docker exec -it tomcat02 ping tomcat-net-01ping: tomcat-net-01: Name or service not known<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论：</strong>假设要跨网络操作别人，就需要使用docker network connect  连通。。。</p><h2 id="实战：部署Redis集群"><a href="#实战：部署Redis集群" class="headerlink" title="实战：部署Redis集群"></a>实战：部署Redis集群</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181105.png" alt="image-20200614124559172" loading="lazy"></p><p>启动6个redis容器，上面三个是主，下面三个是备！</p><p>使用shell脚本启动！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建redis集群网络docker network create redis --subnet 172.38.0.0&#x2F;16# 通过脚本创建六个redis配置[root@localhost &#x2F;]# for port in $(seq 1 6);\&gt; do \&gt; mkdir -p &#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conf&gt; touch &#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conf&#x2F;redis.conf&gt; cat &lt;&lt;EOF&gt;&gt;&#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conf&#x2F;redis.conf&gt; port 6379&gt; bind 0.0.0.0&gt; cluster-enabled yes&gt; cluster-config-file nodes.conf&gt; cluster-node-timeout 5000&gt; cluster-announce-ip 172.38.0.1$&#123;port&#125;&gt; cluster-announce-port 6379&gt; cluster-announce-bus-port 16379&gt; appendonly yes&gt; EOF&gt; done# 查看创建的六个redis[root@localhost &#x2F;]# cd &#x2F;mydata&#x2F;[root@localhost mydata]# \lsredis[root@localhost mydata]# cd redis&#x2F;[root@localhost redis]# lsnode-1  node-2  node-3  node-4  node-5  node-6# 查看redis-1的配置信息[root@localhost redis]# cd node-1[root@localhost node-1]# lsconf[root@localhost node-1]# cd conf&#x2F;[root@localhost conf]# lsredis.conf[root@localhost conf]# cat redis.conf port 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.11cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \-v &#x2F;mydata&#x2F;redis&#x2F;node-1&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-1&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.confdocker run -p 6372:6379 -p 16372:16379 --name redis-2 \-v &#x2F;mydata&#x2F;redis&#x2F;node-2&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-2&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.confdocker run -p 6373:6379 -p 16373:16379 --name redis-3 \-v &#x2F;mydata&#x2F;redis&#x2F;node-3&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-3&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.confdocker run -p 6374:6379 -p 16374:16379 --name redis-4 \-v &#x2F;mydata&#x2F;redis&#x2F;node-4&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-4&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.14 redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.confdocker run -p 6375:6379 -p 16375:16379 --name redis-5 \-v &#x2F;mydata&#x2F;redis&#x2F;node-5&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-5&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.15 redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.confdocker run -p 6376:6379 -p 16376:16379 --name redis-6 \-v &#x2F;mydata&#x2F;redis&#x2F;node-6&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-6&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181106.png" alt="image-20200614133829277" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost conf]# docker exec -it redis-1 &#x2F;bin&#x2F;sh&#x2F;data # lsappendonly.aof  nodes.conf&#x2F;data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922Master[2] -&gt; Slots 10923 - 16383Adding replica 172.38.0.15:6379 to 172.38.0.11:6379Adding replica 172.38.0.16:6379 to 172.38.0.12:6379Adding replica 172.38.0.14:6379 to 172.38.0.13:6379M: c5551e2a30c220fc9de9df2e34692f20f3382b32 172.38.0.11:6379   slots:[0-5460] (5461 slots) masterM: d12ebd8c9e12dbbe22e7b9b18f0f143bdc14e94b 172.38.0.12:6379   slots:[5461-10922] (5462 slots) masterM: 825146ce6ab80fbb46ec43fcfec1c6e2dac55157 172.38.0.13:6379   slots:[10923-16383] (5461 slots) masterS: 9f810c0e15ac99af68e114a0ee4e32c4c7067e2b 172.38.0.14:6379   replicates 825146ce6ab80fbb46ec43fcfec1c6e2dac55157S: e370225bf57d6ef6d54ad8e3d5d745a52b382d1a 172.38.0.15:6379   replicates c5551e2a30c220fc9de9df2e34692f20f3382b32S: 79428c1d018dd29cf191678658008cbe5100b714 172.38.0.16:6379   replicates d12ebd8c9e12dbbe22e7b9b18f0f143bdc14e94bCan I set the above configuration? (type &#39;yes&#39; to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join....&gt;&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)M: c5551e2a30c220fc9de9df2e34692f20f3382b32 172.38.0.11:6379   slots:[0-5460] (5461 slots) master   1 additional replica(s)S: 79428c1d018dd29cf191678658008cbe5100b714 172.38.0.16:6379   slots: (0 slots) slave   replicates d12ebd8c9e12dbbe22e7b9b18f0f143bdc14e94bM: d12ebd8c9e12dbbe22e7b9b18f0f143bdc14e94b 172.38.0.12:6379   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: e370225bf57d6ef6d54ad8e3d5d745a52b382d1a 172.38.0.15:6379   slots: (0 slots) slave   replicates c5551e2a30c220fc9de9df2e34692f20f3382b32S: 9f810c0e15ac99af68e114a0ee4e32c4c7067e2b 172.38.0.14:6379   slots: (0 slots) slave   replicates 825146ce6ab80fbb46ec43fcfec1c6e2dac55157M: 825146ce6ab80fbb46ec43fcfec1c6e2dac55157 172.38.0.13:6379   slots:[10923-16383] (5461 slots) master   1 additional replica(s)[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker搭建redis集群完成！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181107.png" alt="image-20200614141549867" loading="lazy"></p><p>我们使用docker之后，所有的技术都会慢慢变得简单起来！</p><hr><h1 id="Springboot微服务打包Docker镜像"><a href="#Springboot微服务打包Docker镜像" class="headerlink" title="Springboot微服务打包Docker镜像"></a>Springboot微服务打包Docker镜像</h1><p>1、构建springboot项目，打包应用</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181108.png" alt="image-20200614155721369" loading="lazy"></p><p>2、编写Dockerfile，连同项目的jar包一并上传指定目录下</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181109.png" alt="image-20200614153734161" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181110.png" alt="image-20200614154114656" loading="lazy"></p><p>3、构建镜像</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181111.png" alt="image-20200614154355597" loading="lazy"></p><p>4、创建项目容器，发布运行！！！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181112.png" alt="image-20200614155034087" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181113.png" alt="image-20200614155340519" loading="lazy"></p><p>以后我们使用了Docker之后，给别人交付就是一个镜像即可！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=243999746&amp;bvid=BV1kv411q7Qc&amp;cid=216242319&amp;page=1&quot; style=&quot;width: 100%; height: 500px; max-</summary>
      
    
    
    
    <category term="Docker" scheme="http://ccsu.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://ccsu.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker概述</title>
    <link href="http://ccsu.top/posts/fb618b33/"/>
    <id>http://ccsu.top/posts/fb618b33/</id>
    <published>2022-03-07T01:16:00.000Z</published>
    <updated>2022-03-07T01:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=838132893&bvid=BV1og4y1q7M4&cid=191591129&page=1" style="width: 100%; height: 500px; max-width: 100%；align:center; padding:20px 0;" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="Docker为什么会出现？"><a href="#Docker为什么会出现？" class="headerlink" title="Docker为什么会出现？"></a>Docker为什么会出现？</h2><p>一款产品： 开发–上线 两套环境！应用环境，应用配置！</p><p>开发 — 运维。 问题：我在我的电脑上可以允许！版本更新，导致服务不可用！对于运维来说考验十分大？</p><p>环境配置是十分的麻烦，每一个及其都要部署环境(集群Redis、ES、Hadoop…) !费事费力。</p><p>发布一个项目( jar + (Redis MySQL JDK ES) ),项目能不能带上环境安装打包！</p><p>之前在服务器配置一个应用的环境 Redis MySQL JDK ES Hadoop 配置超麻烦了，不能够跨平台。</p><p>开发环境Windows，最后发布到Linux！</p><p><strong>传统：</strong>开发jar，运维来做！</p><p><strong>现在：</strong>开发打包部署上线，一套流程做完！</p><p><strong>安卓流程：</strong>java — apk —发布（应用商店）一 张三使用apk一安装即可用！</p><p><strong>docker流程：</strong> java-jar（环境）— 打包项目帯上环境（镜像）— ( Docker仓库：商店）—下载我们发布的镜像 —直接运行即可！</p><p>Docker给以上的问题，提出了解决方案！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181149.png" alt="image-20200610142308099" loading="lazy"></p><p>Docker的思想来源于集装箱！</p><p>JRE —多个应用（端口冲突）—原来都是交叉的！</p><p>隔离：Docker核心思想！打包装箱！每个箱子都是相互隔离的。</p><p>Docker通过隔离机制可以将服务器利用到极致！</p><p>本质：所有的技术都是因为出现了一些问题，我们需要去解决，才去学习！</p><h2 id="Docker的历史"><a href="#Docker的历史" class="headerlink" title="Docker的历史"></a>Docker的历史</h2><p>2010年，几个的年轻人，就在美国成立了一家公司 <strong>dotcloud</strong></p><p>做一些pass的云计算服务！LXC（Linux Container容器）有关的容器技术！</p><p>Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。</p><p>他们将自己的技术（容器化技术）命名就是 Docker</p><p>Docker刚刚延生的时候，没有引起行业的注意！dotCloud，就活不下去！</p><p><strong>开源</strong></p><p>2013年，Docker开源！</p><p>越来越多的人发现docker的优点！火了。Docker每个月都会更新一个版本！</p><p>2014年4月9日，Docker1.0发布！</p><p>docker为什么这么火？十分的轻巧！</p><p>在容器技术出来之前，我们都是使用虚拟机技术！</p><p>虚拟机：在window中装一个VMware，通过这个软件我们可以虚拟出来一台或者多台电脑！笨重！</p><p>虚拟机也属于虚拟化技术，Docker容器技术，也是一种虚拟化技术！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">VMware : linux centos 原生镜像（一个电脑！） 隔离、需要开启多个虚拟机！ 几个G 几分钟docker: 隔离，镜像（最核心的环境 4m + jdk + mysql）十分的小巧，运行镜像就可以了！小巧！ 几个M 秒级启动！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>聊聊Docker</p></blockquote><p>Docker基于Go语言开发的！开源项目！</p><p>docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181150.png" alt="image-20200610143923433" loading="lazy"></p><p>文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a> Docker的文档是超级详细的！</p><p>仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h2 id="Docker能干嘛"><a href="#Docker能干嘛" class="headerlink" title="Docker能干嘛"></a>Docker能干嘛</h2><blockquote><p>之前的虚拟机技术</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181151.png" alt="image-20200610144126122" loading="lazy"></p><blockquote><p>虚拟机技术缺点</p></blockquote><p>1、 资源占用十分多</p><p>2、 冗余步骤多</p><p>3、 启动很慢！</p><blockquote><p>容器技术</p></blockquote><p>容器化技术不是模拟一个完整的操作系统</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181152.png" alt="image-20200610144338073" loading="lazy"></p><p>比较Docker和虚拟机技术的不同：</p><ul><li>传统虚拟机，虚拟出一套容器内的应用直接运行在宿主机硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li><li>容器内的应用直接运行在宿主机内，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</li><li>每个容器间是相互隔离的，每个容器内都有一个属于自己的文件系统，互不影响</li></ul><blockquote><p>DevOps (开发、运维)</p></blockquote><p><strong>应用更快速的交付和部署</strong></p><p>传统：一堆帮助文档，安装程序</p><p>Docker：打包镜像发布测试，一键运行</p><p><strong>更便捷的升级和扩缩容</strong></p><p>使用了Docker之后，我们部署应用就和搭积木一样！</p><p>项目打包为一个镜像，扩展服务器A! 服务器B</p><p><strong>更简单的系统运维</strong></p><p>在容器化之后，我们的开发，测试环境都是高度一致的。</p><p><strong>更高效的计算资源利用</strong></p><p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多个容器实例！服务器的性能可以被压榨到极致。</p><hr><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181153.png" alt="image-20200610145818895" loading="lazy"></p><p><strong>镜像（image）：</strong></p><p>docker镜像就好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像&#x3D;&#x3D;&gt;run&#x3D;&#x3D;&gt;容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</p><p><strong>容器（container）:</strong></p><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的.</p><p>启动，停止，删除，基本命令</p><p>目前就可以把这个容器理解为就是一个简易的 Linux系统。</p><p><strong>仓库（repository）:</strong></p><p>仓库就是存放镜像的地方！</p><p>仓库分为公有仓库和私有仓库。(很类似git)</p><p>Docker Hub是国外的。</p><p>阿里云…都有容器服务器 (配置镜像加速!)</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote><p>环境准备</p></blockquote><p>1.Linux要求内核3.0以上</p><p>2.CentOS 7</p><blockquote><p>环境查看</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#系统内核要求3.0以上[root@localhost ~]# uname -r3.10.0-1062.el7.x86_64#系统版本[root@localhost ~]# cat &#x2F;etc&#x2F;os-release NAME&#x3D;&quot;CentOS Linux&quot;VERSION&#x3D;&quot;7 (Core)&quot;ID&#x3D;&quot;centos&quot;ID_LIKE&#x3D;&quot;rhel fedora&quot;VERSION_ID&#x3D;&quot;7&quot;PRETTY_NAME&#x3D;&quot;CentOS Linux 7 (Core)&quot;ANSI_COLOR&#x3D;&quot;0;31&quot;CPE_NAME&#x3D;&quot;cpe:&#x2F;o:centos:centos:7&quot;HOME_URL&#x3D;&quot;https:&#x2F;&#x2F;www.centos.org&#x2F;&quot;BUG_REPORT_URL&#x3D;&quot;https:&#x2F;&#x2F;bugs.centos.org&#x2F;&quot;CENTOS_MANTISBT_PROJECT&#x3D;&quot;CentOS-7&quot;CENTOS_MANTISBT_PROJECT_VERSION&#x3D;&quot;7&quot;REDHAT_SUPPORT_PRODUCT&#x3D;&quot;centos&quot;REDHAT_SUPPORT_PRODUCT_VERSION&#x3D;&quot;7&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装</p></blockquote><p>帮助文档：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1.卸载旧版本 yum remove docker \&gt;                   docker-client \&gt;                   docker-client-latest \&gt;                   docker-common \&gt;                   docker-latest \&gt;                   docker-latest-logrotate \&gt;                   docker-logrotate \&gt;                   docker-engine#2.需要的安装包yum install -y yum-utils#3.设置镜像的仓库yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo#上述方法默认是从国外的，不推荐#推荐使用国内的yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo  #更新软件包索引yum makecache fast#4.安装docker docker-ce 社区版 而ee是企业版yum install docker-ce docker-ce-cli containerd.io # 这里我们使用社区版即可#5.启动dockersystemctl start docker#6.使用docker version 查看是否安装成功docker version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181154.png" alt="image-20200610153718450" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#7.测试docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181155.png" alt="image-20200610154108118" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#8.查看一下下载的hello-world镜像[root@localhost &#x2F;]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        5 months ago        13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>了解：卸载docker</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1.卸载依赖yum remove docker-ce docker-ce-cli containerd.io#2. 删除资源rm -rf &#x2F;var&#x2F;lib&#x2F;docker# &#x2F;var&#x2F;lib&#x2F;docker 是docker的默认工作路径！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阿里云镜像加速</p><p><strong>1、登录阿里云找到容器服务——&gt;镜像加速器</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181156.png" alt="image-20200610155156310" loading="lazy"></p><p><strong>2、配置使用</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;cdoid6va.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回顾hello-world流程"><a href="#回顾hello-world流程" class="headerlink" title="回顾hello-world流程"></a>回顾hello-world流程</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181157.png" alt="image-20200610160359287" loading="lazy"></p><p><strong>docker run 流程图</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181158.png" alt="image-20200610160609037" loading="lazy"></p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p><strong>Docker是怎么工作的？</strong></p><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在宿主机上，通过Socket从客户端访问！</p><p>DockerServer接受到Docker-Client的指令，就会执行这个命令！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181159.png" alt="image-20200610161147612" loading="lazy"></p><p><strong>Docker为什么比VM快？</strong></p><p>1、Docker有着比虚拟机更少的抽象层</p><p>2、Docker利用的是宿主机的内核，vm需要Guest Os。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181200.png" alt="image-20200610161342662" loading="lazy"></p><p>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guest Os，分钟级别的，而docker是利用当前宿主机的操作系统，省略了复杂的过程，秒级的！</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181201.png" alt="image-20200610161845790" loading="lazy"></p><hr><h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker version     # 显示docker的版本信息docker info        # 显示docker的系统信息，包括镜像和容器的数量docker 命令 --help  # 帮助命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost &#x2F;]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        5 months ago        13.3kB#解释REPOSITORY  镜像的仓库源TAG         镜像标签IMAGE ID    镜像idCREATED     镜像的创建时间SIZE        镜像的大小#可选项Options:  -a, --all             # 列出所有镜像  -q, --quiet           # 只显示镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker search 搜索镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost &#x2F;]# docker search mysqlNAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   9604                [OK]                mariadb                           MariaDB is a community-developed fork of MyS…   3490                [OK]                #可选项，通过收藏来过滤--filter&#x3D;STARS&#x3D;3000  #搜索出来的镜像就是STARS大于3000的[root@localhost &#x2F;]# docker search mysql --filter&#x3D;STARS&#x3D;3000NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql               MySQL is a widely used, open-source relation…   9604                [OK]                mariadb             MariaDB is a community-developed fork of MyS…   3490                [OK]                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker pull 下载镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载镜像 docker pull 镜像名[:tag][root@localhost &#x2F;]# docker pull mysqlUsing default tag: latest    # 如果不写 tag,默认就是latestlatest: Pulling from library&#x2F;mysql8559a31e96f4: Pull complete  # 分层下载，docker image的核心 联合文件系统d51ce1c2e575: Pull complete c2344adc4858: Pull complete fcf3ceff18fc: Pull complete 16da0c38dc5b: Pull complete b905d1797e97: Pull complete 4b50d1c6b05c: Pull complete c75914a65ca2: Pull complete 1ae8042bdd09: Pull complete 453ac13c00a3: Pull complete 9e680cd72f08: Pull complete a6b5dc864b6c: Pull complete Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6 # 签名Status: Downloaded newer image for mysql:latestdocker.io&#x2F;library&#x2F;mysql:latest  # 真实地址docker pull mysql 等价于: docker pull docker.io&#x2F;library&#x2F;mysql:latest# 指定版本下载[root@localhost &#x2F;]# docker pull mysql:5.75.7: Pulling from library&#x2F;mysql8559a31e96f4: Already exists   # 联合文件系统的好处：上面下载过的MySQL与5.7版本的MySQL有相同的文件时不需要重复下载d51ce1c2e575: Already exists c2344adc4858: Already exists fcf3ceff18fc: Already exists 16da0c38dc5b: Already exists b905d1797e97: Already exists 4b50d1c6b05c: Already exists d85174a87144: Pull complete a4ad33703fa8: Pull complete f7a5433ce20d: Pull complete 3dcd2a278b4a: Pull complete Digest: sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854Status: Downloaded newer image for mysql:5.7docker.io&#x2F;library&#x2F;mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181202.png" alt="image-20200610165130055" loading="lazy"></p><p><strong>docker rmi 删除镜像</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost &#x2F;]# docker rmi -f 镜像id   #删除指定镜像[root@localhost &#x2F;]# docker rmi -f 镜像id 镜像id 镜像id     #删除多个镜像[root@localhost &#x2F;]# docker rmi -f $(docker images -aq)     #删除全部镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器，linux,下载一个centos镜像来学习</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>新建容器并启动</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run [可选参数] image# 参数说明--name&#x3D;&quot;Name&quot;容器名字 tomcat01 tomcat02 ，用来区分容器-d              后台方式运行-it             使用交互方式运行，进入容器查看内容-p              指定容器的端口 -p 8080:80-p  ip:主机(即宿主机)端口：容器端口-p  主机端口：容器端口  #这种方式常用-p  容器端口容器端口P-P              随机指定端口(大写P)# 测试，启动并进入容器[root@localhost &#x2F;]# docker run -it centos &#x2F;bin&#x2F;bash[root@8b4c74381205 &#x2F;]# ls     #查看容器内的centos,基础版本，很多命令都是不完善的！bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  vardev  home  lib64  media       opt  root  sbin  sys  usr# 从容器中退回主机[root@8b4c74381205 &#x2F;]# exitexit[root@localhost &#x2F;]# ls123  bin   dev  home  lib64  mnt  proc  run   srv  tmp  var222  boot  etc  lib   media  opt  root  sbin  sys  usr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>列出所有运行的容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker ps 命令(不加） # 列出当前正在运行的容器-a     # 列出当前正在运行的容器 + 带出历史运行过的容器-n&#x3D;?   # 显示最近创建的容器-q    # 只显示当前容器的编号[root@localhost &#x2F;]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES[root@localhost &#x2F;]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES8b4c74381205        centos              &quot;&#x2F;bin&#x2F;bash&quot;         4 minutes ago       Exited (0) About a minute ago                       epic_wilsonfb87667bbc19        bf756fb1ae65        &quot;&#x2F;hello&quot;            2 hours ago         Exited (0) 2 hours ago                              awesome_banach[root@localhost &#x2F;]# docker ps -a -n&#x3D;1CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES8b4c74381205        centos              &quot;&#x2F;bin&#x2F;bash&quot;         9 minutes ago       Exited (0) 6 minutes ago                       epic_wilson[root@localhost &#x2F;]# docker ps -aq8b4c74381205fb87667bbc19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>退出容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">exit   # 直接退出容器Ctrl + p + q  # 容器不停止退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>删除容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rm 容器id   # 删除指定容器，不能删除正在运行的容器，如果要强制删除 rm -fdocker rm -f $(docker ps -aq)    # 删除所有容器 docker ps -a -q|xargs docker rm  # 删除所有容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>启动和停止容器的操作</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker start 容器id     # 启动容器docker restart 容器id   # 重启容器docker stop 容器id      # 停止当前正在运行的容器docker kill 容器id      # 强制停止当前正在运行的容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 命令 docker run -d 镜像名[root@localhost &#x2F;]# docker run -d centose9d60f206fa19963203db6c42c2f83c5120eb90eeee2b7ba9fdc4589370fd6b6[root@localhost &#x2F;]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES# 问题docker ps,发现 centos 停止了# 常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止# nginx,容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看日志</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker logs -f -t --tail 数字 容器id# 显示日志-tf # 显示日志--tail  # 要显示的日志条数[root@localhost &#x2F;]# docker logs -tf --tail 10 ce989f90023d <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看容器中进程信息</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 命令 docker top 容器id[root@localhost &#x2F;]# docker top ce989f90023dUID                 PID                 PPID                C                   STIME               TTY                 TIME     root                12249               12232               0                   22:44               pts&#x2F;0               00:00:00 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看镜像的元数据</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 命令docker inspect 容器id# 测试[root@localhost &#x2F;]# docker inspect ce989f90023d[    &#123;        &quot;Id&quot;: &quot;ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244&quot;,        &quot;Created&quot;: &quot;2020-06-10T14:44:45.025360147Z&quot;,        &quot;Path&quot;: &quot;&#x2F;bin&#x2F;bash&quot;,        &quot;Args&quot;: [],        &quot;State&quot;: &#123;            &quot;Status&quot;: &quot;running&quot;,            &quot;Running&quot;: true,            &quot;Paused&quot;: false,            &quot;Restarting&quot;: false,            &quot;OOMKilled&quot;: false,            &quot;Dead&quot;: false,            &quot;Pid&quot;: 12249,            &quot;ExitCode&quot;: 0,            &quot;Error&quot;: &quot;&quot;,            &quot;StartedAt&quot;: &quot;2020-06-10T14:44:45.770227584Z&quot;,            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;,        &quot;Image&quot;: &quot;sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee&quot;,        &quot;ResolvConfPath&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244&#x2F;resolv.conf&quot;,        &quot;HostnamePath&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244&#x2F;hostname&quot;,        &quot;HostsPath&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244&#x2F;hosts&quot;,        &quot;LogPath&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244&#x2F;ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244-json.log&quot;,        &quot;Name&quot;: &quot;&#x2F;nifty_johnson&quot;,        &quot;RestartCount&quot;: 0,        &quot;Driver&quot;: &quot;overlay2&quot;,        &quot;Platform&quot;: &quot;linux&quot;,        &quot;MountLabel&quot;: &quot;&quot;,        &quot;ProcessLabel&quot;: &quot;&quot;,        &quot;AppArmorProfile&quot;: &quot;&quot;,        &quot;ExecIDs&quot;: null,        &quot;HostConfig&quot;: &#123;            &quot;Binds&quot;: null,            &quot;ContainerIDFile&quot;: &quot;&quot;,            &quot;LogConfig&quot;: &#123;                &quot;Type&quot;: &quot;json-file&quot;,                &quot;Config&quot;: &#123;&#125;            &#125;,            &quot;NetworkMode&quot;: &quot;default&quot;,            &quot;PortBindings&quot;: &#123;&#125;,            &quot;RestartPolicy&quot;: &#123;                &quot;Name&quot;: &quot;no&quot;,                &quot;MaximumRetryCount&quot;: 0            &#125;,            &quot;AutoRemove&quot;: false,            &quot;VolumeDriver&quot;: &quot;&quot;,            &quot;VolumesFrom&quot;: null,            &quot;CapAdd&quot;: null,            &quot;CapDrop&quot;: null,            &quot;Capabilities&quot;: null,            &quot;Dns&quot;: [],            &quot;DnsOptions&quot;: [],            &quot;DnsSearch&quot;: [],            &quot;ExtraHosts&quot;: null,            &quot;GroupAdd&quot;: null,            &quot;IpcMode&quot;: &quot;private&quot;,            &quot;Cgroup&quot;: &quot;&quot;,            &quot;Links&quot;: null,            &quot;OomScoreAdj&quot;: 0,            &quot;PidMode&quot;: &quot;&quot;,            &quot;Privileged&quot;: false,            &quot;PublishAllPorts&quot;: false,            &quot;ReadonlyRootfs&quot;: false,            &quot;SecurityOpt&quot;: null,            &quot;UTSMode&quot;: &quot;&quot;,            &quot;UsernsMode&quot;: &quot;&quot;,            &quot;ShmSize&quot;: 67108864,            &quot;Runtime&quot;: &quot;runc&quot;,            &quot;ConsoleSize&quot;: [                0,                0            ],            &quot;Isolation&quot;: &quot;&quot;,            &quot;CpuShares&quot;: 0,            &quot;Memory&quot;: 0,            &quot;NanoCpus&quot;: 0,            &quot;CgroupParent&quot;: &quot;&quot;,            &quot;BlkioWeight&quot;: 0,            &quot;BlkioWeightDevice&quot;: [],            &quot;BlkioDeviceReadBps&quot;: null,            &quot;BlkioDeviceWriteBps&quot;: null,            &quot;BlkioDeviceReadIOps&quot;: null,            &quot;BlkioDeviceWriteIOps&quot;: null,            &quot;CpuPeriod&quot;: 0,            &quot;CpuQuota&quot;: 0,            &quot;CpuRealtimePeriod&quot;: 0,            &quot;CpuRealtimeRuntime&quot;: 0,            &quot;CpusetCpus&quot;: &quot;&quot;,            &quot;CpusetMems&quot;: &quot;&quot;,            &quot;Devices&quot;: [],            &quot;DeviceCgroupRules&quot;: null,            &quot;DeviceRequests&quot;: null,            &quot;KernelMemory&quot;: 0,            &quot;KernelMemoryTCP&quot;: 0,            &quot;MemoryReservation&quot;: 0,            &quot;MemorySwap&quot;: 0,            &quot;MemorySwappiness&quot;: null,            &quot;OomKillDisable&quot;: false,            &quot;PidsLimit&quot;: null,            &quot;Ulimits&quot;: null,            &quot;CpuCount&quot;: 0,            &quot;CpuPercent&quot;: 0,            &quot;IOMaximumIOps&quot;: 0,            &quot;IOMaximumBandwidth&quot;: 0,            &quot;MaskedPaths&quot;: [                &quot;&#x2F;proc&#x2F;asound&quot;,                &quot;&#x2F;proc&#x2F;acpi&quot;,                &quot;&#x2F;proc&#x2F;kcore&quot;,                &quot;&#x2F;proc&#x2F;keys&quot;,                &quot;&#x2F;proc&#x2F;latency_stats&quot;,                &quot;&#x2F;proc&#x2F;timer_list&quot;,                &quot;&#x2F;proc&#x2F;timer_stats&quot;,                &quot;&#x2F;proc&#x2F;sched_debug&quot;,                &quot;&#x2F;proc&#x2F;scsi&quot;,                &quot;&#x2F;sys&#x2F;firmware&quot;            ],            &quot;ReadonlyPaths&quot;: [                &quot;&#x2F;proc&#x2F;bus&quot;,                &quot;&#x2F;proc&#x2F;fs&quot;,                &quot;&#x2F;proc&#x2F;irq&quot;,                &quot;&#x2F;proc&#x2F;sys&quot;,                &quot;&#x2F;proc&#x2F;sysrq-trigger&quot;            ]        &#125;,        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641-init&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;d4cd3bedb1e7340e62bb292c1e0d5ae37b1d1689ffc1640da67b2a8325facc21&#x2F;diff&quot;,                &quot;MergedDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641&#x2F;merged&quot;,                &quot;UpperDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641&#x2F;diff&quot;,                &quot;WorkDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641&#x2F;work&quot;            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,        &quot;Mounts&quot;: [],        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;ce989f90023d&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: true,            &quot;AttachStdout&quot;: true,            &quot;AttachStderr&quot;: true,            &quot;Tty&quot;: true,            &quot;OpenStdin&quot;: true,            &quot;StdinOnce&quot;: true,            &quot;Env&quot;: [                &quot;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;            ],            &quot;Cmd&quot;: [                &quot;&#x2F;bin&#x2F;bash&quot;            ],            &quot;Image&quot;: &quot;centos&quot;,            &quot;Volumes&quot;: null,            &quot;WorkingDir&quot;: &quot;&quot;,            &quot;Entrypoint&quot;: null,            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;                &quot;org.label-schema.build-date&quot;: &quot;20200114&quot;,                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;,                &quot;org.opencontainers.image.created&quot;: &quot;2020-01-14 00:00:00-08:00&quot;,                &quot;org.opencontainers.image.licenses&quot;: &quot;GPL-2.0-only&quot;,                &quot;org.opencontainers.image.title&quot;: &quot;CentOS Base Image&quot;,                &quot;org.opencontainers.image.vendor&quot;: &quot;CentOS&quot;            &#125;        &#125;,        &quot;NetworkSettings&quot;: &#123;            &quot;Bridge&quot;: &quot;&quot;,            &quot;SandboxID&quot;: &quot;74d140bbc60432c5fdce865fa48f78c1138923dd292e708a25c4de17de812d56&quot;,            &quot;HairpinMode&quot;: false,            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,            &quot;LinkLocalIPv6PrefixLen&quot;: 0,            &quot;Ports&quot;: &#123;&#125;,            &quot;SandboxKey&quot;: &quot;&#x2F;var&#x2F;run&#x2F;docker&#x2F;netns&#x2F;74d140bbc604&quot;,            &quot;SecondaryIPAddresses&quot;: null,            &quot;SecondaryIPv6Addresses&quot;: null,            &quot;EndpointID&quot;: &quot;3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc&quot;,            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,            &quot;GlobalIPv6Address&quot;: &quot;&quot;,            &quot;GlobalIPv6PrefixLen&quot;: 0,            &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,            &quot;IPPrefixLen&quot;: 16,            &quot;IPv6Gateway&quot;: &quot;&quot;,            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,            &quot;Networks&quot;: &#123;                &quot;bridge&quot;: &#123;                    &quot;IPAMConfig&quot;: null,                    &quot;Links&quot;: null,                    &quot;Aliases&quot;: null,                    &quot;NetworkID&quot;: &quot;58fd9703e96d12128c30f244be3205e3fe31fc7d1fb7fffdddba72d981e782f4&quot;,                    &quot;EndpointID&quot;: &quot;3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc&quot;,                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,                    &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,                    &quot;IPPrefixLen&quot;: 16,                    &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,                    &quot;GlobalIPv6PrefixLen&quot;: 0,                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,                    &quot;DriverOpts&quot;: null                &#125;            &#125;        &#125;    &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>进入当前正在运行的容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置# 命令docker exec -it 容器id bashShell# 测试[root@localhost &#x2F;]# docker exec -it ce989f90023d &#x2F;bin&#x2F;bash[root@ce989f90023d &#x2F;]# lsbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@ce989f90023d &#x2F;]# ps -efUID         PID   PPID  C STIME TTY          TIME CMDroot          1      0  0 14:44 pts&#x2F;0    00:00:00 &#x2F;bin&#x2F;bashroot         15      0  0 15:19 pts&#x2F;1    00:00:00 &#x2F;bin&#x2F;bashroot         29     15  0 15:20 pts&#x2F;1    00:00:00 ps -ef# 方式二docker attach 容器id# 测试[root@localhost &#x2F;]# docker attach ce989f90023d正在执行当前的代码...# docker exec# 进入容器后开启一个新的终端，可以在里面操作（常用）# docker attach # 进入容器正在执行的终端，不会启动新的进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>从容器内拷贝文件到主机上</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker cp 容器id:容器内目标文件路径  目的主机路径# 查看当前主机目录[root@localhost home]# lsztx# 进入docker容器内部[root@localhost home]# docker attach ce989f90023d[root@ce989f90023d &#x2F;]# cd &#x2F;home&#x2F;[root@ce989f90023d home]# ls# 在容器内新建一个文件[root@ce989f90023d home]# touch test.java[root@ce989f90023d home]# exitexit[root@localhost home]# docker ps -aCONTAINER ID     IMAGE      COMMAND       CREATED           STATUS                PORTS           NAMESce989f90023d     centos  &quot;&#x2F;bin&#x2F;bash&quot;  44 minutes ago  Exited (0) 46 seconds ago               nifty_johnson# 将docker内文件拷贝到主机上[root@localhost home]# docker cp ce989f90023d:&#x2F;home&#x2F;test.java &#x2F;home[root@localhost home]# lstest.java  ztx[root@localhost home]# # 拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现自动同步 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="C:\Users\ZTX\Desktop\markdownx学习\Docker概述(1).assets\image-20200611085918923.png" alt="image-20200611085918923" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">attach      Attach to a running container       # 当前shell下attach连接指定运行的镜像build       Build an image from a Dockerfile        # 通过Dockerfile定制镜像commit      Create a new image from a container changes  #提交当前容器为新的镜像cp          Copy files&#x2F;folders between a container and the local filesystem #从容器中拷贝指定文件或目录到宿主机中create      Create a new container   # 创建一个新的容器，同run,但不启动容器diff        Inspect changes to files or directories on a container&#39;s filesystem #查看docker容器的变化events      Get real time events from the server   # 从docker服务获取容器实时事件exec        Run a command in a running container    # 在已存在的容器上运行命令export      Export a container filesystem as a tar archive # 导出容器的内容流作为一个tar归档文件[对应import]history     Show the history of an image            # 展示一个镜像形成历史images      List images                             # 列出系统当前的镜像import      Import the contents from a tarball to create a filesystem image # 从tar包中的内容创建一个新的文件系统镜像[对应export]info        Display system-wide information         # 显示系统相关信息inspect     Return low-level information on Docker objects # 查看容器详细信息kill        Kill one or more running containers     # 杀死指定的docker容器load        Load an image from a tar archive or STDIN # 从一个tar包加载一个镜像[对应save]login       Log in to a Docker registry  # 注册或者登录一个docker源服务器logout      Log out from a Docker registry  # 从当前Docker registry退出logs        Fetch the logs of a container  # 输出当前容器日志信息pause       Pause all processes within one or more containers      # 暂停容器port        List port mappings or a specific mapping for the container # 查看映射端口对应容器内部源端口ps          List containers  # 列出容器列表pull        Pull an image or a repository from a registry # 从docker镜像源服务器拉取指定镜像或库镜像push        Push an image or a repository to a registry   # 推送指定镜像或者库镜像至docker源服务器rename      Rename a container  # 给docker容器重新命名restart     Restart one or more containers  # 重启运行的容器rm          Remove one or more containers  # 移除一个或者多个容器rmi         Remove one or more images  # 移除一个或者多个镜像[无容器使用该镜像时才可删除，否则需删除相关容器才可继续或 -f 强制删除]run         Run a command in a new container  # 创建一个新的容器并运行一个命令save        Save one or more images to a tar archive (streamed to STDOUT by default) # 保存一个镜像为一个tar包[对应load]search      Search the Docker Hub for images  # 在docker hub中搜索镜像start       Start one or more stopped containers  # 启动容器stats       Display a live stream of container(s) resource usage statistics # 实时显示容器资源使用统计stop        Stop one or more running containers  # 停止容器tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE # 给源中镜像打标签top         Display the running processes of a container     # 查看容器中运行的进程信息unpause     Unpause all processes within one or more containers # 取消暂停容器update      Update configuration of one or more containers  # 更新一个或多个容器配置version     Show the Docker version information  # 查看docker版本号 wait        Block until one or more containers stop, then print their exit codes # 截取容器停止时的退出状态值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h2><blockquote><p>作业1：Docker 安装Nginx</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.搜索镜像 search 建议去docker搜索，可以看到帮助文档# 2.下载镜像 pull# 3.运行测试[root@localhost &#x2F;]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               latest              2622e6cca7eb        23 hours ago        132MBcentos              latest              470671670cac        4 months ago        237MB# -d 后台运行# --name 给容器命名# -p 宿主机端口：容器内部端口   【端口映射操作】[root@localhost &#x2F;]# docker run -d --name nginx01 -p 3344:80 nginxd60570d1e45024e3687e3bf3105a6959af8ee68d34f0c62a7deee1c16ec6579fCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMESd60570d1e450        nginx               &quot;&#x2F;docker-entrypoint.…&quot;   2 minutes ago       Up 2 minutes        0.0.0.0:3344-&gt;80&#x2F;tcp   nginx01# 本地测试访问nginx[root@localhost &#x2F;]# curl localhost:3344# 进入容器[root@localhost &#x2F;]# docker exec -it nginx01 &#x2F;bin&#x2F;bashroot@d60570d1e450:&#x2F;# whereis nginxnginx: &#x2F;usr&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;lib&#x2F;nginx &#x2F;etc&#x2F;nginx &#x2F;usr&#x2F;share&#x2F;nginxroot@d60570d1e450:&#x2F;# cd &#x2F;etc&#x2F;nginx&#x2F;root@d60570d1e450:&#x2F;etc&#x2F;nginx# lsconf.dfastcgi_paramskoi-utf  koi-win  mime.types  modules  nginx.conf  scgi_paramsuwsgi_params  win-utf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>端口暴露的概念</strong></p><p><img src="C:\Users\ZTX\Desktop\markdownx学习\Docker概述(1).assets\image-20200611085948617.png" alt="image-20200611085948617" loading="lazy"></p><p><strong>思考问题：</strong>我们每次改动nginx配置文件，都需要进入容器内部？十分麻烦，我要是可以在容器外部提供一个映射路径，达到在容器外部修改文件名，容器内部就可以自动修改？-v 数据卷 技术！</p><blockquote><p>作业2：Docker来装一个tomcat</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 官方文档docker run -it --rm tomcat:9.0# 我们之前的启动都是后台，停止了容器之后，容器还是可以查到 docker run -it --rm,一般用来测试，用完就删除# 下载再启动docker pull tomcat# 启动运行docker run -d -p 3355:8080 --name tomcat01 tomcat#测试访问没有问题# 进入容器[root@localhost &#x2F;]# docker exec -it tomcat01 &#x2F;bin&#x2F;bash# 发现问题：1、linux命令少了 2、webapps内没有内容（这是阿里云镜像的原因：默认是最小镜像，所有不必要的都删除）# 保证最小可运行环境#解决方法：将webapps.dist目录下内容拷至webapps下root@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat# cd webappsroot@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps# lsroot@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps# cd ..root@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat# lsBUILDING.txt  CONTRIBUTING.md  LICENSENOTICEREADME.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  native-jni-lib  temp  webapps  webapps.dist  workroot@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat# cd webapps.dist&#x2F;root@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps.dist# lsROOT  docs  examples  host-manager  managerroot@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps.dist# cd ..root@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat# cp -r webapps.dist&#x2F;* webapps root@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat# cd webappsroot@c435d5b974a7:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps# lsROOT  docs  examples  host-manager  manager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拷贝完成就可以访问了：</p><p><img src="C:\Users\ZTX\Desktop\markdownx学习\Docker概述(1).assets\image-20200611090019494.png" alt="image-20200611090019494" loading="lazy"></p><p><strong>思考问题：</strong>我们以后要部署项目，如果每次都要进入容器是不是十分麻烦？我要是可以在容器外部提供映射路径，webapps,我们在外部放置项目，就自动同步到内部就好了！</p><blockquote><p>作业3：部署es+kibana</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># es 暴露的端口很多！# es 十分耗内存# es 的数据一般需要放置到安全目录！挂载# --net somenetwork？网络配置# 启动 elasticsearchdocker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; elasticsearch:7.6.2# 启动了 Linux就可卡住了   docker stats 查看cpu的状态# es 是十分耗内存的# 测试一下es是否成功了[root@localhost &#x2F;]# curl localhost:9200&#123;  &quot;name&quot; : &quot;83b0d5dca26e&quot;,  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,  &quot;cluster_uuid&quot; : &quot;MjhNfYTvRVui1UCrAwMdqw&quot;,  &quot;version&quot; : &#123;    &quot;number&quot; : &quot;7.6.2&quot;,    &quot;build_flavor&quot; : &quot;default&quot;,    &quot;build_type&quot; : &quot;docker&quot;,    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,    &quot;build_snapshot&quot; : false,    &quot;lucene_version&quot; : &quot;8.4.0&quot;,    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;  &#125;,  &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;# 查看docker容器占用资源情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181203.png" alt="image-20200611124706727" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 赶紧关闭容器，增加内存限制，修改配置文件 -e 环境配置修改docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; -e ES_JAVA_OPTS&#x3D;&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2  # 查看docker容器占用资源情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181204.png" alt="image-20200611124755826" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost &#x2F;]# curl localhost:9200&#123;  &quot;name&quot; : &quot;5a262b522bbf&quot;,  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,  &quot;cluster_uuid&quot; : &quot;rGMaCpVXScGaZcv_UtK3gQ&quot;,  &quot;version&quot; : &#123;    &quot;number&quot; : &quot;7.6.2&quot;,    &quot;build_flavor&quot; : &quot;default&quot;,    &quot;build_type&quot; : &quot;docker&quot;,    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,    &quot;build_snapshot&quot; : false,    &quot;lucene_version&quot; : &quot;8.4.0&quot;,    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;  &#125;,  &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>作业4：使用 kibana 连接 es ? 思考网络如何才能连接过去！</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181205.png" alt="image-20200611125352717" loading="lazy"></p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li>portainer（线用这个）</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 8088:9000 \--restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock --privileged&#x3D;true portainer&#x2F;portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Rancher （CI&#x2F;CD再用）</li></ul><h2 id="什么是portainer"><a href="#什么是portainer" class="headerlink" title="什么是portainer ?"></a>什么是portainer ?</h2><p>Docker图形化界面管理工具！提供一个后台面板供我们操作！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 8088:9000 \--restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock --privileged&#x3D;true portainer&#x2F;portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>外部访问测试：<a href="http://ip:8088/">http://ip:8088/</a></p><p>通过它来访问了;</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181206.png" alt="image-20200611141621853" loading="lazy"></p><p>选择本地的：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181207.png" alt="image-20200611142004773" loading="lazy"></p><p>进入之后的面板：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181208.png" alt="image-20200611144838665" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181209.png" alt="image-20200611144900114" loading="lazy"></p><p>可视化面板我们平时不会使用，大家自己测试玩玩即可！</p><h1 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件。</p><p>所有应用，直接打包docker镜像，就可以直接跑起来！</p><p><strong>如何得到镜像</strong></p><ul><li>从远程仓库下载</li><li>别人拷贝给你</li><li>自己制作一个镜像 DockerFile</li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote><p>UnionFs （联合文件系统）</p></blockquote><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加载 kernel, Linux刚启动时会加载bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包括bootloader和 Kernel。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中的&#x2F;dev,&#x2F;proc,&#x2F;bin,&#x2F;etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。<br><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181210.png" alt="image-20200611162007055" loading="lazy"></p><p>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181211.png" alt="image-20200611162057734" loading="lazy"></p><p>对于个精简的OS, rootfs可以很小，只需要包合最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的Linux发行版， boots基本是一致的， rootfs会有差別，因此不同的发行版可以公用bootfs.</p><p>虚拟机是分钟级别，容器是秒级！</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><blockquote><p>分层的镜像</p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载！<img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181212.png" alt="image-20200611163839741" loading="lazy"></p><p><strong>思考：为什么Docker镜像要采用这种分层的结构呢？</strong></p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过docker image inspect 命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">➜  &#x2F; docker image inspect redis          [    &#123;        &quot;Id&quot;: &quot;sha256:f9b9909726890b00d2098081642edf32e5211b7ab53563929a47f250bcdc1d7c&quot;,        &quot;RepoTags&quot;: [            &quot;redis:latest&quot;        ],        &quot;RepoDigests&quot;: [            &quot;redis@sha256:399a9b17b8522e24fbe2fd3b42474d4bb668d3994153c4b5d38c3dafd5903e32&quot;        ],        &quot;Parent&quot;: &quot;&quot;,        &quot;Comment&quot;: &quot;&quot;,        &quot;Created&quot;: &quot;2020-05-02T01:40:19.112130797Z&quot;,        &quot;Container&quot;: &quot;d30c0bcea88561bc5139821227d2199bb027eeba9083f90c701891b4affce3bc&quot;,        &quot;ContainerConfig&quot;: &#123;            &quot;Hostname&quot;: &quot;d30c0bcea885&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;ExposedPorts&quot;: &#123;                &quot;6379&#x2F;tcp&quot;: &#123;&#125;            &#125;,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;,                &quot;GOSU_VERSION&#x3D;1.12&quot;,                &quot;REDIS_VERSION&#x3D;6.0.1&quot;,                &quot;REDIS_DOWNLOAD_URL&#x3D;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.0.1.tar.gz&quot;,                &quot;REDIS_DOWNLOAD_SHA&#x3D;b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273&quot;            ],            &quot;Cmd&quot;: [                &quot;&#x2F;bin&#x2F;sh&quot;,                &quot;-c&quot;,                &quot;#(nop) &quot;,                &quot;CMD [\&quot;redis-server\&quot;]&quot;            ],            &quot;ArgsEscaped&quot;: true,            &quot;Image&quot;: &quot;sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0&quot;,            &quot;Volumes&quot;: &#123;                &quot;&#x2F;data&quot;: &#123;&#125;            &#125;,            &quot;WorkingDir&quot;: &quot;&#x2F;data&quot;,            &quot;Entrypoint&quot;: [                &quot;docker-entrypoint.sh&quot;            ],            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;&#125;        &#125;,        &quot;DockerVersion&quot;: &quot;18.09.7&quot;,        &quot;Author&quot;: &quot;&quot;,        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;ExposedPorts&quot;: &#123;                &quot;6379&#x2F;tcp&quot;: &#123;&#125;            &#125;,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;,                &quot;GOSU_VERSION&#x3D;1.12&quot;,                &quot;REDIS_VERSION&#x3D;6.0.1&quot;,                &quot;REDIS_DOWNLOAD_URL&#x3D;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.0.1.tar.gz&quot;,                &quot;REDIS_DOWNLOAD_SHA&#x3D;b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273&quot;            ],            &quot;Cmd&quot;: [                &quot;redis-server&quot;            ],            &quot;ArgsEscaped&quot;: true,            &quot;Image&quot;: &quot;sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0&quot;,            &quot;Volumes&quot;: &#123;                &quot;&#x2F;data&quot;: &#123;&#125;            &#125;,            &quot;WorkingDir&quot;: &quot;&#x2F;data&quot;,            &quot;Entrypoint&quot;: [                &quot;docker-entrypoint.sh&quot;            ],            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: null        &#125;,        &quot;Architecture&quot;: &quot;amd64&quot;,        &quot;Os&quot;: &quot;linux&quot;,        &quot;Size&quot;: 104101893,        &quot;VirtualSize&quot;: 104101893,        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;adea96bbe6518657dc2d4c6331a807eea70567144abda686588ef6c3bb0d778a&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;66abd822d34dc6446e6bebe73721dfd1dc497c2c8063c43ffb8cf8140e2caeb6&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;d19d24fb6a24801c5fa639c1d979d19f3f17196b3c6dde96d3b69cd2ad07ba8a&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;a1e95aae5e09ca6df4f71b542c86c677b884f5280c1d3e3a1111b13644b221f9&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;cd90f7a9cd0227c1db29ea992e889e4e6af057d9ab2835dd18a67a019c18bab4&#x2F;diff&quot;,                &quot;MergedDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11&#x2F;merged&quot;,                &quot;UpperDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11&#x2F;diff&quot;,                &quot;WorkDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11&#x2F;work&quot;            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,        &quot;RootFS&quot;: &#123;            &quot;Type&quot;: &quot;layers&quot;,            &quot;Layers&quot;: [                &quot;sha256:c2adabaecedbda0af72b153c6499a0555f3a769d52370469d8f6bd6328af9b13&quot;,                &quot;sha256:744315296a49be711c312dfa1b3a80516116f78c437367ff0bc678da1123e990&quot;,                &quot;sha256:379ef5d5cb402a5538413d7285b21aa58a560882d15f1f553f7868dc4b66afa8&quot;,                &quot;sha256:d00fd460effb7b066760f97447c071492d471c5176d05b8af1751806a1f905f8&quot;,                &quot;sha256:4d0c196331523cfed7bf5bafd616ecb3855256838d850b6f3d5fba911f6c4123&quot;,                &quot;sha256:98b4a6242af2536383425ba2d6de033a510e049d9ca07ff501b95052da76e894&quot;            ]        &#125;,        &quot;Metadata&quot;: &#123;            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;    &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>理解：</strong></p><p>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181213.png" alt="image-20200611163818495" loading="lazy"></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而整体的大镜像包含了来自两个镜像层的6个文件。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181214.png" alt="image-20200611164322267" loading="lazy"></p><p>上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181215.png" alt="image-20200611164447964" loading="lazy"></p><p>这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的文件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW [1]。</p><blockquote><p>特点</p></blockquote><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！<img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181216.png" alt="image-20200611165355825" loading="lazy"></p><p>如何提交一个自己的镜像？</p><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit 提交容器成为一个新的副本# 命令和git原理类似docker commit -m&#x3D;&quot;描述信息&quot; -a&#x3D;&quot;作者&quot; 容器id 目标镜像名:[版本TAG]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实战测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1、启动一个默认的tomcat#2、发现这个默认的tomcat是没有webapps应用的，镜像的原因。官方的镜像默认webapps下面是没有文件的！#3、我自己将webapp.dist下文件拷贝至webapps下#4、将我们操作过的容器通过commit提交为一个镜像！我们以后就可以使用我们修改过的镜像了，这就是我们自己的一个修改的镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220303181217.png" alt="image-20200611172701729" loading="lazy"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">如果你想要保存当前容器的状态，就可以通过commit来提交，获得一个镜像，就好比我们我们使用虚拟机的快照。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到了这里就算是入门Docker了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=838132893&amp;bvid=BV1og4y1q7M4&amp;cid=191591129&amp;page=1&quot; style=&quot;width: 100%; height: 500px; max-</summary>
      
    
    
    
    <category term="Docker" scheme="http://ccsu.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://ccsu.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>计算机存储容量单位换算</title>
    <link href="http://ccsu.top/posts/3b245245/"/>
    <id>http://ccsu.top/posts/3b245245/</id>
    <published>2022-02-24T08:40:00.000Z</published>
    <updated>2022-02-24T08:40:41.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>1、比特Bit(位、b)：表示信息的最小单位，即计算机最小的存储单位，是二进制数的一位包含的信息或2个选项中特别指定1个的需要信息量【它代表从一个二进制数组中选出一元（0或1）所提供的信息量（若此二元出现的概率相等）】</p><p>2、字节Byte(B)：二进制数据的单位，计算机中数据基本单位，一个字节通常8位长。各种信息在计算机中存储、处理至少需要一个字节。例一个ASCII码用一个字节表示，一个汉字用两个字节表示</p><p>3、千字节Kilobytes(KB)：计算机存储容量的单位，也常用KB来表示。1KB&#x3D;1024字节</p><p>4、兆字节Megabytes(MB)：计算机存储容量的单位，也常用MB来表示。1MB&#x3D;1024*1024字节</p><p>5、吉字节Gigabyte(GB) ：又称千兆字节，是计算机存储容量单位，简称GB，是兆字节(MB)的1024倍，即 1024MB。</p><p>6、太字节terabyte(TB)：计算机存储容量单位，也常用TB来表示。1TB&#x3D;1024GB&#x3D;2^40字节。</p><p>PS：KB（即baiK）、MB（即M）、GB（即G）等都是基于字节换算的存储单位。</p><h1 id="二、转换"><a href="#二、转换" class="headerlink" title="二、转换"></a>二、转换</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c">字节<span class="token punctuation">(</span>Byte<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span>位<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>                               <span class="token number">1</span>B<span class="token operator">=</span><span class="token number">8</span>b <span class="token number">1</span>KB<span class="token punctuation">(</span> Kilobyte，千字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>B                      <span class="token number">1</span>KB<span class="token operator">=</span><span class="token number">1024</span>B <span class="token number">1</span>MB<span class="token punctuation">(</span> Megabyte，兆字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>KB                     <span class="token number">1</span>MB<span class="token operator">=</span><span class="token number">1024</span>KB <span class="token number">1</span>GB<span class="token punctuation">(</span> Gigabyte，吉字节，千兆<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>MB               <span class="token number">1</span>GB<span class="token operator">=</span><span class="token number">1024</span>MB <span class="token number">1</span>TB<span class="token punctuation">(</span> Trillionbyte，万亿字节，太字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>GB       <span class="token number">1</span>TB<span class="token operator">=</span><span class="token number">1024</span>GB <span class="token number">1</span>PB<span class="token punctuation">(</span> Petabyte，千万亿字节，拍字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>TB         <span class="token number">1</span>PB<span class="token operator">=</span><span class="token number">1024</span>TB <span class="token number">1</span>EB<span class="token punctuation">(</span> Exabyte，百亿亿字节，艾字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>PB          <span class="token number">1</span>EB<span class="token operator">=</span><span class="token number">1024</span>PB <span class="token number">1</span>ZB<span class="token punctuation">(</span>Zettabyte，十万亿亿字节，泽字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>EB       <span class="token number">1</span>ZB<span class="token operator">=</span><span class="token number">1024</span>EB <span class="token number">1</span>YB<span class="token punctuation">(</span> Yottabyte，一亿亿亿字节，尧字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>ZB      <span class="token number">1</span>YB<span class="token operator">=</span><span class="token number">1024</span>ZB    <span class="token number">1</span>BB<span class="token punctuation">(</span> Brontobyte，千亿亿亿字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>YB             <span class="token number">1</span>BB<span class="token operator">=</span><span class="token number">1024</span>YB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线转换工具：<a href="https://calc.itzmx.com/">PC字节计算器</a></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220224141737.png" alt="image-20220224141737338" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; title=&quot;一、概念&quot;&gt;&lt;/a&gt;一、概念&lt;/h1&gt;&lt;p&gt;1、比特Bit(位、b)：表示信息的最小单位，即计算机最小的存储单位，是二进制数的一位包含的信息或2个选项中特别指定1个的需</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://ccsu.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="计算机等级考试" scheme="http://ccsu.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95/"/>
    
    
    <category term="嵌入式" scheme="http://ccsu.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo绑定域名</title>
    <link href="http://ccsu.top/posts/7068443c/"/>
    <id>http://ccsu.top/posts/7068443c/</id>
    <published>2022-02-11T16:00:00.000Z</published>
    <updated>2022-02-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a><strong>购买域名</strong></h2><p>自定义域名第一步：挑选好一个自己喜欢的域名并购买，域名服务商可以在阿里云旗下的万网或者腾讯云都可以，由于我之前就在阿里云买了一个域名：ccsu.top，没有使用，所以现在就用上了</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104451.png" alt="image-20220212104451749" loading="lazy"></p><p>买完之后在阿里云控制台域名下面就会展示出购买的域名信息</p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a><strong>解析域名</strong></h2><p>以我的阿里云为例，如下图所示，添加两条解析记录：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104243.png" alt="image-20220212104243325" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104303.png" alt="image-20220212104303051" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212103451.png" alt="image-20220212103451170" loading="lazy"></p><h2 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a><strong>设置CNAME</strong></h2><p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212103354.png" alt="image-20220212103354458" loading="lazy"></p><p>在项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），填写上域名。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。完成上述步骤之后就可以在浏览器输入自己的域名访问了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212105212.png" alt="image-20220212105212611" loading="lazy"></p><h2 id="Hexo推送GitHub-Pages时自定义域名失效的问题"><a href="#Hexo推送GitHub-Pages时自定义域名失效的问题" class="headerlink" title="Hexo推送GitHub Pages时自定义域名失效的问题"></a>Hexo推送GitHub Pages时自定义域名失效的问题</h2><p>用Hexo可以实现基于Github Pages的个人博客系统，默认博客网址是 username.github.io</p><p>如果想换成自己的域名，可以在Github对应repository的Setting里，找到Github Pages， 在Custom domain里填进去自己的域名，Save。</p><p>再在域名商那里设置好域名解析，就可以实现个人域名了。</p><p>仔细观察可以发现，在Github设置好Custom domain之后，博客对应的repository里，会多出一个名为CNAME的文件，内容是自己的自定义域名的网址。</p><p>然而在本地更新hexo博客内容，并通过Git更新托管在Github的博客时，由于Hexo默认没有这个CNAME文件，原本的CNAME文件会被抹掉，于是自定义域名就失效了。</p><p>解决办法很简单：<strong>在Hexo目录里的source文件夹下面，新建一个同样内容、同样名字的CNAME文件即可。</strong></p><h1 id="您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入的问题解决"><a href="#您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入的问题解决" class="headerlink" title="您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入的问题解决"></a>您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入的问题解决</h1><p>工信部备案后一段时间会发来<br><code>Hexo博客：您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入</code><br>的短信警告，</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220217143200.png" alt="image-20220217143200537" loading="lazy"></p><p>下面讲述该问题的原因及解决方法。</p><p>问题描述：<br>经检查您的网站域名 xxxxxx 未指向阿里云国内节点（不含香港）服务器且无访问记录 ，依据工信部相关法规规定属于空壳网站，请您尽快将域名解析IP地址指向阿里云国内节点（不含香港）服务器。 如果3个工作日后检查发现该备案域名在在阿里云国内节点（不含香港）服务器上仍无访问记录，我们将删除网站备案接入信息。您的备案号可能会被注销，网站访问可能受到影响。</p><p>这个问题常见于个人博客，特别是 hexo 博客，购买了域名，并且备了案，由于 hexo 博客静态托管于 Github Pages 或者 Coding Pages，所以也就没有阿里云的服务器，也就不可能存在域名解析IP地址指向阿里云国内节点服务器。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220217143236.png" alt="image-20220217143236477" loading="lazy"></p><p>解决方法：<br>将你的域名添加一个二级域名，解析到某些阿里云国内节点服务器上就行了。例如我博客域名为 ccsu.top，就可以添加一个或者两个 A 记录，记录值为阿里云国内节点服务器的 IP。然后隔一段时间访问一下 beian.ccsu.top，确保有一点儿访问量就行了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220217143335.png" alt="image-20220217143335076" loading="lazy"></p><p>下面列出一些阿里云国内节点服务器 IP，挑一些能访问的就行了。</p><p>39.100.0.2 【恭喜，站点创建成功！】<br>39.100.0.16 【恭喜，站点创建成功！】<br>39.100.0.17 【恭喜，站点创建成功！】<br>39.100.0.23 【Document】<br>39.100.0.59 【恭喜，站点创建成功！】<br>39.100.0.64 【贵州鸿巨热力(集团)有限责任公司】<br>39.100.0.68 【恭喜，站点创建成功！】<br>39.100.0.75 【没有找到站点】<br>39.100.0.77 【Welcome to nginx!】<br>39.100.0.88 【恭喜，站点创建成功！】<br>39.100.0.94 【没有找到站点】<br>39.100.0.113 【IIS Windows Server】<br>39.100.0.117 【phpinfo()】<br>39.100.0.118 【没有找到站点】<br>39.100.0.119 【恭喜，站点创建成功！】<br>39.100.0.134 【宁夏塞上优家互联科技有限公司】<br>39.100.0.138 【没有找到站点】<br>39.100.0.149 【没有找到站点】<br>39.100.0.158 【没有找到站点】<br>39.100.0.159 【学点云管理后台】<br>39.100.0.167 【财经·新经济】<br>39.100.0.168 【苏州市相城区燃气有限责任公司】<br>39.100.0.169 【恭喜，站点创建成功！】<br>39.100.0.174 【The page is not foun】<br>39.100.0.177 【恭喜，站点创建成功！】<br>39.100.0.182 【IIS7】<br>39.100.0.192 【恭喜，站点创建成功！】<br>39.100.0.204 【恭喜，站点创建成功！】<br>39.100.0.209 【千胜ERP】<br>39.100.0.214 【LANMP一键安装包,集lamp,lnm】<br>39.100.0.238 【登录 - 大庆井下】<br>39.100.1.1 【上海美凯龙美学装饰工程有限公司ERP】<br>39.100.1.28 【恭喜，站点创建成功！】<br>39.100.1.44 【IIS Windows Server】<br>39.100.1.65 【恭喜，站点创建成功！】<br>39.100.1.68 【Test Page for the Ng】<br>39.100.1.95 【恭喜，站点创建成功！】</p><blockquote><p>  <a href="https://blog.csdn.net/kuashijidexibao/article/details/106503226">https://blog.csdn.net/kuashijidexibao/article/details/106503226</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绑定域名&quot;&gt;&lt;a href=&quot;#绑定域名&quot; class=&quot;headerlink&quot; title=&quot;绑定域名&quot;&gt;&lt;/a&gt;绑定域名&lt;/h1&gt;&lt;h2 id=&quot;购买域名&quot;&gt;&lt;a href=&quot;#购买域名&quot; class=&quot;headerlink&quot; title=&quot;购买域名&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Hexo" scheme="http://ccsu.top/categories/Hexo/"/>
    
    
    <category term="Hexo安装" scheme="http://ccsu.top/tags/Hexo%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>安装hexo主题yun</title>
    <link href="http://ccsu.top/posts/17723abd/"/>
    <id>http://ccsu.top/posts/17723abd/</id>
    <published>2022-02-11T16:00:00.000Z</published>
    <updated>2022-02-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装渲染器"><a href="#安装渲染器" class="headerlink" title="安装渲染器"></a>安装渲染器</h1><blockquote><p>  如果您没有 <code>pug</code> 与 <code>stylus</code> 的渲染器，请先安装： <a href="https://github.com/hexojs/hexo-renderer-pug">hexo-renderer-pug</a> （这个是 Hexo 官方在维护，但是好像没有下面的星多，更新的勤快。） 或 <a href="https://github.com/maxknee/hexo-render-pug">hexo-render-pug</a> （以及前者尚未支持开发时热更新，后者支持。） 和 <a href="https://github.com/hexojs/hexo-renderer-stylus">hexo-renderer-stylus</a></p>  <pre class="line-numbers language-none"><code class="language-none">npm install hexo-render-pug hexo-renderer-stylus --save# oryarn add hexo-render-pug hexo-renderer-stylusnpm install hexo-render-pug hexo-renderer-stylus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220213105356.png" alt="image-20220213105356132" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none">node -vnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.orgnpm install -g yarnnpm install hexo-cli -ghexo init wushuai2000.github.iocd wushuai2000.github.ionpm installnpm install hexo-render-pug hexo-renderer-stylusnpm i hexo-theme-yun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装渲染器&quot;&gt;&lt;a href=&quot;#安装渲染器&quot; class=&quot;headerlink&quot; title=&quot;安装渲染器&quot;&gt;&lt;/a&gt;安装渲染器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  如果您没有 &lt;code&gt;pug&lt;/code&gt; 与 &lt;code&gt;stylus&lt;/code</summary>
      
    
    
    
    <category term="Hexo" scheme="http://ccsu.top/categories/Hexo/"/>
    
    
    <category term="Hexo安装" scheme="http://ccsu.top/tags/Hexo%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>相册</title>
    <link href="http://ccsu.top/posts/e26d1860/"/>
    <id>http://ccsu.top/posts/e26d1860/</id>
    <published>2022-02-11T16:00:00.000Z</published>
    <updated>2022-02-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">type</span><span class="token punctuation">:</span> albums<span class="token key atrule">title</span><span class="token punctuation">:</span> 相册<span class="token key atrule">url</span><span class="token punctuation">:</span> /albums/miracle.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span> e26d1860<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-03-05 01:31:08</span><span class="token key atrule">updated</span><span class="token punctuation">:</span> <span class="token datetime number">2020-07-14 16:31:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-yaml&quot; data-language=&quot;yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo-theme-yun</title>
    <link href="http://ccsu.top/posts/4567d7fd/"/>
    <id>http://ccsu.top/posts/4567d7fd/</id>
    <published>2022-02-11T16:00:00.000Z</published>
    <updated>2022-02-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 主题 Yun</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hexo 主题 Yun&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Hexo" scheme="http://ccsu.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://ccsu.top/tags/Hexo/"/>
    
    <category term="github" scheme="http://ccsu.top/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>音乐播放实例</title>
    <link href="http://ccsu.top/posts/bf8e06ec/"/>
    <id>http://ccsu.top/posts/bf8e06ec/</id>
    <published>2022-02-11T16:00:00.000Z</published>
    <updated>2022-02-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[    <div id="aplayer-zOaZlIDv" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="497572729" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;497572729&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#C20C0C&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    <div id="aplayer-GrezgzxB" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2008272804" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;2008272804&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">
    &lt;div id=&quot;aplayer-zOaZlIDv&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;497572729&quot; data-server=&quot;netease&quot; data</summary>
      
    
    
    
    <category term="Hexo实例" scheme="http://ccsu.top/categories/Hexo%E5%AE%9E%E4%BE%8B/"/>
    
    
    <category term="music" scheme="http://ccsu.top/tags/music/"/>
    
  </entry>
  
  <entry>
    <title>安装hexo及部署</title>
    <link href="http://ccsu.top/posts/17723abd/"/>
    <id>http://ccsu.top/posts/17723abd/</id>
    <published>2022-02-10T16:00:00.000Z</published>
    <updated>2022-02-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以来都想搭建一个自己的博客系统，用来记录自己在学习中遇到的问题和一些心得体会，趁着这次没有太多的事情，搭建一个属于自己的博客。由于自己平时的笔记都是使用Markdown语法来撰写的，在搜索资料与对比后决定使用<code>Hexo</code>框架。</p><p>我不是一个前端程序员，有些东西不是很了解，写的有问题或有改进的地方请大家指出。</p><h1 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，她基于 <a href="https://nodejs.org/en/">Node.js</a>，相较于 Jekyll 他有以下特点:</p><ul><li><h3 id="超快速度"><a href="#超快速度" class="headerlink" title="超快速度"></a>超快速度</h3><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p></li><li><h3 id="支持-Markdown"><a href="#支持-Markdown" class="headerlink" title="支持 Markdown"></a>支持 Markdown</h3><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p></li><li><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>只需一条指令即可部署到 Github Pages，或其他网站</p></li><li><h3 id="丰富的插件"><a href="#丰富的插件" class="headerlink" title="丰富的插件"></a>丰富的插件</h3><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></li></ul><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的<a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a>来快速的插入特定形式的内容。</p><p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/">主题</a>。</p><ul><li><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3></li></ul><ol><li>Hexo</li><li>静态博客</li><li>无服务器</li><li>GitHub Pages</li></ol><h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li>Git</li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 安装 Hexo 步骤。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h1 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h1><h2 id="什么是-Node-js-？"><a href="#什么是-Node-js-？" class="headerlink" title="什么是 Node.js ？"></a><strong>什么是 Node.js ？</strong></h2><blockquote><p>  这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>  JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）</p><p>  在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>  2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>  Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>  当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br>  <a href="https://baike.baidu.com/item/node.js/7567977">Node.js | 百度百科</a><br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></p></blockquote><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/zh-cn/">下载｜ Node.js</a></p><p>建议下载<strong>长期支持版</strong>而非<strong>当前发布版</strong>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><blockquote><p>  Node.js 安装成功时也默认安装了 <code>npm</code>，在此后将会用到。<br>  <code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p></blockquote><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具—Git</p><blockquote><p>  Visual Studio Code，简称 VS Code。<br>  目前最为强大易用的编辑器，轻量且快速。（<del>宇宙第一编辑器</del>）<br>  注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积也相比 VS Code 都要大上一个量级。</p><p>  Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。<br>  简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>  你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>  （当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 <a href="https://git-lfs.github.com/">Git LFS</a>。）</p></blockquote><h2 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载 <a href="https://git-scm.com/">Git</a> 并安装（如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html">这里</a>）</p><p>macOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><blockquote><p>  类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p></blockquote><h1 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h1><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>这一部分内容，你也可以放到本地调试并预览成功后并打算线上部署的时候，再回过头来看。</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>  GitHub 一听便与 Git 有所渊源。<code>Git</code> 在英文中是懒人、饭桶之意。<code>Hub</code> 则是中心、集线器的意思。譬如 USB 集线器就是 USB Hub。所以 GitHub 就是饭桶中心（<del>大雾</del>）。<br>  GitHub 是全世界最大的开源项目与代码托管平台，也是众多开发者的交流场所。<del>还是全球最大的同性交友网站</del>。<br>  而代码托管本身用到的正是上文提到的 Git 技术。</p></blockquote><p>注册 <a href="https://github.com/">GitHub</a> 账号。（虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用手头的翻译软件。）</p><blockquote><p>  注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></blockquote><p>登录 GitHub。</p><h2 id="为什么要用-GitHub？"><a href="#为什么要用-GitHub？" class="headerlink" title="为什么要用 GitHub？"></a>为什么要用 GitHub？</h2><p>对于平民玩家来说，在初次尝试建立自己的网站时，也许并不会有闲钱或者说决心来购买自己的服务器与域名。<br>而 GitHub 则提供了 <a href="https://pages.github.com/">GitHub Pages</a> 这一服务。<br>用户们可以利用这一服务，部署自己的静态站点。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>点击右上角的 <code>+</code> -&gt; <code>New repository</code> 新建仓库。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211224358.png" loading="lazy"></p><p>仓库名称务必为 <code>你的用户名.github.io</code>，用户名是英文，大小写无所谓，但建议统一小写。（因为你会发现时常切换大小写很麻烦）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211224924.png" alt="image-20220211224814302" loading="lazy"></p><blockquote><p>  为什么必须这个作为仓库名？<br>  GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></blockquote><p>点击 <code>Create repository</code>。然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225115.png" alt="image-20220211225115298" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225205.png" alt="image-20220211225205880" loading="lazy"></p><p>点击那个链接，就会出现自己的网页啦，效果如下：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225305.png" alt="image-20220211225305706" loading="lazy"></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><a href="https://hexo.io/">Hexo</a></p><ul><li>GitHub: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>（直接参考文档也是一个不错的选择）</li></ul><h2 id="为嘛使用-Hexo-？"><a href="#为嘛使用-Hexo-？" class="headerlink" title="为嘛使用 Hexo ？"></a><strong>为嘛使用 Hexo ？</strong></h2><blockquote><p>  Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。<br>  你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。</p></blockquote><h2 id="为什么不是…"><a href="#为什么不是…" class="headerlink" title="为什么不是…?"></a><strong>为什么不是…?</strong></h2><blockquote><p>  其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。（当然，相应的功能和灵活性也大大提升。）静态化站点还有一个优势就是访问速度往往更快。<br>  静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。Hexo 提供的功能与 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。<br>  所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）</p></blockquote><h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在终端中输入以下命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-cli -g# 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行# sudo npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>  <code>install</code> 自然是安装。<br>  <code>hexo-cli</code> 则是 <code>hexo</code> 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br>  <code>-g</code> 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></blockquote><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>此时，请先通过 <code>cd</code> 进入你本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here）</p><p>接下来输入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo init 你的名字.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231417.png" alt="image-20220211231417468" loading="lazy"></p><blockquote><p>  <code>hexo</code> 正是因为我们之前安装了 <code>hexo-cli</code> 这一个包，所以我们可以在终端中使用 <code>hexo</code> 这一命令。<br>  <code>init</code> 初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致。</p><p>  如果在初始化过程中半天没有反应，多尝试几次，可能是因为本地连接GitHub的问题，可以考虑开代理或者修改host的方式解决。</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 进入你的博客文件夹cd 你的名字.github.io# 默认安装所有 &#96;package.json&#96; 文件中提到的包npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231631.png" alt="image-20220211231631300" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none"># 编译hexo g# 你也可以缩写成 hexo shexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231738.png" alt="image-20220211231738568" loading="lazy"></p><p><code>server</code> 代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 <code>localhost:4000</code> 就可以看到本地的网页了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231810.png" alt="image-20220211231810793" loading="lazy"></p><p>按 <code>Ctrl + C</code> 中断服务器的运行。</p><p>至此，基础的模版页面便已经搭建好了。</p><h1 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h1><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p>首先右键打开git bash，然后输入下面命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"wushuai"</span><span class="token function">git</span> config --global user.email <span class="token string">"2506812280@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><h2 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h2><p>生成密钥SSH key：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 三次回车即可生成 ssh key, 这里的邮箱最好填和刚才一样的</span>ssh-keygen -t rsa -C <span class="token string">"2506812280@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211232902.png" alt="image-20220211232902462" loading="lazy"></p><p>然后用文本编辑器(如notepad)打开id_rsa.pub这个文件, 全选复制。文件路径在命令行的提示里面可以看见。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233434.png" alt="image-20220211233434473" loading="lazy"></p><p>接下来到GitHub上，打开“Account settings”–“SSH Keys”页面，然后点“Add SSH Key”，填上Title（随意写），在Key文本框里粘贴 id_rsa.pub文件里的全部内容。点“Add Key”，你就应该看到已经添加的Key，可以添加多个Key</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233345.png" alt="image-20220211233345526" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233622.png" alt="image-20220211233622008" loading="lazy"></p><p>验证是否成功，在git bash里输入下面的命令，出现你的用户名，那就成功了。</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233819.png" alt="image-20220211233819250" loading="lazy"></p><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211234631.png" alt="image-20220211234631497" loading="lazy"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>为了更方便的部署到 GitHub Pages，Hexo 提供了 <code>hexo-deployer-git</code> 插件。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>_config.yml</code> 中配置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 你此前新建的仓库的链接 <span class="token comment"># 比如：https://github.com/wushuai2000/wushuai2000.github.io</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main <span class="token comment"># 默认使用 main 分支</span>  <span class="token key atrule">message</span><span class="token punctuation">:</span> Update Hexo Static Content <span class="token comment"># 你可以自定义此次部署更新的说明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存，部署！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>  第一次可能需要你输入用户名与密码。<br>  密码输入的时候不会出现 ***，不要害怕，已经输入进去了。</p></blockquote><p>等待完成后，打开网址 <code>https://你的名字.github.io</code> 就能看到你的线上网站了。</p><blockquote><p>  使用 https，http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 <code>http</code> 链接为不安全。<br>  为了安全，建议开启强制 https 跳转。<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS</code>。（翻到下面）<br>  此时，http 网址会自动重定向到 https</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直以</summary>
      
    
    
    
    <category term="Hexo" scheme="http://ccsu.top/categories/Hexo/"/>
    
    
    <category term="Hexo安装" scheme="http://ccsu.top/tags/Hexo%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>yun主题写作语法</title>
    <link href="http://ccsu.top/posts/a6c287ab/"/>
    <id>http://ccsu.top/posts/a6c287ab/</id>
    <published>2022-02-09T16:00:00.000Z</published>
    <updated>2022-02-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 树莓派镜像烧录<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-03-05 01:31:08</span><span class="token key atrule">updated</span><span class="token punctuation">:</span> <span class="token datetime number">2020-07-14 16:31:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 西红柿<span class="token comment"># 设置作者则会显示</span><span class="token key atrule">email</span><span class="token punctuation">:</span> 2506812280@qq.com<span class="token comment"># 自动根据邮箱获取 Gravatar 头像</span><span class="token key atrule">readmore</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 将会首页卡片摘要末尾强制显示一个 阅读更多 按钮</span><span class="token key atrule">sticky</span><span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token comment"># 置顶</span><span class="token key atrule">hideTime</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 强制隐藏时间显示</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 描述（只出现在预览卡片上，不出现在正文中）（默认使用 400 字重以表强调，略细于加粗字体）<span class="token comment"># 设置为 index 时，将只在首页隐藏，归档中仍然展示。（譬如放一些没有必要放在首页的笔记,并在归档中方便自己查看。）</span><span class="token comment"># 当设置为 true 时，该文章仍然会被渲染，你自己可以直接访问链接进行查看。但不会被显示在展示的文章卡片与归档中。</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派  <span class="token punctuation">-</span> 镜像烧录<span class="token key atrule">categories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="额外的头部字段"><a href="#额外的头部字段" class="headerlink" title="额外的头部字段"></a>额外的头部字段</h1><h2 id="author"><a href="#author" class="headerlink" title="author"></a>author</h2><p>设置作者则会显示</p><h2 id="email"><a href="#email" class="headerlink" title="email"></a>email</h2><p>自动根据邮箱获取 <a href="https://en.gravatar.com/site/implement/images/">Gravatar</a> 头像</p><h2 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h2><p>是否显示目录，文章 <code>post</code> 默认显示，页面 <code>post</code> 默认不显示</p><h2 id="readmore"><a href="#readmore" class="headerlink" title="readmore"></a>readmore</h2><p>将会首页卡片摘要末尾强制显示一个 <code>阅读更多</code> 按钮</p><h2 id="hideTime"><a href="#hideTime" class="headerlink" title="hideTime"></a>hideTime</h2><p>强制隐藏时间显示</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">author</span><span class="token punctuation">:</span> 云游君<span class="token key atrule">email</span><span class="token punctuation">:</span> me@yunyoujun.cn<span class="token key atrule">readmore</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hideTime</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p>描述（只出现在预览卡片上，不出现在正文中）（默认使用 <code>400</code> 字重以表强调，略细于加粗字体）</p><h2 id="excerpt"><a href="#excerpt" class="headerlink" title="excerpt"></a>excerpt</h2><p>摘要（不需要在 <code>Front-matter</code> 中设置，通过 <code>&lt;!-- more --&gt;</code> 截断实现，预览卡片与正文中均出现）</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">description</span><span class="token punctuation">:</span> xxxxxxx</span><span class="token punctuation">---</span></span>这里是摘要<span class="token comment">&lt;!-- more --></span>这里是更多内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><p>标签</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派  <span class="token punctuation">-</span> 镜像烧录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h2><p>分类，如果您尚未安装 <code>hexo-generator-category</code>，请输入 <code>npm install hexo-generator-category</code></p><p>新建 <code>categories</code> 页面，在博客根目录下输入：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2017-10-12 10:47:16</span><span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">type</span><span class="token punctuation">:</span> categories<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  TIP</p><p>  <a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE">分类和标签</a></p><p>  尽管 Hexo 支持了为一篇文章设置多个分类，但我个人更建议你一篇文章只放在一个分类下，而使用标签来为它进行多个描述。</p><p>  同时太多的分类与标签，既不方便整理，也不利于移动端的展示。</p></blockquote><h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><p>通过设置文章 Front Matter 中 <code>sticky</code> 属性以进行置顶，数值越高，优先级越高。</p><p>设置置顶后，文章卡片右上角将出现置顶图标。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">sticky</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><blockquote><p>  <a href="https://yun.yunyoujun.cn/guide/config.html#type">https://yun.yunyoujun.cn/guide/config.html#type</a></p></blockquote><p>为文章设置 <code>type</code> 属性，即可将其转为其他类型卡片，并跳转 <code>url</code> 设置的链接。</p><p>譬如：</p><pre class="line-numbers language-none"><code class="language-none">---title: xxxtype: bilibiliurl: https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av8153395&#x2F;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在文章标题前将会出现 bilibili 的图标，点击标题会跳转至对应的链接。</p><p>目前默认支持以下类型（哔哩哔哩、豆瓣、GitHub、网易云音乐、推特、微信公众号、微博、语雀、知乎、Notion、外链）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">types</span><span class="token punctuation">:</span>  <span class="token key atrule">link</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>external<span class="token punctuation">-</span>link<span class="token punctuation">-</span>line  <span class="token key atrule">bilibili</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#FF8EB3"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>bilibili<span class="token punctuation">-</span>line  <span class="token key atrule">douban</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#007722"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>douban<span class="token punctuation">-</span>line  <span class="token key atrule">github</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> black    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>github<span class="token punctuation">-</span>line  <span class="token key atrule">netease-cloud-music</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#C10D0C"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>netease<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>music<span class="token punctuation">-</span>line  <span class="token key atrule">notion</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> black    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>notion  <span class="token key atrule">twitter</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#1da1f2"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>twitter<span class="token punctuation">-</span>line  <span class="token key atrule">wechat</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#1AAD19"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>wechat<span class="token punctuation">-</span>2<span class="token punctuation">-</span>line  <span class="token key atrule">weibo</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#E6162D"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>weibo<span class="token punctuation">-</span>line  <span class="token key atrule">yuque</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#25b864"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>yuque  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#0084FF"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>zhihu<span class="token punctuation">-</span>line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以自己在 <code>_config.yun.yml</code> 设置你跳转不同链接专属的图标和颜色。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">types</span><span class="token punctuation">:</span>  <span class="token key atrule">google</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> xxx    <span class="token key atrule">icon</span><span class="token punctuation">:</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当你指定的 <code>type</code> 不存在于默认支持中，也没有进行自定义，将默认使用蓝色的额外链接图标。</p><p>如果你想在你的外链卡片上显示一些信息，你可以写在 <code>&lt;!-- more --&gt;</code> 前，它会被当作摘要显示。</p><p>譬如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>yun<span class="token key atrule">type</span><span class="token punctuation">:</span> github<span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/YunYouJun/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>yun<span class="token punctuation">---</span>Hexo 主题 Yun&lt;<span class="token tag">!--</span> more <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hide-隐藏文章"><a href="#hide-隐藏文章" class="headerlink" title="hide-隐藏文章"></a>hide-隐藏文章</h2><p>你可以在文章头部添加 <code>hide</code> 属性，来临时隐藏某篇文章。</p><ul><li><code>index</code>: 设置为 <code>index</code> 时，将只在首页隐藏，归档中仍然展示。（譬如放一些没有必要放在首页的笔记，并在归档中方便自己查看。）</li><li><code>true</code>: 当设置为 <code>true</code> 时，该文章仍然会被渲染，你自己可以直接访问链接进行查看。但不会被显示在展示的文章卡片与归档中。</li></ul><pre class="line-numbers language-none"><code class="language-none">---title: xxxhide: true# hide: indexsitemap: falseindexing: false---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  什么？你想完全不渲染不显示？那你为何不将其放在 <code>_drafts</code> 文件夹下，或干脆不提交这篇文章。</p></blockquote><h2 id="reward-打赏"><a href="#reward-打赏" class="headerlink" title="reward-打赏"></a>reward-打赏</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">reward</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="内容字段"><a href="#内容字段" class="headerlink" title="内容字段"></a>内容字段</h1><h2 id="图片注释"><a href="#图片注释" class="headerlink" title="图片注释"></a>图片注释</h2><p><img src="https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png" alt="Audits - Lighthouse" loading="lazy"><em>谷歌浏览器 Audits - Lighthouse 检测分数</em></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">Audits - Lighthouse</span>](<span class="token url">https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png</span>)</span><span class="token italic"><span class="token punctuation">_</span><span class="token content">谷歌浏览器 Audits - Lighthouse 检测分数</span><span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2>    <div id="aplayer-dsSQnyAY" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="497572729" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;497572729&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#C20C0C&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    <div id="aplayer-jXLJuTLf" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2008272804" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;2008272804&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><pre class="line-numbers language-none"><code class="language-none">type: albumstitle: 相册url: &#x2F;albums&#x2F;miracle.htmlabbrlink: e26d1860date: 2020-03-05 01:31:08updated: 2020-07-14 16:31:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h1><p>安装<code>npm install --save hexo-blog-encrypt</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 文章信息头</span><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hello World<span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 作为日记加密<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2016-03-30 21:12:21</span><span class="token key atrule">password</span><span class="token punctuation">:</span> mikemessi<span class="token key atrule">abstract</span><span class="token punctuation">:</span> 有东西被加密了<span class="token punctuation">,</span> 请输入密码查看.<span class="token key atrule">message</span><span class="token punctuation">:</span> 您好<span class="token punctuation">,</span> 这里需要密码.<span class="token key atrule">wrong_pass_message</span><span class="token punctuation">:</span> 抱歉<span class="token punctuation">,</span> 这个密码看着不太对<span class="token punctuation">,</span> 请再试试.<span class="token key atrule">wrong_hash_message</span><span class="token punctuation">:</span> 抱歉<span class="token punctuation">,</span> 这个文章不能被校验<span class="token punctuation">,</span> 不过您还是能看看解密后的内容.<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-yaml&quot; data-language=&quot;yaml&quot;&gt;&lt;code class=</summary>
      
    
    
    
    <category term="Hexo" scheme="http://ccsu.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://ccsu.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙HC-05使用介绍</title>
    <link href="http://ccsu.top/posts/596227bc/"/>
    <id>http://ccsu.top/posts/596227bc/</id>
    <published>2021-12-19T13:57:08.000Z</published>
    <updated>2020-12-29T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>常见的蓝牙模块为：HC-05主从一体蓝牙模块、HC-06从机蓝牙模块、低功耗BLE蓝牙模块(cc2540或cc2541)。</p><h1 id="一、HC-05主从一体蓝牙模块"><a href="#一、HC-05主从一体蓝牙模块" class="headerlink" title="一、HC-05主从一体蓝牙模块"></a>一、HC-05主从一体蓝牙模块</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>HC-05 蓝牙串口通讯模块（以下简称模块）具有两种工作模式：命令响应工作模式和自动连接工作模式，在自动连接工作模式下模块又可分为主（Master）、从（Slave）和回环（Loopback）三种工作角色。</p><p>  当模块处于自动连接工作模式时，将自动根据事先设定的方式进行数据传输；当模块处于命令响应工作模式时能执行下述所有AT命令，用户可向模块发送各种AT指令，为模块设定控制参数或发布控制命令。通过控制模块外部引脚（PIO11）的输入电平，可以实现模块两种工作模式的切换。</p><p>1)、PIO8 连接LED，指示模块工作状态，模块上电后闪烁，不同的状态闪烁间隔不同。<br>2)、PIO9 连接LED，指示模块连接成功，蓝牙串口匹配连接成功后，LED 长亮。<br>3)、PIO11 模块状态切换脚，高电平–&gt;AT 命令响应工作状态，低电平或悬空–&gt;蓝牙常规工作状态。<br>4)、模块上已带有复位电路，重新上电即完成复位。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094039.png" alt="img" loading="lazy"></p><h2 id="2、常用AT指令"><a href="#2、常用AT指令" class="headerlink" title="2、常用AT指令"></a>2、常用AT指令</h2><p>（AT指令不区分大小写，均以回车、换行字符结尾：\r\n。在AT模式下，波特率固定为38400）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094125.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094151.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094148.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094220.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094214.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094217.png" alt="img" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20200103104631585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FsZXhjZWw=,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><h2 id="3、使用举例—–把HC-05设置为主机步骤："><a href="#3、使用举例—–把HC-05设置为主机步骤：" class="headerlink" title="3、使用举例—–把HC-05设置为主机步骤："></a>3、使用举例—–把HC-05设置为主机步骤：</h2><p>1)、把PIO11 置高。<br>2)、给模块上电，模块会进入AT 命令响应状态，此时状态指示灯会慢闪。<br>3)、超级终端或其他串口工具，设置波特率38400，数据位8 位，停止位1 位，无校验位，无流控制。<br>4)、串口发送字符“AT+ROLE&#x3D;1\r\n”，成功返回“OK\r\n”，其中\r\n 为回车换行。<br>5)、PIO11 置低，重新上电，模块为主模块，自动搜索从模块，建立连接。</p><h2 id="4、使用举例—–让两个蓝牙模块自动配对"><a href="#4、使用举例—–让两个蓝牙模块自动配对" class="headerlink" title="4、使用举例—–让两个蓝牙模块自动配对"></a>4、使用举例—–让两个蓝牙模块自动配对</h2><p>1)、把模块1和模块2的PIO11 置高。<br>2)、给两个模块上电，模块会进入AT 命令响应状态，此时状态指示灯会慢闪。<br>3)、超级终端或其他串口工具连接两个模块，设置波特率38400，数据位8 位，停止位1 位，无校验位，无流控制。<br>4)、给两个模块发送字符“AT+PSWD&#x3D;1234\r\n”，成功返回“OK\r\n”，其中\r\n 为回车换行。（配对密码可以随便改，但要保证两个模块的配对密码一样）</p><p>5)、给模块1发送字符“AT+ROLE&#x3D;0\r\n”，成功返回“OK\r\n”。给模块2发送字符“AT+ROLE&#x3D;1\r\n”，成功返回“OK\r\n”。（把一个模块设置为主机，另一个设置为从机）</p><p>6)、把两个模块的的名字和波特率设置好。</p><p>7)、给两个模块发送字符“AT+CMODE&#x3D;1\r\n”，成功返回“OK\r\n”。（把两个模块的地址模式设置为任意地址，这样两个模块会使用配对密码自动匹配，而不管地址）</p><p>8)、PIO11 置低，重新上电，模块2为主机，会自动搜索从机模块1，建立连接。</p><p>5、使用举例—–让两个蓝牙模块唯一配对</p><p>如果使用了指令“AT+CMODE&#x3D;1\r\n”把模块设置为任意地址配对，模块在配对后会记忆最后一次配对的地址。因此两个模块完成配对后，再给两个模块发送字符“AT+CMODE&#x3D;0\r\n”，就能把模块改为唯一地址配对。模块上电后会一直搜索保存的地址，而不会和其他地址配对。</p><h1 id="二、HC-06从机蓝牙模块"><a href="#二、HC-06从机蓝牙模块" class="headerlink" title="二、HC-06从机蓝牙模块"></a>二、HC-06从机蓝牙模块</h1><h2 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>仅能作为从机。电路如下：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094352.png" alt="img" loading="lazy"></p><h2 id="2、AT指令（指令后面无-r-n）"><a href="#2、AT指令（指令后面无-r-n）" class="headerlink" title="2、AT指令（指令后面无\r\n）"></a>2、AT指令（指令后面无\r\n）</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094424.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094435.png" alt="img" loading="lazy"></p><h1 id="三、低功耗BLE蓝牙4-0模块-cc2540或cc2541"><a href="#三、低功耗BLE蓝牙4-0模块-cc2540或cc2541" class="headerlink" title="三、低功耗BLE蓝牙4.0模块(cc2540或cc2541)"></a>三、低功耗BLE蓝牙4.0模块(cc2540或cc2541)</h1><h2 id="1、介绍-2"><a href="#1、介绍-2" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>蓝牙4.0标准包含两个蓝牙标准，准确的说，是一个双模的标准，它包含传统蓝牙部分（向下兼容2.0）和低功耗蓝牙部分（Bluetooth Low Energy），顾名思义BLE的特性就是极其省电，现在市面上绝大多数的可穿戴设备都是基于BLE的。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094503.png" alt="img" loading="lazy"></p><p>功能脚说明：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094528.png" alt="img" loading="lazy"></p><h2 id="2、常用AT指令（AT指令不区分大小写，均以回车、换行字符结尾：-r-n）"><a href="#2、常用AT指令（AT指令不区分大小写，均以回车、换行字符结尾：-r-n）" class="headerlink" title="2、常用AT指令（AT指令不区分大小写，均以回车、换行字符结尾：\r\n）"></a>2、常用AT指令（AT指令不区分大小写，均以回车、换行字符结尾：\r\n）</h2><p>和HC-06一样，在未连接状态下就是AT模式了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094612.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094621.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094628.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094643.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094827.png" alt="img" loading="lazy"></p><h1 id="四、JDY-10-蓝牙4-0-BLE模块"><a href="#四、JDY-10-蓝牙4-0-BLE模块" class="headerlink" title="四、JDY-10 蓝牙4.0 BLE模块"></a>四、JDY-10 蓝牙4.0 BLE模块</h1><p>也是基于蓝牙4.0标准，可是尺寸比较小。功耗也比较小。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094911.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094917.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094925.png" alt="img" loading="lazy"></p><p>波特率支持1200,2400,4800,9600,14400,19200,38400,57600,115200。模块未连接时即为AT模式。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094946.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095008.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095015.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095026.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095034.png" alt="img" loading="lazy"></p><h1 id="五、蓝牙模块LAYOUT注意事项："><a href="#五、蓝牙模块LAYOUT注意事项：" class="headerlink" title="五、蓝牙模块LAYOUT注意事项："></a>五、蓝牙模块LAYOUT注意事项：</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095059.png" alt="img" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常见的蓝牙模块为：HC-05主从一体蓝牙模块、HC-06从机蓝牙模块、低功耗BLE蓝牙模块(cc2540或cc2541)。&lt;/p&gt;
&lt;h1 id=&quot;一、HC-05主从一体蓝牙模块&quot;&gt;&lt;a href=&quot;#一、HC-05主从一体蓝牙模块&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="硬件基础模块" scheme="http://ccsu.top/categories/%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/"/>
    
    
    <category term="蓝牙" scheme="http://ccsu.top/tags/%E8%93%9D%E7%89%99/"/>
    
    <category term="HC-05" scheme="http://ccsu.top/tags/HC-05/"/>
    
  </entry>
  
  <entry>
    <title>栈和队列</title>
    <link href="http://ccsu.top/posts/8d66b5f2/"/>
    <id>http://ccsu.top/posts/8d66b5f2/</id>
    <published>2021-08-19T13:57:08.000Z</published>
    <updated>2020-08-29T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204710.png" alt="image-20210726204709944" loading="lazy"></p><h2 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204740.png" alt="image-20210726204740231" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204751.png" alt="image-20210726204751208" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204800.png" alt="image-20210726204800939" loading="lazy"></p><h2 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204812.png" alt="image-20210726204812066" loading="lazy"></p><h3 id="出栈顺序"><a href="#出栈顺序" class="headerlink" title="出栈顺序"></a>出栈顺序</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204902.png" alt="image-20210726204902687" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204916.png" alt="image-20210726204916821" loading="lazy"></p><h1 id="二、顺序栈"><a href="#二、顺序栈" class="headerlink" title="二、顺序栈"></a>二、顺序栈</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204937.png" alt="image-20210726204937548" loading="lazy"></p><h2 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205014.png" alt="image-20210726205014664" loading="lazy"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205041.png" alt="image-20210726205041303" loading="lazy"></p><h3 id="进栈操作"><a href="#进栈操作" class="headerlink" title="进栈操作"></a>进栈操作</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205118.png" alt="image-20210726205118594" loading="lazy"></p><h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810010246.jpg" alt="image-20200624152110685" loading="lazy"></p><h3 id="读取栈顶元素"><a href="#读取栈顶元素" class="headerlink" title="读取栈顶元素"></a>读取栈顶元素</h3><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810010251.jpg" alt="image-20200624152208184" loading="lazy"></p><h2 id="另一种基本操作的实现方式"><a href="#另一种基本操作的实现方式" class="headerlink" title="另一种基本操作的实现方式"></a>另一种基本操作的实现方式</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205210.png" alt="image-20210726205210505" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205256.png" alt="image-20210726205256057" loading="lazy"></p><h2 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205358.png" alt="image-20210726205357959" loading="lazy"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205435.png" alt="image-20210726205435561" loading="lazy"></p><h1 id="三、链栈"><a href="#三、链栈" class="headerlink" title="三、链栈"></a>三、链栈</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205457.png" alt="image-20210726205457511" loading="lazy"></p><h2 id="复习单链表"><a href="#复习单链表" class="headerlink" title="复习单链表"></a>复习单链表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205518.png" alt="image-20210726205518576" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810010340.jpg" alt="image-20200624153252888" loading="lazy"></p><h2 id="链栈的定义"><a href="#链栈的定义" class="headerlink" title="链栈的定义"></a>链栈的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205556.png" alt="image-20210726205556417" loading="lazy"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205606.png" alt="image-20210726205606460" loading="lazy"></p><h1 id="四、队列"><a href="#四、队列" class="headerlink" title="四、队列"></a>四、队列</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205643.png" alt="image-20210726205643080" loading="lazy"></p><h2 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205656.png" alt="image-20210726205656372" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205707.png" alt="image-20210726205707313" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205716.png" alt="image-20210726205716597" loading="lazy"></p><h2 id="队列的基本操作"><a href="#队列的基本操作" class="headerlink" title="队列的基本操作"></a>队列的基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205730.png" alt="image-20210726205730255" loading="lazy"></p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205740.png" alt="image-20210726205740361" loading="lazy"></p><h1 id="五、顺序队列"><a href="#五、顺序队列" class="headerlink" title="五、顺序队列"></a>五、顺序队列</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205800.png" alt="image-20210726205800388" loading="lazy"></p><h2 id="顺序队列的定义"><a href="#顺序队列的定义" class="headerlink" title="顺序队列的定义"></a>顺序队列的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205828.png" alt="image-20210726205828662" loading="lazy"></p><h3 id="顺序队列的初始化"><a href="#顺序队列的初始化" class="headerlink" title="顺序队列的初始化"></a>顺序队列的初始化</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205936.png" alt="image-20210726205936490" loading="lazy"></p><h3 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210000.png" alt="image-20210726210000265" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210010.png" alt="image-20210726210010587" loading="lazy"></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210035.png" alt="image-20210726210034990" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210047.png" alt="image-20210726210046933" loading="lazy"></p><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210126.png" alt="image-20210726210126251" loading="lazy"></p><h3 id="判空-x2F-判满"><a href="#判空-x2F-判满" class="headerlink" title="判空&#x2F;判满"></a>判空&#x2F;判满</h3><p>方案一：牺牲一个存储空间</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210151.png" alt="image-20210726210151059" loading="lazy"></p><p>方案二：利用size变量记录队列长度</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210211.png" alt="image-20210726210211159" loading="lazy"></p><p>方案三：利用tag记录最后一次操作</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210223.png" alt="image-20210726210223004" loading="lazy"></p><h2 id="其它实现方式"><a href="#其它实现方式" class="headerlink" title="其它实现方式"></a>其它实现方式</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210307.png" alt="image-20210726210307014" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210328.png" alt="image-20210726210328765" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210353.png" alt="image-20210726210353025" loading="lazy"></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210420.png" alt="image-20210726210420928" loading="lazy"></p><h1 id="六、链队列"><a href="#六、链队列" class="headerlink" title="六、链队列"></a>六、链队列</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210449.png" alt="image-20210726210449654" loading="lazy"></p><h2 id="链队列的定义"><a href="#链队列的定义" class="headerlink" title="链队列的定义"></a>链队列的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210500.png" alt="image-20210726210500752" loading="lazy"></p><h2 id="链队列的基本操作"><a href="#链队列的基本操作" class="headerlink" title="链队列的基本操作"></a>链队列的基本操作</h2><h3 id="链队列的初始化"><a href="#链队列的初始化" class="headerlink" title="链队列的初始化"></a>链队列的初始化</h3><p>带头结点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210631.png" alt="image-20210726210631445" loading="lazy"></p><p>不带头结点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210647.png" alt="image-20210726210647339" loading="lazy"></p><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><p>带头节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210701.png" alt="image-20210726210701573" loading="lazy"></p><p>不带头节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210711.png" alt="image-20210726210711098" loading="lazy"></p><h3 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h3><p>带有头节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210725.png" alt="image-20210726210725504" loading="lazy"></p><p>不带头节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210736.png" alt="image-20210726210736800" loading="lazy"></p><h3 id="判满"><a href="#判满" class="headerlink" title="判满"></a>判满</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210758.png" alt="image-20210726210758825" loading="lazy"></p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210828.png" alt="image-20210726210828317" loading="lazy"></p><h1 id="七、双端队列"><a href="#七、双端队列" class="headerlink" title="七、双端队列"></a>七、双端队列</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210852.png" alt="image-20210726210852720" loading="lazy"></p><h2 id="双端队列的定义"><a href="#双端队列的定义" class="headerlink" title="双端队列的定义"></a>双端队列的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210904.png" alt="image-20210726210903964" loading="lazy"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><h3 id="对于栈的输出序列的合法性"><a href="#对于栈的输出序列的合法性" class="headerlink" title="对于栈的输出序列的合法性"></a>对于栈的输出序列的合法性</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211212.png" alt="image-20210726211211957" loading="lazy"></p><p>绿色为合法，红色为非法</p><h3 id="对于输入受限的双端队列的输出序列的合法性"><a href="#对于输入受限的双端队列的输出序列的合法性" class="headerlink" title="对于输入受限的双端队列的输出序列的合法性"></a>对于输入受限的双端队列的输出序列的合法性</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211248.png" alt="image-20210726211247998" loading="lazy"></p><p>绿色为合法，红色为非法，带下划线是在栈中不合法，但在输入受限的双端队列中合法的。</p><h3 id="对于输出受限的双端队列"><a href="#对于输出受限的双端队列" class="headerlink" title="对于输出受限的双端队列"></a>对于输出受限的双端队列</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211310.png" alt="image-20210726211310281" loading="lazy"></p><p>绿色为合法，红色为非法，带下划线是在栈中不合法，但在输出受限的双端队列中合法</p><p>这种输出受限的双端队列，看序号较大的元素输出的位置，这意味着，在它输出之前，比它小的元素的相对位置是确定的，接下来就是考虑有什么插入的方法能实现这种相对位置关系！</p><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211326.png" alt="image-20210726211326371" loading="lazy"></p><h1 id="八、栈的应用"><a href="#八、栈的应用" class="headerlink" title="八、栈的应用"></a>八、栈的应用</h1><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211346.png" alt="image-20210726211346767" loading="lazy"></p><h3 id="实际过程"><a href="#实际过程" class="headerlink" title="实际过程"></a>实际过程</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211355.png" alt="image-20210726211355389" loading="lazy"></p><h4 id="正好匹配"><a href="#正好匹配" class="headerlink" title="正好匹配"></a>正好匹配</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211417.png" alt="image-20210726211417509" loading="lazy"></p><h4 id="左右不匹配"><a href="#左右不匹配" class="headerlink" title="左右不匹配"></a>左右不匹配</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211427.png" alt="image-20210726211427595" loading="lazy"></p><h4 id="右括号单身"><a href="#右括号单身" class="headerlink" title="右括号单身"></a>右括号单身</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211437.png" alt="image-20210726211437034" loading="lazy"></p><h4 id="左括号单身"><a href="#左括号单身" class="headerlink" title="左括号单身"></a>左括号单身</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211447.png" alt="image-20210726211447361" loading="lazy"></p><h4 id="整个流程"><a href="#整个流程" class="headerlink" title="整个流程"></a>整个流程</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211516.png" alt="image-20210726211516771" loading="lazy"></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211553.png" alt="image-20210726211553287" loading="lazy"></p><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211604.png" alt="image-20210726211604921" loading="lazy"></p><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211622.png" alt="image-20210726211622556" loading="lazy"></p><h3 id="算数表达式是什么？"><a href="#算数表达式是什么？" class="headerlink" title="算数表达式是什么？"></a>算数表达式是什么？</h3><p>由三个部分组成（操作数，运算符，界限符）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211634.png" alt="image-20210726211634409" loading="lazy"></p><h3 id="前-x2F-后缀表达式的诞生"><a href="#前-x2F-后缀表达式的诞生" class="headerlink" title="前&#x2F;后缀表达式的诞生"></a>前&#x2F;后缀表达式的诞生</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211644.png" alt="image-20210726211644195" loading="lazy"></p><h3 id="中-x2F-后-x2F-前缀表达式的区别"><a href="#中-x2F-后-x2F-前缀表达式的区别" class="headerlink" title="中&#x2F;后&#x2F;前缀表达式的区别"></a>中&#x2F;后&#x2F;前缀表达式的区别</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211654.png" alt="image-20210726211654826" loading="lazy"></p><h4 id="中转后的过程："><a href="#中转后的过程：" class="headerlink" title="中转后的过程："></a>中转后的过程：</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211703.png" alt="image-20210726211703851" loading="lazy"></p><p><strong>上图中，后缀表达式的算术符的先后次序对应中缀表达式的生效的先后次序</strong>，但是这是一定的吗？</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211716.png" alt="image-20210726211716650" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211814.png" alt="image-20210726211814054" loading="lazy"></p><p>左优先原则，可保证运算顺序唯一性，以确定机算算法输出结果的唯一性！!</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211824.png" alt="image-20210726211824944" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211929.png" alt="image-20210726211929334" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211942.png" alt="image-20210726211942205" loading="lazy"></p><h4 id="机算算法实现"><a href="#机算算法实现" class="headerlink" title="机算算法实现"></a>机算算法实现</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211958.png" alt="image-20210726211958326" loading="lazy"> </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212059.png" alt="image-20210726212059658" loading="lazy"></p><h3 id="中转前的过程"><a href="#中转前的过程" class="headerlink" title="中转前的过程"></a>中转前的过程</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212125.png" alt="image-20210726212125015" loading="lazy"></p><p>中转后和中转前的区别：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212140.png" alt="image-20210726212140264" loading="lazy"></p><h4 id="中转前的机算过程："><a href="#中转前的机算过程：" class="headerlink" title="中转前的机算过程："></a>中转前的机算过程：</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212202.png" alt="image-20210726212202368" loading="lazy"></p><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212315.png" alt="image-20210726212314936" loading="lazy"></p><p>“左优先”&#x2F;“右优先”原则和左&#x2F;右操作数不是专业说法，仅供理解！</p><h2 id="表达式求值——具体代码实现"><a href="#表达式求值——具体代码实现" class="headerlink" title="表达式求值——具体代码实现"></a>表达式求值——具体代码实现</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212335.png" alt="image-20210726212335434" loading="lazy"></p><h3 id="中转后机算"><a href="#中转后机算" class="headerlink" title="中转后机算"></a>中转后机算</h3><p>手算过程：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212356.png" alt="image-20210726212356303" loading="lazy"></p><p>机算过程：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212423.png" alt="image-20210726212423771" loading="lazy"></p><h3 id="中缀表达式的计算"><a href="#中缀表达式的计算" class="headerlink" title="中缀表达式的计算"></a>中缀表达式的计算</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212506.png" alt="image-20210726212506614" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212608.png" alt="image-20210726212608258" loading="lazy"></p><p>CPU只能执行单个的加减乘除运算，上边这么搞的意义就是为了将高级程序语言编译成简单的机器码，让CPU去执行！</p><h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212630.png" alt="image-20210726212630916" loading="lazy"></p><h2 id="栈在递归中的应用"><a href="#栈在递归中的应用" class="headerlink" title="栈在递归中的应用"></a>栈在递归中的应用</h2><p>递归的过程就是函数调用的过程</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212828.png" alt="image-20210726212828055" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212846.png" alt="image-20210726212846550" loading="lazy"></p><h3 id="适合用“递归”算法解决的问题"><a href="#适合用“递归”算法解决的问题" class="headerlink" title="适合用“递归”算法解决的问题"></a>适合用“递归”算法解决的问题</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212856.png" alt="image-20210726212856325" loading="lazy"></p><p>求阶乘：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212926.png" alt="image-20210726212926663" loading="lazy"></p><p><strong>使用递归时，需要注意调用栈溢出！</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212940.png" alt="image-20210726212940735" loading="lazy"></p><p><strong>可以自定义栈将递归算法改造成非递归算法！</strong></p><p>求斐波那契数列</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212954.png" alt="image-20210726212954526" loading="lazy"></p><h3 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213001.png" alt="image-20210726213001818" loading="lazy"></p><h1 id="九、队列的应用"><a href="#九、队列的应用" class="headerlink" title="九、队列的应用"></a>九、队列的应用</h1><h2 id="树的层次遍历"><a href="#树的层次遍历" class="headerlink" title="树的层次遍历"></a>树的层次遍历</h2><p>提示：不知道树这种数据结构的同学，可以考虑先跳过本文内容，等了解树之后，再来康康～</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213113.png" alt="image-20210726213113786" loading="lazy"></p><p>详细实现内容在树的章节实现！</p><h2 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h2><p>遍历是指找出所有元素节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213124.png" alt="image-20210726213124384" loading="lazy"></p><h2 id="队列在操作系统中的应用"><a href="#队列在操作系统中的应用" class="headerlink" title="队列在操作系统中的应用"></a>队列在操作系统中的应用</h2><p><strong>CPU资源分配问题</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213132.png" alt="image-20210726213132774" loading="lazy"></p><p><strong>打印数据缓冲区</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213144.png" alt="image-20210726213144535" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、栈&quot;&gt;&lt;a href=&quot;#一、栈&quot; class=&quot;headerlink&quot; title=&quot;一、栈&quot;&gt;&lt;/a&gt;一、栈&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wushuai2000/PicGo/main</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://ccsu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="考研" scheme="http://ccsu.top/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="栈" scheme="http://ccsu.top/tags/%E6%A0%88/"/>
    
    <category term="队列" scheme="http://ccsu.top/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://ccsu.top/posts/c56898db/"/>
    <id>http://ccsu.top/posts/c56898db/</id>
    <published>2021-08-19T13:57:08.000Z</published>
    <updated>2020-08-29T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、排序的基本概念"><a href="#一、排序的基本概念" class="headerlink" title="一、排序的基本概念"></a>一、排序的基本概念</h1><h2 id="1-排序算法的评价指标"><a href="#1-排序算法的评价指标" class="headerlink" title="1.排序算法的评价指标"></a>1.排序算法的评价指标</h2><ul><li>时间复杂度</li><li>空间复杂度</li><li>稳定性</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710105753.png" alt="image-20210626135434482" loading="lazy"></p><h2 id="2-排序算法的分类"><a href="#2-排序算法的分类" class="headerlink" title="2.排序算法的分类"></a>2.排序算法的分类</h2><ul><li>内部排序</li><li>外部排序</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710131801.png" alt="image-20210710131801614" loading="lazy"></p><h2 id="3-知识回顾与重要考点"><a href="#3-知识回顾与重要考点" class="headerlink" title="3.知识回顾与重要考点"></a>3.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710131822.png" alt="image-20210710131822797" loading="lazy"></p><h1 id="二、插入排序"><a href="#二、插入排序" class="headerlink" title="二、插入排序"></a>二、插入排序</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710143708.gif" alt="img" loading="lazy"></p><h2 id="1-直接插入排序"><a href="#1-直接插入排序" class="headerlink" title="1.直接插入排序"></a>1.直接插入排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//直接插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">//将各元素插入已排好序的序列中</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">//若A[i]关键字小于前驱</span>        <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//用temp暂存A[i]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">//检查所有前面已排好序的元素</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//所有大于temp的元素都向后挪位 </span>            <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>         <span class="token comment">//复制到插入位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-直接插入排序（带哨兵）"><a href="#2-直接插入排序（带哨兵）" class="headerlink" title="2.直接插入排序（带哨兵）"></a>2.直接插入排序（带哨兵）</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//直接插入排序（带哨兵）</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                       <span class="token comment">//依次将A[2]~A[n]插入到前面已排序序列</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                   <span class="token comment">//若A[1]关键码小于其前驱，将A[i]插入有序表</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//复制为哨兵，A[0]不存放元素</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token comment">//从后往前查找待插入位置</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">//向后挪位</span>            <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//复制到插入位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-折半插入排序"><a href="#3-折半插入排序" class="headerlink" title="3.折半插入排序"></a>3.折半插入排序</h2><blockquote><ul><li>当 low &gt; high 时折半查找停止，应将 [low, i - 1] 内的元素全部右移，并将 A[0] 复制到 low 所指位置</li><li>当 A[mid] &#x3D; A[0] 时，为了保证算法的“稳定性”，应继续在 mid 所指位置右边寻找插入位置</li></ul></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//折半插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token punctuation">,</span>low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>               <span class="token comment">//依次将a[2]~a[n]插入到前面的已排序序列</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//将a[i]暂存到a[0]</span>        low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>high<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment">//设置折半查找范围</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>            <span class="token comment">//折半查找（默认递增有序）</span>        <span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//取中间点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">//查找左半子表</span>            <span class="token punctuation">&#123;</span>                high <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                    <span class="token comment">//查找有半子表</span>            <span class="token punctuation">&#123;</span>                low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//找到位置后再移动</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//统一后移元素，空出插入位置</span>        <span class="token punctuation">&#125;</span>           a<span class="token punctuation">[</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//插入操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-知识回顾与重要考点"><a href="#4-知识回顾与重要考点" class="headerlink" title="4.知识回顾与重要考点"></a>4.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626135434.png" alt="image-20210626135434482" loading="lazy"></p><h2 id="5-测试代码"><a href="#5-测试代码" class="headerlink" title="5.测试代码"></a>5.测试代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接插入排序（带哨兵）</span><span class="token keyword">void</span> <span class="token function">InsertSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//折半插入排序</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">InsertSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InsertSort2</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstring</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstring</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//直接插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">//将各元素插入已排好序的序列中</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">//若A[i]关键字小于前驱</span>        <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//用temp暂存A[i]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">//检查所有前面已排好序的元素</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//所有大于temp的元素都向后挪位 </span>            <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>         <span class="token comment">//复制到插入位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//直接插入排序（带哨兵）</span><span class="token keyword">void</span> <span class="token function">InsertSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                       <span class="token comment">//依次将A[2]~A[n]插入到前面已排序序列</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                   <span class="token comment">//若A[1]关键码小于其前驱，将A[i]插入有序表</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//复制为哨兵，A[0]不存放元素</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token comment">//从后往前查找待插入位置</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">//向后挪位</span>            <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//复制到插入位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//折半插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token punctuation">,</span>low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>               <span class="token comment">//依次将a[2]~a[n]插入到前面的已排序序列</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//将a[i]暂存到a[0]</span>        low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>high<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment">//设置折半查找范围</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>            <span class="token comment">//折半查找（默认递增有序）</span>        <span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//取中间点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">//查找左半子表</span>            <span class="token punctuation">&#123;</span>                high <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                    <span class="token comment">//查找有半子表</span>            <span class="token punctuation">&#123;</span>                low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//统一后移元素，空出插入位置</span>            <span class="token punctuation">&#125;</span>               a<span class="token punctuation">[</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//插入操作</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、希尔排序"><a href="#三、希尔排序" class="headerlink" title="三、希尔排序"></a>三、希尔排序</h1><blockquote><ul><li>希尔排序：先追求表中元素部分有序，再逐渐逼近全局有序</li><li>时间复杂度：和增量序列d,d2,d3…的选择有关，目前无法用数学手段证明确切的时间复杂度最坏时间复杂度为O（n^2），当n在某个范围内时，可达O（n^13）</li><li>适用性：仅适用于顺序表，不适用于链表</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710144127.gif" alt="img" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">Shellsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//希尔排序</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">Shellsort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstring</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//希尔排序</span><span class="token keyword">void</span> <span class="token function">Shellsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token comment">//a[0]只是暂存单元，不是哨兵，当j&lt;=0时，插入位置已到</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>d<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>d<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">=</span>d<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">//步长变化</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//需将a[i]插入有序增量子表</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//暂存在a[0]中</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span>d<span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">-=</span>d<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//记录后移，查找插入的位置</span>                <span class="token punctuation">&#125;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//插入</span>            <span class="token punctuation">&#125;</span><span class="token comment">//if</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识回顾与重要考点</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626200257.png" alt="image-20210626200257887" loading="lazy"></p><h1 id="四、冒泡排序"><a href="#四、冒泡排序" class="headerlink" title="四、冒泡排序"></a>四、冒泡排序</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710144148.gif" alt="img" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//交换两个元素的值</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">//表示本趟冒泡是否发生交换的标志</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token comment">//一趟冒泡过程</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//若为逆序</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//交换</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment">//本趟遍历没有发生交换，说明表已经有序</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">BubbleSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识回顾与重要考点</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626204924.png" alt="image-20210626204924487" loading="lazy"></p><h1 id="五、快速排序"><a href="#五、快速排序" class="headerlink" title="五、快速排序"></a>五、快速排序</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710144206.gif" alt="img" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//用第一个元素将待排序序列划分成左右两个部分</span><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pivot<span class="token operator">=</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//第一个元素作为枢轴</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>           <span class="token comment">//用low、high搜索枢轴的最终位置</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> high<span class="token operator">--</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//比枢轴小的元素移到到左端</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> low<span class="token operator">++</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//比枢轴大的元素移到到右端</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>              <span class="token comment">//枢轴元素存放到最终位置</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span>                  <span class="token comment">//返回存放枢轴的最终位置</span><span class="token punctuation">&#125;</span><span class="token comment">//快速排序</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>          <span class="token comment">//递归跳出的条件</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivotpos <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//划分</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotpos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//划分左子表</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> pivotpos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//划分右子表</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-时间复杂度分析"><a href="#1-时间复杂度分析" class="headerlink" title="1.时间复杂度分析"></a>1.时间复杂度分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213801.png" alt="image-20210626213801297" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213618.png" alt="image-20210626213618878" loading="lazy"></p><h3 id="a-比较好的情况"><a href="#a-比较好的情况" class="headerlink" title="a.比较好的情况"></a>a.比较好的情况</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213630.png" alt="image-20210626213630164" loading="lazy"></p><h3 id="b-最坏的情况"><a href="#b-最坏的情况" class="headerlink" title="b.最坏的情况"></a>b.最坏的情况</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213722.png" alt="image-20210626213722500" loading="lazy"></p><h2 id="2-知识回顾与重要考点"><a href="#2-知识回顾与重要考点" class="headerlink" title="2.知识回顾与重要考点"></a>2.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213400.png" alt="image-20210626213400604" loading="lazy"></p><h1 id="六、简单选择排序"><a href="#六、简单选择排序" class="headerlink" title="六、简单选择排序"></a>六、简单选择排序</h1><blockquote><p>  选择排序：每一趟在待排序元素中选取关键字最小（或最大）的元素加入有序子序列</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710085021.gif" alt="img" loading="lazy"></p><h2 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//简单选择排序</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">SelectSort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstring</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//简单选择排序</span><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token comment">//一共进行n-1趟</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">//记录最小元素的位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">//在a[i...n-1]中选择最小的元素</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//更新最小元素的位置</span>            <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span>        <span class="token comment">//交换元素位置，共移动元素3次</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-算法性能分析"><a href="#2-算法性能分析" class="headerlink" title="2.算法性能分析"></a>2.算法性能分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210627202749.png" alt="image-20210627202749017" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210627202804.png" alt="image-20210627202804392" loading="lazy"></p><h2 id="3-知识回顾与重要考点-1"><a href="#3-知识回顾与重要考点-1" class="headerlink" title="3.知识回顾与重要考点"></a>3.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210627202827.png" alt="image-20210627202827888" loading="lazy"></p><h1 id="七、堆排序"><a href="#七、堆排序" class="headerlink" title="七、堆排序"></a>七、堆排序</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144534.png" alt="image-20210701144534674" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710144242.gif" alt="img" loading="lazy"></p><h2 id="1-什么是堆（Heap）"><a href="#1-什么是堆（Heap）" class="headerlink" title="1.什么是堆（Heap）"></a>1.什么是堆（Heap）</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144654.png" alt="image-20210701144654349" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144612.png" alt="image-20210701144612838" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144710.png" alt="image-20210701144710878" loading="lazy"></p><h2 id="2-建立大根堆"><a href="#2-建立大根堆" class="headerlink" title="2.建立大根堆"></a>2.建立大根堆</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144859.png" alt="image-20210701144859918" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145012.png" alt="image-20210701145012182" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145040.png" alt="image-20210701145040913" loading="lazy"></p><h2 id="3-算法效率分析"><a href="#3-算法效率分析" class="headerlink" title="3.算法效率分析"></a>3.算法效率分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145147.png" alt="image-20210701145147467" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145203.png" alt="image-20210701145203061" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145213.png" alt="image-20210701145213798" loading="lazy"></p><blockquote><p>  稳定性：不稳定</p></blockquote><h2 id="4-代码测试"><a href="#4-代码测试" class="headerlink" title="4.代码测试"></a>4.代码测试</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//将以k为根的子树调整为大根堆</span><span class="token keyword">void</span> <span class="token function">HeadAdjust</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//a[0]暂存子树的根结点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">//沿着key较大的子结点向下筛选</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//取得key较大的子结点的下标</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">//筛选结果</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//将a[i]调整到双亲结点上</span>            k <span class="token operator">=</span> i<span class="token punctuation">;</span>              <span class="token comment">//修改k值，以便继续向下筛选</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//被筛选结点的值放入最终位置</span><span class="token punctuation">&#125;</span><span class="token comment">//建立大根堆</span><span class="token keyword">void</span> <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token comment">//从后往前调整所有非终端结点</span>    <span class="token punctuation">&#123;</span>        <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//堆排序的完整逻辑</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//建立初始的堆</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token comment">//n-1趟的交换和建堆过程</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//堆顶元素和堆底元素交换</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把剩余的待排序元素整理成堆</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">HeapSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-堆的插入"><a href="#5-堆的插入" class="headerlink" title="5.堆的插入"></a>5.堆的插入</h2><p>以小根堆为例：</p><p>对于小根堆，新元素放到表尾，与父节点对比，若新元素比父节点更小，则将二者互换。新元素就这样一路“上升”，直到无法继续上升为止</p><h2 id="6-堆的删除"><a href="#6-堆的删除" class="headerlink" title="6.堆的删除"></a>6.堆的删除</h2><p>以小根堆为例：</p><p>被删除的元素用堆底元素替代，然后让该元素不断“下坠”，直到无法下坠为止</p><h2 id="7-知识回顾与重要考点"><a href="#7-知识回顾与重要考点" class="headerlink" title="7.知识回顾与重要考点"></a>7.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145313.png" alt="image-20210701145313000" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701151154.png" alt="image-20210701151154798" loading="lazy"></p><h1 id="八、归并排序"><a href="#八、归并排序" class="headerlink" title="八、归并排序"></a>八、归并排序</h1><h2 id="1-什么是归并排序"><a href="#1-什么是归并排序" class="headerlink" title="1.什么是归并排序"></a>1.什么是归并排序</h2><blockquote><p>  归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p><ul><li>把长度为n的输入序列分成两个长度为n&#x2F;2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710091212.gif" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701165158.png" alt="image-20210701165158900" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701165214.png" alt="image-20210701165214015" loading="lazy"></p><h2 id="2-算法效率分析"><a href="#2-算法效率分析" class="headerlink" title="2.算法效率分析"></a>2.算法效率分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701165325.png" alt="image-20210701165325656" loading="lazy"></p><h2 id="3-代码测试"><a href="#3-代码测试" class="headerlink" title="3.代码测试"></a>3.代码测试</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710092209.png" alt="image-20210710092209148" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a[low...mid]和a[mid+1...high]各自有序，将两个部分归并</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>low<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//将a中所有元素复制到b中</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//将最小值复制到a中</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>   a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>  a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment">//从中间划分</span>        <span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//对左半部分归并排序</span>        <span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对右半部分归并排序</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//归并</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-知识回顾与重要考点-1"><a href="#4-知识回顾与重要考点-1" class="headerlink" title="4.知识回顾与重要考点"></a>4.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701165442.png" alt="image-20210701165442057" loading="lazy"></p><h1 id="九、基数排序"><a href="#九、基数排序" class="headerlink" title="九、基数排序"></a>九、基数排序</h1><h2 id="1-什么是基数排序"><a href="#1-什么是基数排序" class="headerlink" title="1.什么是基数排序"></a>1.什么是基数排序</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101349.gif" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101615.png" alt="image-20210710101615386" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101734.png" alt="image-20210710101734260" loading="lazy"></p><h2 id="2-算法效率分析-1"><a href="#2-算法效率分析-1" class="headerlink" title="2.算法效率分析"></a>2.算法效率分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101938.png" alt="image-20210710101938112" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101944.png" alt="image-20210710101944832" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102011.png" alt="image-20210710102011950" loading="lazy"></p><h2 id="3-基数排序的应用"><a href="#3-基数排序的应用" class="headerlink" title="3.基数排序的应用"></a>3.基数排序的应用</h2><blockquote><p>  基数排序擅长解决的问题<br>  ①数据元素的关键字可以方便地拆分为d组，且d较小<br>  ②每组关键字的取值范围不大，即r较小<br>  ③数据元素个数n较大</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102041.png" alt="image-20210710102041125" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102128.png" alt="image-20210710102128216" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102149.png" alt="image-20210710102149345" loading="lazy"></p><h2 id="4-知识回顾与重要考点-2"><a href="#4-知识回顾与重要考点-2" class="headerlink" title="4.知识回顾与重要考点"></a>4.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102215.png" alt="image-20210710102215220" loading="lazy"></p><h1 id="十、外部排序"><a href="#十、外部排序" class="headerlink" title="十、外部排序"></a>十、外部排序</h1><blockquote><p>  当所要排序的的数据量太多或者文件太大，无法直接在内存里排序，而需要依赖外部设备时，就会使用到外部排序。</p></blockquote><h2 id="1-外存与内存之间的数据交换"><a href="#1-外存与内存之间的数据交换" class="headerlink" title="1.外存与内存之间的数据交换"></a>1.外存与内存之间的数据交换</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132055.png" alt="image-20210710132055359" loading="lazy"></p><h2 id="2、算法描述"><a href="#2、算法描述" class="headerlink" title="2、算法描述"></a>2、算法描述</h2><p>  假设文件需要分成k块读入，需要从小到大进行排序。</p><ol><li>依次读入每个文件块，在内存中对当前文件块进行排序（应用恰当的内排序算法），此时，每块文件相当于一个由小到大排列的有序队列；</li><li>在内存中建立一个最小堆，读入每块文件的队列头；</li><li>弹出堆顶元素，如果元素来自第i块，则从第i块文件中补充一个元素到最小值堆。弹出的元素暂存至临时数组；</li><li>当临时数组存满时，将数组写至磁盘，并清空数组内容；</li><li>重复过程3、4，直至所有文件块读取完毕。</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132532.jpeg" alt="这里写图片描述" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132608.jpeg" alt="这里写图片描述" loading="lazy"></p><h2 id="3-影响外部排序效率的因素"><a href="#3-影响外部排序效率的因素" class="headerlink" title="3.影响外部排序效率的因素"></a>3.影响外部排序效率的因素</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132653.png" alt="image-20210710132653144" loading="lazy"></p><h2 id="4-优化思路"><a href="#4-优化思路" class="headerlink" title="4.优化思路"></a>4.优化思路</h2><h3 id="1-多路归并"><a href="#1-多路归并" class="headerlink" title="1.多路归并"></a>1.多路归并</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132838.png" alt="image-20210710132838415" loading="lazy"></p><h3 id="2-减少初始归并段数量"><a href="#2-减少初始归并段数量" class="headerlink" title="2.减少初始归并段数量"></a>2.减少初始归并段数量</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132938.png" alt="image-20210710132938509" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132949.png" alt="image-20210710132949735" loading="lazy"></p><h2 id="5-知识回顾与重要考点"><a href="#5-知识回顾与重要考点" class="headerlink" title="5.知识回顾与重要考点"></a>5.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710133141.png" alt="image-20210710133141478" loading="lazy"></p><h2 id="6-败者树优化多路平衡归并"><a href="#6-败者树优化多路平衡归并" class="headerlink" title="6.败者树优化多路平衡归并"></a>6.败者树优化多路平衡归并</h2><h3 id="1-多路平衡归并带来的问题"><a href="#1-多路平衡归并带来的问题" class="headerlink" title="1.多路平衡归并带来的问题"></a>1.多路平衡归并带来的问题</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710133857.png" alt="image-20210710133857696" loading="lazy"></p><h3 id="2-败者树的构建"><a href="#2-败者树的构建" class="headerlink" title="2.败者树的构建"></a>2.败者树的构建</h3><p>败者树——可视为一棵完全二叉树（多了一个头头）。k个叶结点分别是当前参加比较的元素，非叶子结点用来记忆左右子树中的“失败者”，而让胜者往上继续进行比较，一直到根结点。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710134049.png" alt="image-20210710134049287" loading="lazy"></p><h3 id="3-败者树的使用"><a href="#3-败者树的使用" class="headerlink" title="3.败者树的使用"></a>3.败者树的使用</h3><p>基于已经构建好的败者树，选出新的胜者只需进行3场比赛</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710135449.png" alt="image-20210710135448955" loading="lazy"></p><h3 id="4-败者树在多路平衡归并中的应用"><a href="#4-败者树在多路平衡归并中的应用" class="headerlink" title="4.败者树在多路平衡归并中的应用"></a>4.败者树在多路平衡归并中的应用</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710135622.png" alt="image-20210710135622129" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710135956.png" alt="image-20210710135956927" loading="lazy"></p><h3 id="5-败者树的实现思路"><a href="#5-败者树的实现思路" class="headerlink" title="5.败者树的实现思路"></a>5.败者树的实现思路</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140044.png" alt="image-20210710140044837" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140057.png" alt="image-20210710140057547" loading="lazy"></p><h3 id="6-知识回顾与重要考点"><a href="#6-知识回顾与重要考点" class="headerlink" title="6.知识回顾与重要考点"></a>6.知识回顾与重要考点</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140142.png" alt="image-20210710140142140" loading="lazy"></p><h2 id="7-置换选择排序"><a href="#7-置换选择排序" class="headerlink" title="7.置换选择排序"></a>7.置换选择排序</h2><h3 id="1-土办法构造初始归并段"><a href="#1-土办法构造初始归并段" class="headerlink" title="1.土办法构造初始归并段"></a>1.土办法构造初始归并段</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140511.png" alt="image-20210710140511296" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140530.png" alt="image-20210710140529938" loading="lazy"></p><h3 id="2-置换-选择排序"><a href="#2-置换-选择排序" class="headerlink" title="2.置换-选择排序"></a>2.置换-选择排序</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140614.png" alt="image-20210710140614559" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140643.png" alt="image-20210710140643706" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140657.png" alt="image-20210710140657231" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140805.png" alt="image-20210710140805214" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140836.png" alt="image-20210710140836055" loading="lazy"></p><h3 id="3-知识回顾与重要考点-2"><a href="#3-知识回顾与重要考点-2" class="headerlink" title="3.知识回顾与重要考点"></a>3.知识回顾与重要考点</h3><p>设初始待排文件为FI，初始归并段输出文件为FO，内存工作区为WA,FO和WA的初始状态为空，WA可容纳ν个记录。置换-选择算法的步骤如下<br>1）从H输入w个记录到工作区WA<br>2）从WA中选出其中关键字取最小值的记录，记为 MINIMAX记录。<br>3）将 MINIMAX记录输出到FO中去。<br>4）若H不空，则从H输入下一个记录到WA中。<br>5）从WA中所有关键字比MINIMAX记录的关键字大的记录中选出最小关键字记录，作为新的MINIMAX记录。<br>6）重复3）<del>5），直至在WA中选不出新的 MINIMAX记录为止，由此得到一个初始归并段，输出一个归并段的结束标志到FO中去。<br>7）重复2）</del>6），直至WA为空。由此得到全部初始归并段。</p><h2 id="8-最佳归并树"><a href="#8-最佳归并树" class="headerlink" title="8.最佳归并树"></a>8.最佳归并树</h2><h3 id="1-归并树的神秘性质"><a href="#1-归并树的神秘性质" class="headerlink" title="1.归并树的神秘性质"></a>1.归并树的神秘性质</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141511.png" alt="image-20210710141511836" loading="lazy"></p><h3 id="2-构造2路归并的最佳归并树"><a href="#2-构造2路归并的最佳归并树" class="headerlink" title="2.构造2路归并的最佳归并树"></a>2.构造2路归并的最佳归并树</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141550.png" alt="image-20210710141550078" loading="lazy"></p><h3 id="3-多路归并"><a href="#3-多路归并" class="headerlink" title="3.多路归并"></a>3.多路归并</h3><h4 id="1-多路归并的情况"><a href="#1-多路归并的情况" class="headerlink" title="1.多路归并的情况"></a>1.多路归并的情况</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141627.png" alt="image-20210710141627266" loading="lazy"></p><h4 id="2-多路归并的最佳归并树"><a href="#2-多路归并的最佳归并树" class="headerlink" title="2.多路归并的最佳归并树"></a>2.多路归并的最佳归并树</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141813.png" alt="image-20210710141813206" loading="lazy"></p><h4 id="3-减少一个归并段"><a href="#3-减少一个归并段" class="headerlink" title="3.减少一个归并段"></a>3.减少一个归并段</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141921.png" alt="image-20210710141921694" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142007.png" alt="image-20210710142007085" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142029.png" alt="image-20210710142029371" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142053.png" alt="image-20210710142053596" loading="lazy"></p><h4 id="4-添加虚段的数量"><a href="#4-添加虚段的数量" class="headerlink" title="4.添加虚段的数量"></a>4.添加虚段的数量</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142615.png" alt="image-20210710142614977" loading="lazy"></p><blockquote><ul><li>应用：进行8路归并，初始归并段是19，需要添加几个归并段？</li><li>k&#x3D;8</li><li>u&#x3D;(19-1)%(7-1)&#x3D;4；需补充(k-1)-u&#x3D;(8-1)-4&#x3D;3个长度为0的虚段</li><li>验证：n<del>0</del>&#x3D;(22-1)&#x2F;(8-1)&#x3D;3可以除得尽</li></ul></blockquote><h4 id="5-知识回顾与重要考点-1"><a href="#5-知识回顾与重要考点-1" class="headerlink" title="5.知识回顾与重要考点"></a>5.知识回顾与重要考点</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142752.png" alt="image-20210710142752868" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、排序的基本概念&quot;&gt;&lt;a href=&quot;#一、排序的基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、排序的基本概念&quot;&gt;&lt;/a&gt;一、排序的基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-排序算法的评价指标&quot;&gt;&lt;a href=&quot;#1-排序算法的评价指标&quot; c</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://ccsu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="考研" scheme="http://ccsu.top/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="排序" scheme="http://ccsu.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>串</title>
    <link href="http://ccsu.top/posts/58d9577e/"/>
    <id>http://ccsu.top/posts/58d9577e/</id>
    <published>2021-07-24T13:57:08.000Z</published>
    <updated>2021-07-24T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、串"><a href="#一、串" class="headerlink" title="一、串"></a>一、串</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005353.png" alt="image-20210727005353732" loading="lazy"></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005406.png" alt="image-20210727005406740" loading="lazy"></p><h2 id="串V-S线性表"><a href="#串V-S线性表" class="headerlink" title="串V.S线性表"></a>串V.S线性表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005523.png" alt="image-20210727005523561" loading="lazy"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005607.png" alt="image-20210727005607107" loading="lazy"></p><h3 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005635.png" alt="image-20210727005635750" loading="lazy"></p><h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005701.png" alt="image-20210727005701467" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005742.png" alt="image-20210727005742561" loading="lazy"></p><h1 id="二、存储结构"><a href="#二、存储结构" class="headerlink" title="二、存储结构"></a>二、存储结构</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005758.png" alt="image-20210727005758794" loading="lazy"></p><h2 id="顺序存储与堆分配存储"><a href="#顺序存储与堆分配存储" class="headerlink" title="顺序存储与堆分配存储"></a>顺序存储与堆分配存储</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005855.png" alt="image-20210727005855765" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005924.png" alt="image-20210727005924608" loading="lazy"></p><p>方案二的字符串长度不可以超过255</p><h2 id="块链存储"><a href="#块链存储" class="headerlink" title="块链存储"></a>块链存储</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005953.png" alt="image-20210727005953465" loading="lazy"></p><h2 id="基本操作的实现"><a href="#基本操作的实现" class="headerlink" title="基本操作的实现"></a>基本操作的实现</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010016.png" alt="image-20210727010016555" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010029.png" alt="image-20210727010029230" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010039.png" alt="image-20210727010038986" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010051.png" alt="image-20210727010051797" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010105.png" alt="image-20210727010105881" loading="lazy"></p><h1 id="三、模式匹配"><a href="#三、模式匹配" class="headerlink" title="三、模式匹配"></a>三、模式匹配</h1><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012517.jpg" alt="image-20200803220247955" loading="lazy"></p><h2 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h2><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012522.jpg" alt="image-20200803221038452" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012527.jpg" alt="image-20200803224601338" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012623.jpg" alt="image-20200803231428235" loading="lazy"></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>最好时间复杂度</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012632.jpg" alt="image-20200803231735244" loading="lazy"></p><p>最坏时间复杂度</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012636.jpg" alt="image-20200803232029485" loading="lazy"></p><p>思想总结</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012908.jpg" alt="image-20200803232154853" loading="lazy">四、KMP 算法</p><p>简单模式匹配的缺点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010646.png" alt="image-20210727010646197" loading="lazy"></p><p>改进思想</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010709.png" alt="image-20210727010709758" loading="lazy"></p><p>情况一</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010730.png" alt="image-20210727010730593" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010746.png" alt="image-20210727010746569" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010800.png" alt="image-20210727010759979" loading="lazy"></p><p>情况二</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012945.jpg" alt="image-20200804224917143" loading="lazy"></p><p>情况三：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010926.png" alt="image-20210727010926790" loading="lazy"></p><p>4这里有可能多比较一次：因为4和6已经不等，但是1和6相同，这里仍会期待1和6相同，再进行一次比较，所以这里它并不是最优的算法，但是相比于朴素模式匹配，它还是少对比了两次</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010937.png" alt="image-20210727010937811" loading="lazy"></p><p>同理j指向3时少对比1次</p><p>总结：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010955.png" alt="image-20210727010955129" loading="lazy"></p><h2 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011012.png" alt="image-20210727011012022" loading="lazy"></p><h3 id="求next数组"><a href="#求next数组" class="headerlink" title="求next数组"></a>求next数组</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011116.png" alt="image-20210727011116270" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011214.png" alt="image-20210727011214643" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011236.png" alt="image-20210727011236014" loading="lazy"></p><h3 id="代码实现求next数组"><a href="#代码实现求next数组" class="headerlink" title="代码实现求next数组"></a>代码实现求next数组</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011246.png" alt="image-20210727011246482" loading="lazy"></p><h2 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011258.png" alt="image-20210727011258409" loading="lazy"></p><h1 id="四、KMP-算法"><a href="#四、KMP-算法" class="headerlink" title="四、KMP 算法"></a>四、KMP 算法</h1><p>简单模式匹配的缺点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010646.png" alt="image-20210727010646197" loading="lazy"></p><p>改进思想</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010709.png" alt="image-20210727010709758" loading="lazy"></p><p>情况一</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010730.png" alt="image-20210727010730593" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010746.png" alt="image-20210727010746569" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010800.png" alt="image-20210727010759979" loading="lazy"></p><p>情况二</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012945.jpg" alt="image-20200804224917143" loading="lazy"></p><p>情况三：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010926.png" alt="image-20210727010926790" loading="lazy"></p><p>4这里有可能多比较一次：因为4和6已经不等，但是1和6相同，这里仍会期待1和6相同，再进行一次比较，所以这里它并不是最优的算法，但是相比于朴素模式匹配，它还是少对比了两次</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010937.png" alt="image-20210727010937811" loading="lazy"></p><p>同理j指向3时少对比1次</p><p>总结：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010955.png" alt="image-20210727010955129" loading="lazy"></p><h2 id="具体代码实现-1"><a href="#具体代码实现-1" class="headerlink" title="具体代码实现"></a>具体代码实现</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011012.png" alt="image-20210727011012022" loading="lazy"></p><h3 id="求next数组-1"><a href="#求next数组-1" class="headerlink" title="求next数组"></a>求next数组</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011116.png" alt="image-20210727011116270" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011214.png" alt="image-20210727011214643" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011236.png" alt="image-20210727011236014" loading="lazy"></p><h3 id="代码实现求next数组-1"><a href="#代码实现求next数组-1" class="headerlink" title="代码实现求next数组"></a>代码实现求next数组</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011246.png" alt="image-20210727011246482" loading="lazy"></p><h2 id="回顾总结-1"><a href="#回顾总结-1" class="headerlink" title="回顾总结"></a>回顾总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011258.png" alt="image-20210727011258409" loading="lazy"></p><h1 id="五、KMP-算法的优化"><a href="#五、KMP-算法的优化" class="headerlink" title="五、KMP 算法的优化"></a>五、KMP 算法的优化</h1><h2 id="KMP算法存在的问题"><a href="#KMP算法存在的问题" class="headerlink" title="KMP算法存在的问题"></a>KMP算法存在的问题</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011317.png" alt="image-20210727011317097" loading="lazy"></p><p>例子2：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011359.png" alt="image-20210727011359659" loading="lazy"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011418.png" alt="image-20210727011418148" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、串&quot;&gt;&lt;a href=&quot;#一、串&quot; class=&quot;headerlink&quot; title=&quot;一、串&quot;&gt;&lt;/a&gt;一、串&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wushuai2000/PicGo/main</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://ccsu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="考研" scheme="http://ccsu.top/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="串" scheme="http://ccsu.top/tags/%E4%B8%B2/"/>
    
    <category term="KMP" scheme="http://ccsu.top/tags/KMP/"/>
    
    <category term="模式匹配" scheme="http://ccsu.top/tags/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="http://ccsu.top/posts/40f24371/"/>
    <id>http://ccsu.top/posts/40f24371/</id>
    <published>2021-07-12T13:57:08.000Z</published>
    <updated>2021-07-12T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、线性表"><a href="#一、线性表" class="headerlink" title="一、线性表"></a>一、线性表</h1><h2 id="线性表的基本概念"><a href="#线性表的基本概念" class="headerlink" title="线性表的基本概念"></a>线性表的基本概念</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165456.png" alt="image-20210726165456169" loading="lazy"><br>数据结构的三要素：逻辑结构、数据的运算、存储结构（物理结构)</p><h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><p>线性表是具有相同数据类型的n(n&gt;&#x3D;0)个元素的有限序列。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165542.png" alt="image-20210726165542066" loading="lazy"></p><h2 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210714142852.png" alt="image-20210714142852531" loading="lazy"></p><h2 id="什么时候要传入参数的引用“-amp-”？"><a href="#什么时候要传入参数的引用“-amp-”？" class="headerlink" title="什么时候要传入参数的引用“&amp;”？"></a>什么时候要传入参数的引用“&amp;”？</h2><p>一种是值类型，使用时会直接复制原值，修改参数不会影响原值</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165629.png" alt="image-20210726165629504" loading="lazy"></p><p>一种是引用类型，使用时操作的是原值，修改时直接修改原值！（C语言不支持这种引用类型！）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165653.png" alt="image-20210726165653031" loading="lazy"></p><h2 id="为什么要实现对数据结构的基本操作？"><a href="#为什么要实现对数据结构的基本操作？" class="headerlink" title="为什么要实现对数据结构的基本操作？"></a>为什么要实现对数据结构的基本操作？</h2><ol><li>团队合作编程，你定义的数据结构要让别人能够很方便的使用（封装）</li><li>将常用的操作&#x2F;运算封装称函数，避免重复工作，降低出错风险。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165707.png" alt="image-20210726165707503" loading="lazy"></p><p>注意⚠️：位序是用1开始计算的！！！</p><h1 id="二、顺序表"><a href="#二、顺序表" class="headerlink" title="二、顺序表"></a>二、顺序表</h1><h3 id="顺序表的基本概念"><a href="#顺序表的基本概念" class="headerlink" title="顺序表的基本概念"></a>顺序表的基本概念</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165751.png" alt="image-20210726165751315" loading="lazy"></p><h3 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165814.png" alt="image-20210726165814325" loading="lazy"></p><h3 id="顺序表的初始化"><a href="#顺序表的初始化" class="headerlink" title="顺序表的初始化"></a>顺序表的初始化</h3><h4 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165935.png" alt="image-20210726165934947" loading="lazy"></p><p>具体实现：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165957.png" alt="image-20210726165957878" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//初始化(静态分配)</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//将所有元素的初始值默认设置为0</span>        <span class="token comment">//这一步其实可以省略，但是省略之后，有可能受到内存中"脏数据"的影响</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h5><ol><li>如果“数组”存满留怎么办？</li></ol><p>可以放弃治疗，顺序表长刚开始确定后就无法更改（存储空间是静态的）</p><ol start="2"><li>如果一开始就声明一个很大的内存空间呢？会存在什么问题？</li></ol><p>浪费，会造成大量的浪费。</p><h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170057.png" alt="image-20210726170057124" loading="lazy"></p><p>具体实现方式</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170149.png" alt="image-20210726170149840" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//初始化（动态方式）</span>bool <span class="token function">InitList</span><span class="token punctuation">(</span>SeqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//用 malloc 函数申请一片连续的存储空间</span>    L<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>InitSize<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token comment">//要细心呀，这里不小心写成了赋值语句，但是没有报错，找了半天错误！</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//(int *) 是指针的强制类型转换</span>    L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>MaxSize<span class="token operator">=</span>InitSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170235.png" alt="image-20210726170235236" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170253.png" alt="image-20210726170253436" loading="lazy"></p><h3 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>ListInsert(&amp;L,i,e):插入操作。在表L中的第i个位置上插入指定元素e。 </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170337.png" alt="image-20210726170337008" loading="lazy"></p><p>详细实现方式：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170413.png" alt="image-20210726170413544" loading="lazy"></p><p>优化之后：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170444.png" alt="image-20210726170444785" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断插入的位置是否合法，</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//判断表是否存满了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">>=</span>MaxSize<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//后面的元素后移</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">>=</span>i <span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入操作的时间复杂度分析"><a href="#插入操作的时间复杂度分析" class="headerlink" title="插入操作的时间复杂度分析"></a>插入操作的时间复杂度分析</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170529.png" alt="image-20210726170529928" loading="lazy"></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170624.png" alt="image-20210726170624021" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//删除</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断i的位置是否合法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//取出将要被删除的数</span>    e<span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将其后的数据前移</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//线性表长度减一</span>    L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除操作的时间复杂度分析"><a href="#删除操作的时间复杂度分析" class="headerlink" title="删除操作的时间复杂度分析"></a>删除操作的时间复杂度分析</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170650.png" alt="image-20210726170650571" loading="lazy"></p><h5 id="总结反思"><a href="#总结反思" class="headerlink" title="总结反思"></a>总结反思</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170800.png" alt="image-20210726170800756" loading="lazy"></p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><h5 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h5><p>GetElem(L,i):按位查找操作，获取表L中第i个位置的元素的值</p><h6 id="静态分配状态下的实现方式"><a href="#静态分配状态下的实现方式" class="headerlink" title="静态分配状态下的实现方式"></a>静态分配状态下的实现方式</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170924.png" alt="image-20210726170924353" loading="lazy"></p><h6 id="动态分配状态下的实现方式"><a href="#动态分配状态下的实现方式" class="headerlink" title="动态分配状态下的实现方式"></a>动态分配状态下的实现方式</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171024.png" alt="image-20210726171023978" loading="lazy"></p><p>用指针加数组下标的方式取数据的时候，数组类型决定着取数据时取几个字节！！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//按位查找</span><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断是否越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="按位查找的时间复杂度分析"><a href="#按位查找的时间复杂度分析" class="headerlink" title="按位查找的时间复杂度分析"></a>按位查找的时间复杂度分析</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171108.png" alt="image-20210726171108725" loading="lazy"></p><h5 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171207.png" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//按值查找</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//循环出查找</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>e<span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//返回位序</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="结构类型的比较"><a href="#结构类型的比较" class="headerlink" title="结构类型的比较"></a>结构类型的比较</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171356.png" alt="image-20210726171356300" loading="lazy"></p><p>注意：考研初试中华，手写代码可以直接用“&#x3D;&#x3D;”，无论是ElemType是基本数据类型还是结构类型，手写代码主要考察学生是否理解算法思想，不会严格要求代码完全可运行</p><p>有的学校复试考《C语言程序设计》，那么。。。也许就要语法严格一些！</p><h6 id="按值查找的时间复杂度"><a href="#按值查找的时间复杂度" class="headerlink" title="按值查找的时间复杂度"></a>按值查找的时间复杂度</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171428.png" alt="image-20210726171428131" loading="lazy"></p><p>总结反思</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171447.png" alt="image-20210726171447192" loading="lazy"></p><h1 id="三、单链表"><a href="#三、单链表" class="headerlink" title="三、单链表"></a>三、单链表</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171938.png" alt="image-20210726171938045" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171956.png" alt="image-20210726171956844" loading="lazy"></p><h2 id="什么是单链表？"><a href="#什么是单链表？" class="headerlink" title="什么是单链表？"></a>什么是单链表？</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726172046.png" alt="image-20210726172046492" loading="lazy"></p><h2 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726172308.png" alt="image-20210726172308710" loading="lazy"></p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726172356.png" alt="image-20210726172355951" loading="lazy"></p><p><img src="C:/Users/king/AppData/Roaming/Typora/typora-user-images/image-20210726173031900.png" alt="image-20210726173031900" loading="lazy"></p><p>注释：或者可以理解为指向头节点的指针既可以表示整个单链表也可以表示头节点，为了便于区分才建议使用 typedef 进行重命名，以方便区别其不同的含义</p><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><p><img src="C:/Users/king/AppData/Roaming/Typora/typora-user-images/image-20210726173037377.png" alt="image-20210726173037377" loading="lazy"></p><h2 id="单链表的基本操作"><a href="#单链表的基本操作" class="headerlink" title="单链表的基本操作"></a>单链表的基本操作</h2><h3 id="单链表的初始化"><a href="#单链表的初始化" class="headerlink" title="单链表的初始化"></a>单链表的初始化</h3><h4 id="不带头节点的单链表的初始化"><a href="#不带头节点的单链表的初始化" class="headerlink" title="不带头节点的单链表的初始化"></a>不带头节点的单链表的初始化</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173251.png" alt="image-20210726173251759" loading="lazy"></p><h4 id="带头节点的单链表的初始化"><a href="#带头节点的单链表的初始化" class="headerlink" title="带头节点的单链表的初始化"></a>带头节点的单链表的初始化</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173316.png" alt="image-20210726173316379" loading="lazy"></p><h4 id="两者区别是什么？"><a href="#两者区别是什么？" class="headerlink" title="两者区别是什么？"></a>两者区别是什么？</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173350.png" alt="image-20210726173350478" loading="lazy"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173409.png" alt="image-20210726173409650" loading="lazy"></p><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173426.png" alt="image-20210726173426154" loading="lazy"></p><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><h5 id="按位序插入（带头节点的单链表）"><a href="#按位序插入（带头节点的单链表）" class="headerlink" title="按位序插入（带头节点的单链表）"></a>按位序插入（带头节点的单链表）</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173553.png" alt="image-20210726173553880" loading="lazy"></p><h6 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h6><p>分析在表头插入</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173606.png" alt="image-20210726173606226" loading="lazy"></p><p>分析为什么不能颠倒</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173644.png" alt="image-20210726173627335" loading="lazy"></p><p>分析在表中插入</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173755.png" alt="image-20210726173755324" loading="lazy"></p><p>分析在表尾插入</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173822.png" alt="image-20210726173814139" loading="lazy"></p><p>分析插入位置超出表长</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174511.png" alt="image-20210726174510989" loading="lazy"></p><h6 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174525.png" alt="image-20210726174524978" loading="lazy"></p><h5 id="按位插入（不带头节点）"><a href="#按位插入（不带头节点）" class="headerlink" title="按位插入（不带头节点）"></a>按位插入（不带头节点）</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174651.png" alt="image-20210726174651203" loading="lazy"></p><p>具体实现</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174722.png" alt="image-20210726174722358" loading="lazy"></p><p>结论：不带头节点的单链表，写代码更不方便，除非特别声明，默认推荐使用带头节点的实现方式，还有要注意在考试中带头、不带头都有可能考察，注意审题。</p><h6 id="指定节点的后插操作"><a href="#指定节点的后插操作" class="headerlink" title="指定节点的后插操作"></a>指定节点的后插操作</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174829.png" alt="image-20210726174829417" loading="lazy"></p><h6 id="指定节点的前插操作"><a href="#指定节点的前插操作" class="headerlink" title="指定节点的前插操作"></a>指定节点的前插操作</h6><p>通过传入头指针实现前插</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174907.png" alt="image-20210726174907717" loading="lazy"></p><p>先进行后插，然后交换前后数据，以此实现前插</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175051.png" alt="image-20210726175051748" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175110.png" alt="image-20210726175109994" loading="lazy"></p><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><h5 id="带有头节点版本"><a href="#带有头节点版本" class="headerlink" title="带有头节点版本"></a>带有头节点版本</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175540.png" alt="image-20210726175540485" loading="lazy"></p><p>具体实现</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175558.png" alt="image-20210726175558302" loading="lazy"></p><h6 id="删除指定结点"><a href="#删除指定结点" class="headerlink" title="删除指定结点"></a>删除指定结点</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175752.png" alt="image-20210726175752937" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175620.png" alt="image-20210726175620098" loading="lazy"></p><p>如果P是最后一个节点，咋办？</p><p>只能从表头表头依次寻找前驱，时间复杂度O(n)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175657.png" alt="image-20210726175657466" loading="lazy"></p><p>单链表的局限性：无法逆向检索！！</p><h6 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180212.png" alt="image-20210726180212442" loading="lazy"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180022.png" alt="image-20210726180022284" loading="lazy"></p><h4 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h4><h5 id="按位查找-带头节点"><a href="#按位查找-带头节点" class="headerlink" title="按位查找(带头节点)"></a>按位查找(带头节点)</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180425.png" alt="image-20210726180424982" loading="lazy"></p><h5 id="按值查找-带头节点"><a href="#按值查找-带头节点" class="headerlink" title="按值查找(带头节点)"></a>按值查找(带头节点)</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180601.png" alt="image-20210726180601573" loading="lazy"></p><h5 id="求表的长度-带头节点"><a href="#求表的长度-带头节点" class="headerlink" title="求表的长度(带头节点)"></a>求表的长度(带头节点)</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180633.png" alt="image-20210726180633120" loading="lazy"></p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180647.png" alt="image-20210726180647007" loading="lazy"></p><h2 id="单链表的建立方法"><a href="#单链表的建立方法" class="headerlink" title="单链表的建立方法"></a>单链表的建立方法</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180723.png" alt="image-20210726180722977" loading="lazy"></p><p>PS：找不到对象就娶一个数据元素吧！哈哈</p><h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><p>第一种方法：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180757.png" alt="image-20210726180756970" loading="lazy"></p><p>问题：时间复杂度太高！！可以用一个指针记录最后一个数据元素的位置来优化时间。</p><p>优化之后:</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180832.png" alt="image-20210726180831940" loading="lazy"></p><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180918.png" alt="image-20210726180918378" loading="lazy"></p><p>具体实现：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180959.png" alt="image-20210726180959158" loading="lazy"></p><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726181011.png" alt="image-20210726181011287" loading="lazy"></p><h1 id="四、双链表"><a href="#四、双链表" class="headerlink" title="四、双链表"></a>四、双链表</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183619.png" alt="image-20210726183619952" loading="lazy"></p><h2 id="单链表VS双链表"><a href="#单链表VS双链表" class="headerlink" title="单链表VS双链表"></a>单链表VS双链表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183634.png" alt="image-20210726183634075" loading="lazy"></p><h2 id="双链表基本操作"><a href="#双链表基本操作" class="headerlink" title="双链表基本操作"></a>双链表基本操作</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183648.png" alt="image-20210726183648351" loading="lazy"></p><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183702.png" alt="image-20210726183702070" loading="lazy"></p><p>优化之后</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183719.png" alt="image-20210726183719251" loading="lazy"></p><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183736.png" alt="image-20210726183736686" loading="lazy"></p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183755.png" alt="image-20210726183755465" loading="lazy"></p><h2 id="总结反思-1"><a href="#总结反思-1" class="headerlink" title="总结反思"></a>总结反思</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183805.png" alt="image-20210726183805516" loading="lazy"></p><h1 id="五、循环链表"><a href="#五、循环链表" class="headerlink" title="五、循环链表"></a>五、循环链表</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183828.png" alt="image-20210726183828015" loading="lazy"></p><h2 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183837.png" alt="image-20210726183837306" loading="lazy"></p><p>具体实现：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183919.png" alt="image-20210726183919767" loading="lazy"></p><p>优势：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183938.png" alt="image-20210726183938049" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183945.png" alt="image-20210726183945708" loading="lazy"></p><h2 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183959.png" alt="image-20210726183959302" loading="lazy"></p><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184008.png" alt="image-20210726184007969" loading="lazy"></p><h3 id="插入-3"><a href="#插入-3" class="headerlink" title="插入"></a>插入</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184017.png" alt="image-20210726184017781" loading="lazy"></p><h3 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h3><p><img src="C:/Users/king/AppData/Roaming/Typora/typora-user-images/image-20210726184031060.png" alt="image-20210726184031060" loading="lazy"></p><h2 id="总结反思-2"><a href="#总结反思-2" class="headerlink" title="总结反思"></a>总结反思</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184109.png" alt="image-20210726184109253" loading="lazy"></p><h1 id="六、静态链表"><a href="#六、静态链表" class="headerlink" title="六、静态链表"></a>六、静态链表</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184147.png" alt="image-20210726184147026" loading="lazy"></p><h2 id="什么是静态链表？"><a href="#什么是静态链表？" class="headerlink" title="什么是静态链表？"></a>什么是静态链表？</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184226.png" alt="image-20210726184225973" loading="lazy"></p><h2 id="定义一个静态链表"><a href="#定义一个静态链表" class="headerlink" title="定义一个静态链表"></a>定义一个静态链表</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184303.png" alt="image-20210726184303172" loading="lazy"></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2:"></a>方法2:</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184338.png" alt="image-20210726184338410" loading="lazy"></p><h3 id="验证方法2的定义方法"><a href="#验证方法2的定义方法" class="headerlink" title="验证方法2的定义方法"></a>验证方法2的定义方法</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184446.png" alt="image-20210726184446751" loading="lazy"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184539.jpeg" alt="image-20200620162512284" loading="lazy"></p><h3 id="总结反思-3"><a href="#总结反思-3" class="headerlink" title="总结反思"></a>总结反思</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184543.jpeg" alt="image-20200620162709709" loading="lazy"></p><h1 id="七、线性表章节复习反思"><a href="#七、线性表章节复习反思" class="headerlink" title="七、线性表章节复习反思"></a>七、线性表章节复习反思</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184720.png" alt="image-20210726184719982" loading="lazy"></p><h2 id="逻辑结构对比"><a href="#逻辑结构对比" class="headerlink" title="逻辑结构对比"></a>逻辑结构对比</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184743.png" alt="image-20210726184743873" loading="lazy"></p><h2 id="存储结构对比"><a href="#存储结构对比" class="headerlink" title="存储结构对比"></a>存储结构对比</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184758.png" alt="image-20210726184757954" loading="lazy"></p><h2 id="基本操作对比"><a href="#基本操作对比" class="headerlink" title="基本操作对比"></a>基本操作对比</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184809.png" alt="image-20210726184809121" loading="lazy"></p><h3 id="初始化-创建"><a href="#初始化-创建" class="headerlink" title="初始化(创建)"></a>初始化(创建)</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184828.png" alt="image-20210726184828780" loading="lazy"></p><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184903.png" loading="lazy"></p><h3 id="增加-x2F-删除"><a href="#增加-x2F-删除" class="headerlink" title="增加&#x2F;删除"></a>增加&#x2F;删除</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184923.png" alt="image-20210726184923124" loading="lazy"></p><h3 id="查找-2"><a href="#查找-2" class="headerlink" title="查找"></a>查找</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184934.png" alt="image-20210726184934771" loading="lazy"></p><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184946.png" alt=" " loading="lazy"></p><p>具体使用时，需要根据具体场景去选择</p><h2 id="开放式答题的思路"><a href="#开放式答题的思路" class="headerlink" title="开放式答题的思路"></a>开放式答题的思路</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726185015.png" alt="image-20210726185015579" loading="lazy"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、线性表&quot;&gt;&lt;a href=&quot;#一、线性表&quot; class=&quot;headerlink&quot; title=&quot;一、线性表&quot;&gt;&lt;/a&gt;一、线性表&lt;/h1&gt;&lt;h2 id=&quot;线性表的基本概念&quot;&gt;&lt;a href=&quot;#线性表的基本概念&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://ccsu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="考研" scheme="http://ccsu.top/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="链表" scheme="http://ccsu.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="顺序表" scheme="http://ccsu.top/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构介绍</title>
    <link href="http://ccsu.top/posts/aa22783f/"/>
    <id>http://ccsu.top/posts/aa22783f/</id>
    <published>2021-07-10T13:57:08.000Z</published>
    <updated>2021-07-10T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、数据结构基本概念"><a href="#一、数据结构基本概念" class="headerlink" title="一、数据结构基本概念"></a>一、数据结构基本概念</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200509.png" alt="image-20210726200509343" loading="lazy"></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a>什么是数据？</h3><p>数据是<strong>信息的载体</strong>，是客观描述事物属性的数、字符及<strong>所有能输入到计算机中并被计算机程序识别和处理的符号</strong>的集合。数据是计算机程序加工的原料。</p><h3 id="数据元素、数据项"><a href="#数据元素、数据项" class="headerlink" title="数据元素、数据项"></a>数据元素、数据项</h3><p><strong>数据元素</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。</p><p>一个数据元素可由若干<strong>数据项</strong>组成，数据项是构成数据元素的不可分割的最小单位。</p><h3 id="数据结构、数据对象"><a href="#数据结构、数据对象" class="headerlink" title="数据结构、数据对象"></a>数据结构、数据对象</h3><p>结构——各个元素之间的关系</p><p><strong>数据结构</strong>是互相之间存在一个或多种<strong>特定关系</strong>的数据元素的集合。</p><p><strong>数据对象</strong>是具有<strong>相同性质</strong>的数据元素的集合，是一个数据的子集。</p><h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200527.png" alt="image-20210726200527173" loading="lazy"></p><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>即，数据元素之间的逻辑关系是什么？</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200541.png" alt="image-20210726200540987" loading="lazy"></p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200609.png" alt="image-20210726200609408" loading="lazy"></p><p>各个数据元素同属一个集合，别无其它关系</p><h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200618.png" alt="image-20210726200618276" loading="lazy"></p><p>数据元素之间是一对一的关系，除了第一个元素，所有元素都有唯一前驱，除了最后一个元素，所有元素都有唯一后继</p><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200636.png" alt="image-20210726200636442" loading="lazy"></p><p>数据元素之间是一对多的关系</p><h4 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200645.png" alt="image-20210726200645453" loading="lazy"></p><p>数据元素之间是多对多的关系</p><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><p>即，物理结构，如何用计算机表示数据元素的逻辑关系？</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200707.png" alt="image-20210726200707924" loading="lazy"></p><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200719.png" alt="image-20210726200719555" loading="lazy"></p><p><strong>把逻辑上相邻的元素存储在物理地址上也相邻的存储单元中</strong>，元素之间的关系由存储单元的领接关系来体现。</p><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200805.png" alt="image-20210726200805000" loading="lazy"></p><h4 id="索引存储"><a href="#索引存储" class="headerlink" title="索引存储"></a>索引存储</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200814.png" alt="image-20210726200814419" loading="lazy"></p><h4 id="散列存储"><a href="#散列存储" class="headerlink" title="散列存储"></a>散列存储</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200822.png" alt="image-20210726200822932" loading="lazy"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200832.png" alt="image-20210726200832057" loading="lazy"></p><ol><li>若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺存储，则各个数据元素在物理上是可以离散的</li><li>数据的存储结构会影响存储空间的分配的方便程度</li><li>数据的存储机构会影响对数据运算的速度</li></ol><h3 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h3><p>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，正对运算的功能；运算的实现是针对存储结构的，指的是运算实现的具体操作步骤。</p><h2 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型是一个值的集合和定义在此集合的一组操作的总称。</p><ol><li>原子类型，其值不可再分的数据类型</li><li>结构类型，其值可以再分解为若干成分（分量）的数据类型</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201240.png" alt="image-20210726201240691" loading="lazy"></p><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>Abstract Data Type （ADT）是抽象数据组织及与之相关的操作。</p><p>ADT 是用数学化的语言定义数据的逻辑结构、定义运算。与其具体的实现无关（类似于定义类吗？可能）</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201255.png" alt="image-20210726201255574" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201308.png" alt="image-20210726201308420" loading="lazy"></p><p>在探讨一种数据结构时：</p><ol><li>定义逻辑结构（数据原元素之间的关系）</li><li>定义数据的运算（针对现实需求，应该对这种逻辑结构进行什么样的运算）</li><li>确定某种存储结构，实现数据结构，并实现一些对数据结构的基本运算</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201324.png" alt="image-20210726201324448" loading="lazy"></p><h1 id="二、算法基本概念"><a href="#二、算法基本概念" class="headerlink" title="二、算法基本概念"></a>二、算法基本概念</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201355.png" alt="image-20210726201355477" loading="lazy"></p><h3 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h3><p>程序&#x3D;数据结构+算法</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201405.png" alt="image-20210726201405765" loading="lazy"></p><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ol><li><p>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</p><p> 注：算法必须是有穷的，二程序可以是无穷的。</p><p> <img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201458.png" alt="image-20210726201458768" loading="lazy"></p></li><li><p>确定性：算法每一条指令必须有确切的含义，对于相同的输入只能得出相同的输出</p></li><li><p>可行性：算法描述的操作都可以通过已经实现的基本运算执行有限次来实现。</p></li><li><p>输入：一个算法有0个或多个输入，这些输入取自某个特定对象的集合。</p></li><li><p>输出：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量。</p><p> 五个特性，缺一不可</p></li></ol><h3 id="“好”算法的特质"><a href="#“好”算法的特质" class="headerlink" title="“好”算法的特质"></a>“好”算法的特质</h3><ol><li>正确性：算法应能正确地解决求解问题。</li><li>可读性：算法应具有良好的可读性，帮助人们理解。</li><li>健壮性：输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li><li>高效率与底存储量需求：执行速度快，时间复杂度低。不费内存，空间复杂度低。</li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201634.png" alt="image-20210726201634464" loading="lazy"></p><h2 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201657.png" alt="image-20210726201657396" loading="lazy"></p><h3 id="如何评估算法时间开销？"><a href="#如何评估算法时间开销？" class="headerlink" title="如何评估算法时间开销？"></a>如何评估算法时间开销？</h3><p><strong>让算法先运行，事后统计运行时间？</strong></p><p>存在的问题？</p><ul><li>和机器性能有关，比如：超级计算机VS单片机</li><li>和编程语言有关，越高级的语言执行效率越低，没错，就是越低</li><li>和编译程序产生的机器指令质量有关</li><li>有些算法是不能事后统计的，比如，导弹控制算法。</li></ul><p>评价一个算法优劣时，需要排除与算法本身无关的外界因素，能否事先估计？</p><h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><ul><li>最坏时间复杂度：最坏情况下算法的时间复杂度</li><li>平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间</li><li>最好时间复杂度：最好情况下算法的时间复杂度</li></ul><p>事前预估算法时间开销T(n)与问题规模n的关系（T 表示 time）</p><p>如何计算T，例子：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201717.png" alt="image-20210726201717301" loading="lazy"></p><h4 id="问题1-是否可以忽略表达式某些部分？"><a href="#问题1-是否可以忽略表达式某些部分？" class="headerlink" title="问题1:是否可以忽略表达式某些部分？"></a>问题1:是否可以忽略表达式某些部分？</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201727.png" alt="image-20210726201727765" loading="lazy"></p><ol><li><p>加法规则：多项相加，只保留最高阶的项，且系数变为1</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201751.png" alt="image-20210726201751782" loading="lazy"></p></li><li><p>乘法规则：多项相乘，都保留</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201812.png" alt="image-20210726201812765" loading="lazy"></p></li></ol><p>算法时间复杂度阶数顺序</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201823.png" alt="image-20200617000121744" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201931.png" alt="image-20210726201931069" loading="lazy"></p><h4 id="如果有好几千行代码，需要一行一行数？"><a href="#如果有好几千行代码，需要一行一行数？" class="headerlink" title="如果有好几千行代码，需要一行一行数？"></a>如果有好几千行代码，需要一行一行数？</h4><ol><li>顺序执行的代码只会影响常数项，可以忽略</li><li>只需要挑循环中的一个基本操作，分析它的执行次数和n的关系就好</li><li>如果有多层嵌套循环，只需要关注最深层的循环循环了几次</li></ol><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201948.png" alt="image-20210726201948853" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202012.png" alt="image-20210726202012483" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202053.png" alt="image-20210726202053679" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202104.png" alt="image-20210726202104892" loading="lazy"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202344.png" alt="image-20210726202344903" loading="lazy"></p><p>算法的性能问题只有在n很大时才会暴露出来。</p><h3 id="算法空间复杂度"><a href="#算法空间复杂度" class="headerlink" title="算法空间复杂度"></a>算法空间复杂度</h3><h4 id="原地工作算法"><a href="#原地工作算法" class="headerlink" title="原地工作算法"></a>原地工作算法</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202415.png" alt="image-20210726202414955" loading="lazy"></p><p>分析空间复杂度时，只需关注与问题规模相关的变量就好（讲人话，就是，看程序中的变量就好）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202426.png" alt="image-20210726202426514" loading="lazy"></p><p>加法法则</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202443.png" alt="image-20210726202443429" loading="lazy"></p><h4 id="函数递归调用带来的内存开销"><a href="#函数递归调用带来的内存开销" class="headerlink" title="函数递归调用带来的内存开销"></a>函数递归调用带来的内存开销</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202555.png" alt="image-20210726202555477" loading="lazy"></p><p>在这种情况下，空间复杂度等于递归调用的深度。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202614.png" alt="image-20210726202614295" loading="lazy"></p><p>递归调用的过程中，每一次开辟的内存空间也可以不一致，如上例。</p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202626.png" alt="image-20210726202626115" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、数据结构基本概念&quot;&gt;&lt;a href=&quot;#一、数据结构基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、数据结构基本概念&quot;&gt;&lt;/a&gt;一、数据结构基本概念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubuserconten</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://ccsu.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="考研" scheme="http://ccsu.top/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="数据结构与算法" scheme="http://ccsu.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Zigbee单播通信</title>
    <link href="http://ccsu.top/posts/b142e803/"/>
    <id>http://ccsu.top/posts/b142e803/</id>
    <published>2021-05-29T13:57:08.000Z</published>
    <updated>2021-05-29T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、单播通信理论"><a href="#一、单播通信理论" class="headerlink" title="一、单播通信理论"></a>一、单播通信理论</h1><p>（1）Zigbee网络通信方式有4种：单播，广播，组播，绑定(MAC)。</p><p>（2）单播通信的特点:在Zigbee网络里，模块之间要进行通信，发射模块要明确知道接收模块的网络地址。</p><p>（3）Zigbee模块的地址特点:模块在加入网络的时候，父节点随机分配网络地址给子节点。但是协调器模块在)网络里的地址永远都是0x00。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085917.png" alt="image-20210528085917105" loading="lazy"></p><p><strong>单播发送数据需要明确的信息</strong>：<br>    (1)目标地址<br>    (2)目标端点与簇<br>    (3)要发送的数据大小</p><p><strong>应用任务层数据发送函数</strong></p><p>该函数在GenericApp.c里的GenericApp_SendTheMessage函数里：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">AF_DataRequest</span><span class="token punctuation">(</span>              <span class="token operator">&amp;</span>GenericApp_DstAddr<span class="token punctuation">,</span> <span class="token comment">//目标的网络地址指针</span>              <span class="token operator">&amp;</span>GenericApp_epDesc<span class="token punctuation">,</span><span class="token comment">//端点描述符指针</span>              GENERICAPP_CLUSTERID<span class="token punctuation">,</span><span class="token comment">//目标簇</span>              <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token function">osal_strlen</span><span class="token punctuation">(</span> theMessageData <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//发送数据的大小</span>              <span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>theMessageData<span class="token punctuation">,</span><span class="token comment">//发送数据缓冲区的地址</span>              <span class="token operator">&amp;</span>GenericApp_TransID<span class="token punctuation">,</span><span class="token comment">//这是个全局变量，用来保存发送的次数</span>              AF_DISCV_ROUTE<span class="token punctuation">,</span> AF_DEFAULT_RADIUS <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送路径，don't care</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529101718.png" alt="image-20210529101711143" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528090054.png" alt="image-20210528090054641" loading="lazy"></p><p><strong>网络地址结构体</strong></p><p>网络地址结构体就是定义在GenericApp.c前面的一个结构体变量，该类型为afAddrType_t，系统已经默认定义了一个网络地址结构体变量GenericApp_DstAddr，我们可以在GenericApp_Init()函数中，对网络地址结构体变量的成员进行赋值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//网络地址结构体:</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>      <span class="token keyword">union</span>     <span class="token punctuation">&#123;</span>            uint16      shortAddr<span class="token punctuation">;</span><span class="token comment">//网络地址</span>            ZLongAddr_t extAddr<span class="token punctuation">;</span> <span class="token comment">//MAC地址</span>     <span class="token punctuation">&#125;</span> addr<span class="token punctuation">;</span>     <span class="token class-name">afAddrMode_t</span> addrMode<span class="token punctuation">;</span><span class="token comment">//通信模式</span>     byte endPoint<span class="token punctuation">;</span> <span class="token comment">//指定的端点</span>     uint16 panId<span class="token punctuation">;</span>  <span class="token comment">//don't care</span><span class="token punctuation">&#125;</span> <span class="token class-name">afAddrType_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//通信模式枚举类型:</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">&#123;</span>        afAddrNotPresent <span class="token operator">=</span> AddrNotPresent<span class="token punctuation">,</span><span class="token comment">//当前不确定</span>        afAddr16Bit      <span class="token operator">=</span> Addr16Bit<span class="token punctuation">,</span><span class="token comment">//单播通信模式</span>        afAddr64Bit      <span class="token operator">=</span> Addr64Bit<span class="token punctuation">,</span><span class="token comment">//MAC通信模式</span>        afAddrGroup      <span class="token operator">=</span> AddrGroup<span class="token punctuation">,</span><span class="token comment">//组播通信模式</span>        afAddrBroadcast  <span class="token operator">=</span> AddrBroadcast<span class="token comment">//广播通信模式</span><span class="token punctuation">&#125;</span> <span class="token class-name">afAddrMode_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529102118.png" alt="image-20210529102118365" loading="lazy"></p><h1 id="二、端点与簇"><a href="#二、端点与簇" class="headerlink" title="二、端点与簇"></a>二、端点与簇</h1><h2 id="1-端点"><a href="#1-端点" class="headerlink" title="1.端点"></a>1.端点</h2><p>(1)通常发送的数据要明确该数据是给接收模块的哪个任务层用的，而这个就是用端点来指定的</p><p>(2)端点是一个字节的编号，通常为定义在GenericApp.h中的一个宏。端点必须要与任务层绑定，而这个就是用端点描述符来实现的。</p><p>(3)端点描述符是一个结构体变量，该变量定义在GenericApp.c开头，我们也可以定义新的端点描述符。该结构体的类型为 endPointDesc_t，系统也默认定义了一个端点描述符GenericApp_epDesc。</p><p>(4)我们可以在 GenericApp_Init()函数中，把新的端点描述符变量赋值，使新的端点与某个任务层绑定。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//端点结构体类型:</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>       byte endPoint<span class="token punctuation">;</span><span class="token comment">//端点的值</span>       byte <span class="token operator">*</span>task_id<span class="token punctuation">;</span>  <span class="token comment">//与端点绑定的任务层ID</span>       SimpleDescriptionFormat_t <span class="token operator">*</span>simpleDesc<span class="token punctuation">;</span><span class="token comment">//端点的描述信息,don’t care</span>       <span class="token class-name">afNetworkLatencyReq_t</span> latencyReq<span class="token punctuation">;</span><span class="token comment">//don’t care</span><span class="token punctuation">&#125;</span> <span class="token class-name">endPointDesc_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-簇"><a href="#2-簇" class="headerlink" title="2.簇"></a>2.簇</h2><p>(1)在接收模块中，每个任务层可以对不同种类的数据采取不同的处理方式，这里的数据种类就是簇(CLUSTER)</p><p>(2)在发送模块中，簇是定义在GenericApp.h中的一个宏，我们也可以定义新的簇。</p><p>(3) 系统也默认定义了一个簇 GenericApp_CLUSTERID，在GenericApp.h中</p><h1 id="三、-应用任务层数据发送接收API"><a href="#三、-应用任务层数据发送接收API" class="headerlink" title="三、 应用任务层数据发送接收API"></a>三、 应用任务层数据发送接收API</h1><p>(1)该函数为GenericApp.c中的void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529115258.png" alt="image-20210529115258491" loading="lazy"></p><p>(2)在switch语句中可以定义对不同的簇采用不同的方式处理数据</p><p>(3)该函数中的pkt-&gt;cmd.Data就是接收数据的首地址</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528090956.png" alt="image-20210528090956245" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、单播通信理论&quot;&gt;&lt;a href=&quot;#一、单播通信理论&quot; class=&quot;headerlink&quot; title=&quot;一、单播通信理论&quot;&gt;&lt;/a&gt;一、单播通信理论&lt;/h1&gt;&lt;p&gt;（1）Zigbee网络通信方式有4种：单播，广播，组播，绑定(MAC)。&lt;/p&gt;
&lt;p&gt;（2</summary>
      
    
    
    
    <category term="ZigBee" scheme="http://ccsu.top/categories/ZigBee/"/>
    
    <category term="课程设计" scheme="http://ccsu.top/categories/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="ZigBee" scheme="http://ccsu.top/tags/ZigBee/"/>
    
    <category term="单播通信" scheme="http://ccsu.top/tags/%E5%8D%95%E6%92%AD%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Zigbee无线通信与网络组建</title>
    <link href="http://ccsu.top/posts/121b6cd5/"/>
    <id>http://ccsu.top/posts/121b6cd5/</id>
    <published>2021-05-28T13:57:08.000Z</published>
    <updated>2021-05-28T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-无线通信理论"><a href="#一、-无线通信理论" class="headerlink" title="一、 无线通信理论"></a>一、 无线通信理论</h1><p>Zigbee无线通信，需要高频的载波来提供发射频率，Zigbee模块之间要可以正常通信，接收模块和发送模块的频率要一致。</p><p>​    Zigbee有27个载波可以进行通信，载波又叫做信道。这些载波的频率落在某些频率区段，我们把这些区段叫做频段。</p><p>​        2.4G频段                        16个信道<br>​        915M频段     896M频段   11个信道</p><p>​    但TI的所有支持Zigbee底层协议的芯片只能在2.4G频段的16个信道里进行通信。即11<del>26信道(0</del>10信道在915M和896M的频段内)</p><p><strong>网络地址</strong>：<br>    在Zigbee无线局域网里，每一个模块都有一个在该网络里唯一的2个字节的地址，这个地址我们叫做网络地址(或者叫做网络短地址)。</p><p><strong>PANID</strong>：<br>    这也是一个2个字节的编号，用来区分不用的Zigbee无线局域网，我们称为个域网ID。两个模块之间要进行通信，PANID一定要一样。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528084644.png" alt="image-20210528084643979" loading="lazy"></p><p><strong>信道与PANID的设置</strong>：<br>    在Tools文件组里的f8wConfig.cfg文件中<br>    (1)设置信道<br>        -DDEFAULT_CHANLIST&#x3D;0x00000800  &#x2F;&#x2F; 11 - 0x0B<br>    (2)设置PANID<br>        -DZDAPP_CONFIG_PAN_ID&#x3D;0x1234<br>注意:如果把PANID设置为0xFFFF,则意味着该模块不受PANID的限制</p><h1 id="二、-网络组建理论"><a href="#二、-网络组建理论" class="headerlink" title="二、 网络组建理论"></a>二、 网络组建理论</h1><p>在Zigbee无线局域网里，节点(无线模块)按照在网络里的功能可以划分为：协调器、路由器、终端这三种角色。<br>    它们的硬件可以是一模一样的，之所以在网络里表现出不同的功能，是因为它们下载了不同功能版本的程序，在同一个网络里担当了不同的角色功能。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528084808.png" alt="image-20210528084807987" loading="lazy"></p><p>​    下载了路由器和终端代码的模块，它们上电后的第一件事情去寻找网络，请求加入。然而网络不会无缘无故产生，是由下载了协调器代码的模块创建的。<br>​    下载了协调器代码的模块上电后的第一件事就是创建网络。<br>     任何一个网络里，第一个节点一定是该网络的协调器，<strong>有且只能有一个协调器</strong>。</p><p>​    如果有一个协调器创建了一个网络ID是0x1234，还有一个协调器也创建了一个网络ID为0x1234，此时后面创建的网络ID加一，即为0x1235。</p><p>​    任何一个Zigbee模块要加入到某个网络，一定要一个处于该网络里的节点作为介绍人，并且这个介绍人不能是终端节点(即路由器或者协调器)。在加入网络以后，介绍人节点和被介绍加入的节点互为父子关系。    介绍人是被介绍人的父节点，被介绍人是介绍人的、子节点。有多个可作为介绍人资格的节点，会选择信号强度高的节点作为介绍人。</p><p>​    协调器在创建完网络后，在网络里的功能与路由器没有任何区别，只不过协调器的网络地址比较特殊只能是0x0000，而其他加入的节点的网络地址是动态分配的。<br>​    终端节点与其他模块的通信必须要通过它的父节点，而路由器(协调器)之间通信可以直接通信的。<br>   因此，<strong>路由器在网络里充当的是拓扑扩展的中转站的功能</strong>。</p><h1 id="三、Zigbee三种网络架构"><a href="#三、Zigbee三种网络架构" class="headerlink" title="三、Zigbee三种网络架构"></a>三、Zigbee三种网络架构</h1><h2 id="1-星形拓扑"><a href="#1-星形拓扑" class="headerlink" title="1.星形拓扑"></a>1.星形拓扑</h2><p>​    星形拓扑是最简单的一种拓扑形式，他包含一个Co-ordinator（协调者） 节点和一系列的 End Device（终端）节点。每一个End Device 节点只能和 Co-ordinator 节点进行通讯。如果需要在两个 End Device 节点之间进行通讯必须通过Co-ordinator 节点进行信息的转发。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085042.png" alt="image-20210528085042404" loading="lazy"></p><h2 id="2-树形拓扑"><a href="#2-树形拓扑" class="headerlink" title="2.树形拓扑"></a>2.树形拓扑</h2><p>​    树形拓扑包括一个Co-ordinator（协调者）以及一系列的 Router（路由器） 和 End Device（终端）节点。Co-ordinator 连接一系列的 Router 和 End Device， 他的子节点的 Router也可以连接一系列的 Router 和End Device. 这样可以重复多个层级。树形拓扑的结构如下图所示：       </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085105.png" alt="image-20210528085105782" loading="lazy"></p><h2 id="3-Mesh拓扑（网状拓扑）"><a href="#3-Mesh拓扑（网状拓扑）" class="headerlink" title="3.Mesh拓扑（网状拓扑）"></a>3.Mesh拓扑（网状拓扑）</h2><p>​    Mesh拓扑（网状拓扑） 包含一个Co-ordinator和一系列的Router 和End Device。这种网络拓扑形式和树形拓扑相同；请参考上面所提到的树形网络拓扑。但是，网状网络拓扑具有更加灵活的信息路由规则，在可能的情况下，路由节点之间可以直接的通讯。这种路由机制使得信息的通讯变得更有效率，而且意味这一旦一个路由路径出现了问题，信息可以自动的沿着其他的路由路径进行传输。 网状拓扑的示意图如下所示：       </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085155.png" alt="image-20210528085155248" loading="lazy"></p><h2 id="4-三种网络架构对比"><a href="#4-三种网络架构对比" class="headerlink" title="4.三种网络架构对比"></a>4.三种网络架构对比</h2><p>​        MESH 网状网络拓扑结构的网络具有强大的功能，网络可以通过“多级跳”的方式来通信；该拓扑结构还可以组成极为复杂的网络；网络还具备自组织、自愈功能；<br>​        星型和族树型网络适合点多多点、距离相对较近的应用。<br>​       我们可以在 “nwk_globals.h” 文件中159行进行修改网络结构，默认为网状拓扑结构。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085251.png" alt="image-20210528085251909" loading="lazy"></p><p>​    我们可以在GenericApp.c文件中的GenericApp_ProcessEvent函数中的switch语句的 case ZDO_STATE_CHANGE中修改代码内容，让模块在不同的网络状态下亮不同的灯。</p><p>​    注意:下载了协调器的代码的模块，创建了网络之后就是协调器状态，而终端和路由器要加入了网络才是对应的状态。终端和路由器要加入网络的条件是，信道和PANID要一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-无线通信理论&quot;&gt;&lt;a href=&quot;#一、-无线通信理论&quot; class=&quot;headerlink&quot; title=&quot;一、 无线通信理论&quot;&gt;&lt;/a&gt;一、 无线通信理论&lt;/h1&gt;&lt;p&gt;Zigbee无线通信，需要高频的载波来提供发射频率，Zigbee模块之间要可以正常通</summary>
      
    
    
    
    <category term="ZigBee" scheme="http://ccsu.top/categories/ZigBee/"/>
    
    <category term="课程设计" scheme="http://ccsu.top/categories/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="ZigBee" scheme="http://ccsu.top/tags/ZigBee/"/>
    
    <category term="自动组网" scheme="http://ccsu.top/tags/%E8%87%AA%E5%8A%A8%E7%BB%84%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Zstack协议栈</title>
    <link href="http://ccsu.top/posts/3fbe36e5/"/>
    <id>http://ccsu.top/posts/3fbe36e5/</id>
    <published>2021-05-27T13:57:08.000Z</published>
    <updated>2021-05-27T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Zstack协议栈概述"><a href="#一、Zstack协议栈概述" class="headerlink" title="一、Zstack协议栈概述"></a>一、Zstack协议栈概述</h1><h2 id="什么是Zstack协议栈"><a href="#什么是Zstack协议栈" class="headerlink" title="什么是Zstack协议栈"></a>什么是Zstack协议栈</h2><p>为了使Zigbee的开发更加简单高效，TI公司推出了基于cc2530芯片的协议栈Z-STACK.协议栈的实质就是能实现各个功能的实例框架代码，我们想要实现自己的功能程序，只需要在协议栈的基础上修改或添加即可。</p><ul><li>​    Z-STACK的发展</li><li>​    由0.01版本 到 1.5.1a..</li><li>​    mesh: 之前的升级版本</li><li>​    HA:  家庭自动化(智能家居)</li><li>​    SE:  智能能源</li></ul><p>​    ….他们的区别是应用部分不同(初学者建议用早期的版本)</p><h1 id="二、Zstack协议栈结构"><a href="#二、Zstack协议栈结构" class="headerlink" title="二、Zstack协议栈结构"></a>二、Zstack协议栈结构</h1><p>​      Z-Stack协议栈符合ZigBee协议，由物理层、MAC层、网络层和应用层组成，由于Z-Stack协议栈是一个半开源的协议栈，MAC层和网络层的部分源代码是非开源的，因此我们学习的开源部分，主要包括main函数、APP层、ZDO层、NWK层和HAL层。</p><h2 id="1-工程目录结构"><a href="#1-工程目录结构" class="headerlink" title="1.工程目录结构"></a>1.工程目录结构</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130146.png" alt="image-20210526141312372" loading="lazy"></p><p><strong>APP</strong>： 应用层目录， 这是用户创建各种不同工程的区域， 在这个目录中包含了应用层的内容和这个项目的主要内容， 在协议栈里面一般是以操作系统的任务实现的。<br><strong>HAL</strong>： 硬件层目录， 包含有与硬件相关的配置和驱动及操作函数。<br><strong>MAC</strong>： MAC 层目录， 包含了 MAC 层的参数配置文件及其 MAC 的 LIB 库的函数接口文件。<br><strong>MT</strong>： 监控调试层， 主要用于调试目的， 即实现通过串口调试各层， 与各层进行直接交互。<br><strong>NWK</strong>： 网络层目录， 含网络层配置参数文件及网络层库的函数接口文件， APS 层库的函数接口。<br><strong>OSAL</strong>： 协议栈的操作系统。<br><strong>Profile</strong>： AF 层目录， 包含 AF 层处理函数文件。<br><strong>Security</strong>： 安全层目录， 安全层处理函数接口文件， 比如加密函数等。<br><strong>Services</strong>： 地址处理函数目录， 包括着地址模式的定义及地址处理函数。<br><strong>Tools</strong>： 工程配置目录， 包括空间划分及 ZStack 相关配置信息。<br><strong>ZDO</strong>： ZDO 目录。<br><strong>ZMac</strong>： MAC 层目录， 包括 MAC 层参数配置及 MAC 层 LIB 库函数回调处理函数。<br><strong>ZMain</strong>： 主函数目录， 包括入口函数 main（ ） 及硬件配置文件。<br><strong>Output</strong>： 输出文件目录， 这个 EW8051 IDE 自动生成的。    </p><h2 id="2-main函数解析"><a href="#2-main函数解析" class="headerlink" title="2.main函数解析"></a>2.main函数解析</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 关闭所有中断*/</span><span class="token function">osal_int_disable</span><span class="token punctuation">(</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 初始化硬件设备*/</span><span class="token function">HAL_BOARD_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*电源检测*/</span><span class="token function">zmain_vdd_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化I/O*/</span><span class="token function">InitBoard</span><span class="token punctuation">(</span> OB_COLD <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化硬件抽象层HAL驱动*/</span><span class="token function">HalDriverInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化NV*/</span><span class="token function">osal_nv_init</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化 MAC*/</span><span class="token function">ZMacInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*确定64位IEEE地址*/</span><span class="token function">zmain_ext_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化NV向量*/</span><span class="token function">zgInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NONWK</span></span><span class="token comment">/* AF层初始化/afInit();#endif/*初始化任务*/</span><span class="token function">osal_init_system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*开启中断*/</span><span class="token function">osal_int_enable</span><span class="token punctuation">(</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*硬件I/O初始化完毕*/</span><span class="token function">InitBoard</span><span class="token punctuation">(</span> OB_READY <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">zmain_dev_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 如果定义了LCD，初始化LCD */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LCD_SUPPORTED</span></span><span class="token function">zmain_lcd_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">WDT_IN_PM1</span></span><span class="token comment">/* 如果定义了看门狗，看门狗使能 */</span><span class="token function">WatchDogEnable</span><span class="token punctuation">(</span> WDTIMX <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*操作系统运行*/</span><span class="token function">osal_start_system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>osal_int_disable()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint8 <span class="token function">osal_int_disable</span><span class="token punctuation">(</span> uint8 interrupt_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*判断ID是否为中断ID*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> interrupt_id <span class="token operator">==</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*关掉所有中断*/</span><span class="token function">HAL_DISABLE_INTERRUPTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*中断关闭成功，返回SUCCESS */</span><span class="token keyword">return</span> <span class="token punctuation">(</span> SUCCESS <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">/*如果ID与INST_ALL不同，返回INVALID_INTERRUPT_ID*/</span><span class="token keyword">return</span> <span class="token punctuation">(</span> INVALID_INTERRUPT_ID <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-APP层解析"><a href="#3-APP层解析" class="headerlink" title="3.APP层解析"></a>3.APP层解析</h2><p>OSAL_SampleApp.c中包含osalInitTasks()与taskArr[]。</p><p><strong>osalInitTasks()函数主要功能是为任务分配空间</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">osalInitTasks</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uint8 taskID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tasksEvents <span class="token operator">=</span> <span class="token punctuation">(</span>uint16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">osal_mem_alloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> uint16 <span class="token punctuation">)</span> <span class="token operator">*</span> tasksCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">osal_memset</span><span class="token punctuation">(</span> tasksEvents<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span> uint16 <span class="token punctuation">)</span> <span class="token operator">*</span> tasksCnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">macTaskInit</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">nwk_init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Hal_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span> MT_TASK <span class="token punctuation">)</span></span></span>    <span class="token function">MT_TaskInit</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">APS_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FRAGMENTATION <span class="token punctuation">)</span></span></span>    <span class="token function">APSF_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">ZDApp_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FREQ_AGILITY <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_PANID_CONFLICT <span class="token punctuation">)</span></span></span>    <span class="token function">ZDNwkMgr_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">SampleApp_Init</span><span class="token punctuation">(</span> taskID <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130152.png" alt="image-20210526142358533" loading="lazy"></p><p><strong>OSAL_SampleApp.c</strong></p><p><strong>tasksArr中存放了事件处理回调函数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> pTaskEventHandlerFn tasksArr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    macEventLoop<span class="token punctuation">,</span>    nwk_event_loop<span class="token punctuation">,</span>    Hal_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span> MT_TASK <span class="token punctuation">)</span></span></span>    MT_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    APS_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FRAGMENTATION <span class="token punctuation">)</span></span></span>    APSF_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    ZDApp_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FREQ_AGILITY <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_PANID_CONFLICT <span class="token punctuation">)</span></span></span>    ZDNwkMgr_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    SampleApp_ProcessEvent<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130157.png" alt="image-20210526142515869" loading="lazy"></p><p><strong>Z-Stack协议栈的APP层主要功能是实现用户定义的事件，APP层由5个文件组成</strong>    </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130201.png" alt="image-20210526142553502" loading="lazy"></p><blockquote><p>  SamplApp.c文件主要有两个功能：<br>      (1)对应用层用户定义的任务<br>      (2)进行初始化；调用事件处理函数。</p></blockquote><ul><li>用户任务初始化函数SampleApp_Init()</li><li>任务处理函数SampleApp_ProcessEvent()</li><li>按键处理事件SampleApp_HandleKeys()</li><li>数据发送函数SampleApp_SendFlashMessage()</li><li>数据发送函数SampleApp_SendPeriodicMessage()</li><li>数据接收函数SampleApp_MessageMSGCB()</li></ul><p><strong>SampleApp_Init()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SampleApp_Init</span><span class="token punctuation">(</span> uint8 task_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SampleApp_TaskID <span class="token operator">=</span> task_id<span class="token punctuation">;</span>    SampleApp_NwkState <span class="token operator">=</span> DEV_INIT<span class="token punctuation">;</span>    SampleApp_TransID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> BUILD_ALL_DEVICES <span class="token punctuation">)</span></span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">readCoordinatorJumper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        zgDeviceLogicalType <span class="token operator">=</span> ZG_DEVICETYPE_COORDINATOR<span class="token punctuation">;</span>    <span class="token keyword">else</span>        zgDeviceLogicalType <span class="token operator">=</span> ZG_DEVICETYPE_ROUTER<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> HOLD_AUTO_START <span class="token punctuation">)</span></span></span>    <span class="token function">ZDOInitDevice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token comment">/*SampleApp_Periodic_DstAddr地址模式初始化为广播地址*/</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>addrMode <span class="token operator">=</span>    <span class="token punctuation">(</span><span class="token class-name">afAddrMode_t</span><span class="token punctuation">)</span>AddrBroadcast<span class="token punctuation">;</span>    <span class="token comment">/* SampleApp_Periodic_DstAddr端点初始化*/</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>shortAddr <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>addrMode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">afAddrMode_t</span><span class="token punctuation">)</span>afAddrGroup<span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>shortAddr <span class="token operator">=</span> SAMPLEAPP_FLASH_GROUP<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130206.png" alt="image-20210526143651898" loading="lazy"></p><p><strong>SampleApp_Init()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SampleApp_epDesc<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>task_id <span class="token operator">=</span> <span class="token operator">&amp;</span>SampleApp_TaskID<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>simpleDesc<span class="token operator">=</span> <span class="token punctuation">(</span>SimpleDescriptionFormat_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>SampleApp_SimpleDesc<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>latencyReq <span class="token operator">=</span> noLatencyReqs<span class="token punctuation">;</span><span class="token function">afRegister</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>SampleApp_epDesc <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">RegisterForKeys</span><span class="token punctuation">(</span> SampleApp_TaskID <span class="token punctuation">)</span><span class="token punctuation">;</span>SampleApp_Group<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">;</span><span class="token function">osal_memcpy</span><span class="token punctuation">(</span> SampleApp_Group<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"Group 1"</span><span class="token punctuation">,</span> <span class="token number">7</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">aps_AddGroup</span><span class="token punctuation">(</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SampleApp_Group <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> LCD_SUPPORTED <span class="token punctuation">)</span></span></span><span class="token function">HalLcdWriteString</span><span class="token punctuation">(</span> <span class="token string">"SampleApp"</span><span class="token punctuation">,</span> HAL_LCD_LINE_1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130210.png" alt="image-20210526143749526" loading="lazy"></p><p><strong>SampleApp_ProcessEvent()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130215.png" alt="image-20210526143838169" loading="lazy"></p><p><strong>SampleApp_ProcessEvent()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130219.png" alt="image-20210526143903337" loading="lazy"></p><p><strong>SampleApp_HandleKeys()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130223.png" alt="image-20210526143922288" loading="lazy"></p><p><strong>SampleApp_MessageMSGCB()</strong></p><p>SampleApp_MessageMSGCB()函数主要实现数据接收功能，数据的接收通过判断簇ID来<br>与发送端发送的数据进行匹配。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130227.png" alt="image-20210526144842589" loading="lazy"></p><p><strong>SampleApp_SendPeriodicMessage()</strong></p><p>SampleApp_SendPeriodicMessage()函数主要功能是实现周期性数据的发送，通过调用<br>AF_DataRequest()函数进行数据的发送。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130231.png" alt="image-20210526144912513" loading="lazy"></p><p><strong>SampleApp.h</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130234.png" alt="image-20210526144937850" loading="lazy"></p><h2 id="4-ZDO层解析"><a href="#4-ZDO层解析" class="headerlink" title="4.ZDO层解析"></a>4.ZDO层解析</h2><p><strong>目录结构</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130239.png" alt="image-20210526145815215" loading="lazy"></p><p>ZDApp_Init()函数：初始化ZDO网络设备短地址；获得64位IEEE地址信息；ZDO层初始化；网络设备启动。</p><h2 id="5-NWK层解析"><a href="#5-NWK层解析" class="headerlink" title="5.NWK层解析"></a>5.NWK层解析</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h3><p><img src="https://raw.githubusercontent.com/Editblog/PicGo/main/img/20210527185136.png" alt="image-20210527185136679" loading="lazy"></p><h3 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a><strong>网络拓扑结构</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*星型网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_STAR</span>         <span class="token expression"><span class="token number">0</span></span></span><span class="token comment">/*树型网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_TREE</span>         <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/*网状网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_MESH</span>         <span class="token expression"><span class="token number">2</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络参数设置"><a href="#网络参数设置" class="headerlink" title="网络参数设置"></a><strong>网络参数设置</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*协议栈模式参数*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NETWORK_SPECIFIC</span>      <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOME_CONTROLS</span>         <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIGBEEPRO_PROFILE</span>    <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GENERIC_STAR</span>          <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GENERIC_TREE</span>          <span class="token expression"><span class="token number">4</span></span></span><span class="token comment">/*信道设置*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_868MHZ</span>     <span class="token expression"><span class="token number">0x00000001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_915MHZ</span>     <span class="token expression"><span class="token number">0x000007FE</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_24GHZ</span>      <span class="token expression"><span class="token number">0x07FFF800</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-HAL层解析"><a href="#6-HAL层解析" class="headerlink" title="6.HAL层解析"></a>6.HAL层解析</h2><p><img src="https://raw.githubusercontent.com/Editblog/PicGo/main/img/20210527185224.png" alt="20210527184135.png" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">HAL目录Common：实现了硬件初始化函数<span class="token function">Hal_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、硬件抽象层驱动初始化<span class="token function">HalDriverInit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>函数和硬件抽象层事件处理函数<span class="token function">Hal_ProcessEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；Include：中主要包含了硬件资源的定义与函数声明；Target：主要为LED等硬件资源进行配置、实现硬件资源的实现函数；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Hal_Init()函数主要为硬件抽象层注册任务ID</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Hal_Init</span><span class="token punctuation">(</span> uint8 task_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 注册任务 ID */</span>Hal_TaskID <span class="token operator">=</span> task_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HalDriverInit()函数主要实现硬件资源的初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HalDriverInit</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*定时器初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_TIMER<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_TIMER <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalTimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*ADC初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_ADC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_ADC <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalAdcInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*DMA初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_DMA<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_DMA <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalDmaInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*Flash初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_FLASH<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_FLASH <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalFlashInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*AES初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_AES<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_AES <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalAesInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*LCD初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_LCD<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LCD <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLcdInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*LED初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_LED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LED <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLedInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*UART初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_UART<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_UART <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalUARTInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*KEY按键初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_KEY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_KEY <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalKeyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*SPI初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_SPI<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_SPI <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalSpiInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HHal_ProcessEvent()函数由APP层OSAL_SampleApp.c文件调用，主要实现硬件抽象层的各种事件处理，比如系统消息事件、LED闪烁事件、按键事件和睡眠模式事件。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">Hal_ProcessEvent</span><span class="token punctuation">(</span> uint8 task_id<span class="token punctuation">,</span> uint16 events <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint8 <span class="token operator">*</span>msgPtr<span class="token punctuation">;</span><span class="token comment">/*系统消息事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> SYS_EVENT_MSG <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>msgPtr <span class="token operator">=</span> <span class="token function">osal_msg_receive</span><span class="token punctuation">(</span>Hal_TaskID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>msgPtr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">osal_msg_deallocate</span><span class="token punctuation">(</span> msgPtr <span class="token punctuation">)</span><span class="token punctuation">;</span>msgPtr <span class="token operator">=</span> <span class="token function">osal_msg_receive</span><span class="token punctuation">(</span> Hal_TaskID <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> events <span class="token operator">^</span> SYS_EVENT_MSG<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*LED闪烁事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> HAL_LED_BLINK_EVENT <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">defined</span> <span class="token punctuation">(</span>BLINK_LEDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LED <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* BLINK_LEDS &amp;&amp; HAL_LED */</span></span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_LED_BLINK_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*按键事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> HAL_KEY_EVENT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_KEY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_KEY <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token comment">/* Check for keys */</span><span class="token function">HalKeyPoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Hal_KeyIntEnable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">osal_start_timerEx</span><span class="token punctuation">(</span> Hal_TaskID<span class="token punctuation">,</span> HAL_KEY_EVENT<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_KEY_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*睡眠模式*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">POWER_SAVING</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> HAL_SLEEP_TIMER_EVENT <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">halRestoreSleepLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_SLEEP_TIMER_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    HTarget hal_board_cfg.h文件中为硬件资源LED等进行配置，在官方的协议栈中定义了3个LED，分别接CC2530的P1_0、P1_1和P1_4引脚。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* LED1配置 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_SBIT</span>         <span class="token expression">P1_0</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_DDR</span>          <span class="token expression">P1DIR</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HAL_BOARD_CC2530EB_REV17</span></span>  <span class="token comment">/* LED2配置 */</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_SBIT</span>         <span class="token expression">P1_1</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_DDR</span>          <span class="token expression">P1DIR</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span>   <span class="token comment">/* LED3配置 */</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_SBIT</span>         <span class="token expression">P1_4</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_DDR</span>          <span class="token expression">P1DIR</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制LED开关状态。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_BOARD_CC2530EB_REV17<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_PA_LNA<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_PA_LNA_CC2590<span class="token punctuation">)</span></span></span><span class="token comment">/*打开LED*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED1_SBIT <span class="token operator">=</span> <span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED2_SBIT <span class="token operator">=</span> <span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED3_SBIT <span class="token operator">=</span> <span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">HAL_TURN_OFF_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token comment">/*关闭LED*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED1_SBIT <span class="token operator">=</span> <span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED2_SBIT <span class="token operator">=</span> <span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED3_SBIT <span class="token operator">=</span> <span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">HAL_TURN_ON_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token comment">/*LED状态改变*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED1_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED1_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED1_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED2_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED2_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED2_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED3_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED3_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED3_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">HAL_TOGGLE_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span>LED1_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span>LED2_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span>LED3_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token function">HAL_STATE_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在Drives文件中定义了硬件资源的驱动函数文件</p><ul><li><strong>LED</strong>：在hal_led.c文件中实现，为LED提供驱动函数；</li><li><strong>ADC</strong>：在hal_adc.c文件中实现，为ADC提供驱动函数；</li><li><strong>KEY</strong>：在hal_key.c文件中实现，为按键提供驱动函数；</li><li><strong>LCD</strong>：在hal_LCD.c文件中实现，为LCD提供驱动函数；</li><li><strong>定时器</strong>：在hal_timer.c文件中实现，为定时器提供驱动函数；</li><li><strong>串口</strong>：在hal_uart.c文件中实现，为串口提供驱动函数；</li><li><strong>DMA</strong>：在hal_dma.c文件中实现，为DMA提供驱动函数；</li><li><strong>flash</strong>：在hal_flash.c文件中实现，为flash提供驱动函数。</li></ul><p>APP应用层调用LED设置函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">HalLedSet</span><span class="token punctuation">(</span>uint8 leds<span class="token punctuation">,</span>uint8 mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">HalLedBlink</span><span class="token punctuation">(</span>uint8 leds<span class="token punctuation">,</span>uint8 numBlink<span class="token punctuation">,</span>uint8 percend<span class="token punctuation">,</span>uint16 period<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210527185047.png" alt="image-20210527185047722" loading="lazy"></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Zstack协议栈概述&quot;&gt;&lt;a href=&quot;#一、Zstack协议栈概述&quot; class=&quot;headerlink&quot; title=&quot;一、Zstack协议栈概述&quot;&gt;&lt;/a&gt;一、Zstack协议栈概述&lt;/h1&gt;&lt;h2 id=&quot;什么是Zstack协议栈&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="ZigBee" scheme="http://ccsu.top/categories/ZigBee/"/>
    
    <category term="课程设计" scheme="http://ccsu.top/categories/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="ZigBee" scheme="http://ccsu.top/tags/ZigBee/"/>
    
    <category term="协议栈" scheme="http://ccsu.top/tags/%E5%8D%8F%E8%AE%AE%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>zigbee串口通信</title>
    <link href="http://ccsu.top/posts/d1180c9/"/>
    <id>http://ccsu.top/posts/d1180c9/</id>
    <published>2021-05-27T13:57:08.000Z</published>
    <updated>2021-05-27T13:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、串口通信原理"><a href="#一、串口通信原理" class="headerlink" title="一、串口通信原理"></a>一、串口通信原理</h1><h2 id="1-什么是UART"><a href="#1-什么是UART" class="headerlink" title="1.什么是UART"></a>1.什么是UART</h2><p>​      UART : Universal Asynchronous  Receiver&#x2F;Transmitter  通用异步收发器<br>​    一种常用也是最简单的串行数据传输协议。数据线只需要两根就可以实现全双工。<br>​    Tx:发送数据线<br>​    Rx:接收数据线<br>​        A                B<br>​        Tx &lt;———–&gt; Rx<br>​        Rx &lt;———–&gt; Tx<br>​        GND&lt;———–&gt; GND</p><h2 id="2-上位机与下位机"><a href="#2-上位机与下位机" class="headerlink" title="2.上位机与下位机"></a>2.上位机与下位机</h2><p>​         模块之间的通信,根据其在系统中的功能与作用可分为上位机 与 下位机。</p><p>上位机：<br>    把处理性能强的计算机称为上位机。数据的统一处理都在上位机完成。</p><p>下位机：<br>    把数据采集和发送的终端，处理性能单一的计算机，称为下位机。</p><p>一般一个上位机会对应多个下位机，这种模式可以使数据处理的更加全面，同时也大大降低成本。</p><h2 id="3-UART数据帧"><a href="#3-UART数据帧" class="headerlink" title="3.UART数据帧"></a>3.UART数据帧</h2><p>UART protocol  串口协议<br>    串口发送和接收数据是以帧为单位，Frame</p><pre><code>1帧(Frame) = 1start bit(起始位) + 5~9bits数据位 + 0/1bit校验位 + stop bits(0.5,1,1.5)停止位起始位：一个周期的低电平数据位：5~9bits数据位，具体是多少bits，需要双方协商，并且传送先传送最低位(LSB)校验位：    0bit：没有校验    1bit：有校验        奇校验：数据位+校验位的这一段数据里的1的个数是奇数。        偶校验：数据位+校验位的这一段数据里的1的个数是偶数。停止位：高电平        1个停止位            Baudrate(波特率):传输速率，即没一个秒传输了多少个bit位    4800    9600    115200bps: bits per second</code></pre><h1 id="二、串口配置"><a href="#二、串口配置" class="headerlink" title="二、串口配置"></a>二、串口配置</h1><h2 id="1-串口初始化相关的结构体halUARTCfg-t"><a href="#1-串口初始化相关的结构体halUARTCfg-t" class="headerlink" title="1.    串口初始化相关的结构体halUARTCfg_t"></a>1.    串口初始化相关的结构体halUARTCfg_t</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>  bool                configured<span class="token punctuation">;</span><span class="token comment">//是否设置串口</span>  uint8               baudRate<span class="token punctuation">;</span> <span class="token comment">//波特率设置</span>  bool                flowControl<span class="token punctuation">;</span><span class="token comment">//控制流设置</span>  uint16              flowControlThreshold<span class="token punctuation">;</span><span class="token comment">//RX缓存安全字节数(了解)</span>  uint8               idleTimeout<span class="token punctuation">;</span><span class="token comment">//RX来数据超时时间(了解)</span>  <span class="token class-name">halUARTBufControl_t</span> rx<span class="token punctuation">;</span><span class="token comment">//接收数据长度</span>  <span class="token class-name">halUARTBufControl_t</span> tx<span class="token punctuation">;</span><span class="token comment">//发送数据长度</span>  bool                intEnable<span class="token punctuation">;</span><span class="token comment">//中断使能</span>  uint32              rxChRvdTime<span class="token punctuation">;</span><span class="token comment">//接收数据时间</span>  <span class="token class-name">halUARTCBack_t</span>      callBackFunc<span class="token punctuation">;</span><span class="token comment">//回调函数</span><span class="token punctuation">&#125;</span><span class="token class-name">halUARTCfg_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-串口初始化示例"><a href="#2-串口初始化示例" class="headerlink" title="2. 串口初始化示例"></a>2. 串口初始化示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InitUart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">halUARTCfg_t</span>   uartConfig<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>configured           <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  <span class="token comment">//</span>uartConfig<span class="token punctuation">.</span>baudRate             <span class="token operator">=</span> HAL_UART_BR_38400<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControl          <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControlThreshold <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> uartConfig<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>tx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>idleTimeout          <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    uartConfig<span class="token punctuation">.</span>intEnable            <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                uartConfig<span class="token punctuation">.</span>callBackFunc         <span class="token operator">=</span> SerialApp_CallBack<span class="token punctuation">;</span>   <span class="token function">HalUARTOpen</span> <span class="token punctuation">(</span>SERIAL_APP_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-串口实现"><a href="#3-串口实现" class="headerlink" title="3.串口实现"></a>3.串口实现</h2><p>​        串口的读操作函数为HalUARTRead()，主要功能是读取上位机通过串口发送至设备节点的数据。</p><p>​    uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)<br>​    @port：串口端口的设置，可以设置为串口0或串口1；<br>​    @buf：数据缓冲区；<br>​    @len：数据长度。<br>​    返回值:实际成功读取的字节数</p><p>串口的<strong>读</strong>操作函数为**HalUARTRead()**，主要功能是读取上位机通过串口发送至设备节点的数据。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">HalUARTRead</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 <span class="token operator">*</span>buf<span class="token punctuation">,</span> uint16 len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAL_UART_USB</span></span>  <span class="token keyword">return</span> <span class="token function">HalUARTRx</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  串口的<strong>写</strong>操作函数为**HalUARTWrite()**，主要功能是实现向上位机或其他设备通过串口发送数据。<br>    uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)<br>    @port：串口端口的设置，可以设置为串口0或串口1；<br>    @buf：数据缓冲区；<br>    @len：数据长度。<br>    返回值:实际成功发送的字节数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 <span class="token operator">*</span>buf<span class="token punctuation">,</span> uint16 len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAL_UART_USB</span></span>  <span class="token function">HalUARTTx</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、程序设计"><a href="#三、程序设计" class="headerlink" title="三、程序设计"></a>三、程序设计</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SerialApp_CallBack</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 event<span class="token punctuation">)</span>   <span class="token comment">//接收数据会触发</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">HalUARTRead</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED0<span class="token punctuation">,</span>LED_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED1<span class="token punctuation">,</span>LED_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span><span class="token string">"byebye"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED0<span class="token punctuation">,</span>LED_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED1<span class="token punctuation">,</span>LED_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InitUart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">halUARTCfg_t</span>   uartConfig<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>configured           <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>baudRate             <span class="token operator">=</span> HAL_UART_BR_9600<span class="token punctuation">;</span> <span class="token comment">//设置波特率</span>uartConfig<span class="token punctuation">.</span>flowControl          <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControlThreshold <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> uartConfig<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>tx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>idleTimeout          <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    uartConfig<span class="token punctuation">.</span>intEnable            <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                uartConfig<span class="token punctuation">.</span>callBackFunc         <span class="token operator">=</span> SerialApp_CallBack<span class="token punctuation">;</span>  <span class="token comment">//设置回调函数 </span><span class="token function">HalUARTOpen</span> <span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> GENERICAPP_MY_EVT1 <span class="token punctuation">)</span><span class="token comment">//事件</span>  <span class="token punctuation">&#123;</span><span class="token comment">//事件要做的事</span>    P1_0 <span class="token operator">=</span> <span class="token operator">!</span>P1_0<span class="token punctuation">;</span>    P1_1 <span class="token operator">=</span> <span class="token operator">!</span>P1_1<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"hello,are you ok?\r\n"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Start_DHT11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//读取dht11数据</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sprintf</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token string">"temperature:%d,humidity:%d\r\n"</span><span class="token punctuation">,</span>temperature<span class="token punctuation">,</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span><span class="token string">"error\r\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>events <span class="token operator">^</span> GENERICAPP_MY_EVT1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、串口通信原理&quot;&gt;&lt;a href=&quot;#一、串口通信原理&quot; class=&quot;headerlink&quot; title=&quot;一、串口通信原理&quot;&gt;&lt;/a&gt;一、串口通信原理&lt;/h1&gt;&lt;h2 id=&quot;1-什么是UART&quot;&gt;&lt;a href=&quot;#1-什么是UART&quot; class=&quot;he</summary>
      
    
    
    
    <category term="ZigBee" scheme="http://ccsu.top/categories/ZigBee/"/>
    
    <category term="课程设计" scheme="http://ccsu.top/categories/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="ZigBee" scheme="http://ccsu.top/tags/ZigBee/"/>
    
    <category term="串口通信" scheme="http://ccsu.top/tags/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
</feed>
