<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>音乐播放实例</title>
      <link href="/posts/bf8e06ec/"/>
      <url>/posts/bf8e06ec/</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-JEAVyAQl" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="497572729" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;497572729&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#C20C0C&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    <div id="aplayer-KmhsNAHh" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2008272804" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;2008272804&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yun主题写作语法</title>
      <link href="/posts/a6c287ab/"/>
      <url>/posts/a6c287ab/</url>
      
        <content type="html"><![CDATA[<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 树莓派镜像烧录<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-03-05 01:31:08</span><span class="token key atrule">updated</span><span class="token punctuation">:</span> <span class="token datetime number">2020-07-14 16:31:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 西红柿<span class="token comment"># 设置作者则会显示</span><span class="token key atrule">email</span><span class="token punctuation">:</span> 2506812280@qq.com<span class="token comment"># 自动根据邮箱获取 Gravatar 头像</span><span class="token key atrule">readmore</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 将会首页卡片摘要末尾强制显示一个 阅读更多 按钮</span><span class="token key atrule">hideTime</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 强制隐藏时间显示</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 描述（只出现在预览卡片上，不出现在正文中）（默认使用 400 字重以表强调，略细于加粗字体）<span class="token comment"># 设置为 index 时，将只在首页隐藏，归档中仍然展示。（譬如放一些没有必要放在首页的笔记,并在归档中方便自己查看。）</span><span class="token comment"># 当设置为 true 时，该文章仍然会被渲染，你自己可以直接访问链接进行查看。但不会被显示在展示的文章卡片与归档中。</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派  <span class="token punctuation">-</span> 镜像烧录<span class="token key atrule">categories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="额外的头部字段"><a href="#额外的头部字段" class="headerlink" title="额外的头部字段"></a>额外的头部字段</h1><h2 id="author"><a href="#author" class="headerlink" title="author"></a>author</h2><p>设置作者则会显示</p><h2 id="email"><a href="#email" class="headerlink" title="email"></a>email</h2><p>自动根据邮箱获取 <a href="https://en.gravatar.com/site/implement/images/">Gravatar</a> 头像</p><h2 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h2><p>是否显示目录，文章 <code>post</code> 默认显示，页面 <code>post</code> 默认不显示</p><h2 id="readmore"><a href="#readmore" class="headerlink" title="readmore"></a>readmore</h2><p>将会首页卡片摘要末尾强制显示一个 <code>阅读更多</code> 按钮</p><h2 id="hideTime"><a href="#hideTime" class="headerlink" title="hideTime"></a>hideTime</h2><p>强制隐藏时间显示</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">author</span><span class="token punctuation">:</span> 云游君<span class="token key atrule">email</span><span class="token punctuation">:</span> me@yunyoujun.cn<span class="token key atrule">readmore</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hideTime</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p>描述（只出现在预览卡片上，不出现在正文中）（默认使用 <code>400</code> 字重以表强调，略细于加粗字体）</p><h2 id="excerpt"><a href="#excerpt" class="headerlink" title="excerpt"></a>excerpt</h2><p>摘要（不需要在 <code>Front-matter</code> 中设置，通过 <code>&lt;!-- more --&gt;</code> 截断实现，预览卡片与正文中均出现）</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">description</span><span class="token punctuation">:</span> xxxxxxx</span><span class="token punctuation">---</span></span>这里是摘要<span class="token comment">&lt;!-- more --></span>这里是更多内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><p>标签</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派  <span class="token punctuation">-</span> 镜像烧录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h2><p>分类，如果您尚未安装 <code>hexo-generator-category</code>，请输入 <code>npm install hexo-generator-category</code></p><p>新建 <code>categories</code> 页面，在博客根目录下输入：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2017-10-12 10:47:16</span><span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">type</span><span class="token punctuation">:</span> categories<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  TIP</p><p>  <a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE">分类和标签</a></p><p>  尽管 Hexo 支持了为一篇文章设置多个分类，但我个人更建议你一篇文章只放在一个分类下，而使用标签来为它进行多个描述。</p><p>  同时太多的分类与标签，既不方便整理，也不利于移动端的展示。</p></blockquote><h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><p>通过设置文章 Front Matter 中 <code>sticky</code> 属性以进行置顶，数值越高，优先级越高。</p><p>设置置顶后，文章卡片右上角将出现置顶图标。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">sticky</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><blockquote><p>  <a href="https://yun.yunyoujun.cn/guide/config.html#type">https://yun.yunyoujun.cn/guide/config.html#type</a></p></blockquote><p>为文章设置 <code>type</code> 属性，即可将其转为其他类型卡片，并跳转 <code>url</code> 设置的链接。</p><p>譬如：</p><pre class="line-numbers language-none"><code class="language-none">---title: xxxtype: bilibiliurl: https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av8153395&#x2F;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在文章标题前将会出现 bilibili 的图标，点击标题会跳转至对应的链接。</p><p>目前默认支持以下类型（哔哩哔哩、豆瓣、GitHub、网易云音乐、推特、微信公众号、微博、语雀、知乎、Notion、外链）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">types</span><span class="token punctuation">:</span>  <span class="token key atrule">link</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>external<span class="token punctuation">-</span>link<span class="token punctuation">-</span>line  <span class="token key atrule">bilibili</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#FF8EB3"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>bilibili<span class="token punctuation">-</span>line  <span class="token key atrule">douban</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#007722"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>douban<span class="token punctuation">-</span>line  <span class="token key atrule">github</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> black    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>github<span class="token punctuation">-</span>line  <span class="token key atrule">netease-cloud-music</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#C10D0C"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>netease<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>music<span class="token punctuation">-</span>line  <span class="token key atrule">notion</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> black    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>notion  <span class="token key atrule">twitter</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#1da1f2"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>twitter<span class="token punctuation">-</span>line  <span class="token key atrule">wechat</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#1AAD19"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>wechat<span class="token punctuation">-</span>2<span class="token punctuation">-</span>line  <span class="token key atrule">weibo</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#E6162D"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>weibo<span class="token punctuation">-</span>line  <span class="token key atrule">yuque</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#25b864"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>yuque  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#0084FF"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>zhihu<span class="token punctuation">-</span>line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以自己在 <code>_config.yun.yml</code> 设置你跳转不同链接专属的图标和颜色。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">types</span><span class="token punctuation">:</span>  <span class="token key atrule">google</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> xxx    <span class="token key atrule">icon</span><span class="token punctuation">:</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当你指定的 <code>type</code> 不存在于默认支持中，也没有进行自定义，将默认使用蓝色的额外链接图标。</p><p>如果你想在你的外链卡片上显示一些信息，你可以写在 <code>&lt;!-- more --&gt;</code> 前，它会被当作摘要显示。</p><p>譬如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>yun<span class="token key atrule">type</span><span class="token punctuation">:</span> github<span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/YunYouJun/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>yun<span class="token punctuation">---</span>Hexo 主题 Yun&lt;<span class="token tag">!--</span> more <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hide-隐藏文章"><a href="#hide-隐藏文章" class="headerlink" title="hide-隐藏文章"></a>hide-隐藏文章</h2><p>你可以在文章头部添加 <code>hide</code> 属性，来临时隐藏某篇文章。</p><ul><li><code>index</code>: 设置为 <code>index</code> 时，将只在首页隐藏，归档中仍然展示。（譬如放一些没有必要放在首页的笔记，并在归档中方便自己查看。）</li><li><code>true</code>: 当设置为 <code>true</code> 时，该文章仍然会被渲染，你自己可以直接访问链接进行查看。但不会被显示在展示的文章卡片与归档中。</li></ul><pre class="line-numbers language-none"><code class="language-none">---title: xxxhide: true# hide: indexsitemap: falseindexing: false---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  什么？你想完全不渲染不显示？那你为何不将其放在 <code>_drafts</code> 文件夹下，或干脆不提交这篇文章。</p></blockquote><h2 id="reward-打赏"><a href="#reward-打赏" class="headerlink" title="reward-打赏"></a>reward-打赏</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">reward</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="内容字段"><a href="#内容字段" class="headerlink" title="内容字段"></a>内容字段</h1><h2 id="图片注释"><a href="#图片注释" class="headerlink" title="图片注释"></a>图片注释</h2><p><img src="https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png" alt="Audits - Lighthouse" loading="lazy"><em>谷歌浏览器 Audits - Lighthouse 检测分数</em></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">Audits - Lighthouse</span>](<span class="token url">https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png</span>)</span><span class="token italic"><span class="token punctuation">_</span><span class="token content">谷歌浏览器 Audits - Lighthouse 检测分数</span><span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2>    <div id="aplayer-kqiygRWC" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="497572729" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;497572729&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#C20C0C&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    <div id="aplayer-HCfYAaIM" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2008272804" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;2008272804&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><pre class="line-numbers language-none"><code class="language-none">type: albumstitle: 相册url: &#x2F;albums&#x2F;miracle.htmlabbrlink: e26d1860date: 2020-03-05 01:31:08updated: 2020-07-14 16:31:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h1><p>安装<code>npm install --save hexo-blog-encrypt</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 文章信息头</span><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hello World<span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 作为日记加密<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2016-03-30 21:12:21</span><span class="token key atrule">password</span><span class="token punctuation">:</span> mikemessi<span class="token key atrule">abstract</span><span class="token punctuation">:</span> 有东西被加密了<span class="token punctuation">,</span> 请输入密码查看.<span class="token key atrule">message</span><span class="token punctuation">:</span> 您好<span class="token punctuation">,</span> 这里需要密码.<span class="token key atrule">wrong_pass_message</span><span class="token punctuation">:</span> 抱歉<span class="token punctuation">,</span> 这个密码看着不太对<span class="token punctuation">,</span> 请再试试.<span class="token key atrule">wrong_hash_message</span><span class="token punctuation">:</span> 抱歉<span class="token punctuation">,</span> 这个文章不能被校验<span class="token punctuation">,</span> 不过您还是能看看解密后的内容.<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装hexo及部署</title>
      <link href="/posts/17723abd/"/>
      <url>/posts/17723abd/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以来都想搭建一个自己的博客系统，用来记录自己在学习中遇到的问题和一些心得体会，趁着这次没有太多的事情，搭建一个属于自己的博客。由于自己平时的笔记都是使用Markdown语法来撰写的，在搜索资料与对比后决定使用<code>Hexo</code>框架。</p><p>我不是一个前端程序员，有些东西不是很了解，写的有问题或有改进的地方请大家指出。</p><h1 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，她基于 <a href="https://nodejs.org/en/">Node.js</a>，相较于 Jekyll 他有以下特点:</p><ul><li><h3 id="超快速度"><a href="#超快速度" class="headerlink" title="超快速度"></a>超快速度</h3><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p></li><li><h3 id="支持-Markdown"><a href="#支持-Markdown" class="headerlink" title="支持 Markdown"></a>支持 Markdown</h3><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p></li><li><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>只需一条指令即可部署到 Github Pages，或其他网站</p></li><li><h3 id="丰富的插件"><a href="#丰富的插件" class="headerlink" title="丰富的插件"></a>丰富的插件</h3><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></li></ul><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的<a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a>来快速的插入特定形式的内容。</p><p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/">主题</a>。</p><ul><li><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3></li></ul><ol><li>Hexo</li><li>静态博客</li><li>无服务器</li><li>GitHub Pages</li></ol><h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li>Git</li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 安装 Hexo 步骤。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h1 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h1><h2 id="什么是-Node-js-？"><a href="#什么是-Node-js-？" class="headerlink" title="什么是 Node.js ？"></a><strong>什么是 Node.js ？</strong></h2><blockquote><p>  这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>  JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）</p><p>  在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>  2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>  Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>  当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br>  <a href="https://baike.baidu.com/item/node.js/7567977">Node.js | 百度百科</a><br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></p></blockquote><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/zh-cn/">下载｜ Node.js</a></p><p>建议下载<strong>长期支持版</strong>而非<strong>当前发布版</strong>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><blockquote><p>  Node.js 安装成功时也默认安装了 <code>npm</code>，在此后将会用到。<br>  <code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p></blockquote><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具—Git</p><blockquote><p>  Visual Studio Code，简称 VS Code。<br>  目前最为强大易用的编辑器，轻量且快速。（<del>宇宙第一编辑器</del>）<br>  注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积也相比 VS Code 都要大上一个量级。</p><p>  Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。<br>  简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>  你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>  （当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 <a href="https://git-lfs.github.com/">Git LFS</a>。）</p></blockquote><h2 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载 <a href="https://git-scm.com/">Git</a> 并安装（如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html">这里</a>）</p><p>macOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><blockquote><p>  类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p></blockquote><h1 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h1><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>这一部分内容，你也可以放到本地调试并预览成功后并打算线上部署的时候，再回过头来看。</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>  GitHub 一听便与 Git 有所渊源。<code>Git</code> 在英文中是懒人、饭桶之意。<code>Hub</code> 则是中心、集线器的意思。譬如 USB 集线器就是 USB Hub。所以 GitHub 就是饭桶中心（<del>大雾</del>）。<br>  GitHub 是全世界最大的开源项目与代码托管平台，也是众多开发者的交流场所。<del>还是全球最大的同性交友网站</del>。<br>  而代码托管本身用到的正是上文提到的 Git 技术。</p></blockquote><p>注册 <a href="https://github.com/">GitHub</a> 账号。（虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用手头的翻译软件。）</p><blockquote><p>  注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></blockquote><p>登录 GitHub。</p><h2 id="为什么要用-GitHub？"><a href="#为什么要用-GitHub？" class="headerlink" title="为什么要用 GitHub？"></a>为什么要用 GitHub？</h2><p>对于平民玩家来说，在初次尝试建立自己的网站时，也许并不会有闲钱或者说决心来购买自己的服务器与域名。<br>而 GitHub 则提供了 <a href="https://pages.github.com/">GitHub Pages</a> 这一服务。<br>用户们可以利用这一服务，部署自己的静态站点。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>点击右上角的 <code>+</code> -&gt; <code>New repository</code> 新建仓库。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211224358.png" loading="lazy"></p><p>仓库名称务必为 <code>你的用户名.github.io</code>，用户名是英文，大小写无所谓，但建议统一小写。（因为你会发现时常切换大小写很麻烦）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211224924.png" alt="image-20220211224814302" loading="lazy"></p><blockquote><p>  为什么必须这个作为仓库名？<br>  GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></blockquote><p>点击 <code>Create repository</code>。然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225115.png" alt="image-20220211225115298" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225205.png" alt="image-20220211225205880" loading="lazy"></p><p>点击那个链接，就会出现自己的网页啦，效果如下：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225305.png" alt="image-20220211225305706" loading="lazy"></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><a href="https://hexo.io/">Hexo</a></p><ul><li>GitHub: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>（直接参考文档也是一个不错的选择）</li></ul><h2 id="为嘛使用-Hexo-？"><a href="#为嘛使用-Hexo-？" class="headerlink" title="为嘛使用 Hexo ？"></a><strong>为嘛使用 Hexo ？</strong></h2><blockquote><p>  Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。<br>  你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。</p></blockquote><h2 id="为什么不是…"><a href="#为什么不是…" class="headerlink" title="为什么不是…?"></a><strong>为什么不是…?</strong></h2><blockquote><p>  其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。（当然，相应的功能和灵活性也大大提升。）静态化站点还有一个优势就是访问速度往往更快。<br>  静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。Hexo 提供的功能与 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。<br>  所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）</p></blockquote><h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在终端中输入以下命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-cli -g# 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行# sudo npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>  <code>install</code> 自然是安装。<br>  <code>hexo-cli</code> 则是 <code>hexo</code> 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br>  <code>-g</code> 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></blockquote><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>此时，请先通过 <code>cd</code> 进入你本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here）</p><p>接下来输入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo init 你的名字.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231417.png" alt="image-20220211231417468" loading="lazy"></p><blockquote><p>  <code>hexo</code> 正是因为我们之前安装了 <code>hexo-cli</code> 这一个包，所以我们可以在终端中使用 <code>hexo</code> 这一命令。<br>  <code>init</code> 初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致。</p><p>  如果在初始化过程中半天没有反应，多尝试几次，可能是因为本地连接GitHub的问题，可以考虑开代理或者修改host的方式解决。</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 进入你的博客文件夹cd 你的名字.github.io# 默认安装所有 &#96;package.json&#96; 文件中提到的包npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231631.png" alt="image-20220211231631300" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none"># 编译hexo g# 你也可以缩写成 hexo shexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231738.png" alt="image-20220211231738568" loading="lazy"></p><p><code>server</code> 代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 <code>localhost:4000</code> 就可以看到本地的网页了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231810.png" alt="image-20220211231810793" loading="lazy"></p><p>按 <code>Ctrl + C</code> 中断服务器的运行。</p><p>至此，基础的模版页面便已经搭建好了。</p><h1 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h1><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p>首先右键打开git bash，然后输入下面命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"wushuai"</span><span class="token function">git</span> config --global user.email <span class="token string">"2506812280@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><h2 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h2><p>生成密钥SSH key：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 三次回车即可生成 ssh key, 这里的邮箱最好填和刚才一样的</span>ssh-keygen -t rsa -C <span class="token string">"2506812280@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211232902.png" alt="image-20220211232902462" loading="lazy"></p><p>然后用文本编辑器(如notepad)打开id_rsa.pub这个文件, 全选复制。文件路径在命令行的提示里面可以看见。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233434.png" alt="image-20220211233434473" loading="lazy"></p><p>接下来到GitHub上，打开“Account settings”–“SSH Keys”页面，然后点“Add SSH Key”，填上Title（随意写），在Key文本框里粘贴 id_rsa.pub文件里的全部内容。点“Add Key”，你就应该看到已经添加的Key，可以添加多个Key</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233345.png" alt="image-20220211233345526" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233622.png" alt="image-20220211233622008" loading="lazy"></p><p>验证是否成功，在git bash里输入下面的命令，出现你的用户名，那就成功了。</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233819.png" alt="image-20220211233819250" loading="lazy"></p><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211234631.png" alt="image-20220211234631497" loading="lazy"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>为了更方便的部署到 GitHub Pages，Hexo 提供了 <code>hexo-deployer-git</code> 插件。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>_config.yml</code> 中配置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 你此前新建的仓库的链接 <span class="token comment"># 比如：https://github.com/wushuai2000/wushuai2000.github.io</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main <span class="token comment"># 默认使用 main 分支</span>  <span class="token key atrule">message</span><span class="token punctuation">:</span> Update Hexo Static Content <span class="token comment"># 你可以自定义此次部署更新的说明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存，部署！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>  第一次可能需要你输入用户名与密码。<br>  密码输入的时候不会出现 ***，不要害怕，已经输入进去了。</p></blockquote><p>等待完成后，打开网址 <code>https://你的名字.github.io</code> 就能看到你的线上网站了。</p><blockquote><p>  使用 https，http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 <code>http</code> 链接为不安全。<br>  为了安全，建议开启强制 https 跳转。<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS</code>。（翻到下面）<br>  此时，http 网址会自动重定向到 https</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装hexo主题yun</title>
      <link href="/posts/17723abd/"/>
      <url>/posts/17723abd/</url>
      
        <content type="html"><![CDATA[<h1 id="安装渲染器"><a href="#安装渲染器" class="headerlink" title="安装渲染器"></a>安装渲染器</h1><blockquote><p>  如果您没有 <code>pug</code> 与 <code>stylus</code> 的渲染器，请先安装： <a href="https://github.com/hexojs/hexo-renderer-pug">hexo-renderer-pug</a> （这个是 Hexo 官方在维护，但是好像没有下面的星多，更新的勤快。） 或 <a href="https://github.com/maxknee/hexo-render-pug">hexo-render-pug</a> （以及前者尚未支持开发时热更新，后者支持。） 和 <a href="https://github.com/hexojs/hexo-renderer-stylus">hexo-renderer-stylus</a></p>  <pre class="line-numbers language-none"><code class="language-none">npm install hexo-render-pug hexo-renderer-stylus --save# oryarn add hexo-render-pug hexo-renderer-stylusnpm install hexo-render-pug hexo-renderer-stylus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220213105356.png" alt="image-20220213105356132" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none">node -vnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.orgnpm install -g yarnnpm install hexo-cli -ghexo init wushuai2000.github.iocd wushuai2000.github.ionpm installnpm install hexo-render-pug hexo-renderer-stylusnpm i hexo-theme-yun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo绑定域名</title>
      <link href="/posts/7068443c/"/>
      <url>/posts/7068443c/</url>
      
        <content type="html"><![CDATA[<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a><strong>购买域名</strong></h2><p>自定义域名第一步：挑选好一个自己喜欢的域名并购买，域名服务商可以在阿里云旗下的万网或者腾讯云都可以，由于我之前就在阿里云买了一个域名：ccsu.top，没有使用，所以现在就用上了</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104451.png" alt="image-20220212104451749" loading="lazy"></p><p>买完之后在阿里云控制台域名下面就会展示出购买的域名信息</p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a><strong>解析域名</strong></h2><p>以我的阿里云为例，如下图所示，添加两条解析记录：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104243.png" alt="image-20220212104243325" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104303.png" alt="image-20220212104303051" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212103451.png" alt="image-20220212103451170" loading="lazy"></p><h2 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a><strong>设置CNAME</strong></h2><p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212103354.png" alt="image-20220212103354458" loading="lazy"></p><p>在项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），填写上域名。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。完成上述步骤之后就可以在浏览器输入自己的域名访问了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212105212.png" alt="image-20220212105212611" loading="lazy"></p><h2 id="Hexo推送GitHub-Pages时自定义域名失效的问题"><a href="#Hexo推送GitHub-Pages时自定义域名失效的问题" class="headerlink" title="Hexo推送GitHub Pages时自定义域名失效的问题"></a>Hexo推送GitHub Pages时自定义域名失效的问题</h2><p>用Hexo可以实现基于Github Pages的个人博客系统，默认博客网址是 username.github.io</p><p>如果想换成自己的域名，可以在Github对应repository的Setting里，找到Github Pages， 在Custom domain里填进去自己的域名，Save。</p><p>再在域名商那里设置好域名解析，就可以实现个人域名了。</p><p>仔细观察可以发现，在Github设置好Custom domain之后，博客对应的repository里，会多出一个名为CNAME的文件，内容是自己的自定义域名的网址。</p><p>然而在本地更新hexo博客内容，并通过Git更新托管在Github的博客时，由于Hexo默认没有这个CNAME文件，原本的CNAME文件会被抹掉，于是自定义域名就失效了。</p><p>解决办法很简单：<strong>在Hexo目录里的source文件夹下面，新建一个同样内容、同样名字的CNAME文件即可。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IAR软件安装</title>
      <link href="/posts/55cac7e0/"/>
      <url>/posts/55cac7e0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Zigbee概述"><a href="#一、Zigbee概述" class="headerlink" title="一、Zigbee概述"></a>一、Zigbee概述</h1><h2 id="1-什么是Zigbee"><a href="#1-什么是Zigbee" class="headerlink" title="1.什么是Zigbee"></a>1.什么是Zigbee</h2><p>ZigBee是一种近距离、低复杂度的双向无线通信系统，主要用于距离短、功耗低、传输速率不高的电子设备之间进行数据传输，且具有低功耗、低成本、大容量、时延短、可靠性高以及网络拓扑结构灵活的特点。</p><p>Zigbee本质就是无线设备之间的一种通信方式，类似于人和人之间用普通话交流，普通话就是一种通信方式。Zigbee，Zigbee通信方式，Zigbee协议说的都是一回事。</p><p>Zigbee的主要作用是用来构建无线局域网。         </p><h2 id="2-各通信方式的比较"><a href="#2-各通信方式的比较" class="headerlink" title="2.各通信方式的比较"></a>2.各通信方式的比较</h2><p>蓝牙：功耗比较低，组建网络节点数少(7~8个)</p><p>WIFI：通信速率比较大，功耗大，等等</p><p>Zigbee：<br>    优点：可以组建大规模的网络，功耗低(TI cc2530正常工作电流8mA,最低工作电流只有几uA)<br>    缺点：通信速率比较小( 250KBPS)</p><p><strong>注意</strong>：Zigbee只是完成数据通信的工作，要实现具体的使用的功能系统，一般会把Zigbee模块连接到计算机(处理器)，计算机通过编好的程序来对整个系统进行监控。</p><h2 id="3-相关概念"><a href="#3-相关概念" class="headerlink" title="3.相关概念"></a>3.相关概念</h2><p>Zigbee联盟：制定Zigbee协议的协会组织(美国)</p><p>TI(德州仪器)：一个Zigbee芯片厂商，主要把Zigbee协议用于推广和实际应用。除了TI，还有ember,飞思卡尔等等</p><p>Zstack：TI公司推出Zigbee软件上支持的协议栈。实质就是一堆示例代码。</p><p>cc2530：TI公司推出的支持Zigbee底层协议的一种芯片(8051单片机内核)</p><p>​                                cc2530F256  TI  58J</p><p>IAR：写Zigbee程序的一个软件，集成开发工具，编辑器，编译器，下载器，仿真器。</p><h2 id="4-Zigbee网络体系结构"><a href="#4-Zigbee网络体系结构" class="headerlink" title="4.Zigbee网络体系结构"></a>4.Zigbee网络体系结构</h2><p>​    ZigBee协议基础为IEEE 802.15.4，ZigBee联盟在IEEE 802.15.4基础之上重新定义了网络层和应用层。Zigbee使用全球免费频段进行通讯，能够在三个不同的频段上通讯。全球通用的频段是 2.400GHz-2.484GHz，欧洲采用的频段是 868.0 MHz-868.66MHz，美国采用的频段是 902MHz-928MHz。传输速率分别为 250kbps 20kbps 和 40kbps。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125426.png" alt="image-20210524144248153" loading="lazy"></p><h1 id="二-IAR软件的安装使用"><a href="#二-IAR软件的安装使用" class="headerlink" title="二.IAR软件的安装使用"></a>二.IAR软件的安装使用</h1><h2 id="1-IAR软件的安装与注册"><a href="#1-IAR软件的安装与注册" class="headerlink" title="1.IAR软件的安装与注册"></a>1.IAR软件的安装与注册</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125452.png" alt="image-20210524144514258" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125457.png" alt="image-20210524144603942" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125500.png" alt="image-20210524144617238" loading="lazy"></p><h2 id="2-IAR工程建立"><a href="#2-IAR工程建立" class="headerlink" title="2.IAR工程建立"></a>2.IAR工程建立</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125507.png" alt="image-20210524160638596" loading="lazy"></p><p>(1)先创建一个工作空间</p><p>​     File–&gt;new–&gt;workspace</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125507.png" alt="image-20210524160439296" loading="lazy"><br>(2)创建一个工程</p><p>​    Project–&gt;Create New Project–&gt;Empty project–&gt;0K–&gt;保存到指定目录</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125528.png" alt="image-20210524160521787" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125533.png" alt="image-20210524160541970" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125539.png" alt="image-20210524160725839" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125542.png" alt="image-20210524160739328" loading="lazy"></p><p>(3)新建一个文件–&gt;保存为.c文件</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125548.png" alt="image-20210524161451809" loading="lazy"></p><p>(4)把.c文件添加进工程</p><p>​    右击”工程名-Debug”–&gt;Add</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125557.png" alt="image-20210524161527552" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125601.png" alt="image-20210524161540404" loading="lazy"></p><p>(5)编译：保存工作空间到已创建的工程文件夹中</p><h2 id="3-选项配置"><a href="#3-选项配置" class="headerlink" title="3.选项配置"></a>3.选项配置</h2><p>  “工程名-Debug”–&gt;options    </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125605.png" alt="image-20210524161841240" loading="lazy">    (1)General Options–&gt;Device 选择Texas Instruments cc2530F256<br>    <img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125609.png" alt="image-20210524161944984" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125616.png" alt="image-20210524162035248" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125620.png" alt="image-20210524162143659" loading="lazy"></p><p>​    (2)Linker–&gt;Output–&gt;Override default勾上，Allow C-SPY-specific extra output file 勾上</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125624.png" alt="image-20210524162850892" loading="lazy"><br>    (3)Debugger–&gt;Driver–&gt;选择Texas Instrments</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125630.png" alt="image-20210524163015925" loading="lazy"></p><h1 id="三、驱动安装"><a href="#三、驱动安装" class="headerlink" title="三、驱动安装"></a>三、驱动安装</h1><p>在设备管理器里，未安装驱动显示的是SmartRF04EB，装好驱动后，显示的则是CC2430DB</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125634.png" alt="20210524163315.png" loading="lazy"></p><blockquote><p>  哈希值错误解决办法<br>  1.Windows键+ R，输入shutdown.exe &#x2F;r &#x2F;o &#x2F;f &#x2F;t 00 ，系统会重新启动一个“选择一个选项”<br>  2从“选择一个选项”屏幕上，选择“疑难解答” ，选择从“疑难解答”屏幕“高级选项” ，选择从“高级选项”屏幕“Windows启动设置” ，点击“重新启动”按钮，系统将重新启动，以“高级启动选项”屏幕 ；重启<br>  3.这会重启之后就跳出来安全模式等列表了<br>  4.选择倒数第三个，禁用强制驱动程序签名，对应哪个数字就按那个数字。<br>  5.重启，按照一般方法驱动就可以成功安装了</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125638.png" alt="image-20210524164934779" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125642.png" alt="image-20210524164954508" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125646.png" alt="image-20210524165131848" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125702.png" alt="image-20210524165200626" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125659.png" alt="image-20210524165209775" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125709.png" alt="20210524165248.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125715.png" alt="image-20210524165314844" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125911.jpeg" alt="IMG_20210524_164615" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125836.jpeg" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125901.png" alt="image-20210524213027330" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125854.png" alt="image-20210524213040881" loading="lazy"></p><h1 id="四、编译与仿真"><a href="#四、编译与仿真" class="headerlink" title="四、编译与仿真"></a>四、编译与仿真</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125752.png" alt="image-20210524165506833" loading="lazy"></p><h1 id="五、生成Hex文件设置"><a href="#五、生成Hex文件设置" class="headerlink" title="五、生成Hex文件设置"></a>五、生成Hex文件设置</h1><p>“工程名-Debug”–&gt;options ，Linker–&gt;Extra Output–&gt;Genetare extra outputfile 勾上，Override defualt勾上–&gt;命名为.hex文件，output format :intel-extended–&gt;OK</p><p>​    再次编译后就会在 Debug&#x2F;Exe目录中生成.hex文件</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125749.png" alt="image-20210524170747455" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125743.png" alt="image-20210524171410614" loading="lazy"></p><h1 id="六、ZigBee核心控制器"><a href="#六、ZigBee核心控制器" class="headerlink" title="六、ZigBee核心控制器"></a>六、ZigBee核心控制器</h1><p>无线通信采用Ti Zigbee方案。Zigbee节点采用Ti(德州仪器)公司 CC2530，GEC-CC2530有21个数字输入&#x2F;输出引脚，可以配置为通用数字I&#x2F;O或外设I&#x2F;O信号，外设I&#x2F;O可连接到ADC、定时器或USART等。</p><p>其中21个I&#x2F;O 引脚分成3 个端口(端口0、端口1 和端口2，表示为P0、P1 和P2),其中，P0和P1 每组有8个IO引脚，而P2组仅有5 个引脚实物如图。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125737.png" alt="image-20210524213506210" loading="lazy"></p><h1 id="七、代码烧录测试"><a href="#七、代码烧录测试" class="headerlink" title="七、代码烧录测试"></a>七、代码烧录测试</h1><p>LED闪烁</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> uchar<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  uint<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED0</span> <span class="token expression">P1_0                </span><span class="token comment">//定义P1.0口为LED0控制端</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1</span> <span class="token expression">P1_1                </span><span class="token comment">//定义P1.0口为LED1控制端</span></span><span class="token comment">//点亮两盏LED灯</span><span class="token keyword">void</span> <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P1DIR <span class="token operator">|=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>    LED0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LED1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span>uint msec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     uint i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>msec<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">535</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                      <span class="token punctuation">&#123;</span>        LED1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  LED0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               LED1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   LED0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> IAR软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee的GPIO与外部中断原理</title>
      <link href="/posts/4adf1e22/"/>
      <url>/posts/4adf1e22/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-cc2530最小系统"><a href="#一、-cc2530最小系统" class="headerlink" title="一、 cc2530最小系统"></a>一、 cc2530最小系统</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130053.png" alt="image-20210525142548926" loading="lazy"></p><h1 id="二、GPIO概述"><a href="#二、GPIO概述" class="headerlink" title="二、GPIO概述"></a>二、GPIO概述</h1><p> <img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130107.png" alt="image-20210525143732557" loading="lazy"></p><h1 id="三、IO口的输入输出配置"><a href="#三、IO口的输入输出配置" class="headerlink" title="三、IO口的输入输出配置"></a>三、IO口的输入输出配置</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130112.png" alt="image-20210525143800845" loading="lazy"></p><p> <strong>上拉输入</strong>：有上拉电阻</p><p>​                按键未按下时端口接高电平，即高电平 1  状态—3.3v</p><p>​                按键按下时端口接低电平，即低电平 0 状态——-0</p><p> <strong>下拉输入</strong>：有下拉电阻</p><p>​                 按键未按下时端口接低电平，即低电平 0 状态—0v</p><p>​                 按键按下时端口接高电平，即高电平 1 状态——3.3v</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130119.png" alt="image-20210525143939066" loading="lazy"></p><h1 id="四、外部中断"><a href="#四、外部中断" class="headerlink" title="四、外部中断"></a>四、外部中断</h1><h2 id="1-什么是外部中断"><a href="#1-什么是外部中断" class="headerlink" title="1.什么是外部中断"></a>1.什么是外部中断</h2><p>外部中断是单片机实时地处理外部事件的一种内部机制。当某种外部事件发生时，单片机的中断系统将迫使CPU暂停正在执行的程序，转而去进行中断事件的处理；中断处理完毕后．又返回被中断的程序处，继续执行下去。</p><h2 id="2-外部中断的作用"><a href="#2-外部中断的作用" class="headerlink" title="2.外部中断的作用"></a>2.外部中断的作用</h2><h3 id="1-实时处理功能"><a href="#1-实时处理功能" class="headerlink" title="(1)实时处理功能"></a>(1)实时处理功能</h3><p>在实时控制中，现场的各种参数、信息均随时问和现场而变化。这些外界变量可根据要求随时向CPU发出中断申请．请求CPU及时处珲中断请求，如中断条件</p><h3 id="2-故障处理功能"><a href="#2-故障处理功能" class="headerlink" title="(2)故障处理功能"></a>(2)故障处理功能</h3><p>针对难以预料的情况或故障，如掉电、存储出错、运算溢出等，可通过中断系统由故障源向CPU发出中断请求，再由CPU转到相应的故障处理程序进行处理。</p><h2 id="3-cc2530的外部中断原理"><a href="#3-cc2530的外部中断原理" class="headerlink" title="3.cc2530的外部中断原理"></a>3.cc2530的外部中断原理</h2><p> CC2530 有 21 个数字 I&#x2F;O 引脚，可以配置为通用数字 I&#x2F;O 或外设 I&#x2F;O 信号，配置为连接到 ADC、定时器或 USART 外设。这些 I&#x2F;O 口的用途可以通过一系列寄存器配置，由用户软件加以实现。</p><p>​    I&#x2F;O 端口具备如下重要特性：</p><ul><li>​        21 个数字 I&#x2F;O 引脚</li><li>​        可以配置为通用 I&#x2F;O 或外部设备 I&#x2F;O</li><li>​        输入口具备上拉或下拉能力</li><li>​        具有外部中断能力</li></ul><p>​     21 个 I&#x2F;O 引脚都可以用作于外部中断源输入口。因此如果需要外部设备可以产生中断。外部中断功能也可以从睡眠模式唤醒设备。</p><p>​    通用 I&#x2F;O 引脚设置为输入后，可以用于产生中断。中断可以设置在外部信号的上升或下降沿触发。 P0、 P1 或 P2 端口都有中断使能位，对位于 IENl-2 寄存器内的端口所有的位都是公共的，如下：</p><ul><li><p>IENI.P0IE： P0 中断使能</p></li><li><p>IEN2.PIIE： P1 中断使能</p></li><li><p>IEN2.P2IE： P2 中断使能</p></li></ul><p>除了这些公共中断使能之外，每个端口的位都有位于 SFR 寄存器 P0IEN、P1IEN 和 P2IEN 的单独的中断使能。即使配置为外设 I&#x2F;O 或通用输出的 I&#x2F;O 引脚使能时都有中断产生。 </p><p>当中断条件发生在 I&#x2F;O 引脚之一上面，P0-P2 中断标志寄存器 P0IFG、P1IFG或 P2IFG 中相应的中断状态标志将设置为 1。不管引脚是否设置了它的中断使能位，中断状态标志都被设置。当中断已经执行，中断状态标志被清除，该标志写入 0。这个标志必须在清除 CPU 端口中断标志（ PxIF）之前被清除。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130124.png" alt="image-20210525164054625" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130128.png" alt="image-20210525164314863" loading="lazy"></p><p>用于中断的 SFR 寄存器描述在下一节。寄存器总结如下：</p><ul><li>P0IEN: P0 中断使能</li><li>P1IEN： P1 中断使能</li><li>P2IEN： P2 中断使能</li><li>PICTL： P0、 P1 和 P2 触发沿设置</li><li>P0FG： P0 中断标志</li><li>P1IFG： P1 中断标志</li><li>P2IFG： P2 中断标志</li></ul><h2 id="4-外部中断配置步骤"><a href="#4-外部中断配置步骤" class="headerlink" title="4.外部中断配置步骤"></a>4.外部中断配置步骤</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130134.png" alt="image-20210525170345047" loading="lazy"></p><p>(1)初始化IO口工作在普通IO模式，上拉输入状态</p><p>(2)首先打开IO口组中断允许位&#x3D;&#x3D;&#x3D;&gt;PxIE</p><ul><li>​    P0IE  是 IEN1(0xB8)的第5位</li><li>​    P1IE  是 IEN2(0x9A)的第4位</li><li>​    P2IE  是 IEN2(0X9A)的第1位</li></ul><p>(3)打开组内对应的具体某IO口中断&#x3D;&#x3D;&#x3D;&#x3D;&gt;PxIEN</p><p>(4)设置是上升沿还是下降沿触发&#x3D;&#x3D;&#x3D;&gt;PICTL(0,代表上升沿触发；1，代表下降沿触发)</p><p>(5)打开CPU总中断 EA&#x3D;1;    </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//(1)初始化IO口工作在普通IO模式，上拉输入状态</span>    <span class="token function">key_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//(2)首先打开IO口组中断允许位===>PxIE</span>    IEN2 <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">//0001 0000 0x10</span>    <span class="token comment">//(3)打开组内对应的具体某IO口中断====>PxIEN</span>    P1IEN <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0100 0x40</span>    <span class="token comment">//(4)设置是上升沿还是下降沿触发===>PICTL(0,代表上升沿触发；1，代表下降沿触发)</span>    PICTL <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0010 0x02 设置为下降沿触发</span>    <span class="token comment">//(5)打开CPU总中断 EA=1;</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-外部中断服务程序示例"><a href="#5-外部中断服务程序示例" class="headerlink" title="5.外部中断服务程序示例"></a>5.外部中断服务程序示例</h2><p><strong>led_key.c</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led_key.h"</span></span><span class="token comment">/*@led init：对LED进行初始化@retval:none @note:LED对应的引脚是P10和P11，初始化为普通IO，输出模式*/</span><span class="token keyword">void</span> <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P1SEL <span class="token operator">&amp;=</span> <span class="token number">0xfc</span><span class="token punctuation">;</span>  <span class="token comment">//1111 1100  把P1_0和P1_1设置为通IO模式</span>    P1DIR <span class="token operator">|=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0011  把P1_0和P1_1设置为输出模式</span>    P1_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    P1_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*@led ctr1：对LED的状态进行控的函数@led num：指定对哪一盏LED等进行控制，可选择为LEDO,LED1@led state：指定LED的状态，可选择为 LED ON, LED OFF @retval：none*/</span><span class="token keyword">void</span> <span class="token function">led_ctrl</span><span class="token punctuation">(</span><span class="token keyword">int</span> led_num<span class="token punctuation">,</span><span class="token keyword">int</span> led_state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>led_num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> LED0<span class="token operator">:</span>        P1_0 <span class="token operator">=</span> led_state<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> LED1<span class="token operator">:</span>        P1_1 <span class="token operator">=</span> led_state<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*@key init：按键的初始化函数@retval none @note：按键应的引是P12，应初始化为普通IO，上拉输入模式*/</span><span class="token keyword">void</span> <span class="token function">key_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P1SEL <span class="token operator">&amp;=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span>   <span class="token comment">// 1111 1011 把P12设置为普通IO模式</span>    P1DIR <span class="token operator">&amp;=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span>   <span class="token comment">// 1111 1011 把P12设置为输入模式</span>    P1INP <span class="token operator">&amp;=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span>   <span class="token comment">// 1111 1011 把P12设置为上下拉模式</span>    P2INP <span class="token operator">&amp;=</span> <span class="token number">0xBF</span><span class="token punctuation">;</span>   <span class="token comment">// 1011 1111 把P1组设置为上拉模式</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">key_status</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> P1_2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*@exti_init：中断初始化函数@retval none @note：none*/</span><span class="token keyword">void</span> <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//(1)初始化IO口工作在普通IO模式，上拉输入状态</span>    <span class="token function">key_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//(2)首先打开IO口组中断允许位===>PxIE</span>    IEN2 <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">//0001 0000 0x10</span>    <span class="token comment">//(3)打开组内对应的具体某IO口中断====>PxIEN</span>    P1IEN <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0100 0x40</span>    <span class="token comment">//(4)设置是上升沿还是下降沿触发===>PICTL(0,代表上升沿触发；1，代表下降沿触发)</span>    PICTL <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0010 0x02 设置为下降沿触发</span>    <span class="token comment">//(5)打开CPU总中断 EA=1;</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">587</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">optimize<span class="token operator">=</span>none       </span><span class="token comment">//不进行编译优化</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vector<span class="token operator">=</span>P1INT_VECTOR </span><span class="token comment">//P1组引发中断,vector中断矢量表,下面这段代码必须放在这个地方</span></span>__interrupt <span class="token keyword">void</span> <span class="token function">exint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//P1组</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>P1IFG <span class="token operator">&amp;</span> <span class="token number">0X04</span><span class="token punctuation">)</span><span class="token comment">//0000 0100</span>      <span class="token punctuation">&#123;</span><span class="token comment">//确定是P1_2产生了外部中断</span>             <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按键消抖</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>P1_2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>        <span class="token comment">//中断要做的事情</span>                P1_0 <span class="token operator">=</span> <span class="token operator">!</span>P1_0<span class="token punctuation">;</span>                P1_1 <span class="token operator">=</span> <span class="token operator">!</span>P1_1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      P1IFG <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//把中断状态标志位清0</span>      P1IF <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//组中断标志位清0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>led_key.h</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__LED_KEY_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LED_KEY_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token keyword">enum</span> <span class="token class-name">LED_NUM</span><span class="token punctuation">&#123;</span>LED0<span class="token punctuation">,</span>LED1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">LED_STATE</span><span class="token punctuation">&#123;</span>LED_OFF<span class="token punctuation">,</span>LED_ON<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">KEY_STATUS</span><span class="token punctuation">&#123;</span>KEY_DOWN<span class="token punctuation">,</span>KEY_UP<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">led_ctrl</span><span class="token punctuation">(</span><span class="token keyword">int</span> led_num<span class="token punctuation">,</span><span class="token keyword">int</span> led_state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">key_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">key_status</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>main.c</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led_key.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> GPIO </tag>
            
            <tag> cc2530 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zstack协议栈</title>
      <link href="/posts/3fbe36e5/"/>
      <url>/posts/3fbe36e5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Zstack协议栈概述"><a href="#一、Zstack协议栈概述" class="headerlink" title="一、Zstack协议栈概述"></a>一、Zstack协议栈概述</h1><h2 id="什么是Zstack协议栈"><a href="#什么是Zstack协议栈" class="headerlink" title="什么是Zstack协议栈"></a>什么是Zstack协议栈</h2><p>为了使Zigbee的开发更加简单高效，TI公司推出了基于cc2530芯片的协议栈Z-STACK.协议栈的实质就是能实现各个功能的实例框架代码，我们想要实现自己的功能程序，只需要在协议栈的基础上修改或添加即可。</p><ul><li>​    Z-STACK的发展</li><li>​    由0.01版本 到 1.5.1a..</li><li>​    mesh: 之前的升级版本</li><li>​    HA:  家庭自动化(智能家居)</li><li>​    SE:  智能能源</li></ul><p>​    ….他们的区别是应用部分不同(初学者建议用早期的版本)</p><h1 id="二、Zstack协议栈结构"><a href="#二、Zstack协议栈结构" class="headerlink" title="二、Zstack协议栈结构"></a>二、Zstack协议栈结构</h1><p>​      Z-Stack协议栈符合ZigBee协议，由物理层、MAC层、网络层和应用层组成，由于Z-Stack协议栈是一个半开源的协议栈，MAC层和网络层的部分源代码是非开源的，因此我们学习的开源部分，主要包括main函数、APP层、ZDO层、NWK层和HAL层。</p><h2 id="1-工程目录结构"><a href="#1-工程目录结构" class="headerlink" title="1.工程目录结构"></a>1.工程目录结构</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130146.png" alt="image-20210526141312372" loading="lazy"></p><p><strong>APP</strong>： 应用层目录， 这是用户创建各种不同工程的区域， 在这个目录中包含了应用层的内容和这个项目的主要内容， 在协议栈里面一般是以操作系统的任务实现的。<br><strong>HAL</strong>： 硬件层目录， 包含有与硬件相关的配置和驱动及操作函数。<br><strong>MAC</strong>： MAC 层目录， 包含了 MAC 层的参数配置文件及其 MAC 的 LIB 库的函数接口文件。<br><strong>MT</strong>： 监控调试层， 主要用于调试目的， 即实现通过串口调试各层， 与各层进行直接交互。<br><strong>NWK</strong>： 网络层目录， 含网络层配置参数文件及网络层库的函数接口文件， APS 层库的函数接口。<br><strong>OSAL</strong>： 协议栈的操作系统。<br><strong>Profile</strong>： AF 层目录， 包含 AF 层处理函数文件。<br><strong>Security</strong>： 安全层目录， 安全层处理函数接口文件， 比如加密函数等。<br><strong>Services</strong>： 地址处理函数目录， 包括着地址模式的定义及地址处理函数。<br><strong>Tools</strong>： 工程配置目录， 包括空间划分及 ZStack 相关配置信息。<br><strong>ZDO</strong>： ZDO 目录。<br><strong>ZMac</strong>： MAC 层目录， 包括 MAC 层参数配置及 MAC 层 LIB 库函数回调处理函数。<br><strong>ZMain</strong>： 主函数目录， 包括入口函数 main（ ） 及硬件配置文件。<br><strong>Output</strong>： 输出文件目录， 这个 EW8051 IDE 自动生成的。    </p><h2 id="2-main函数解析"><a href="#2-main函数解析" class="headerlink" title="2.main函数解析"></a>2.main函数解析</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 关闭所有中断*/</span><span class="token function">osal_int_disable</span><span class="token punctuation">(</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 初始化硬件设备*/</span><span class="token function">HAL_BOARD_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*电源检测*/</span><span class="token function">zmain_vdd_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化I/O*/</span><span class="token function">InitBoard</span><span class="token punctuation">(</span> OB_COLD <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化硬件抽象层HAL驱动*/</span><span class="token function">HalDriverInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化NV*/</span><span class="token function">osal_nv_init</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化 MAC*/</span><span class="token function">ZMacInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*确定64位IEEE地址*/</span><span class="token function">zmain_ext_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化NV向量*/</span><span class="token function">zgInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NONWK</span></span><span class="token comment">/* AF层初始化/afInit();#endif/*初始化任务*/</span><span class="token function">osal_init_system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*开启中断*/</span><span class="token function">osal_int_enable</span><span class="token punctuation">(</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*硬件I/O初始化完毕*/</span><span class="token function">InitBoard</span><span class="token punctuation">(</span> OB_READY <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">zmain_dev_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 如果定义了LCD，初始化LCD */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LCD_SUPPORTED</span></span><span class="token function">zmain_lcd_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">WDT_IN_PM1</span></span><span class="token comment">/* 如果定义了看门狗，看门狗使能 */</span><span class="token function">WatchDogEnable</span><span class="token punctuation">(</span> WDTIMX <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*操作系统运行*/</span><span class="token function">osal_start_system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>osal_int_disable()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint8 <span class="token function">osal_int_disable</span><span class="token punctuation">(</span> uint8 interrupt_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*判断ID是否为中断ID*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> interrupt_id <span class="token operator">==</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*关掉所有中断*/</span><span class="token function">HAL_DISABLE_INTERRUPTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*中断关闭成功，返回SUCCESS */</span><span class="token keyword">return</span> <span class="token punctuation">(</span> SUCCESS <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">/*如果ID与INST_ALL不同，返回INVALID_INTERRUPT_ID*/</span><span class="token keyword">return</span> <span class="token punctuation">(</span> INVALID_INTERRUPT_ID <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-APP层解析"><a href="#3-APP层解析" class="headerlink" title="3.APP层解析"></a>3.APP层解析</h2><p>OSAL_SampleApp.c中包含osalInitTasks()与taskArr[]。</p><p><strong>osalInitTasks()函数主要功能是为任务分配空间</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">osalInitTasks</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uint8 taskID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tasksEvents <span class="token operator">=</span> <span class="token punctuation">(</span>uint16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">osal_mem_alloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> uint16 <span class="token punctuation">)</span> <span class="token operator">*</span> tasksCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">osal_memset</span><span class="token punctuation">(</span> tasksEvents<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span> uint16 <span class="token punctuation">)</span> <span class="token operator">*</span> tasksCnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">macTaskInit</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">nwk_init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Hal_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span> MT_TASK <span class="token punctuation">)</span></span></span>    <span class="token function">MT_TaskInit</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">APS_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FRAGMENTATION <span class="token punctuation">)</span></span></span>    <span class="token function">APSF_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">ZDApp_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FREQ_AGILITY <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_PANID_CONFLICT <span class="token punctuation">)</span></span></span>    <span class="token function">ZDNwkMgr_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">SampleApp_Init</span><span class="token punctuation">(</span> taskID <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130152.png" alt="image-20210526142358533" loading="lazy"></p><p><strong>OSAL_SampleApp.c</strong></p><p><strong>tasksArr中存放了事件处理回调函数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> pTaskEventHandlerFn tasksArr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    macEventLoop<span class="token punctuation">,</span>    nwk_event_loop<span class="token punctuation">,</span>    Hal_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span> MT_TASK <span class="token punctuation">)</span></span></span>    MT_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    APS_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FRAGMENTATION <span class="token punctuation">)</span></span></span>    APSF_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    ZDApp_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FREQ_AGILITY <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_PANID_CONFLICT <span class="token punctuation">)</span></span></span>    ZDNwkMgr_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    SampleApp_ProcessEvent<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130157.png" alt="image-20210526142515869" loading="lazy"></p><p><strong>Z-Stack协议栈的APP层主要功能是实现用户定义的事件，APP层由5个文件组成</strong>    </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130201.png" alt="image-20210526142553502" loading="lazy"></p><blockquote><p>  SamplApp.c文件主要有两个功能：<br>      (1)对应用层用户定义的任务<br>      (2)进行初始化；调用事件处理函数。</p></blockquote><ul><li>用户任务初始化函数SampleApp_Init()</li><li>任务处理函数SampleApp_ProcessEvent()</li><li>按键处理事件SampleApp_HandleKeys()</li><li>数据发送函数SampleApp_SendFlashMessage()</li><li>数据发送函数SampleApp_SendPeriodicMessage()</li><li>数据接收函数SampleApp_MessageMSGCB()</li></ul><p><strong>SampleApp_Init()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SampleApp_Init</span><span class="token punctuation">(</span> uint8 task_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SampleApp_TaskID <span class="token operator">=</span> task_id<span class="token punctuation">;</span>    SampleApp_NwkState <span class="token operator">=</span> DEV_INIT<span class="token punctuation">;</span>    SampleApp_TransID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> BUILD_ALL_DEVICES <span class="token punctuation">)</span></span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">readCoordinatorJumper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        zgDeviceLogicalType <span class="token operator">=</span> ZG_DEVICETYPE_COORDINATOR<span class="token punctuation">;</span>    <span class="token keyword">else</span>        zgDeviceLogicalType <span class="token operator">=</span> ZG_DEVICETYPE_ROUTER<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> HOLD_AUTO_START <span class="token punctuation">)</span></span></span>    <span class="token function">ZDOInitDevice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token comment">/*SampleApp_Periodic_DstAddr地址模式初始化为广播地址*/</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>addrMode <span class="token operator">=</span>    <span class="token punctuation">(</span><span class="token class-name">afAddrMode_t</span><span class="token punctuation">)</span>AddrBroadcast<span class="token punctuation">;</span>    <span class="token comment">/* SampleApp_Periodic_DstAddr端点初始化*/</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>shortAddr <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>addrMode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">afAddrMode_t</span><span class="token punctuation">)</span>afAddrGroup<span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>shortAddr <span class="token operator">=</span> SAMPLEAPP_FLASH_GROUP<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130206.png" alt="image-20210526143651898" loading="lazy"></p><p><strong>SampleApp_Init()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SampleApp_epDesc<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>task_id <span class="token operator">=</span> <span class="token operator">&amp;</span>SampleApp_TaskID<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>simpleDesc<span class="token operator">=</span> <span class="token punctuation">(</span>SimpleDescriptionFormat_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>SampleApp_SimpleDesc<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>latencyReq <span class="token operator">=</span> noLatencyReqs<span class="token punctuation">;</span><span class="token function">afRegister</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>SampleApp_epDesc <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">RegisterForKeys</span><span class="token punctuation">(</span> SampleApp_TaskID <span class="token punctuation">)</span><span class="token punctuation">;</span>SampleApp_Group<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">;</span><span class="token function">osal_memcpy</span><span class="token punctuation">(</span> SampleApp_Group<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"Group 1"</span><span class="token punctuation">,</span> <span class="token number">7</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">aps_AddGroup</span><span class="token punctuation">(</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SampleApp_Group <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> LCD_SUPPORTED <span class="token punctuation">)</span></span></span><span class="token function">HalLcdWriteString</span><span class="token punctuation">(</span> <span class="token string">"SampleApp"</span><span class="token punctuation">,</span> HAL_LCD_LINE_1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130210.png" alt="image-20210526143749526" loading="lazy"></p><p><strong>SampleApp_ProcessEvent()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130215.png" alt="image-20210526143838169" loading="lazy"></p><p><strong>SampleApp_ProcessEvent()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130219.png" alt="image-20210526143903337" loading="lazy"></p><p><strong>SampleApp_HandleKeys()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130223.png" alt="image-20210526143922288" loading="lazy"></p><p><strong>SampleApp_MessageMSGCB()</strong></p><p>SampleApp_MessageMSGCB()函数主要实现数据接收功能，数据的接收通过判断簇ID来<br>与发送端发送的数据进行匹配。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130227.png" alt="image-20210526144842589" loading="lazy"></p><p><strong>SampleApp_SendPeriodicMessage()</strong></p><p>SampleApp_SendPeriodicMessage()函数主要功能是实现周期性数据的发送，通过调用<br>AF_DataRequest()函数进行数据的发送。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130231.png" alt="image-20210526144912513" loading="lazy"></p><p><strong>SampleApp.h</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130234.png" alt="image-20210526144937850" loading="lazy"></p><h2 id="4-ZDO层解析"><a href="#4-ZDO层解析" class="headerlink" title="4.ZDO层解析"></a>4.ZDO层解析</h2><p><strong>目录结构</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130239.png" alt="image-20210526145815215" loading="lazy"></p><p>ZDApp_Init()函数：初始化ZDO网络设备短地址；获得64位IEEE地址信息；ZDO层初始化；网络设备启动。</p><h2 id="5-NWK层解析"><a href="#5-NWK层解析" class="headerlink" title="5.NWK层解析"></a>5.NWK层解析</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h3><p><img src="https://raw.githubusercontent.com/Editblog/PicGo/main/img/20210527185136.png" alt="image-20210527185136679" loading="lazy"></p><h3 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a><strong>网络拓扑结构</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*星型网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_STAR</span>         <span class="token expression"><span class="token number">0</span></span></span><span class="token comment">/*树型网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_TREE</span>         <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/*网状网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_MESH</span>         <span class="token expression"><span class="token number">2</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络参数设置"><a href="#网络参数设置" class="headerlink" title="网络参数设置"></a><strong>网络参数设置</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*协议栈模式参数*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NETWORK_SPECIFIC</span>      <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOME_CONTROLS</span>         <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIGBEEPRO_PROFILE</span>    <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GENERIC_STAR</span>          <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GENERIC_TREE</span>          <span class="token expression"><span class="token number">4</span></span></span><span class="token comment">/*信道设置*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_868MHZ</span>     <span class="token expression"><span class="token number">0x00000001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_915MHZ</span>     <span class="token expression"><span class="token number">0x000007FE</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_24GHZ</span>      <span class="token expression"><span class="token number">0x07FFF800</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-HAL层解析"><a href="#6-HAL层解析" class="headerlink" title="6.HAL层解析"></a>6.HAL层解析</h2><p><img src="https://raw.githubusercontent.com/Editblog/PicGo/main/img/20210527185224.png" alt="20210527184135.png" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">HAL目录Common：实现了硬件初始化函数<span class="token function">Hal_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、硬件抽象层驱动初始化<span class="token function">HalDriverInit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>函数和硬件抽象层事件处理函数<span class="token function">Hal_ProcessEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；Include：中主要包含了硬件资源的定义与函数声明；Target：主要为LED等硬件资源进行配置、实现硬件资源的实现函数；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Hal_Init()函数主要为硬件抽象层注册任务ID</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Hal_Init</span><span class="token punctuation">(</span> uint8 task_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 注册任务 ID */</span>Hal_TaskID <span class="token operator">=</span> task_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HalDriverInit()函数主要实现硬件资源的初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HalDriverInit</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*定时器初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_TIMER<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_TIMER <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalTimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*ADC初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_ADC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_ADC <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalAdcInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*DMA初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_DMA<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_DMA <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalDmaInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*Flash初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_FLASH<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_FLASH <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalFlashInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*AES初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_AES<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_AES <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalAesInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*LCD初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_LCD<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LCD <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLcdInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*LED初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_LED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LED <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLedInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*UART初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_UART<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_UART <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalUARTInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*KEY按键初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_KEY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_KEY <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalKeyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*SPI初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_SPI<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_SPI <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalSpiInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HHal_ProcessEvent()函数由APP层OSAL_SampleApp.c文件调用，主要实现硬件抽象层的各种事件处理，比如系统消息事件、LED闪烁事件、按键事件和睡眠模式事件。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">Hal_ProcessEvent</span><span class="token punctuation">(</span> uint8 task_id<span class="token punctuation">,</span> uint16 events <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint8 <span class="token operator">*</span>msgPtr<span class="token punctuation">;</span><span class="token comment">/*系统消息事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> SYS_EVENT_MSG <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>msgPtr <span class="token operator">=</span> <span class="token function">osal_msg_receive</span><span class="token punctuation">(</span>Hal_TaskID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>msgPtr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">osal_msg_deallocate</span><span class="token punctuation">(</span> msgPtr <span class="token punctuation">)</span><span class="token punctuation">;</span>msgPtr <span class="token operator">=</span> <span class="token function">osal_msg_receive</span><span class="token punctuation">(</span> Hal_TaskID <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> events <span class="token operator">^</span> SYS_EVENT_MSG<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*LED闪烁事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> HAL_LED_BLINK_EVENT <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">defined</span> <span class="token punctuation">(</span>BLINK_LEDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LED <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* BLINK_LEDS &amp;&amp; HAL_LED */</span></span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_LED_BLINK_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*按键事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> HAL_KEY_EVENT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_KEY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_KEY <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token comment">/* Check for keys */</span><span class="token function">HalKeyPoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Hal_KeyIntEnable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">osal_start_timerEx</span><span class="token punctuation">(</span> Hal_TaskID<span class="token punctuation">,</span> HAL_KEY_EVENT<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_KEY_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*睡眠模式*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">POWER_SAVING</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> HAL_SLEEP_TIMER_EVENT <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">halRestoreSleepLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_SLEEP_TIMER_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    HTarget hal_board_cfg.h文件中为硬件资源LED等进行配置，在官方的协议栈中定义了3个LED，分别接CC2530的P1_0、P1_1和P1_4引脚。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* LED1配置 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_SBIT</span>         <span class="token expression">P1_0</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_DDR</span>          <span class="token expression">P1DIR</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HAL_BOARD_CC2530EB_REV17</span></span>  <span class="token comment">/* LED2配置 */</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_SBIT</span>         <span class="token expression">P1_1</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_DDR</span>          <span class="token expression">P1DIR</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span>   <span class="token comment">/* LED3配置 */</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_SBIT</span>         <span class="token expression">P1_4</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_DDR</span>          <span class="token expression">P1DIR</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制LED开关状态。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_BOARD_CC2530EB_REV17<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_PA_LNA<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_PA_LNA_CC2590<span class="token punctuation">)</span></span></span><span class="token comment">/*打开LED*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED1_SBIT <span class="token operator">=</span> <span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED2_SBIT <span class="token operator">=</span> <span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED3_SBIT <span class="token operator">=</span> <span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">HAL_TURN_OFF_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token comment">/*关闭LED*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED1_SBIT <span class="token operator">=</span> <span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED2_SBIT <span class="token operator">=</span> <span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED3_SBIT <span class="token operator">=</span> <span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">HAL_TURN_ON_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token comment">/*LED状态改变*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED1_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED1_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED1_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED2_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED2_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED2_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED3_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED3_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED3_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">HAL_TOGGLE_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span>LED1_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span>LED2_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span>LED3_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token function">HAL_STATE_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在Drives文件中定义了硬件资源的驱动函数文件</p><ul><li><strong>LED</strong>：在hal_led.c文件中实现，为LED提供驱动函数；</li><li><strong>ADC</strong>：在hal_adc.c文件中实现，为ADC提供驱动函数；</li><li><strong>KEY</strong>：在hal_key.c文件中实现，为按键提供驱动函数；</li><li><strong>LCD</strong>：在hal_LCD.c文件中实现，为LCD提供驱动函数；</li><li><strong>定时器</strong>：在hal_timer.c文件中实现，为定时器提供驱动函数；</li><li><strong>串口</strong>：在hal_uart.c文件中实现，为串口提供驱动函数；</li><li><strong>DMA</strong>：在hal_dma.c文件中实现，为DMA提供驱动函数；</li><li><strong>flash</strong>：在hal_flash.c文件中实现，为flash提供驱动函数。</li></ul><p>APP应用层调用LED设置函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">HalLedSet</span><span class="token punctuation">(</span>uint8 leds<span class="token punctuation">,</span>uint8 mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">HalLedBlink</span><span class="token punctuation">(</span>uint8 leds<span class="token punctuation">,</span>uint8 numBlink<span class="token punctuation">,</span>uint8 percend<span class="token punctuation">,</span>uint16 period<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210527185047.png" alt="image-20210527185047722" loading="lazy"></p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> 协议栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zigbee驱动DHT11温湿度传感器</title>
      <link href="/posts/5f805b8b/"/>
      <url>/posts/5f805b8b/</url>
      
        <content type="html"><![CDATA[<h1 id="一、DHT11传感器概述"><a href="#一、DHT11传感器概述" class="headerlink" title="一、DHT11传感器概述"></a>一、DHT11传感器概述</h1><h2 id="DHT11传感器概述"><a href="#DHT11传感器概述" class="headerlink" title="DHT11传感器概述"></a>DHT11传感器概述</h2><p>​      DHT11数字温湿度传感器是一款含有已校准数字信号输出的温湿度复合传感器。 它应用专用的数字模块采集技术和温湿度传感技术， 确保产品具有极高的可靠性与卓越的长期稳定性。<br>​    传感器包括一个电阻式感湿元件和一个NTC测温元件，并与一个高性能8位单片机相连接    。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130316.png" alt="image-20210527152514400" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130321.png" alt="image-20210527152050788" loading="lazy"></p><p>DHT11传感器体积小，功耗极低，信号传输距离可达20米以上。具有品质卓越、超快响应、抗干扰能力强、性价比极高等优点。<br>    产品为 4 针单排引脚封:</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130324.png" alt="image-20210527152113012" loading="lazy"></p><p>DHT11与MCU连接图:</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130328.png" alt="image-20210527152127031" loading="lazy"></p><h1 id="二、DHT11通信协议分析"><a href="#二、DHT11通信协议分析" class="headerlink" title="二、DHT11通信协议分析"></a>二、DHT11通信协议分析</h1><h2 id="1-DHT11数据传输协议"><a href="#1-DHT11数据传输协议" class="headerlink" title="1. DHT11数据传输协议"></a>1. DHT11数据传输协议</h2><p>​       DHT11通过DATA线与MCU实现半双工通讯。每次通讯时间4ms左右,数据分小数部分和整数部分,具体格式在下面说明(当前小数部分用于以后扩展,现读出为零)。<br>操作流程如下:一次完整的数据传输为40bit,高位先出。<br>数据格式:<br>​    40bits &#x3D; 8bit湿度整数数据+8bit湿度小数数据+8bit温度整数数据+8bit温度小数数据 +8bit校验和 </p><p>​    数据传送正确时，校验和数据 “ 8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据” 所得结果的末8位。<br>​     即:<br>​    校验和数据  &#x3D;（ 8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据）% 256。</p><h2 id="2-DHT11数据通讯过程"><a href="#2-DHT11数据通讯过程" class="headerlink" title="2. DHT11数据通讯过程"></a>2. DHT11数据通讯过程</h2><p>​    (1)总线空闲状态为高电平,主机把总线拉低18毫秒，向DHT11发送开始信号。</p><p>​      (2)DHT11接收到主机的开始信号后,等待主机开始信号结束,然后发送80us低电平响应信号。</p><p>​      (3)主机发送开始信号结束后,延时等待20-40us后, 读取DHT11的响应信号,主机发送开始信号后,可以切换到输入模式,或者输出高电平均可, 总线由上拉电阻拉高。</p><p>​      (4) DHT11发送响应信号后,再把总线拉高80us,准备发送数据。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130333.png" alt="image-20210527152256797" loading="lazy"></p><p>  (1)DHT11总共会发送40bits的数据,而每一bit数据都以50us低电平时隙开始。</p><p>​       (2)50us的低电平时隙结束后，接下来的高电平的长短决定了该数据位是0还是1。</p><p>​       (3)高电平时长在26~28us左右表示0，在70us左右表示1，格式见下面图示。</p><p>​       (4)如果读取响应信号一直为高电平,则表示DHT11没有响应,请检查线路是否连接正常.当最后一bit数据传送完毕后，DHT11拉低总线50us,随后总线由上拉电阻拉高进入空闲状态。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130336.png" alt="image-20210527152323798" loading="lazy"></p><p> 整个通讯过程如图所示：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130341.png" alt="image-20210527152342588" loading="lazy"></p><h2 id="3-微秒级延时函数"><a href="#3-微秒级延时函数" class="headerlink" title="3.微秒级延时函数"></a>3.微秒级延时函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token expression">“OnBoard<span class="token punctuation">.</span>h”</span></span><span class="token function">MicroWait</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="三、实例演示"><a href="#三、实例演示" class="headerlink" title="三、实例演示"></a>三、实例演示</h1><h2 id="dht11-h"><a href="#dht11-h" class="headerlink" title="dht11.h"></a><strong>dht11.h</strong></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__DHT11_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__DHT11_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temperature<span class="token punctuation">,</span>humidity<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">Start_DHT11</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dht11-c"><a href="#dht11-c" class="headerlink" title="dht11.c"></a><strong>dht11.c</strong></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dht11.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"OnBoard.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATA</span>  <span class="token expression">P0_4</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> temperature<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>humidity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DATA_IO_input_Cfg</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//设置为上拉输入模式</span><span class="token punctuation">&#123;</span>    P0SEL <span class="token operator">&amp;=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>   <span class="token comment">// 1110 1111 把P04设置为普通IO模式</span>    P0DIR <span class="token operator">&amp;=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>   <span class="token comment">// 1110 1111 把P04设置为输入模式</span>    P0INP <span class="token operator">&amp;=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>   <span class="token comment">// 1110 1111 把P04设置为上下拉模式</span>    P2INP <span class="token operator">&amp;=</span> <span class="token number">0xDF</span><span class="token punctuation">;</span>   <span class="token comment">// 1101 1111 把P0组设置为上拉模式</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DATA_IO_output_Cfg</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//设置为输出模式</span><span class="token punctuation">&#123;</span>    P0SEL <span class="token operator">&amp;=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>   <span class="token comment">// 1110 1111 把P04设置为普通IO模式</span>    P0DIR <span class="token operator">|=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>   <span class="token comment">// 0001 0000 把P04设置为输出模式</span><span class="token comment">//    P0INP |= 0x10;   // 0001 0000 把P04设置为三态模式</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每个bit都是从50us的低电平开始</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MicroWait</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时30us</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      tmp <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把该bit设置为1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*@Start_DHT11 : 采集一次温湿度数据@retval : 如果成功，把温湿度的值保存到全局变量，并返回1          如果失败，返回0*/</span><span class="token keyword">int</span> <span class="token function">Start_DHT11</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//开始采集数据</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">DATA_IO_output_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为输出模式</span>  DATA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//发送开始信号</span>  <span class="token function">MicroWait</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时至少18ms</span>  DATA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//拉高20~40us</span>  <span class="token function">MicroWait</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DATA_IO_input_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为输入模式</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等DHT11回响应信号</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等DHT11把总线拉高，准备接收数据</span>  buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span> <span class="token operator">==</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    humidity <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    temperature <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> DHT11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zigbee串口通信</title>
      <link href="/posts/d1180c9/"/>
      <url>/posts/d1180c9/</url>
      
        <content type="html"><![CDATA[<h1 id="一、串口通信原理"><a href="#一、串口通信原理" class="headerlink" title="一、串口通信原理"></a>一、串口通信原理</h1><h2 id="1-什么是UART"><a href="#1-什么是UART" class="headerlink" title="1.什么是UART"></a>1.什么是UART</h2><p>​      UART : Universal Asynchronous  Receiver&#x2F;Transmitter  通用异步收发器<br>​    一种常用也是最简单的串行数据传输协议。数据线只需要两根就可以实现全双工。<br>​    Tx:发送数据线<br>​    Rx:接收数据线<br>​        A                B<br>​        Tx &lt;———–&gt; Rx<br>​        Rx &lt;———–&gt; Tx<br>​        GND&lt;———–&gt; GND</p><h2 id="2-上位机与下位机"><a href="#2-上位机与下位机" class="headerlink" title="2.上位机与下位机"></a>2.上位机与下位机</h2><p>​         模块之间的通信,根据其在系统中的功能与作用可分为上位机 与 下位机。</p><p>上位机：<br>    把处理性能强的计算机称为上位机。数据的统一处理都在上位机完成。</p><p>下位机：<br>    把数据采集和发送的终端，处理性能单一的计算机，称为下位机。</p><p>一般一个上位机会对应多个下位机，这种模式可以使数据处理的更加全面，同时也大大降低成本。</p><h2 id="3-UART数据帧"><a href="#3-UART数据帧" class="headerlink" title="3.UART数据帧"></a>3.UART数据帧</h2><p>UART protocol  串口协议<br>    串口发送和接收数据是以帧为单位，Frame</p><pre><code>1帧(Frame) = 1start bit(起始位) + 5~9bits数据位 + 0/1bit校验位 + stop bits(0.5,1,1.5)停止位起始位：一个周期的低电平数据位：5~9bits数据位，具体是多少bits，需要双方协商，并且传送先传送最低位(LSB)校验位：    0bit：没有校验    1bit：有校验        奇校验：数据位+校验位的这一段数据里的1的个数是奇数。        偶校验：数据位+校验位的这一段数据里的1的个数是偶数。停止位：高电平        1个停止位            Baudrate(波特率):传输速率，即没一个秒传输了多少个bit位    4800    9600    115200bps: bits per second</code></pre><h1 id="二、串口配置"><a href="#二、串口配置" class="headerlink" title="二、串口配置"></a>二、串口配置</h1><h2 id="1-串口初始化相关的结构体halUARTCfg-t"><a href="#1-串口初始化相关的结构体halUARTCfg-t" class="headerlink" title="1.    串口初始化相关的结构体halUARTCfg_t"></a>1.    串口初始化相关的结构体halUARTCfg_t</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>  bool                configured<span class="token punctuation">;</span><span class="token comment">//是否设置串口</span>  uint8               baudRate<span class="token punctuation">;</span> <span class="token comment">//波特率设置</span>  bool                flowControl<span class="token punctuation">;</span><span class="token comment">//控制流设置</span>  uint16              flowControlThreshold<span class="token punctuation">;</span><span class="token comment">//RX缓存安全字节数(了解)</span>  uint8               idleTimeout<span class="token punctuation">;</span><span class="token comment">//RX来数据超时时间(了解)</span>  <span class="token class-name">halUARTBufControl_t</span> rx<span class="token punctuation">;</span><span class="token comment">//接收数据长度</span>  <span class="token class-name">halUARTBufControl_t</span> tx<span class="token punctuation">;</span><span class="token comment">//发送数据长度</span>  bool                intEnable<span class="token punctuation">;</span><span class="token comment">//中断使能</span>  uint32              rxChRvdTime<span class="token punctuation">;</span><span class="token comment">//接收数据时间</span>  <span class="token class-name">halUARTCBack_t</span>      callBackFunc<span class="token punctuation">;</span><span class="token comment">//回调函数</span><span class="token punctuation">&#125;</span><span class="token class-name">halUARTCfg_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-串口初始化示例"><a href="#2-串口初始化示例" class="headerlink" title="2. 串口初始化示例"></a>2. 串口初始化示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InitUart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">halUARTCfg_t</span>   uartConfig<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>configured           <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  <span class="token comment">//</span>uartConfig<span class="token punctuation">.</span>baudRate             <span class="token operator">=</span> HAL_UART_BR_38400<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControl          <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControlThreshold <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> uartConfig<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>tx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>idleTimeout          <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    uartConfig<span class="token punctuation">.</span>intEnable            <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                uartConfig<span class="token punctuation">.</span>callBackFunc         <span class="token operator">=</span> SerialApp_CallBack<span class="token punctuation">;</span>   <span class="token function">HalUARTOpen</span> <span class="token punctuation">(</span>SERIAL_APP_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-串口实现"><a href="#3-串口实现" class="headerlink" title="3.串口实现"></a>3.串口实现</h2><p>​        串口的读操作函数为HalUARTRead()，主要功能是读取上位机通过串口发送至设备节点的数据。</p><p>​    uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)<br>​    @port：串口端口的设置，可以设置为串口0或串口1；<br>​    @buf：数据缓冲区；<br>​    @len：数据长度。<br>​    返回值:实际成功读取的字节数</p><p>串口的<strong>读</strong>操作函数为**HalUARTRead()**，主要功能是读取上位机通过串口发送至设备节点的数据。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">HalUARTRead</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 <span class="token operator">*</span>buf<span class="token punctuation">,</span> uint16 len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAL_UART_USB</span></span>  <span class="token keyword">return</span> <span class="token function">HalUARTRx</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  串口的<strong>写</strong>操作函数为**HalUARTWrite()**，主要功能是实现向上位机或其他设备通过串口发送数据。<br>    uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)<br>    @port：串口端口的设置，可以设置为串口0或串口1；<br>    @buf：数据缓冲区；<br>    @len：数据长度。<br>    返回值:实际成功发送的字节数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 <span class="token operator">*</span>buf<span class="token punctuation">,</span> uint16 len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAL_UART_USB</span></span>  <span class="token function">HalUARTTx</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、程序设计"><a href="#三、程序设计" class="headerlink" title="三、程序设计"></a>三、程序设计</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SerialApp_CallBack</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 event<span class="token punctuation">)</span>   <span class="token comment">//接收数据会触发</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">HalUARTRead</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED0<span class="token punctuation">,</span>LED_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED1<span class="token punctuation">,</span>LED_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span><span class="token string">"byebye"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED0<span class="token punctuation">,</span>LED_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED1<span class="token punctuation">,</span>LED_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InitUart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">halUARTCfg_t</span>   uartConfig<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>configured           <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>baudRate             <span class="token operator">=</span> HAL_UART_BR_9600<span class="token punctuation">;</span> <span class="token comment">//设置波特率</span>uartConfig<span class="token punctuation">.</span>flowControl          <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControlThreshold <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> uartConfig<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>tx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>idleTimeout          <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    uartConfig<span class="token punctuation">.</span>intEnable            <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                uartConfig<span class="token punctuation">.</span>callBackFunc         <span class="token operator">=</span> SerialApp_CallBack<span class="token punctuation">;</span>  <span class="token comment">//设置回调函数 </span><span class="token function">HalUARTOpen</span> <span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> GENERICAPP_MY_EVT1 <span class="token punctuation">)</span><span class="token comment">//事件</span>  <span class="token punctuation">&#123;</span><span class="token comment">//事件要做的事</span>    P1_0 <span class="token operator">=</span> <span class="token operator">!</span>P1_0<span class="token punctuation">;</span>    P1_1 <span class="token operator">=</span> <span class="token operator">!</span>P1_1<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"hello,are you ok?\r\n"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Start_DHT11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//读取dht11数据</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sprintf</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token string">"temperature:%d,humidity:%d\r\n"</span><span class="token punctuation">,</span>temperature<span class="token punctuation">,</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span><span class="token string">"error\r\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>events <span class="token operator">^</span> GENERICAPP_MY_EVT1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> 串口通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zigbee无线通信与网络组建</title>
      <link href="/posts/121b6cd5/"/>
      <url>/posts/121b6cd5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-无线通信理论"><a href="#一、-无线通信理论" class="headerlink" title="一、 无线通信理论"></a>一、 无线通信理论</h1><p>Zigbee无线通信，需要高频的载波来提供发射频率，Zigbee模块之间要可以正常通信，接收模块和发送模块的频率要一致。</p><p>​    Zigbee有27个载波可以进行通信，载波又叫做信道。这些载波的频率落在某些频率区段，我们把这些区段叫做频段。</p><p>​        2.4G频段                        16个信道<br>​        915M频段     896M频段   11个信道</p><p>​    但TI的所有支持Zigbee底层协议的芯片只能在2.4G频段的16个信道里进行通信。即11<del>26信道(0</del>10信道在915M和896M的频段内)</p><p><strong>网络地址</strong>：<br>    在Zigbee无线局域网里，每一个模块都有一个在该网络里唯一的2个字节的地址，这个地址我们叫做网络地址(或者叫做网络短地址)。</p><p><strong>PANID</strong>：<br>    这也是一个2个字节的编号，用来区分不用的Zigbee无线局域网，我们称为个域网ID。两个模块之间要进行通信，PANID一定要一样。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528084644.png" alt="image-20210528084643979" loading="lazy"></p><p><strong>信道与PANID的设置</strong>：<br>    在Tools文件组里的f8wConfig.cfg文件中<br>    (1)设置信道<br>        -DDEFAULT_CHANLIST&#x3D;0x00000800  &#x2F;&#x2F; 11 - 0x0B<br>    (2)设置PANID<br>        -DZDAPP_CONFIG_PAN_ID&#x3D;0x1234<br>注意:如果把PANID设置为0xFFFF,则意味着该模块不受PANID的限制</p><h1 id="二、-网络组建理论"><a href="#二、-网络组建理论" class="headerlink" title="二、 网络组建理论"></a>二、 网络组建理论</h1><p>在Zigbee无线局域网里，节点(无线模块)按照在网络里的功能可以划分为：协调器、路由器、终端这三种角色。<br>    它们的硬件可以是一模一样的，之所以在网络里表现出不同的功能，是因为它们下载了不同功能版本的程序，在同一个网络里担当了不同的角色功能。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528084808.png" alt="image-20210528084807987" loading="lazy"></p><p>​    下载了路由器和终端代码的模块，它们上电后的第一件事情去寻找网络，请求加入。然而网络不会无缘无故产生，是由下载了协调器代码的模块创建的。<br>​    下载了协调器代码的模块上电后的第一件事就是创建网络。<br>     任何一个网络里，第一个节点一定是该网络的协调器，<strong>有且只能有一个协调器</strong>。</p><p>​    如果有一个协调器创建了一个网络ID是0x1234，还有一个协调器也创建了一个网络ID为0x1234，此时后面创建的网络ID加一，即为0x1235。</p><p>​    任何一个Zigbee模块要加入到某个网络，一定要一个处于该网络里的节点作为介绍人，并且这个介绍人不能是终端节点(即路由器或者协调器)。在加入网络以后，介绍人节点和被介绍加入的节点互为父子关系。    介绍人是被介绍人的父节点，被介绍人是介绍人的、子节点。有多个可作为介绍人资格的节点，会选择信号强度高的节点作为介绍人。</p><p>​    协调器在创建完网络后，在网络里的功能与路由器没有任何区别，只不过协调器的网络地址比较特殊只能是0x0000，而其他加入的节点的网络地址是动态分配的。<br>​    终端节点与其他模块的通信必须要通过它的父节点，而路由器(协调器)之间通信可以直接通信的。<br>   因此，<strong>路由器在网络里充当的是拓扑扩展的中转站的功能</strong>。</p><h1 id="三、Zigbee三种网络架构"><a href="#三、Zigbee三种网络架构" class="headerlink" title="三、Zigbee三种网络架构"></a>三、Zigbee三种网络架构</h1><h2 id="1-星形拓扑"><a href="#1-星形拓扑" class="headerlink" title="1.星形拓扑"></a>1.星形拓扑</h2><p>​    星形拓扑是最简单的一种拓扑形式，他包含一个Co-ordinator（协调者） 节点和一系列的 End Device（终端）节点。每一个End Device 节点只能和 Co-ordinator 节点进行通讯。如果需要在两个 End Device 节点之间进行通讯必须通过Co-ordinator 节点进行信息的转发。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085042.png" alt="image-20210528085042404" loading="lazy"></p><h2 id="2-树形拓扑"><a href="#2-树形拓扑" class="headerlink" title="2.树形拓扑"></a>2.树形拓扑</h2><p>​    树形拓扑包括一个Co-ordinator（协调者）以及一系列的 Router（路由器） 和 End Device（终端）节点。Co-ordinator 连接一系列的 Router 和 End Device， 他的子节点的 Router也可以连接一系列的 Router 和End Device. 这样可以重复多个层级。树形拓扑的结构如下图所示：       </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085105.png" alt="image-20210528085105782" loading="lazy"></p><h2 id="3-Mesh拓扑（网状拓扑）"><a href="#3-Mesh拓扑（网状拓扑）" class="headerlink" title="3.Mesh拓扑（网状拓扑）"></a>3.Mesh拓扑（网状拓扑）</h2><p>​    Mesh拓扑（网状拓扑） 包含一个Co-ordinator和一系列的Router 和End Device。这种网络拓扑形式和树形拓扑相同；请参考上面所提到的树形网络拓扑。但是，网状网络拓扑具有更加灵活的信息路由规则，在可能的情况下，路由节点之间可以直接的通讯。这种路由机制使得信息的通讯变得更有效率，而且意味这一旦一个路由路径出现了问题，信息可以自动的沿着其他的路由路径进行传输。 网状拓扑的示意图如下所示：       </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085155.png" alt="image-20210528085155248" loading="lazy"></p><h2 id="4-三种网络架构对比"><a href="#4-三种网络架构对比" class="headerlink" title="4.三种网络架构对比"></a>4.三种网络架构对比</h2><p>​        MESH 网状网络拓扑结构的网络具有强大的功能，网络可以通过“多级跳”的方式来通信；该拓扑结构还可以组成极为复杂的网络；网络还具备自组织、自愈功能；<br>​        星型和族树型网络适合点多多点、距离相对较近的应用。<br>​       我们可以在 “nwk_globals.h” 文件中159行进行修改网络结构，默认为网状拓扑结构。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085251.png" alt="image-20210528085251909" loading="lazy"></p><p>​    我们可以在GenericApp.c文件中的GenericApp_ProcessEvent函数中的switch语句的 case ZDO_STATE_CHANGE中修改代码内容，让模块在不同的网络状态下亮不同的灯。</p><p>​    注意:下载了协调器的代码的模块，创建了网络之后就是协调器状态，而终端和路由器要加入了网络才是对应的状态。终端和路由器要加入网络的条件是，信道和PANID要一致。</p>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> 自动组网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zigbee单播通信</title>
      <link href="/posts/b142e803/"/>
      <url>/posts/b142e803/</url>
      
        <content type="html"><![CDATA[<h1 id="一、单播通信理论"><a href="#一、单播通信理论" class="headerlink" title="一、单播通信理论"></a>一、单播通信理论</h1><p>（1）Zigbee网络通信方式有4种：单播，广播，组播，绑定(MAC)。</p><p>（2）单播通信的特点:在Zigbee网络里，模块之间要进行通信，发射模块要明确知道接收模块的网络地址。</p><p>（3）Zigbee模块的地址特点:模块在加入网络的时候，父节点随机分配网络地址给子节点。但是协调器模块在)网络里的地址永远都是0x00。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085917.png" alt="image-20210528085917105" loading="lazy"></p><p><strong>单播发送数据需要明确的信息</strong>：<br>    (1)目标地址<br>    (2)目标端点与簇<br>    (3)要发送的数据大小</p><p><strong>应用任务层数据发送函数</strong></p><p>该函数在GenericApp.c里的GenericApp_SendTheMessage函数里：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">AF_DataRequest</span><span class="token punctuation">(</span>              <span class="token operator">&amp;</span>GenericApp_DstAddr<span class="token punctuation">,</span> <span class="token comment">//目标的网络地址指针</span>              <span class="token operator">&amp;</span>GenericApp_epDesc<span class="token punctuation">,</span><span class="token comment">//端点描述符指针</span>              GENERICAPP_CLUSTERID<span class="token punctuation">,</span><span class="token comment">//目标簇</span>              <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token function">osal_strlen</span><span class="token punctuation">(</span> theMessageData <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//发送数据的大小</span>              <span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>theMessageData<span class="token punctuation">,</span><span class="token comment">//发送数据缓冲区的地址</span>              <span class="token operator">&amp;</span>GenericApp_TransID<span class="token punctuation">,</span><span class="token comment">//这是个全局变量，用来保存发送的次数</span>              AF_DISCV_ROUTE<span class="token punctuation">,</span> AF_DEFAULT_RADIUS <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送路径，don't care</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529101718.png" alt="image-20210529101711143" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528090054.png" alt="image-20210528090054641" loading="lazy"></p><p><strong>网络地址结构体</strong></p><p>网络地址结构体就是定义在GenericApp.c前面的一个结构体变量，该类型为afAddrType_t，系统已经默认定义了一个网络地址结构体变量GenericApp_DstAddr，我们可以在GenericApp_Init()函数中，对网络地址结构体变量的成员进行赋值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//网络地址结构体:</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>      <span class="token keyword">union</span>     <span class="token punctuation">&#123;</span>            uint16      shortAddr<span class="token punctuation">;</span><span class="token comment">//网络地址</span>            ZLongAddr_t extAddr<span class="token punctuation">;</span> <span class="token comment">//MAC地址</span>     <span class="token punctuation">&#125;</span> addr<span class="token punctuation">;</span>     <span class="token class-name">afAddrMode_t</span> addrMode<span class="token punctuation">;</span><span class="token comment">//通信模式</span>     byte endPoint<span class="token punctuation">;</span> <span class="token comment">//指定的端点</span>     uint16 panId<span class="token punctuation">;</span>  <span class="token comment">//don't care</span><span class="token punctuation">&#125;</span> <span class="token class-name">afAddrType_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//通信模式枚举类型:</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">&#123;</span>        afAddrNotPresent <span class="token operator">=</span> AddrNotPresent<span class="token punctuation">,</span><span class="token comment">//当前不确定</span>        afAddr16Bit      <span class="token operator">=</span> Addr16Bit<span class="token punctuation">,</span><span class="token comment">//单播通信模式</span>        afAddr64Bit      <span class="token operator">=</span> Addr64Bit<span class="token punctuation">,</span><span class="token comment">//MAC通信模式</span>        afAddrGroup      <span class="token operator">=</span> AddrGroup<span class="token punctuation">,</span><span class="token comment">//组播通信模式</span>        afAddrBroadcast  <span class="token operator">=</span> AddrBroadcast<span class="token comment">//广播通信模式</span><span class="token punctuation">&#125;</span> <span class="token class-name">afAddrMode_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529102118.png" alt="image-20210529102118365" loading="lazy"></p><h1 id="二、端点与簇"><a href="#二、端点与簇" class="headerlink" title="二、端点与簇"></a>二、端点与簇</h1><h2 id="1-端点"><a href="#1-端点" class="headerlink" title="1.端点"></a>1.端点</h2><p>(1)通常发送的数据要明确该数据是给接收模块的哪个任务层用的，而这个就是用端点来指定的</p><p>(2)端点是一个字节的编号，通常为定义在GenericApp.h中的一个宏。端点必须要与任务层绑定，而这个就是用端点描述符来实现的。</p><p>(3)端点描述符是一个结构体变量，该变量定义在GenericApp.c开头，我们也可以定义新的端点描述符。该结构体的类型为 endPointDesc_t，系统也默认定义了一个端点描述符GenericApp_epDesc。</p><p>(4)我们可以在 GenericApp_Init()函数中，把新的端点描述符变量赋值，使新的端点与某个任务层绑定。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//端点结构体类型:</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>       byte endPoint<span class="token punctuation">;</span><span class="token comment">//端点的值</span>       byte <span class="token operator">*</span>task_id<span class="token punctuation">;</span>  <span class="token comment">//与端点绑定的任务层ID</span>       SimpleDescriptionFormat_t <span class="token operator">*</span>simpleDesc<span class="token punctuation">;</span><span class="token comment">//端点的描述信息,don’t care</span>       <span class="token class-name">afNetworkLatencyReq_t</span> latencyReq<span class="token punctuation">;</span><span class="token comment">//don’t care</span><span class="token punctuation">&#125;</span> <span class="token class-name">endPointDesc_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-簇"><a href="#2-簇" class="headerlink" title="2.簇"></a>2.簇</h2><p>(1)在接收模块中，每个任务层可以对不同种类的数据采取不同的处理方式，这里的数据种类就是簇(CLUSTER)</p><p>(2)在发送模块中，簇是定义在GenericApp.h中的一个宏，我们也可以定义新的簇。</p><p>(3) 系统也默认定义了一个簇 GenericApp_CLUSTERID，在GenericApp.h中</p><h1 id="三、-应用任务层数据发送接收API"><a href="#三、-应用任务层数据发送接收API" class="headerlink" title="三、 应用任务层数据发送接收API"></a>三、 应用任务层数据发送接收API</h1><p>(1)该函数为GenericApp.c中的void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529115258.png" alt="image-20210529115258491" loading="lazy"></p><p>(2)在switch语句中可以定义对不同的簇采用不同的方式处理数据</p><p>(3)该函数中的pkt-&gt;cmd.Data就是接收数据的首地址</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528090956.png" alt="image-20210528090956245" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> 单播通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-yun</title>
      <link href="/posts/4567d7fd/"/>
      <url>/posts/4567d7fd/</url>
      
        <content type="html"><![CDATA[<p>Hexo 主题 Yun</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相册</title>
      <link href="/posts/e26d1860/"/>
      <url>/posts/e26d1860/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">type</span><span class="token punctuation">:</span> albums<span class="token key atrule">title</span><span class="token punctuation">:</span> 相册<span class="token key atrule">url</span><span class="token punctuation">:</span> /albums/miracle.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span> e26d1860<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-03-05 01:31:08</span><span class="token key atrule">updated</span><span class="token punctuation">:</span> <span class="token datetime number">2020-07-14 16:31:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派镜像烧录</title>
      <link href="/posts/9bd7a689/"/>
      <url>/posts/9bd7a689/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装balenaEtcher烧录工具"><a href="#一、安装balenaEtcher烧录工具" class="headerlink" title="一、安装balenaEtcher烧录工具"></a>一、安装balenaEtcher烧录工具</h1><blockquote><p>下载链接：<a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></p></blockquote><p><img src="https://i.loli.net/2020/12/07/1mEjuCDOehxBPFf.png" alt="image-20201025210635969" loading="lazy"></p><h1 id="二、烧录镜像文件"><a href="#二、烧录镜像文件" class="headerlink" title="二、烧录镜像文件"></a>二、烧录镜像文件</h1><p><img src="https://i.loli.net/2020/12/07/4UDTdklvrIpz6hL.png" alt="image-20201025210732316" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/07/BzS7h2TEVXikadP.png" alt="image-20201025210823494" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/07/aRISFlDgMHO9pEj.png" alt="image-20201025210848755" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/07/b3D8ART2KmVvFUZ.png" alt="image-20201025212943590" loading="lazy"></p><h1 id="三、烧录镜像成功"><a href="#三、烧录镜像成功" class="headerlink" title="三、烧录镜像成功"></a>三、烧录镜像成功</h1><p><img src="https://i.loli.net/2020/12/07/hayiYcSG3TRHPfD.png" alt="image-20201025213002398" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 镜像烧录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派环境搭建</title>
      <link href="/posts/f0a343d3/"/>
      <url>/posts/f0a343d3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-修改启动参数"><a href="#一、-修改启动参数" class="headerlink" title="一、 修改启动参数"></a>一、 修改启动参数</h1><h2 id="1、打开22号ssh端口"><a href="#1、打开22号ssh端口" class="headerlink" title="1、打开22号ssh端口"></a>1、打开22号ssh端口</h2><blockquote><p>在boot目录建立ssh空文件，不需要任何后缀名</p></blockquote><p><img src="https://i.loli.net/2020/12/19/lPsBZFKAov4OJ8f.png" alt="image-20201025213600034" loading="lazy"></p><h2 id="2、配置WIFI"><a href="#2、配置WIFI" class="headerlink" title="2、配置WIFI"></a>2、配置WIFI</h2><blockquote><p>在boot目录建立wpa_supplicant.conf内容如下（WiFi账号密码改为自己的）：</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">country<span class="token operator">=</span>CNctrl_interface<span class="token operator">=</span>DIR<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>wpa_supplicant GROUP<span class="token operator">=</span>netdevupdate_config<span class="token operator">=</span><span class="token number">1</span>network<span class="token operator">=</span><span class="token punctuation">&#123;</span>ssid<span class="token operator">=</span><span class="token string">"hw1311"</span>psk<span class="token operator">=</span><span class="token string">"13111311"</span>key_mgmt<span class="token operator">=</span>WPA<span class="token operator">-</span>PSKpriority<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、连接树莓派"><a href="#二、连接树莓派" class="headerlink" title="二、连接树莓派"></a>二、连接树莓派</h1><h2 id="1、通过ssh连接树莓派"><a href="#1、通过ssh连接树莓派" class="headerlink" title="1、通过ssh连接树莓派"></a>1、通过ssh连接树莓派</h2><blockquote><p>打开命令行，输入<strong>ssh <a href="mailto:&#x70;&#105;&#64;&#114;&#97;&#x73;&#112;&#x62;&#101;&#x72;&#114;&#121;&#x70;&#105;&#46;&#108;&#111;&#x63;&#97;&#108;">&#x70;&#105;&#64;&#114;&#97;&#x73;&#112;&#x62;&#101;&#x72;&#114;&#121;&#x70;&#105;&#46;&#108;&#111;&#x63;&#97;&#108;</a></strong></p></blockquote><p>若出现报错，上传用户文件夹.ssh文件夹里面文件，再次登录</p><p><img src="https://i.loli.net/2020/12/19/kjeKxhu3dTJLWX7.png" alt="image-20201025214255208" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/H948WAqePTOS5Xz.png" alt="image-20201025214311586" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/s5GjY6rdTXlA3Mv.png" alt="image-20201025214715729" loading="lazy"></p><h2 id="2、通过VNC远程访问"><a href="#2、通过VNC远程访问" class="headerlink" title="2、通过VNC远程访问"></a>2、通过VNC远程访问</h2><blockquote><p>电脑安装VNC：<a href="https://www.realvnc.com/en/connect/download/viewer/">https://www.realvnc.com/en/connect/download/viewer/</a></p></blockquote><p>树莓派并不需要你为她配备单独的显示器、键盘和鼠标，你可以设置VNC或SSH，通过你平时常用的电脑来远程访问树莓派。</p><p>Raspbian系统安装后默认带有VNC和SSH软件包（除非你在官网选择下载的是最小安装包），你只需要把VNC和SSH服务打开就可以了。</p><blockquote><p>咱们的默认账户是：pi</p><p>pi账户的默认密码是：raspberry</p></blockquote><ul><li>启用VNC和SSH服务</li></ul><p>还是打开LX终端，在命令提示符后键入如下命令，然后按回车键：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo raspi<span class="token operator">-</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你将打开树莓派的软件配置工具。</p><p><img src="https://i.loli.net/2020/12/19/JrnbRuW8HZKGsYN.png" alt="image-20201025215441969" loading="lazy"></p><p>使用上下方向键选择 5 Interfacing Option，按回车键进入接口配置。</p><p><img src="https://i.loli.net/2020/12/19/blXH72SDTVa8hf6.png" alt="image-20201025215527917" loading="lazy"></p><p>在这里你可以看到 P2 SSH 和 P3 VNC，二者的启用方法相同，下面以VNC为例介绍启用操作步骤。</p><p>使用上下方向键选择P3 VNC，按回车键进入 VNC配置。</p><p><img src="https://i.loli.net/2020/12/19/gJ8ryzdkRmDIGFQ.png" alt="image-20201025215610796" loading="lazy"></p><p>使用左右方向键选择&lt;是&gt;，按回车键，系统提示VNC服务已启动。</p><p><img src="https://i.loli.net/2020/12/19/BFvbxi2kCTuGI3h.png" alt="image-20201025215654238" loading="lazy"></p><p>按回车键&lt;确定&gt;，回到配置工具主界面，通过 Tab 键选中右下角的<Finish>，按回车即可完成VNC服务的打开。</p><p><img src="https://i.loli.net/2020/12/19/3NoiLP4rf1sdej9.png" alt="image-20201025215755506" loading="lazy"></p><p>最后不要忘了要查看树莓派的IP地址，在终端里输入 ifconfig 命令，按回车键后你将看到树莓派的IP地址。</p><p><img src="https://i.loli.net/2020/12/19/6i1UGRwHQmV5hat.png" alt="image-20201025215842212" loading="lazy"></p><ul><li><strong>使用VNC远程访问树莓派</strong></li></ul><p><img src="https://i.loli.net/2020/12/19/iL1wpTntHNrKW7l.png" alt="image-20201025220051910" loading="lazy"></p><ul><li>出现这种情况</li></ul><p><img src="https://i.loli.net/2020/12/19/GdgwDtUqFHE3vkA.png" alt="image-20201025220702840" loading="lazy"></p><p>解决办法：changing the resolution to the highest（更改更高的分辨率即可），ssh下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo raspi<span class="token operator">-</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/19/c1rXkOH4fb8DnTo.png" alt="image-20201025220819826" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/l9ImB2wUfSYhZka.png" alt="image-20201025220837492" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/PfXCFtdZLO4Q1KA.png" alt="image-20201025220953102" loading="lazy"></p><p>重新用VNC连接</p><p><img src="https://i.loli.net/2020/12/19/7pesuBPzoYtwClH.png" alt="image-20201025221123776" loading="lazy"></p><h1 id="三、树莓派初始设置"><a href="#三、树莓派初始设置" class="headerlink" title="三、树莓派初始设置"></a>三、树莓派初始设置</h1><p>初次进入Raspbian，系统会自动弹出欢迎界面（Welcome to Raspberry Pi），也就是树莓派的初始设置引导程序，点击右下角的【Next】按钮，开始进行初始配置。<img src="https://i.loli.net/2020/12/19/o4tMXjGy7FJ96Uu.png" alt="image-20201025221315270" loading="lazy"></p><ul><li><strong>设置国家、语言和时区</strong></li></ul><p>你可以依次选择China、Chinese和Shanghai，选择完成后点击【Next】按钮。<img src="https://i.loli.net/2020/12/19/7NtsBGhuiDaV3RC.png" alt="image-20201025221357198" loading="lazy"></p><ul><li><strong>设置账户密码</strong></li></ul><p>Raspbian默认用户名为“pi”（不带引号），默认密码为“raspberry”（不带引号），为了安全起见，系统强烈建议你修改密码为一个只有你自己知道的密码，当然你千万不要把自己设置的密码忘了。录入完新的密码，点击【Next】按钮。<img src="https://i.loli.net/2020/12/19/yJPsmZejUxNvtgM.png" alt="image-20201025221437477" loading="lazy"></p><ul><li><strong>设置WiFI网络</strong></li></ul><p>选择你的WiFi热点，然后点击【Next】按钮，在接下来弹出的窗口中输入你的WiFi密码，随后点击【Next】按钮。<img src="https://i.loli.net/2020/12/19/5IuRtLXfzCBnNxc.png" alt="image-20201025221547544" loading="lazy"></p><ul><li><strong>软件升级</strong></li></ul><p>WiFi连接成功后，系统会提示你进行软件升级，你可以点击【Next】按钮进行升级，也可以点击【Skip】按钮跳过升级。升级需要较长时间，因此本文先跳过升级，日后再通过包管理工具来升级。<img src="https://i.loli.net/2020/12/19/fAXplQIqGTh86MH.png" alt="image-20201025221627595" loading="lazy"></p><ul><li><strong>重新启动</strong></li></ul><p>最后就是完成了上述全部设置，系统提示设置完成，点击【Restart】按钮重新启动系统。<img src="https://i.loli.net/2020/12/19/Q7yKu8Mibc4A1En.png" alt="image-20201025221654070" loading="lazy"></p><h1 id="四、配置静态IP"><a href="#四、配置静态IP" class="headerlink" title="四、配置静态IP"></a>四、配置静态IP</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//设置静态IP  加在文件后面</span>sudo nano <span class="token operator">/</span>etc<span class="token operator">/</span>dhcpcd<span class="token punctuation">.</span>conf    interface wlan0<span class="token keyword">static</span> ip_address<span class="token operator">=</span><span class="token number">172.16</span><span class="token number">.47</span><span class="token number">.86</span><span class="token operator">/</span><span class="token number">24</span><span class="token keyword">static</span> routers<span class="token operator">=</span><span class="token number">172.16</span><span class="token number">.47</span><span class="token number">.1</span><span class="token keyword">static</span> domain_name_servers<span class="token operator">=</span><span class="token number">218.196</span><span class="token number">.40</span><span class="token number">.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、换源"><a href="#五、换源" class="headerlink" title="五、换源"></a>五、换源</h1><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/</a></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"># 编辑 `<span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list` 文件，删除原文件所有内容，用以下内容取代：deb http<span class="token operator">:</span><span class="token comment">//mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi</span>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token comment">//mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi</span># 编辑 `<span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list<span class="token punctuation">.</span>d<span class="token operator">/</span>raspi<span class="token punctuation">.</span>list` 文件，删除原文件所有内容，用以下内容取代：deb http<span class="token operator">:</span><span class="token comment">//mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 镜像烧录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派运行实例</title>
      <link href="/posts/2cd3bcd8/"/>
      <url>/posts/2cd3bcd8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、树莓派引脚定义"><a href="#一、树莓派引脚定义" class="headerlink" title="一、树莓派引脚定义"></a>一、树莓派引脚定义</h1><p>学习如何用树莓派驱动LED灯时需要先了解树莓派管脚GPIO的编码方式，树莓派的管脚编码方式与51单片机的管脚编码有些不一样，在树莓派的GPIO上分为<strong>两种编码方式</strong>，分别为<strong>BCM</strong>和<strong>wiringPi编码</strong>，不同的编码方式在编写程序驱动GPIO时稍有区别，具体编码如下：</p><p><img src="https://i.loli.net/2020/12/19/EQvngLhCGaoP7Dk.png" alt="image-20201027185041036" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/BhRGtWprT3yYZ6m.png" alt="image-20201027193659980" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/bqijf82TmUxknwG.png" alt="image-20201027193715459" loading="lazy"></p><h1 id="二、蜂鸣器响"><a href="#二、蜂鸣器响" class="headerlink" title="二、蜂鸣器响"></a>二、蜂鸣器响</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO                <span class="token comment"># 引入GPIO模块</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep                     <span class="token comment"># 引入time模块</span>GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>            <span class="token comment"># 使用BCM编号方式</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span>GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>            <span class="token comment"># 将GPIO19设置为输出模式</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                                     <span class="token comment"># 无限循环  </span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span>GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span>   <span class="token comment"># 将GPIO19设置为高电平，点亮LED  </span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                    <span class="token comment"># 等待1秒钟 </span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span>GPIO<span class="token punctuation">.</span>LOW<span class="token punctuation">)</span>  <span class="token comment"># 将GPIO19设置为低电平，熄灭LED </span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                              <span class="token comment"># 等待0.5秒钟 </span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                      <span class="token comment"># 按下任意键退出</span>GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment"># 清理释放GPIO资源，将GPIO复位 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> RPi.GPIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装OpenCV</title>
      <link href="/posts/bbf58368/"/>
      <url>/posts/bbf58368/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装所需要的库和依赖"><a href="#一、安装所需要的库和依赖" class="headerlink" title="一、安装所需要的库和依赖"></a>一、安装所需要的库和依赖</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo pip3 install numpysudo apt<span class="token operator">-</span>get install build<span class="token operator">-</span>essential git cmake pkg<span class="token operator">-</span>config <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libjpeg8<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libtiff5<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libjasper<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libpng12<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libavcodec<span class="token operator">-</span>dev libavformat<span class="token operator">-</span>dev libswscale<span class="token operator">-</span>dev libv4l<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libgtk2<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libatlas<span class="token operator">-</span>base<span class="token operator">-</span>dev gfortran <span class="token operator">-</span>y    sudo pip3 install opencv<span class="token operator">-</span>python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、测试安装环境"><a href="#二、测试安装环境" class="headerlink" title="二、测试安装环境"></a>二、测试安装环境</h1><blockquote><p>在终端输入 ：python3<br>然后 ：import cv2<br>如果安装成功，则import不会有问题<br>下面就可以输出OpenCv的版本号<br>使用 ：print(cv2.version)<br>退出python用： exit()</p></blockquote><p><img src="https://i.loli.net/2020/12/07/nPGjdg2J8tHpO9U.png" alt="image-20201026180316710" loading="lazy"></p><h1 id="三、简单应用"><a href="#三、简单应用" class="headerlink" title="三、简单应用"></a>三、简单应用</h1><blockquote><p>使用OpenCv库读取usb摄像头，实时显示并拍照</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npcap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># get a frame</span> ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># show a frame</span> cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"capture"</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>   <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#退出并拍照</span>  cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"takephoto2.jpg"</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"take Photo Ok"</span><span class="token punctuation">)</span>  <span class="token keyword">break</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/07/rD73QjcCfSavMEK.png" alt="image-20201026175921758" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派常用模块</title>
      <link href="/posts/e45d4a36/"/>
      <url>/posts/e45d4a36/</url>
      
        <content type="html"><![CDATA[<h1 id="1-PWM"><a href="#1-PWM" class="headerlink" title="1.PWM"></a>1.PWM</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO                 <span class="token comment"># 引入GPIO模块</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    LedPin <span class="token operator">=</span> <span class="token number">19</span>    freq <span class="token operator">=</span> <span class="token number">100</span>                          <span class="token comment"># 存放PWM频率变量，这里初始值为100，可以根据实际需要修改</span>    dc <span class="token operator">=</span> <span class="token number">0</span>                              <span class="token comment"># 存放PWM占空比变量，这里初始值为0，可以根据实际需要修改</span>    GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>              <span class="token comment"># 使用BCM编号方式</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>LedPin<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>        <span class="token comment"># 将GPIO19设置为输出模式</span>    pwm <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>LedPin<span class="token punctuation">,</span> freq<span class="token punctuation">)</span>        <span class="token comment"># 创建PWM对象，并指定初始频率</span>    pwm<span class="token punctuation">.</span>start<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>                       <span class="token comment"># 启动PWM，并指定初始占空比</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        freq <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Please input the frequency of PWM(1-2000Hz): "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 等待输入新PWM频率</span>        pwm<span class="token punctuation">.</span>ChangeFrequency<span class="token punctuation">(</span>freq<span class="token punctuation">)</span>       <span class="token comment"># 改变PWM频率</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            dc <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Please input the duty cycle(0-100): "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 等待输入新PWM占空比</span>            pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>     <span class="token comment"># 改变PWM占空比</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        pwm<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 停止PWM</span>        GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 清理释放GPIO资源，将GPIO复位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> PWM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派控制直流电机</title>
      <link href="/posts/f27d64d3/"/>
      <url>/posts/f27d64d3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-直流电机"><a href="#1-直流电机" class="headerlink" title="1.直流电机"></a>1.直流电机</h1><p>直流电机是一种将直流电能转换为机械能的装置，被广泛的用于驱动各种设备，如电风扇、遥控小车、电动车窗等，非常适合作为机器人的行走机构，您可以很容易的在网上购买到，价格也不是很贵。<br> 　　小型直流电机的的电压范围通常是1.5V~30V，使用两根导线连接到直流电源上就能让电机转动起来，电压越高转得就越快。每个直流电机都有一个推荐电压，超出推荐电压太多容易导致电机被烧毁，而供电电压太低则转不起来。通过交换两根连接在电机上的导线顺序（实际上是改变电源的正负极），可以改变电机的转向。前面章节我们说过，直流电机属于高功耗元件，不可以直接使用树莓派进行驱动，因此我们需要使用一个外部电源。<br> 　　小型直流电机通常输出很高的转速和较低的扭矩，在作为机器人的驱动装置时，一般需要连接一个变速器，将其转换为低转速、高扭矩，使之有足够的力量驱动机器人。图7.1是典型的带变速器的小型直流电机，建议变速器和电机一起购买。</p><p><img src="E:\大三上\树莓派学习\笔记\6.用树莓派控制直流电机（L298N）.assets\13532817-f31f5406bfcace7b.png" alt="img" loading="lazy"></p><h1 id="2-双H桥直流电机驱动模块（L298N）"><a href="#2-双H桥直流电机驱动模块（L298N）" class="headerlink" title="2.双H桥直流电机驱动模块（L298N）"></a>2.双H桥直流电机驱动模块（L298N）</h1><p>H桥（H-Bridge）是控制直流电机的常用电路，因其电路形状酷似字母H而得名，可以控制直流电机的转速和方向，典型的H桥芯片有L293D、L298N等，以下我们以L298N为例进行介绍。实际使用的时候，为提高芯片的安全性、可靠性和方便性，我们一般会给芯片外接一些保护电路，并把输入输出引脚引接到排针上，从而形成一个功能模块。图7.2是一款典型的L298N双H桥直流电机驱动模块，可以很容易从网上购买到，价格也便宜。该模块的主要特点如下：</p><p><img src="E:\大三上\树莓派学习\笔记\6.用树莓派控制直流电机（L298N）.assets\13532817-d33ac6916eb9f32c.png" alt="img" loading="lazy"></p><ul><li>采用L298N双桥直流电机驱动芯片</li><li>工作电压范围5V35V，如果需要从模块内取电，则供电范围为7V35V</li><li>峰值输出电流2A</li><li>每个通道有一个使能输入端</li><li>可以驱动两个直流电机或者一个四线步进电机</li></ul><p> 　L298N双H桥直流电机驱动模块的引脚可以归纳成电源、控制和输出等三大类，下面是各类引脚的功能说明。</p><ul><li><strong>电压类引脚</strong></li></ul><p> 　+12V输入：L298N芯片的电源正极，模块上标称+12V，但实际范围可以是5V35V，如果需从模块内取电，则其范围为7V35V。<br> 　　GND：L298N芯片的电源地，使用的时候应该把树莓派的GND接到这里，即两者需要共地。<br> 　　+5V输出：L298N芯片输出的5V电源，可以给外部设备供电，使用的时候需要用跳线把5V输出使能端短接起来。</p><ul><li><strong>控制类引脚</strong></li></ul><p> 　ENA、ENB：A、B通道的使能端，高电平有效，可以用PWM来实现调速。使用时，可以接到树莓派的GPIO上，实现用程序进行控制。<br> 　　IN1、IN2、IN3、IN4：IN1、IN2为A通道的控制输入，IN3、IN4为B通道的控制输入。</p><ul><li><strong>输出类引脚</strong></li></ul><p> 　OUT1、OUT2、OUT3、OUT4：OUT1、OUT2由A通道输出，OUT3、OUT4由B通道输出，可以用于连接直流电机等设备。</p><p> 　控制直流电机的转向和转速实际是通过给控制类引脚设置不同的值来实现的，表7.1是使用通道A的控制直流电机的真值表，通道B与此类似。</p><p><img src="https://upload-images.jianshu.io/upload_images/13532817-d724bfe24fac8005.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/421/format/webp" alt="img" loading="lazy"></p><p>通道A的控制直流电机的真值表</p><blockquote><p><strong>提示：</strong></p><p>您购买到的L298N双H桥直流电机驱动模块可能与本章介绍的存在一定的差异，但这一类功能模块大同小异，请跟商家索要相应的技术资料了解更多的使用细节。</p></blockquote><h1 id="3-让直流电机动起来"><a href="#3-让直流电机动起来" class="headerlink" title="3. 让直流电机动起来"></a>3. 让直流电机动起来</h1><p> 　下面进入实战环节，我们将用树莓派通过L298N双H桥直流电机驱动模块控制一个电机的转向和转速。为了能让读者更好的理解，我们首先演示如何控制电机的转向，然后再进一步介绍如何控制电机转速。</p><h2 id="3-1-实验电路"><a href="#3-1-实验电路" class="headerlink" title="3.1 实验电路"></a>3.1 实验电路</h2><p> 　图7.3所示的是树莓派、L298N双H桥直流电机驱动模块和电机间连接的电路图，最终实物连线图如图7.4所示。我们使用树莓派的GPIO13、GPIO19和GPIO26等3个引脚，分别连接到L298N双H桥直流电机驱动模块的ENA、IN1和IN2，通过输入表7.1所示的不同电平组合就可以实现对电机的操纵。控制电机的转向和转速都是使用该电路，向ENA输入不同占空比的PWM脉冲信号就可以控制电机的转速。</p><p><img src="https://upload-images.jianshu.io/upload_images/13532817-ac38b15a79d6272d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/436/format/webp" alt="img" loading="lazy"></p><p>图 7.3 小型直流电机控制电路图</p><p><img src="https://upload-images.jianshu.io/upload_images/13532817-e41c49bbc602d114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/756/format/webp" alt="img" loading="lazy"></p><p> 　尽管L298N双H桥直流电机驱动模块能驱动两个直流电机，但我们只演示如何驱动一个。驱动两个电机使用的是相同的技术，如果在您的项目中需要用到两个，也可以很容易地扩展它。</p><h2 id="3-2-程序思路"><a href="#3-2-程序思路" class="headerlink" title="3.2 程序思路"></a>3.2 程序思路</h2><p> 　控制电机转向和转速可以使用同一个电路，但程序思路上我们分两个程序来演示，具体思路如下：</p><ul><li><strong>控制电机转向思路</strong></li></ul><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">BEGIN</span>      引入<span class="token constant">GPIO</span>库      将连接<span class="token constant">ENA</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    将连接<span class="token constant">IN1</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    将连接<span class="token constant">IN2</span>的<span class="token constant">GPIO</span>引脚设置为输出模式        <span class="token constant">DO</span> <span class="token constant">FOREVER</span>          将<span class="token constant">IN1</span>设置为<span class="token number">0</span>，<span class="token constant">IN2</span>设置为<span class="token number">1</span>，将电机设置为正向转动          将<span class="token constant">ENA</span>设置为<span class="token number">1</span>，驱动<span class="token constant">A</span>通道电机转动          等待<span class="token number">5</span>秒          将<span class="token constant">ENA</span>设置为<span class="token number">0</span>，停止电机转动          等待<span class="token number">2</span>秒          将<span class="token constant">IN1</span>设置为<span class="token number">1</span>，<span class="token constant">IN2</span>设置为<span class="token number">0</span>，将电机设置为反向转动          将<span class="token constant">ENA</span>设置为<span class="token number">1</span>，驱动<span class="token constant">A</span>通道电机转动          等待<span class="token number">5</span>秒          将<span class="token constant">ENA</span>设置为<span class="token number">0</span>，停止电机转动          等待<span class="token number">2</span>秒    <span class="token constant">ENDO</span>      停止<span class="token constant">PWM</span>      清理释放<span class="token constant">GPIO</span>资源  <span class="token keyword">END</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>提示：</strong></p><p>除了采用将ENA置0的方法来让电机停止转动，将IN1和IN2同时设置为0或1也可以让电机停止下来。</p></blockquote><ul><li><strong>控制电机转速思路</strong></li></ul><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">BEGIN</span>      引入<span class="token constant">GPIO</span>库      将连接<span class="token constant">ENA</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    将连接<span class="token constant">IN1</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    将连接<span class="token constant">IN2</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    设置<span class="token constant">ENA</span>输入一定频率的<span class="token constant">PWM</span>脉冲信号，创建<span class="token constant">PWM</span>对象      开始向<span class="token constant">ENA</span>输入占空比为<span class="token number">0</span>的<span class="token constant">PWM</span>脉冲信号          <span class="token constant">DO</span> <span class="token constant">FOREVER</span>          将<span class="token constant">IN1</span>设置为<span class="token number">0</span>，<span class="token constant">IN2</span>设置为<span class="token number">1</span>，将电机设置为正向转动          将<span class="token constant">ENA</span>设置为<span class="token number">1</span>，驱动<span class="token constant">A</span>通道电机转动                  speed <span class="token operator">=</span> <span class="token number">0</span>        <span class="token constant">DOWHILE</span> speed <span class="token operator">&lt;</span> <span class="token number">100</span>              将输入<span class="token constant">ENA</span>的<span class="token constant">PWM</span>脉冲信号的占空比修改为speed            speed <span class="token operator">+=</span> <span class="token number">5</span>            等待<span class="token number">1</span>秒        <span class="token constant">ENDDO</span>        将<span class="token constant">IN1</span>设置为<span class="token number">1</span>，<span class="token constant">IN2</span>设置为<span class="token number">0</span>，将电机设置为反向转动          将<span class="token constant">ENA</span>设置为<span class="token number">1</span>，驱动<span class="token constant">A</span>通道电机转动                  speed <span class="token operator">=</span> <span class="token number">0</span>        <span class="token constant">DOWHILE</span> speed <span class="token operator">&lt;</span> <span class="token number">100</span>              将输入<span class="token constant">ENA</span>的<span class="token constant">PWM</span>脉冲信号的占空比修改为speed            speed <span class="token operator">+=</span> <span class="token number">5</span>            等待<span class="token number">1</span>秒        <span class="token constant">ENDDO</span>    <span class="token constant">ENDO</span>          停止<span class="token constant">PWM</span>      清理释放<span class="token constant">GPIO</span>资源  <span class="token keyword">END</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 　电机的转向控制和转速控制的程序思路的最大区别在于ENA输入信号的不同。控制电机转向的程序思路只是简单的通过将ENA设置为1或0来启动和停止电机。对于电机转速控制，ENA输入的PWM脉冲信号，通过改变PWM脉冲信号的占空比来改变电机转速，占空比越大速度就越快，占空比为100%时相当于输入1（高电平），占空比为0%时相当于输入0（低电平）。</p><h2 id="3-3-程序代码"><a href="#3-3-程序代码" class="headerlink" title="3.3 程序代码"></a>3.3 程序代码</h2><p> 　以下是直流电机转向和转速控制程序，程序的详细说明见注释。</p><ul><li><strong>控制电机转向程序</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO         <span class="token comment"># 引入GPIO模块</span><span class="token keyword">import</span> time                     <span class="token comment"># 引入time模块</span>ENA <span class="token operator">=</span> <span class="token number">13</span>                        <span class="token comment"># 设置GPIO13连接ENA</span>IN1 <span class="token operator">=</span> <span class="token number">19</span>                        <span class="token comment"># 设置GPIO19连接IN1</span>IN2 <span class="token operator">=</span> <span class="token number">26</span>                        <span class="token comment"># 设置GPIO26连接IN2</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化</span>        GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>          <span class="token comment"># 使用BCM编号方式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>       <span class="token comment"># 将连接ENA的GPIO引脚设置为输出模式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>       <span class="token comment"># 将连接IN1的GPIO引脚设置为输出模式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>       <span class="token comment"># 将连接IN2的GPIO引脚设置为输出模式</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 驱动电机正向旋转5秒</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># 将IN1设置为0</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 将IN2设置为1</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 将ENA设置为1，启动A通道电机</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>               <span class="token comment"># 等待电机转动5秒</span>            <span class="token comment"># 电机停止2秒</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># 将ENA设置为0</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token comment"># 等待电机停止2秒</span>            <span class="token comment"># 驱动电机反向旋转5秒</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 将IN1设置为1</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># 将IN2设置为0</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 将ENA设置为1，启动A通道电机</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>               <span class="token comment"># 等待电机转动5秒</span>            <span class="token comment"># 电机停止2秒</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># 将ENA设置为0</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token comment"># 等待电机停止2秒</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        pwm<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 停止PWM</span>        GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 清理释放GPIO资源，将GPIO复位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 　运行这个程序后，您将看到直流电机反复的正向转动5秒后，停止两秒，再反向转动5秒后，停止2秒。</p><ul><li><strong>控制电机转速程序</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO         <span class="token comment"># 引入GPIO模块</span><span class="token keyword">import</span> time                     <span class="token comment"># 引入time模块</span>ENA <span class="token operator">=</span> <span class="token number">13</span>                        <span class="token comment"># 设置GPIO13连接ENA</span>IN1 <span class="token operator">=</span> <span class="token number">19</span>                        <span class="token comment"># 设置GPIO19连接IN1</span>IN2 <span class="token operator">=</span> <span class="token number">26</span>                        <span class="token comment"># 设置GPIO26连接IN2</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化</span>        GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>              <span class="token comment"># 使用BCM编号方式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>           <span class="token comment"># 将ENA对应的GPIO引脚设置为输出模式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>           <span class="token comment"># 将IN1对应的GPIO引脚设置为输出模式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>           <span class="token comment"># 将IN2对应的GPIO引脚设置为输出模式</span>        freq <span class="token operator">=</span> <span class="token number">500</span>        speed <span class="token operator">=</span> <span class="token number">0</span>        pwm <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> freq<span class="token punctuation">)</span>           <span class="token comment"># 设置向ENA输入PWM脉冲信号，频率为freq并创建PWM对象</span>        pwm<span class="token punctuation">.</span>start<span class="token punctuation">(</span>speed<span class="token punctuation">)</span>                    <span class="token comment"># 以speed的初始占空比开始向ENA输入PWM脉冲信号</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 将电机设置为正向转动</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>         <span class="token comment"># 将IN1设置为0</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token comment"># 将IN2设置为1</span>            <span class="token comment"># 通过改变PWM占空比，让电机转速不断加快</span>            <span class="token keyword">for</span> speed <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>speed<span class="token punctuation">)</span>  <span class="token comment"># 改变PWM占空比</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 将电机设置为反向转动</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token comment"># 将IN1设置为1</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>         <span class="token comment"># 将IN2设置为0</span>            <span class="token comment"># 通过改变PWM占空比，让电机转速不断加快</span>            <span class="token keyword">for</span> speed <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>speed<span class="token punctuation">)</span>  <span class="token comment"># 改变PWM占空比</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        pwm<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment"># 停止PWM</span>        GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 清理释放GPIO资源，将GPIO复位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 　运行这个程序后，您将看到直流电机首先正向转动，转动速度不断增加，在达到最大转速后，直流电机短暂停止转动，然后反向转动，转动速度不断增加，如此反复运动。</p><h1 id="4-本章小结"><a href="#4-本章小结" class="headerlink" title="4 .本章小结"></a>4 .本章小结</h1><p> 　本章首先介绍了直流电机的基本知识，然后介绍了L298N双H桥直流电机驱动模块的相关基础知识，最后介绍了使用树莓派和L298N双H桥直流电机驱动模块来控制一个直流电机的转向和转速的电路、思路和程序等知识。</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 直流电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派GPIO模块使用基础</title>
      <link href="/posts/dd95cd02/"/>
      <url>/posts/dd95cd02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-RPi-GPIO-模块使用基础"><a href="#1-RPi-GPIO-模块使用基础" class="headerlink" title="1.RPi.GPIO 模块使用基础"></a>1.RPi.GPIO 模块使用基础</h1><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><p>导入 RPi.GPIO 模块：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过该操作，您可以将模块名称映射为 GPIO，以便接下来您其它脚本进行使用。</p><p>导入模块并检查它是否导入成功，可以尝试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">except</span> RuntimeError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"导入 RPi.GPIO 时出现错误！这可能由于没有超级用户权限造成的。您可以使用 'sudo' 来运行您的脚本。"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="针脚编号"><a href="#针脚编号" class="headerlink" title="针脚编号"></a>针脚编号</h4><p>目前有两种方式可以通过 RPi.GPIO 对 Raspberry Pi 上的 IO 针脚进行编号。</p><p>第一种方式是使用 BOARD 编号系统。该方式参考 Raspberry Pi 主板上 P1 接线柱的针脚编号。使用该方式的优点是无需考虑主板的修订版本，您硬件始终都是可用的状态。您将无需从新连接线路和更改您的代码。</p><p>第二种方式是使用 BCM 编号。这是一种较低层的工作方式 – 该方式参考 Broadcom SOC 的通道编号。使用过程中，您始终要保证主板上的针脚与图表上标注的通道编号相对应。您的脚本可能在 Raspberry Pi 主板进行修订版本更新时无法工作。</p><p>指定您所使用的方式（必须指定）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BOARD<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h4><p>可能您的 Raspberry Pi 的 GPIO 上同时有多个脚本&#x2F;循环。因此，如果 RPi.GPIO 检测到某个针脚被设置为其它用途而非默认的状态（默认为输入），您会在尝试配置某脚本时得到警告消息。</p><p>禁用该警告消息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setwarnings<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置通道"><a href="#配置通道" class="headerlink" title="配置通道"></a>配置通道</h4><p>您需要为每个用于输入或输出的针脚配置通道。</p><p>配置为输入的通道：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>IN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（通道编号是基于您所使用的编号系统所指定的（BOARD 或 BCM）。）</p><p>更多关于输入通道的进阶信息可以在<a href="https://shumeipai.nxez.com/2016/09/28/rpi-gpio-module-inputs.html">这里</a>找到。</p><p>配置为输出的通道：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（通道编号是基于您所使用的编号系统所指定的（BOARD 或 BCM）。）</p><p>您还可以指定输出通道的初始值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">,</span> initial <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>读取 GPIO 针脚的值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（通道编号是基于您所使用的编号系统所指定的（BOARD 或 BCM）。）这将返回 0 &#x2F; GPIO.LOW &#x2F; False 或者 1 &#x2F; GPIO.HIGH &#x2F; True。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>设置 GPIO 针脚的输出状态：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（通道编号是基于您所使用的编号系统所指定的（BOARD 或 BCM）。）</p><p>状态可以为 0 &#x2F; GPIO.LOW &#x2F; False 或者 1 &#x2F; GPIO.HIGH &#x2F; True。</p><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><p>在任何程序结束后，请养成清理用过的资源的好习惯。使用 RPi.GPIO 也同样需要这样。恢复所有使用过的通道状态为输入，您可以避免由于短路意外损坏您的 Raspberry Pi 针脚。注意，该操作仅会清理您的脚本使用过的 GPIO 通道。</p><p>在您的脚本结束后进行清理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Raspberry-Pi-修订版本和-RPi-GPIO-版本"><a href="#Raspberry-Pi-修订版本和-RPi-GPIO-版本" class="headerlink" title="Raspberry Pi 修订版本和 RPi.GPIO 版本"></a>Raspberry Pi 修订版本和 RPi.GPIO 版本</h4><p>检测 Raspberry Pi 主板的修订版本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>RPI_REVISION<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检测 RPi.GPIO 的版本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>VERSION<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-使用-RPi-GPIO-模块的输出（Output）功能"><a href="#2-使用-RPi-GPIO-模块的输出（Output）功能" class="headerlink" title="2.使用 RPi.GPIO 模块的输出（Output）功能"></a>2.使用 RPi.GPIO 模块的输出（Output）功能</h1><p>1、首先对 RPi.GPIO 进行设置（根据<a href="https://shumeipai.nxez.com/2016/09/28/rpi-gpio-module-basics.html">这里</a>的描述）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIOGPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、设置某个输出针脚状态为高电平：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span><span class="token comment"># 或者</span>GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 或者</span>GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、设置某个输出针脚状态为低电平：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>LOW<span class="token punctuation">)</span><span class="token comment"># 或者</span>GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 或者</span>GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span>`<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、程序结束后进行清理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，您可以读取使用 input() 函数设置的输出通道的当前状态。例如对输出进行切换：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token keyword">not</span> GPIO<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-使用-RPI-GPIO-模块的脉宽调制（PWM）功能"><a href="#3-使用-RPI-GPIO-模块的脉宽调制（PWM）功能" class="headerlink" title="3.使用 RPI.GPIO 模块的脉宽调制（PWM）功能"></a>3.使用 RPI.GPIO 模块的脉宽调制（PWM）功能</h1><p>脉宽调制(PWM)是指用微处理器的数字输出来对模拟电路进行控制，是一种对模拟信号电平进行数字编码的方法。在树莓派上，可以通过对GPIO的编程来实现PWM。</p><p>创建一个 PWM 实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p  <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> frequency<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启用 PWM：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>start<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>   <span class="token comment"># dc 代表占空比（范围：0.0 &lt;= dc >= 100.0）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改频率：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>ChangeFrequency<span class="token punctuation">(</span>freq<span class="token punctuation">)</span>   <span class="token comment"># freq 为设置的新频率，单位为 Hz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改占空比：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>  <span class="token comment"># 范围：0.0 &lt;= dc >= 100.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止 PWM：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，如果实例中的变量“p”超出范围，也会导致 PWM 停止。</p><p>以下为使 LED 每两秒钟闪烁一次的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIOGPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BOARD<span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>p <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'点击回车停止：'</span><span class="token punctuation">)</span>   <span class="token comment"># 在 Python 2 中需要使用raw_input</span>p<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为使 LED 在亮&#x2F;暗之间切换的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIOGPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BOARD<span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>p <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 通道为 12 频率为 50Hz</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">for</span> dc <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">for</span> dc  <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>exceptKeyboardInterrupt<span class="token punctuation">:</span><span class="token keyword">pass</span>p<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> RPi.GPIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派驱动57步进电机</title>
      <link href="/posts/7da4ed6c/"/>
      <url>/posts/7da4ed6c/</url>
      
        <content type="html"><![CDATA[<h1 id="一、57步进电机参数"><a href="#一、57步进电机参数" class="headerlink" title="一、57步进电机参数"></a>一、57步进电机参数</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103121.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103210.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103221.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103159.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103226.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103231.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103152.png" alt="img" loading="lazy"></p><h1 id="二、树莓派利用python控制57步进电机"><a href="#二、树莓派利用python控制57步进电机" class="headerlink" title="二、树莓派利用python控制57步进电机"></a>二、树莓派利用python控制57步进电机</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">import</span> time<span class="token comment"># w1,w2,w3,w4,w5,w6 = 0,1,0,0,0,0,0   细分400，电流3.5A，电压24V</span>IN1 <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># 接PUL-</span>IN2 <span class="token operator">=</span> <span class="token number">21</span>  <span class="token comment"># 接PUL+</span>IN3 <span class="token operator">=</span> <span class="token number">12</span>  <span class="token comment"># 接DIR-</span>IN4 <span class="token operator">=</span> <span class="token number">16</span>  <span class="token comment"># 接DIR+</span><span class="token keyword">def</span> <span class="token function">setStep</span><span class="token punctuation">(</span>w1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> w3<span class="token punctuation">,</span> w4<span class="token punctuation">)</span><span class="token punctuation">:</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> w2<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN3<span class="token punctuation">,</span> w3<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN4<span class="token punctuation">,</span> w4<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 正转</span><span class="token comment"># 控制电机旋转的快慢和圈数 delay越小转得越快，1600为一圈</span><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token comment"># 控制电机一直旋转</span><span class="token keyword">def</span> <span class="token function">yizhi</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token comment"># 反转</span><span class="token comment"># 控制电机旋转的快慢和圈数 delay越小转得越快，1600为一圈</span><span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token comment"># 初始化树莓派引脚，设置树莓派的引脚为输出状态</span><span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    GPIO<span class="token punctuation">.</span>setwarnings<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN3<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN4<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span class="token comment"># 带异常处理</span><span class="token comment"># 控制电机正转一圈</span><span class="token keyword">def</span> <span class="token function">hhh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    setup<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>         forward<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">,</span><span class="token number">1600</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>  <span class="token comment"># When 'Ctrl+C' is pressed, the child function destroy() will be  executed.</span>         destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 带异常处理</span><span class="token comment"># 控制电机一直旋转</span><span class="token keyword">def</span> <span class="token function">zzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    setup<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>         yizhi<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>  <span class="token comment"># When 'Ctrl+C' is pressed, the child function destroy() will be  executed.</span>         destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 检测正转和反转</span><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        i<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"1、正转\t2、反转\t3、退出\n请输入数字： "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入脉冲个数（1600个脉冲为一圈）："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            forward<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请等待3秒..."</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stop..."</span><span class="token punctuation">)</span>            stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>            a<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入脉冲个数（1600个脉冲为一圈）："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            backward<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token comment"># 发射脉冲时间间隔0.0001（单位秒）   脉冲个数a 如果编码器的设置是8细分 那么1600冲就转360度</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请等待3秒..."</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stop..."</span><span class="token punctuation">)</span>            stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># stop</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token comment"># 清除树莓派引脚状态赋值            </span><span class="token keyword">def</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 释放数据</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token comment"># Program start from here</span>   setup<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">try</span><span class="token punctuation">:</span>        loop<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>  <span class="token comment"># When 'Ctrl+C' is pressed, the child function destroy() will be  executed.</span>        destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 57步进电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派开机自动发送IP地址到邮箱</title>
      <link href="/posts/3daa603a/"/>
      <url>/posts/3daa603a/</url>
      
        <content type="html"><![CDATA[<h1 id="1-编写开机获取IP地址的python程序"><a href="#1-编写开机获取IP地址的python程序" class="headerlink" title="1.编写开机获取IP地址的python程序"></a>1.编写开机获取IP地址的python程序</h1><blockquote><p>获取指定网卡的IP地址：ifconfig wlan0 | grep inet | grep -o -E ([0-9]+.){3}[0-9]+ | head -n 1</p><p>获取IP地址： hostname -I</p></blockquote><p><img src="https://i.loli.net/2020/12/17/8rsoDSpbYzmUANe.png" alt="image-20200725142149402" loading="lazy"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>image <span class="token keyword">import</span> MIMEImage<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> time<span class="token keyword">import</span> traceback<span class="token comment">#延时15秒，使系统准备完毕（连上网络）</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment">#获取指定网卡 wlan0 的ip地址</span>cont <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>getoutput<span class="token punctuation">(</span><span class="token string">"ifconfig wlan0 | grep inet | grep -o -E \([0-9]+\.\)&#123;3&#125;[0-9]+ | head -n 1"</span><span class="token punctuation">)</span>localtime <span class="token operator">=</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#将时间和IP地址写入日志文件中</span>log <span class="token operator">=</span> cont<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>localtime<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"launlog.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token comment"># 发送邮件服务器</span>smtpserver <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span><span class="token comment">#代发邮件的邮箱和用于登录的认证码(在QQ邮箱的设置中获取)</span>sender <span class="token operator">=</span> <span class="token string">"xxxxxxxxxx@qq.com"</span>aucode <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span><span class="token comment">#接收邮件的IP地址</span>receiver <span class="token operator">=</span> <span class="token string">"xxxxxxxxxx@qq.com"</span>message <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token string">'related'</span><span class="token punctuation">)</span>message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'RaspberryPi'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>message<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'树莓派'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>subject <span class="token operator">=</span> <span class="token string">'树莓派'</span>message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>ipContent <span class="token operator">=</span> <span class="token string">"无线网络IP:"</span><span class="token operator">+</span>contcontent <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>ipContent<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>message<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>smtpserver<span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender<span class="token punctuation">,</span>aucode<span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException<span class="token punctuation">:</span><span class="token comment">#将异常信息写入日志文件中</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"launlog.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-编写开机启动脚本"><a href="#2-编写开机启动脚本" class="headerlink" title="2.编写开机启动脚本"></a>2.编写开机启动脚本</h1><blockquote><p>wuxian.sh</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash### BEGIN INIT INFO<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Provides<span class="token operator">:</span>          scriptname</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Required<span class="token operator">-</span>Start<span class="token operator">:</span>    $remote_fs $network</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Required<span class="token operator">-</span>Stop<span class="token operator">:</span>     $remote_fs $network</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Default<span class="token operator">-</span>Start<span class="token operator">:</span>     <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Default<span class="token operator">-</span>Stop<span class="token operator">:</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">6</span> <span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Short<span class="token operator">-</span>Description<span class="token operator">:</span> Start daemon at boot time</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Description<span class="token operator">:</span>       Enable service provided by daemon<span class="token punctuation">.</span></span></span>### END INIT INFO<span class="token function">do_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    python3 <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>py    echo <span class="token string">" start"</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token function">do_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   echo <span class="token string">"stop "</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token function">do_restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo <span class="token string">"restart"</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token function">do_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo <span class="token string">"status"</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token function">do_fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo <span class="token string">"fallback"</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token string">"$1"</span> instart<span class="token punctuation">)</span> do_start    <span class="token punctuation">;</span><span class="token punctuation">;</span>stop<span class="token punctuation">)</span> do_stop    <span class="token punctuation">;</span><span class="token punctuation">;</span>restart<span class="token punctuation">)</span> do_restart    <span class="token punctuation">;</span><span class="token punctuation">;</span>status<span class="token punctuation">)</span> do_status    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">)</span> do_fallback    <span class="token punctuation">;</span><span class="token punctuation">;</span>esacexit <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3、系统配置"><a href="#3、系统配置" class="headerlink" title="3、系统配置"></a>3、系统配置</h1><blockquote><p>（1）将 wuxian.sh 放置 &#x2F;etc&#x2F;init.d&#x2F; 文件夹中<br>（2）在 &#x2F;etc&#x2F;rc5.d&#x2F; 文件夹下创建一个wuxian.sh的软连接<br>（3）在终端中输入ln -s &#x2F;etc&#x2F;init.d&#x2F;wuxian.sh .&#x2F;S01wuxian.sh</p></blockquote><p>注意：</p><p>a.此时 wuxian.py 在 &#x2F;home&#x2F;pi&#x2F;Desktop&#x2F; 中</p><p>b.wuxian.sh在&#x2F;etc&#x2F;init.d&#x2F;中</p><p>c.软连接S01wuxian.sh在&#x2F;etc&#x2F;rc5.d&#x2F;中</p><p>d.有线网络的IP地址获取将Python脚本里面的<strong>wlan0</strong>改成<strong>eth0</strong>就行</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
