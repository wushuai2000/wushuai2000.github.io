<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机存储容量单位换算</title>
      <link href="/posts/3b245245/"/>
      <url>/posts/3b245245/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>1、比特Bit(位、b)：表示信息的最小单位，即计算机最小的存储单位，是二进制数的一位包含的信息或2个选项中特别指定1个的需要信息量【它代表从一个二进制数组中选出一元（0或1）所提供的信息量（若此二元出现的概率相等）】</p><p>2、字节Byte(B)：二进制数据的单位，计算机中数据基本单位，一个字节通常8位长。各种信息在计算机中存储、处理至少需要一个字节。例一个ASCII码用一个字节表示，一个汉字用两个字节表示</p><p>3、千字节Kilobytes(KB)：计算机存储容量的单位，也常用KB来表示。1KB&#x3D;1024字节</p><p>4、兆字节Megabytes(MB)：计算机存储容量的单位，也常用MB来表示。1MB&#x3D;1024*1024字节</p><p>5、吉字节Gigabyte(GB) ：又称千兆字节，是计算机存储容量单位，简称GB，是兆字节(MB)的1024倍，即 1024MB。</p><p>6、太字节terabyte(TB)：计算机存储容量单位，也常用TB来表示。1TB&#x3D;1024GB&#x3D;2^40字节。</p><p>PS：KB（即baiK）、MB（即M）、GB（即G）等都是基于字节换算的存储单位。</p><h1 id="二、转换"><a href="#二、转换" class="headerlink" title="二、转换"></a>二、转换</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c">字节<span class="token punctuation">(</span>Byte<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span>位<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>                               <span class="token number">1</span>B<span class="token operator">=</span><span class="token number">8</span>b <span class="token number">1</span>KB<span class="token punctuation">(</span> Kilobyte，千字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>B                      <span class="token number">1</span>KB<span class="token operator">=</span><span class="token number">1024</span>B <span class="token number">1</span>MB<span class="token punctuation">(</span> Megabyte，兆字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>KB                     <span class="token number">1</span>MB<span class="token operator">=</span><span class="token number">1024</span>KB <span class="token number">1</span>GB<span class="token punctuation">(</span> Gigabyte，吉字节，千兆<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>MB               <span class="token number">1</span>GB<span class="token operator">=</span><span class="token number">1024</span>MB <span class="token number">1</span>TB<span class="token punctuation">(</span> Trillionbyte，万亿字节，太字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>GB       <span class="token number">1</span>TB<span class="token operator">=</span><span class="token number">1024</span>GB <span class="token number">1</span>PB<span class="token punctuation">(</span> Petabyte，千万亿字节，拍字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>TB         <span class="token number">1</span>PB<span class="token operator">=</span><span class="token number">1024</span>TB <span class="token number">1</span>EB<span class="token punctuation">(</span> Exabyte，百亿亿字节，艾字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>PB          <span class="token number">1</span>EB<span class="token operator">=</span><span class="token number">1024</span>PB <span class="token number">1</span>ZB<span class="token punctuation">(</span>Zettabyte，十万亿亿字节，泽字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>EB       <span class="token number">1</span>ZB<span class="token operator">=</span><span class="token number">1024</span>EB <span class="token number">1</span>YB<span class="token punctuation">(</span> Yottabyte，一亿亿亿字节，尧字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>ZB      <span class="token number">1</span>YB<span class="token operator">=</span><span class="token number">1024</span>ZB    <span class="token number">1</span>BB<span class="token punctuation">(</span> Brontobyte，千亿亿亿字节<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1024</span>YB             <span class="token number">1</span>BB<span class="token operator">=</span><span class="token number">1024</span>YB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线转换工具：<a href="https://calc.itzmx.com/">PC字节计算器</a></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220224141737.png" alt="image-20220224141737338" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> 计算机等级考试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装hexo主题yun</title>
      <link href="/posts/17723abd/"/>
      <url>/posts/17723abd/</url>
      
        <content type="html"><![CDATA[<h1 id="安装渲染器"><a href="#安装渲染器" class="headerlink" title="安装渲染器"></a>安装渲染器</h1><blockquote><p>  如果您没有 <code>pug</code> 与 <code>stylus</code> 的渲染器，请先安装： <a href="https://github.com/hexojs/hexo-renderer-pug">hexo-renderer-pug</a> （这个是 Hexo 官方在维护，但是好像没有下面的星多，更新的勤快。） 或 <a href="https://github.com/maxknee/hexo-render-pug">hexo-render-pug</a> （以及前者尚未支持开发时热更新，后者支持。） 和 <a href="https://github.com/hexojs/hexo-renderer-stylus">hexo-renderer-stylus</a></p>  <pre class="line-numbers language-none"><code class="language-none">npm install hexo-render-pug hexo-renderer-stylus --save# oryarn add hexo-render-pug hexo-renderer-stylusnpm install hexo-render-pug hexo-renderer-stylus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220213105356.png" alt="image-20220213105356132" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none">node -vnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.orgnpm install -g yarnnpm install hexo-cli -ghexo init wushuai2000.github.iocd wushuai2000.github.ionpm installnpm install hexo-render-pug hexo-renderer-stylusnpm i hexo-theme-yun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo绑定域名</title>
      <link href="/posts/7068443c/"/>
      <url>/posts/7068443c/</url>
      
        <content type="html"><![CDATA[<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a><strong>购买域名</strong></h2><p>自定义域名第一步：挑选好一个自己喜欢的域名并购买，域名服务商可以在阿里云旗下的万网或者腾讯云都可以，由于我之前就在阿里云买了一个域名：ccsu.top，没有使用，所以现在就用上了</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104451.png" alt="image-20220212104451749" loading="lazy"></p><p>买完之后在阿里云控制台域名下面就会展示出购买的域名信息</p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a><strong>解析域名</strong></h2><p>以我的阿里云为例，如下图所示，添加两条解析记录：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104243.png" alt="image-20220212104243325" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212104303.png" alt="image-20220212104303051" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212103451.png" alt="image-20220212103451170" loading="lazy"></p><h2 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a><strong>设置CNAME</strong></h2><p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212103354.png" alt="image-20220212103354458" loading="lazy"></p><p>在项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），填写上域名。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。完成上述步骤之后就可以在浏览器输入自己的域名访问了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220212105212.png" alt="image-20220212105212611" loading="lazy"></p><h2 id="Hexo推送GitHub-Pages时自定义域名失效的问题"><a href="#Hexo推送GitHub-Pages时自定义域名失效的问题" class="headerlink" title="Hexo推送GitHub Pages时自定义域名失效的问题"></a>Hexo推送GitHub Pages时自定义域名失效的问题</h2><p>用Hexo可以实现基于Github Pages的个人博客系统，默认博客网址是 username.github.io</p><p>如果想换成自己的域名，可以在Github对应repository的Setting里，找到Github Pages， 在Custom domain里填进去自己的域名，Save。</p><p>再在域名商那里设置好域名解析，就可以实现个人域名了。</p><p>仔细观察可以发现，在Github设置好Custom domain之后，博客对应的repository里，会多出一个名为CNAME的文件，内容是自己的自定义域名的网址。</p><p>然而在本地更新hexo博客内容，并通过Git更新托管在Github的博客时，由于Hexo默认没有这个CNAME文件，原本的CNAME文件会被抹掉，于是自定义域名就失效了。</p><p>解决办法很简单：<strong>在Hexo目录里的source文件夹下面，新建一个同样内容、同样名字的CNAME文件即可。</strong></p><h1 id="您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入的问题解决"><a href="#您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入的问题解决" class="headerlink" title="您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入的问题解决"></a>您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入的问题解决</h1><p>工信部备案后一段时间会发来<br><code>Hexo博客：您备案的网站未指向阿里云国内节点（不含香港）服务器，备案号可能被取消接入</code><br>的短信警告，</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220217143200.png" alt="image-20220217143200537" loading="lazy"></p><p>下面讲述该问题的原因及解决方法。</p><p>问题描述：<br>经检查您的网站域名 xxxxxx 未指向阿里云国内节点（不含香港）服务器且无访问记录 ，依据工信部相关法规规定属于空壳网站，请您尽快将域名解析IP地址指向阿里云国内节点（不含香港）服务器。 如果3个工作日后检查发现该备案域名在在阿里云国内节点（不含香港）服务器上仍无访问记录，我们将删除网站备案接入信息。您的备案号可能会被注销，网站访问可能受到影响。</p><p>这个问题常见于个人博客，特别是 hexo 博客，购买了域名，并且备了案，由于 hexo 博客静态托管于 Github Pages 或者 Coding Pages，所以也就没有阿里云的服务器，也就不可能存在域名解析IP地址指向阿里云国内节点服务器。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220217143236.png" alt="image-20220217143236477" loading="lazy"></p><p>解决方法：<br>将你的域名添加一个二级域名，解析到某些阿里云国内节点服务器上就行了。例如我博客域名为 ccsu.top，就可以添加一个或者两个 A 记录，记录值为阿里云国内节点服务器的 IP。然后隔一段时间访问一下 beian.ccsu.top，确保有一点儿访问量就行了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220217143335.png" alt="image-20220217143335076" loading="lazy"></p><p>下面列出一些阿里云国内节点服务器 IP，挑一些能访问的就行了。</p><p>39.100.0.2 【恭喜，站点创建成功！】<br>39.100.0.16 【恭喜，站点创建成功！】<br>39.100.0.17 【恭喜，站点创建成功！】<br>39.100.0.23 【Document】<br>39.100.0.59 【恭喜，站点创建成功！】<br>39.100.0.64 【贵州鸿巨热力(集团)有限责任公司】<br>39.100.0.68 【恭喜，站点创建成功！】<br>39.100.0.75 【没有找到站点】<br>39.100.0.77 【Welcome to nginx!】<br>39.100.0.88 【恭喜，站点创建成功！】<br>39.100.0.94 【没有找到站点】<br>39.100.0.113 【IIS Windows Server】<br>39.100.0.117 【phpinfo()】<br>39.100.0.118 【没有找到站点】<br>39.100.0.119 【恭喜，站点创建成功！】<br>39.100.0.134 【宁夏塞上优家互联科技有限公司】<br>39.100.0.138 【没有找到站点】<br>39.100.0.149 【没有找到站点】<br>39.100.0.158 【没有找到站点】<br>39.100.0.159 【学点云管理后台】<br>39.100.0.167 【财经·新经济】<br>39.100.0.168 【苏州市相城区燃气有限责任公司】<br>39.100.0.169 【恭喜，站点创建成功！】<br>39.100.0.174 【The page is not foun】<br>39.100.0.177 【恭喜，站点创建成功！】<br>39.100.0.182 【IIS7】<br>39.100.0.192 【恭喜，站点创建成功！】<br>39.100.0.204 【恭喜，站点创建成功！】<br>39.100.0.209 【千胜ERP】<br>39.100.0.214 【LANMP一键安装包,集lamp,lnm】<br>39.100.0.238 【登录 - 大庆井下】<br>39.100.1.1 【上海美凯龙美学装饰工程有限公司ERP】<br>39.100.1.28 【恭喜，站点创建成功！】<br>39.100.1.44 【IIS Windows Server】<br>39.100.1.65 【恭喜，站点创建成功！】<br>39.100.1.68 【Test Page for the Ng】<br>39.100.1.95 【恭喜，站点创建成功！】</p><blockquote><p>  <a href="https://blog.csdn.net/kuashijidexibao/article/details/106503226">https://blog.csdn.net/kuashijidexibao/article/details/106503226</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相册</title>
      <link href="/posts/e26d1860/"/>
      <url>/posts/e26d1860/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">type</span><span class="token punctuation">:</span> albums<span class="token key atrule">title</span><span class="token punctuation">:</span> 相册<span class="token key atrule">url</span><span class="token punctuation">:</span> /albums/miracle.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span> e26d1860<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-03-05 01:31:08</span><span class="token key atrule">updated</span><span class="token punctuation">:</span> <span class="token datetime number">2020-07-14 16:31:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-yun</title>
      <link href="/posts/4567d7fd/"/>
      <url>/posts/4567d7fd/</url>
      
        <content type="html"><![CDATA[<p>Hexo 主题 Yun</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐播放实例</title>
      <link href="/posts/bf8e06ec/"/>
      <url>/posts/bf8e06ec/</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-lnkCJmaV" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="497572729" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;497572729&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#C20C0C&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    <div id="aplayer-buASALbX" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2008272804" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;2008272804&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装hexo及部署</title>
      <link href="/posts/17723abd/"/>
      <url>/posts/17723abd/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以来都想搭建一个自己的博客系统，用来记录自己在学习中遇到的问题和一些心得体会，趁着这次没有太多的事情，搭建一个属于自己的博客。由于自己平时的笔记都是使用Markdown语法来撰写的，在搜索资料与对比后决定使用<code>Hexo</code>框架。</p><p>我不是一个前端程序员，有些东西不是很了解，写的有问题或有改进的地方请大家指出。</p><h1 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，她基于 <a href="https://nodejs.org/en/">Node.js</a>，相较于 Jekyll 他有以下特点:</p><ul><li><h3 id="超快速度"><a href="#超快速度" class="headerlink" title="超快速度"></a>超快速度</h3><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p></li><li><h3 id="支持-Markdown"><a href="#支持-Markdown" class="headerlink" title="支持 Markdown"></a>支持 Markdown</h3><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p></li><li><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>只需一条指令即可部署到 Github Pages，或其他网站</p></li><li><h3 id="丰富的插件"><a href="#丰富的插件" class="headerlink" title="丰富的插件"></a>丰富的插件</h3><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></li></ul><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的<a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a>来快速的插入特定形式的内容。</p><p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/">主题</a>。</p><ul><li><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3></li></ul><ol><li>Hexo</li><li>静态博客</li><li>无服务器</li><li>GitHub Pages</li></ol><h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li>Git</li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 安装 Hexo 步骤。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h1 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h1><h2 id="什么是-Node-js-？"><a href="#什么是-Node-js-？" class="headerlink" title="什么是 Node.js ？"></a><strong>什么是 Node.js ？</strong></h2><blockquote><p>  这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>  JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）</p><p>  在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>  2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>  Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>  当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br>  <a href="https://baike.baidu.com/item/node.js/7567977">Node.js | 百度百科</a><br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></p></blockquote><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/zh-cn/">下载｜ Node.js</a></p><p>建议下载<strong>长期支持版</strong>而非<strong>当前发布版</strong>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><blockquote><p>  Node.js 安装成功时也默认安装了 <code>npm</code>，在此后将会用到。<br>  <code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p></blockquote><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具—Git</p><blockquote><p>  Visual Studio Code，简称 VS Code。<br>  目前最为强大易用的编辑器，轻量且快速。（<del>宇宙第一编辑器</del>）<br>  注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积也相比 VS Code 都要大上一个量级。</p><p>  Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。<br>  简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>  你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>  （当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 <a href="https://git-lfs.github.com/">Git LFS</a>。）</p></blockquote><h2 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载 <a href="https://git-scm.com/">Git</a> 并安装（如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html">这里</a>）</p><p>macOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><blockquote><p>  类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p></blockquote><h1 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h1><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>这一部分内容，你也可以放到本地调试并预览成功后并打算线上部署的时候，再回过头来看。</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>  GitHub 一听便与 Git 有所渊源。<code>Git</code> 在英文中是懒人、饭桶之意。<code>Hub</code> 则是中心、集线器的意思。譬如 USB 集线器就是 USB Hub。所以 GitHub 就是饭桶中心（<del>大雾</del>）。<br>  GitHub 是全世界最大的开源项目与代码托管平台，也是众多开发者的交流场所。<del>还是全球最大的同性交友网站</del>。<br>  而代码托管本身用到的正是上文提到的 Git 技术。</p></blockquote><p>注册 <a href="https://github.com/">GitHub</a> 账号。（虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用手头的翻译软件。）</p><blockquote><p>  注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></blockquote><p>登录 GitHub。</p><h2 id="为什么要用-GitHub？"><a href="#为什么要用-GitHub？" class="headerlink" title="为什么要用 GitHub？"></a>为什么要用 GitHub？</h2><p>对于平民玩家来说，在初次尝试建立自己的网站时，也许并不会有闲钱或者说决心来购买自己的服务器与域名。<br>而 GitHub 则提供了 <a href="https://pages.github.com/">GitHub Pages</a> 这一服务。<br>用户们可以利用这一服务，部署自己的静态站点。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>点击右上角的 <code>+</code> -&gt; <code>New repository</code> 新建仓库。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211224358.png" loading="lazy"></p><p>仓库名称务必为 <code>你的用户名.github.io</code>，用户名是英文，大小写无所谓，但建议统一小写。（因为你会发现时常切换大小写很麻烦）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211224924.png" alt="image-20220211224814302" loading="lazy"></p><blockquote><p>  为什么必须这个作为仓库名？<br>  GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></blockquote><p>点击 <code>Create repository</code>。然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225115.png" alt="image-20220211225115298" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225205.png" alt="image-20220211225205880" loading="lazy"></p><p>点击那个链接，就会出现自己的网页啦，效果如下：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211225305.png" alt="image-20220211225305706" loading="lazy"></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><a href="https://hexo.io/">Hexo</a></p><ul><li>GitHub: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>（直接参考文档也是一个不错的选择）</li></ul><h2 id="为嘛使用-Hexo-？"><a href="#为嘛使用-Hexo-？" class="headerlink" title="为嘛使用 Hexo ？"></a><strong>为嘛使用 Hexo ？</strong></h2><blockquote><p>  Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。<br>  你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。</p></blockquote><h2 id="为什么不是…"><a href="#为什么不是…" class="headerlink" title="为什么不是…?"></a><strong>为什么不是…?</strong></h2><blockquote><p>  其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。（当然，相应的功能和灵活性也大大提升。）静态化站点还有一个优势就是访问速度往往更快。<br>  静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。Hexo 提供的功能与 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。<br>  所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）</p></blockquote><h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在终端中输入以下命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-cli -g# 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行# sudo npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>  <code>install</code> 自然是安装。<br>  <code>hexo-cli</code> 则是 <code>hexo</code> 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br>  <code>-g</code> 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></blockquote><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>此时，请先通过 <code>cd</code> 进入你本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here）</p><p>接下来输入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo init 你的名字.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231417.png" alt="image-20220211231417468" loading="lazy"></p><blockquote><p>  <code>hexo</code> 正是因为我们之前安装了 <code>hexo-cli</code> 这一个包，所以我们可以在终端中使用 <code>hexo</code> 这一命令。<br>  <code>init</code> 初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致。</p><p>  如果在初始化过程中半天没有反应，多尝试几次，可能是因为本地连接GitHub的问题，可以考虑开代理或者修改host的方式解决。</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 进入你的博客文件夹cd 你的名字.github.io# 默认安装所有 &#96;package.json&#96; 文件中提到的包npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231631.png" alt="image-20220211231631300" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none"># 编译hexo g# 你也可以缩写成 hexo shexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231738.png" alt="image-20220211231738568" loading="lazy"></p><p><code>server</code> 代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 <code>localhost:4000</code> 就可以看到本地的网页了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211231810.png" alt="image-20220211231810793" loading="lazy"></p><p>按 <code>Ctrl + C</code> 中断服务器的运行。</p><p>至此，基础的模版页面便已经搭建好了。</p><h1 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h1><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p>首先右键打开git bash，然后输入下面命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"wushuai"</span><span class="token function">git</span> config --global user.email <span class="token string">"2506812280@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><h2 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h2><p>生成密钥SSH key：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 三次回车即可生成 ssh key, 这里的邮箱最好填和刚才一样的</span>ssh-keygen -t rsa -C <span class="token string">"2506812280@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211232902.png" alt="image-20220211232902462" loading="lazy"></p><p>然后用文本编辑器(如notepad)打开id_rsa.pub这个文件, 全选复制。文件路径在命令行的提示里面可以看见。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233434.png" alt="image-20220211233434473" loading="lazy"></p><p>接下来到GitHub上，打开“Account settings”–“SSH Keys”页面，然后点“Add SSH Key”，填上Title（随意写），在Key文本框里粘贴 id_rsa.pub文件里的全部内容。点“Add Key”，你就应该看到已经添加的Key，可以添加多个Key</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233345.png" alt="image-20220211233345526" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233622.png" alt="image-20220211233622008" loading="lazy"></p><p>验证是否成功，在git bash里输入下面的命令，出现你的用户名，那就成功了。</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211233819.png" alt="image-20220211233819250" loading="lazy"></p><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220211234631.png" alt="image-20220211234631497" loading="lazy"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>为了更方便的部署到 GitHub Pages，Hexo 提供了 <code>hexo-deployer-git</code> 插件。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>_config.yml</code> 中配置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 你此前新建的仓库的链接 <span class="token comment"># 比如：https://github.com/wushuai2000/wushuai2000.github.io</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main <span class="token comment"># 默认使用 main 分支</span>  <span class="token key atrule">message</span><span class="token punctuation">:</span> Update Hexo Static Content <span class="token comment"># 你可以自定义此次部署更新的说明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存，部署！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>  第一次可能需要你输入用户名与密码。<br>  密码输入的时候不会出现 ***，不要害怕，已经输入进去了。</p></blockquote><p>等待完成后，打开网址 <code>https://你的名字.github.io</code> 就能看到你的线上网站了。</p><blockquote><p>  使用 https，http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 <code>http</code> 链接为不安全。<br>  为了安全，建议开启强制 https 跳转。<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS</code>。（翻到下面）<br>  此时，http 网址会自动重定向到 https</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yun主题写作语法</title>
      <link href="/posts/a6c287ab/"/>
      <url>/posts/a6c287ab/</url>
      
        <content type="html"><![CDATA[<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 树莓派镜像烧录<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-03-05 01:31:08</span><span class="token key atrule">updated</span><span class="token punctuation">:</span> <span class="token datetime number">2020-07-14 16:31:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 西红柿<span class="token comment"># 设置作者则会显示</span><span class="token key atrule">email</span><span class="token punctuation">:</span> 2506812280@qq.com<span class="token comment"># 自动根据邮箱获取 Gravatar 头像</span><span class="token key atrule">readmore</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 将会首页卡片摘要末尾强制显示一个 阅读更多 按钮</span><span class="token key atrule">hideTime</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 强制隐藏时间显示</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 描述（只出现在预览卡片上，不出现在正文中）（默认使用 400 字重以表强调，略细于加粗字体）<span class="token comment"># 设置为 index 时，将只在首页隐藏，归档中仍然展示。（譬如放一些没有必要放在首页的笔记,并在归档中方便自己查看。）</span><span class="token comment"># 当设置为 true 时，该文章仍然会被渲染，你自己可以直接访问链接进行查看。但不会被显示在展示的文章卡片与归档中。</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派  <span class="token punctuation">-</span> 镜像烧录<span class="token key atrule">categories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="额外的头部字段"><a href="#额外的头部字段" class="headerlink" title="额外的头部字段"></a>额外的头部字段</h1><h2 id="author"><a href="#author" class="headerlink" title="author"></a>author</h2><p>设置作者则会显示</p><h2 id="email"><a href="#email" class="headerlink" title="email"></a>email</h2><p>自动根据邮箱获取 <a href="https://en.gravatar.com/site/implement/images/">Gravatar</a> 头像</p><h2 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h2><p>是否显示目录，文章 <code>post</code> 默认显示，页面 <code>post</code> 默认不显示</p><h2 id="readmore"><a href="#readmore" class="headerlink" title="readmore"></a>readmore</h2><p>将会首页卡片摘要末尾强制显示一个 <code>阅读更多</code> 按钮</p><h2 id="hideTime"><a href="#hideTime" class="headerlink" title="hideTime"></a>hideTime</h2><p>强制隐藏时间显示</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">author</span><span class="token punctuation">:</span> 云游君<span class="token key atrule">email</span><span class="token punctuation">:</span> me@yunyoujun.cn<span class="token key atrule">readmore</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hideTime</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p>描述（只出现在预览卡片上，不出现在正文中）（默认使用 <code>400</code> 字重以表强调，略细于加粗字体）</p><h2 id="excerpt"><a href="#excerpt" class="headerlink" title="excerpt"></a>excerpt</h2><p>摘要（不需要在 <code>Front-matter</code> 中设置，通过 <code>&lt;!-- more --&gt;</code> 截断实现，预览卡片与正文中均出现）</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">description</span><span class="token punctuation">:</span> xxxxxxx</span><span class="token punctuation">---</span></span>这里是摘要<span class="token comment">&lt;!-- more --></span>这里是更多内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><p>标签</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 树莓派  <span class="token punctuation">-</span> 镜像烧录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h2><p>分类，如果您尚未安装 <code>hexo-generator-category</code>，请输入 <code>npm install hexo-generator-category</code></p><p>新建 <code>categories</code> 页面，在博客根目录下输入：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2017-10-12 10:47:16</span><span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">type</span><span class="token punctuation">:</span> categories<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  TIP</p><p>  <a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE">分类和标签</a></p><p>  尽管 Hexo 支持了为一篇文章设置多个分类，但我个人更建议你一篇文章只放在一个分类下，而使用标签来为它进行多个描述。</p><p>  同时太多的分类与标签，既不方便整理，也不利于移动端的展示。</p></blockquote><h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><p>通过设置文章 Front Matter 中 <code>sticky</code> 属性以进行置顶，数值越高，优先级越高。</p><p>设置置顶后，文章卡片右上角将出现置顶图标。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">sticky</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><blockquote><p>  <a href="https://yun.yunyoujun.cn/guide/config.html#type">https://yun.yunyoujun.cn/guide/config.html#type</a></p></blockquote><p>为文章设置 <code>type</code> 属性，即可将其转为其他类型卡片，并跳转 <code>url</code> 设置的链接。</p><p>譬如：</p><pre class="line-numbers language-none"><code class="language-none">---title: xxxtype: bilibiliurl: https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av8153395&#x2F;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在文章标题前将会出现 bilibili 的图标，点击标题会跳转至对应的链接。</p><p>目前默认支持以下类型（哔哩哔哩、豆瓣、GitHub、网易云音乐、推特、微信公众号、微博、语雀、知乎、Notion、外链）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">types</span><span class="token punctuation">:</span>  <span class="token key atrule">link</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>external<span class="token punctuation">-</span>link<span class="token punctuation">-</span>line  <span class="token key atrule">bilibili</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#FF8EB3"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>bilibili<span class="token punctuation">-</span>line  <span class="token key atrule">douban</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#007722"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>douban<span class="token punctuation">-</span>line  <span class="token key atrule">github</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> black    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>github<span class="token punctuation">-</span>line  <span class="token key atrule">netease-cloud-music</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#C10D0C"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>netease<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>music<span class="token punctuation">-</span>line  <span class="token key atrule">notion</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> black    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>notion  <span class="token key atrule">twitter</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#1da1f2"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>twitter<span class="token punctuation">-</span>line  <span class="token key atrule">wechat</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#1AAD19"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>wechat<span class="token punctuation">-</span>2<span class="token punctuation">-</span>line  <span class="token key atrule">weibo</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#E6162D"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>weibo<span class="token punctuation">-</span>line  <span class="token key atrule">yuque</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#25b864"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>yuque  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"#0084FF"</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon<span class="token punctuation">-</span>zhihu<span class="token punctuation">-</span>line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以自己在 <code>_config.yun.yml</code> 设置你跳转不同链接专属的图标和颜色。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">types</span><span class="token punctuation">:</span>  <span class="token key atrule">google</span><span class="token punctuation">:</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span> xxx    <span class="token key atrule">icon</span><span class="token punctuation">:</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当你指定的 <code>type</code> 不存在于默认支持中，也没有进行自定义，将默认使用蓝色的额外链接图标。</p><p>如果你想在你的外链卡片上显示一些信息，你可以写在 <code>&lt;!-- more --&gt;</code> 前，它会被当作摘要显示。</p><p>譬如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>yun<span class="token key atrule">type</span><span class="token punctuation">:</span> github<span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/YunYouJun/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>yun<span class="token punctuation">---</span>Hexo 主题 Yun&lt;<span class="token tag">!--</span> more <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hide-隐藏文章"><a href="#hide-隐藏文章" class="headerlink" title="hide-隐藏文章"></a>hide-隐藏文章</h2><p>你可以在文章头部添加 <code>hide</code> 属性，来临时隐藏某篇文章。</p><ul><li><code>index</code>: 设置为 <code>index</code> 时，将只在首页隐藏，归档中仍然展示。（譬如放一些没有必要放在首页的笔记，并在归档中方便自己查看。）</li><li><code>true</code>: 当设置为 <code>true</code> 时，该文章仍然会被渲染，你自己可以直接访问链接进行查看。但不会被显示在展示的文章卡片与归档中。</li></ul><pre class="line-numbers language-none"><code class="language-none">---title: xxxhide: true# hide: indexsitemap: falseindexing: false---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  什么？你想完全不渲染不显示？那你为何不将其放在 <code>_drafts</code> 文件夹下，或干脆不提交这篇文章。</p></blockquote><h2 id="reward-打赏"><a href="#reward-打赏" class="headerlink" title="reward-打赏"></a>reward-打赏</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">reward</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="内容字段"><a href="#内容字段" class="headerlink" title="内容字段"></a>内容字段</h1><h2 id="图片注释"><a href="#图片注释" class="headerlink" title="图片注释"></a>图片注释</h2><p><img src="https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png" alt="Audits - Lighthouse" loading="lazy"><em>谷歌浏览器 Audits - Lighthouse 检测分数</em></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">Audits - Lighthouse</span>](<span class="token url">https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png</span>)</span><span class="token italic"><span class="token punctuation">_</span><span class="token content">谷歌浏览器 Audits - Lighthouse 检测分数</span><span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2>    <div id="aplayer-HKeYxmju" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="497572729" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;497572729&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#C20C0C&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    <div id="aplayer-worElMVs" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2008272804" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><pre class="line-numbers language-none"><code class="language-none">&#123;% meting &quot;2008272804&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><pre class="line-numbers language-none"><code class="language-none">type: albumstitle: 相册url: &#x2F;albums&#x2F;miracle.htmlabbrlink: e26d1860date: 2020-03-05 01:31:08updated: 2020-07-14 16:31:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h1><p>安装<code>npm install --save hexo-blog-encrypt</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 文章信息头</span><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hello World<span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 作为日记加密<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2016-03-30 21:12:21</span><span class="token key atrule">password</span><span class="token punctuation">:</span> mikemessi<span class="token key atrule">abstract</span><span class="token punctuation">:</span> 有东西被加密了<span class="token punctuation">,</span> 请输入密码查看.<span class="token key atrule">message</span><span class="token punctuation">:</span> 您好<span class="token punctuation">,</span> 这里需要密码.<span class="token key atrule">wrong_pass_message</span><span class="token punctuation">:</span> 抱歉<span class="token punctuation">,</span> 这个密码看着不太对<span class="token punctuation">,</span> 请再试试.<span class="token key atrule">wrong_hash_message</span><span class="token punctuation">:</span> 抱歉<span class="token punctuation">,</span> 这个文章不能被校验<span class="token punctuation">,</span> 不过您还是能看看解密后的内容.<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝牙HC-05使用介绍</title>
      <link href="/posts/596227bc/"/>
      <url>/posts/596227bc/</url>
      
        <content type="html"><![CDATA[<p>常见的蓝牙模块为：HC-05主从一体蓝牙模块、HC-06从机蓝牙模块、低功耗BLE蓝牙模块(cc2540或cc2541)。</p><h1 id="一、HC-05主从一体蓝牙模块"><a href="#一、HC-05主从一体蓝牙模块" class="headerlink" title="一、HC-05主从一体蓝牙模块"></a>一、HC-05主从一体蓝牙模块</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>HC-05 蓝牙串口通讯模块（以下简称模块）具有两种工作模式：命令响应工作模式和自动连接工作模式，在自动连接工作模式下模块又可分为主（Master）、从（Slave）和回环（Loopback）三种工作角色。</p><p>  当模块处于自动连接工作模式时，将自动根据事先设定的方式进行数据传输；当模块处于命令响应工作模式时能执行下述所有AT命令，用户可向模块发送各种AT指令，为模块设定控制参数或发布控制命令。通过控制模块外部引脚（PIO11）的输入电平，可以实现模块两种工作模式的切换。</p><p>1)、PIO8 连接LED，指示模块工作状态，模块上电后闪烁，不同的状态闪烁间隔不同。<br>2)、PIO9 连接LED，指示模块连接成功，蓝牙串口匹配连接成功后，LED 长亮。<br>3)、PIO11 模块状态切换脚，高电平–&gt;AT 命令响应工作状态，低电平或悬空–&gt;蓝牙常规工作状态。<br>4)、模块上已带有复位电路，重新上电即完成复位。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094039.png" alt="img" loading="lazy"></p><h2 id="2、常用AT指令"><a href="#2、常用AT指令" class="headerlink" title="2、常用AT指令"></a>2、常用AT指令</h2><p>（AT指令不区分大小写，均以回车、换行字符结尾：\r\n。在AT模式下，波特率固定为38400）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094125.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094151.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094148.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094220.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094214.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094217.png" alt="img" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20200103104631585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FsZXhjZWw=,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><h2 id="3、使用举例—–把HC-05设置为主机步骤："><a href="#3、使用举例—–把HC-05设置为主机步骤：" class="headerlink" title="3、使用举例—–把HC-05设置为主机步骤："></a>3、使用举例—–把HC-05设置为主机步骤：</h2><p>1)、把PIO11 置高。<br>2)、给模块上电，模块会进入AT 命令响应状态，此时状态指示灯会慢闪。<br>3)、超级终端或其他串口工具，设置波特率38400，数据位8 位，停止位1 位，无校验位，无流控制。<br>4)、串口发送字符“AT+ROLE&#x3D;1\r\n”，成功返回“OK\r\n”，其中\r\n 为回车换行。<br>5)、PIO11 置低，重新上电，模块为主模块，自动搜索从模块，建立连接。</p><h2 id="4、使用举例—–让两个蓝牙模块自动配对"><a href="#4、使用举例—–让两个蓝牙模块自动配对" class="headerlink" title="4、使用举例—–让两个蓝牙模块自动配对"></a>4、使用举例—–让两个蓝牙模块自动配对</h2><p>1)、把模块1和模块2的PIO11 置高。<br>2)、给两个模块上电，模块会进入AT 命令响应状态，此时状态指示灯会慢闪。<br>3)、超级终端或其他串口工具连接两个模块，设置波特率38400，数据位8 位，停止位1 位，无校验位，无流控制。<br>4)、给两个模块发送字符“AT+PSWD&#x3D;1234\r\n”，成功返回“OK\r\n”，其中\r\n 为回车换行。（配对密码可以随便改，但要保证两个模块的配对密码一样）</p><p>5)、给模块1发送字符“AT+ROLE&#x3D;0\r\n”，成功返回“OK\r\n”。给模块2发送字符“AT+ROLE&#x3D;1\r\n”，成功返回“OK\r\n”。（把一个模块设置为主机，另一个设置为从机）</p><p>6)、把两个模块的的名字和波特率设置好。</p><p>7)、给两个模块发送字符“AT+CMODE&#x3D;1\r\n”，成功返回“OK\r\n”。（把两个模块的地址模式设置为任意地址，这样两个模块会使用配对密码自动匹配，而不管地址）</p><p>8)、PIO11 置低，重新上电，模块2为主机，会自动搜索从机模块1，建立连接。</p><p>5、使用举例—–让两个蓝牙模块唯一配对</p><p>如果使用了指令“AT+CMODE&#x3D;1\r\n”把模块设置为任意地址配对，模块在配对后会记忆最后一次配对的地址。因此两个模块完成配对后，再给两个模块发送字符“AT+CMODE&#x3D;0\r\n”，就能把模块改为唯一地址配对。模块上电后会一直搜索保存的地址，而不会和其他地址配对。</p><h1 id="二、HC-06从机蓝牙模块"><a href="#二、HC-06从机蓝牙模块" class="headerlink" title="二、HC-06从机蓝牙模块"></a>二、HC-06从机蓝牙模块</h1><h2 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>仅能作为从机。电路如下：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094352.png" alt="img" loading="lazy"></p><h2 id="2、AT指令（指令后面无-r-n）"><a href="#2、AT指令（指令后面无-r-n）" class="headerlink" title="2、AT指令（指令后面无\r\n）"></a>2、AT指令（指令后面无\r\n）</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094424.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094435.png" alt="img" loading="lazy"></p><h1 id="三、低功耗BLE蓝牙4-0模块-cc2540或cc2541"><a href="#三、低功耗BLE蓝牙4-0模块-cc2540或cc2541" class="headerlink" title="三、低功耗BLE蓝牙4.0模块(cc2540或cc2541)"></a>三、低功耗BLE蓝牙4.0模块(cc2540或cc2541)</h1><h2 id="1、介绍-2"><a href="#1、介绍-2" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>蓝牙4.0标准包含两个蓝牙标准，准确的说，是一个双模的标准，它包含传统蓝牙部分（向下兼容2.0）和低功耗蓝牙部分（Bluetooth Low Energy），顾名思义BLE的特性就是极其省电，现在市面上绝大多数的可穿戴设备都是基于BLE的。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094503.png" alt="img" loading="lazy"></p><p>功能脚说明：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094528.png" alt="img" loading="lazy"></p><h2 id="2、常用AT指令（AT指令不区分大小写，均以回车、换行字符结尾：-r-n）"><a href="#2、常用AT指令（AT指令不区分大小写，均以回车、换行字符结尾：-r-n）" class="headerlink" title="2、常用AT指令（AT指令不区分大小写，均以回车、换行字符结尾：\r\n）"></a>2、常用AT指令（AT指令不区分大小写，均以回车、换行字符结尾：\r\n）</h2><p>和HC-06一样，在未连接状态下就是AT模式了。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094612.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094621.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094628.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094643.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094827.png" alt="img" loading="lazy"></p><h1 id="四、JDY-10-蓝牙4-0-BLE模块"><a href="#四、JDY-10-蓝牙4-0-BLE模块" class="headerlink" title="四、JDY-10 蓝牙4.0 BLE模块"></a>四、JDY-10 蓝牙4.0 BLE模块</h1><p>也是基于蓝牙4.0标准，可是尺寸比较小。功耗也比较小。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094911.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094917.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094925.png" alt="img" loading="lazy"></p><p>波特率支持1200,2400,4800,9600,14400,19200,38400,57600,115200。模块未连接时即为AT模式。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229094946.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095008.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095015.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095026.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095034.png" alt="img" loading="lazy"></p><h1 id="五、蓝牙模块LAYOUT注意事项："><a href="#五、蓝牙模块LAYOUT注意事项：" class="headerlink" title="五、蓝牙模块LAYOUT注意事项："></a>五、蓝牙模块LAYOUT注意事项：</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211229095059.png" alt="img" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 硬件基础模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝牙 </tag>
            
            <tag> HC-05 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="/posts/8d66b5f2/"/>
      <url>/posts/8d66b5f2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204710.png" alt="image-20210726204709944" loading="lazy"></p><h2 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204740.png" alt="image-20210726204740231" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204751.png" alt="image-20210726204751208" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204800.png" alt="image-20210726204800939" loading="lazy"></p><h2 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204812.png" alt="image-20210726204812066" loading="lazy"></p><h3 id="出栈顺序"><a href="#出栈顺序" class="headerlink" title="出栈顺序"></a>出栈顺序</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204902.png" alt="image-20210726204902687" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204916.png" alt="image-20210726204916821" loading="lazy"></p><h1 id="二、顺序栈"><a href="#二、顺序栈" class="headerlink" title="二、顺序栈"></a>二、顺序栈</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726204937.png" alt="image-20210726204937548" loading="lazy"></p><h2 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205014.png" alt="image-20210726205014664" loading="lazy"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205041.png" alt="image-20210726205041303" loading="lazy"></p><h3 id="进栈操作"><a href="#进栈操作" class="headerlink" title="进栈操作"></a>进栈操作</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205118.png" alt="image-20210726205118594" loading="lazy"></p><h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810010246.jpg" alt="image-20200624152110685" loading="lazy"></p><h3 id="读取栈顶元素"><a href="#读取栈顶元素" class="headerlink" title="读取栈顶元素"></a>读取栈顶元素</h3><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810010251.jpg" alt="image-20200624152208184" loading="lazy"></p><h2 id="另一种基本操作的实现方式"><a href="#另一种基本操作的实现方式" class="headerlink" title="另一种基本操作的实现方式"></a>另一种基本操作的实现方式</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205210.png" alt="image-20210726205210505" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205256.png" alt="image-20210726205256057" loading="lazy"></p><h2 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205358.png" alt="image-20210726205357959" loading="lazy"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205435.png" alt="image-20210726205435561" loading="lazy"></p><h1 id="三、链栈"><a href="#三、链栈" class="headerlink" title="三、链栈"></a>三、链栈</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205457.png" alt="image-20210726205457511" loading="lazy"></p><h2 id="复习单链表"><a href="#复习单链表" class="headerlink" title="复习单链表"></a>复习单链表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205518.png" alt="image-20210726205518576" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810010340.jpg" alt="image-20200624153252888" loading="lazy"></p><h2 id="链栈的定义"><a href="#链栈的定义" class="headerlink" title="链栈的定义"></a>链栈的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205556.png" alt="image-20210726205556417" loading="lazy"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205606.png" alt="image-20210726205606460" loading="lazy"></p><h1 id="四、队列"><a href="#四、队列" class="headerlink" title="四、队列"></a>四、队列</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205643.png" alt="image-20210726205643080" loading="lazy"></p><h2 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205656.png" alt="image-20210726205656372" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205707.png" alt="image-20210726205707313" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205716.png" alt="image-20210726205716597" loading="lazy"></p><h2 id="队列的基本操作"><a href="#队列的基本操作" class="headerlink" title="队列的基本操作"></a>队列的基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205730.png" alt="image-20210726205730255" loading="lazy"></p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205740.png" alt="image-20210726205740361" loading="lazy"></p><h1 id="五、顺序队列"><a href="#五、顺序队列" class="headerlink" title="五、顺序队列"></a>五、顺序队列</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205800.png" alt="image-20210726205800388" loading="lazy"></p><h2 id="顺序队列的定义"><a href="#顺序队列的定义" class="headerlink" title="顺序队列的定义"></a>顺序队列的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205828.png" alt="image-20210726205828662" loading="lazy"></p><h3 id="顺序队列的初始化"><a href="#顺序队列的初始化" class="headerlink" title="顺序队列的初始化"></a>顺序队列的初始化</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726205936.png" alt="image-20210726205936490" loading="lazy"></p><h3 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210000.png" alt="image-20210726210000265" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210010.png" alt="image-20210726210010587" loading="lazy"></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210035.png" alt="image-20210726210034990" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210047.png" alt="image-20210726210046933" loading="lazy"></p><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210126.png" alt="image-20210726210126251" loading="lazy"></p><h3 id="判空-x2F-判满"><a href="#判空-x2F-判满" class="headerlink" title="判空&#x2F;判满"></a>判空&#x2F;判满</h3><p>方案一：牺牲一个存储空间</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210151.png" alt="image-20210726210151059" loading="lazy"></p><p>方案二：利用size变量记录队列长度</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210211.png" alt="image-20210726210211159" loading="lazy"></p><p>方案三：利用tag记录最后一次操作</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210223.png" alt="image-20210726210223004" loading="lazy"></p><h2 id="其它实现方式"><a href="#其它实现方式" class="headerlink" title="其它实现方式"></a>其它实现方式</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210307.png" alt="image-20210726210307014" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210328.png" alt="image-20210726210328765" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210353.png" alt="image-20210726210353025" loading="lazy"></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210420.png" alt="image-20210726210420928" loading="lazy"></p><h1 id="六、链队列"><a href="#六、链队列" class="headerlink" title="六、链队列"></a>六、链队列</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210449.png" alt="image-20210726210449654" loading="lazy"></p><h2 id="链队列的定义"><a href="#链队列的定义" class="headerlink" title="链队列的定义"></a>链队列的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210500.png" alt="image-20210726210500752" loading="lazy"></p><h2 id="链队列的基本操作"><a href="#链队列的基本操作" class="headerlink" title="链队列的基本操作"></a>链队列的基本操作</h2><h3 id="链队列的初始化"><a href="#链队列的初始化" class="headerlink" title="链队列的初始化"></a>链队列的初始化</h3><p>带头结点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210631.png" alt="image-20210726210631445" loading="lazy"></p><p>不带头结点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210647.png" alt="image-20210726210647339" loading="lazy"></p><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><p>带头节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210701.png" alt="image-20210726210701573" loading="lazy"></p><p>不带头节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210711.png" alt="image-20210726210711098" loading="lazy"></p><h3 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h3><p>带有头节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210725.png" alt="image-20210726210725504" loading="lazy"></p><p>不带头节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210736.png" alt="image-20210726210736800" loading="lazy"></p><h3 id="判满"><a href="#判满" class="headerlink" title="判满"></a>判满</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210758.png" alt="image-20210726210758825" loading="lazy"></p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210828.png" alt="image-20210726210828317" loading="lazy"></p><h1 id="七、双端队列"><a href="#七、双端队列" class="headerlink" title="七、双端队列"></a>七、双端队列</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210852.png" alt="image-20210726210852720" loading="lazy"></p><h2 id="双端队列的定义"><a href="#双端队列的定义" class="headerlink" title="双端队列的定义"></a>双端队列的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726210904.png" alt="image-20210726210903964" loading="lazy"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><h3 id="对于栈的输出序列的合法性"><a href="#对于栈的输出序列的合法性" class="headerlink" title="对于栈的输出序列的合法性"></a>对于栈的输出序列的合法性</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211212.png" alt="image-20210726211211957" loading="lazy"></p><p>绿色为合法，红色为非法</p><h3 id="对于输入受限的双端队列的输出序列的合法性"><a href="#对于输入受限的双端队列的输出序列的合法性" class="headerlink" title="对于输入受限的双端队列的输出序列的合法性"></a>对于输入受限的双端队列的输出序列的合法性</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211248.png" alt="image-20210726211247998" loading="lazy"></p><p>绿色为合法，红色为非法，带下划线是在栈中不合法，但在输入受限的双端队列中合法的。</p><h3 id="对于输出受限的双端队列"><a href="#对于输出受限的双端队列" class="headerlink" title="对于输出受限的双端队列"></a>对于输出受限的双端队列</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211310.png" alt="image-20210726211310281" loading="lazy"></p><p>绿色为合法，红色为非法，带下划线是在栈中不合法，但在输出受限的双端队列中合法</p><p>这种输出受限的双端队列，看序号较大的元素输出的位置，这意味着，在它输出之前，比它小的元素的相对位置是确定的，接下来就是考虑有什么插入的方法能实现这种相对位置关系！</p><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211326.png" alt="image-20210726211326371" loading="lazy"></p><h1 id="八、栈的应用"><a href="#八、栈的应用" class="headerlink" title="八、栈的应用"></a>八、栈的应用</h1><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211346.png" alt="image-20210726211346767" loading="lazy"></p><h3 id="实际过程"><a href="#实际过程" class="headerlink" title="实际过程"></a>实际过程</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211355.png" alt="image-20210726211355389" loading="lazy"></p><h4 id="正好匹配"><a href="#正好匹配" class="headerlink" title="正好匹配"></a>正好匹配</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211417.png" alt="image-20210726211417509" loading="lazy"></p><h4 id="左右不匹配"><a href="#左右不匹配" class="headerlink" title="左右不匹配"></a>左右不匹配</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211427.png" alt="image-20210726211427595" loading="lazy"></p><h4 id="右括号单身"><a href="#右括号单身" class="headerlink" title="右括号单身"></a>右括号单身</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211437.png" alt="image-20210726211437034" loading="lazy"></p><h4 id="左括号单身"><a href="#左括号单身" class="headerlink" title="左括号单身"></a>左括号单身</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211447.png" alt="image-20210726211447361" loading="lazy"></p><h4 id="整个流程"><a href="#整个流程" class="headerlink" title="整个流程"></a>整个流程</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211516.png" alt="image-20210726211516771" loading="lazy"></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211553.png" alt="image-20210726211553287" loading="lazy"></p><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211604.png" alt="image-20210726211604921" loading="lazy"></p><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211622.png" alt="image-20210726211622556" loading="lazy"></p><h3 id="算数表达式是什么？"><a href="#算数表达式是什么？" class="headerlink" title="算数表达式是什么？"></a>算数表达式是什么？</h3><p>由三个部分组成（操作数，运算符，界限符）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211634.png" alt="image-20210726211634409" loading="lazy"></p><h3 id="前-x2F-后缀表达式的诞生"><a href="#前-x2F-后缀表达式的诞生" class="headerlink" title="前&#x2F;后缀表达式的诞生"></a>前&#x2F;后缀表达式的诞生</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211644.png" alt="image-20210726211644195" loading="lazy"></p><h3 id="中-x2F-后-x2F-前缀表达式的区别"><a href="#中-x2F-后-x2F-前缀表达式的区别" class="headerlink" title="中&#x2F;后&#x2F;前缀表达式的区别"></a>中&#x2F;后&#x2F;前缀表达式的区别</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211654.png" alt="image-20210726211654826" loading="lazy"></p><h4 id="中转后的过程："><a href="#中转后的过程：" class="headerlink" title="中转后的过程："></a>中转后的过程：</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211703.png" alt="image-20210726211703851" loading="lazy"></p><p><strong>上图中，后缀表达式的算术符的先后次序对应中缀表达式的生效的先后次序</strong>，但是这是一定的吗？</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211716.png" alt="image-20210726211716650" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211814.png" alt="image-20210726211814054" loading="lazy"></p><p>左优先原则，可保证运算顺序唯一性，以确定机算算法输出结果的唯一性！!</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211824.png" alt="image-20210726211824944" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211929.png" alt="image-20210726211929334" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211942.png" alt="image-20210726211942205" loading="lazy"></p><h4 id="机算算法实现"><a href="#机算算法实现" class="headerlink" title="机算算法实现"></a>机算算法实现</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726211958.png" alt="image-20210726211958326" loading="lazy"> </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212059.png" alt="image-20210726212059658" loading="lazy"></p><h3 id="中转前的过程"><a href="#中转前的过程" class="headerlink" title="中转前的过程"></a>中转前的过程</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212125.png" alt="image-20210726212125015" loading="lazy"></p><p>中转后和中转前的区别：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212140.png" alt="image-20210726212140264" loading="lazy"></p><h4 id="中转前的机算过程："><a href="#中转前的机算过程：" class="headerlink" title="中转前的机算过程："></a>中转前的机算过程：</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212202.png" alt="image-20210726212202368" loading="lazy"></p><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212315.png" alt="image-20210726212314936" loading="lazy"></p><p>“左优先”&#x2F;“右优先”原则和左&#x2F;右操作数不是专业说法，仅供理解！</p><h2 id="表达式求值——具体代码实现"><a href="#表达式求值——具体代码实现" class="headerlink" title="表达式求值——具体代码实现"></a>表达式求值——具体代码实现</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212335.png" alt="image-20210726212335434" loading="lazy"></p><h3 id="中转后机算"><a href="#中转后机算" class="headerlink" title="中转后机算"></a>中转后机算</h3><p>手算过程：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212356.png" alt="image-20210726212356303" loading="lazy"></p><p>机算过程：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212423.png" alt="image-20210726212423771" loading="lazy"></p><h3 id="中缀表达式的计算"><a href="#中缀表达式的计算" class="headerlink" title="中缀表达式的计算"></a>中缀表达式的计算</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212506.png" alt="image-20210726212506614" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212608.png" alt="image-20210726212608258" loading="lazy"></p><p>CPU只能执行单个的加减乘除运算，上边这么搞的意义就是为了将高级程序语言编译成简单的机器码，让CPU去执行！</p><h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212630.png" alt="image-20210726212630916" loading="lazy"></p><h2 id="栈在递归中的应用"><a href="#栈在递归中的应用" class="headerlink" title="栈在递归中的应用"></a>栈在递归中的应用</h2><p>递归的过程就是函数调用的过程</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212828.png" alt="image-20210726212828055" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212846.png" alt="image-20210726212846550" loading="lazy"></p><h3 id="适合用“递归”算法解决的问题"><a href="#适合用“递归”算法解决的问题" class="headerlink" title="适合用“递归”算法解决的问题"></a>适合用“递归”算法解决的问题</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212856.png" alt="image-20210726212856325" loading="lazy"></p><p>求阶乘：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212926.png" alt="image-20210726212926663" loading="lazy"></p><p><strong>使用递归时，需要注意调用栈溢出！</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212940.png" alt="image-20210726212940735" loading="lazy"></p><p><strong>可以自定义栈将递归算法改造成非递归算法！</strong></p><p>求斐波那契数列</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726212954.png" alt="image-20210726212954526" loading="lazy"></p><h3 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213001.png" alt="image-20210726213001818" loading="lazy"></p><h1 id="九、队列的应用"><a href="#九、队列的应用" class="headerlink" title="九、队列的应用"></a>九、队列的应用</h1><h2 id="树的层次遍历"><a href="#树的层次遍历" class="headerlink" title="树的层次遍历"></a>树的层次遍历</h2><p>提示：不知道树这种数据结构的同学，可以考虑先跳过本文内容，等了解树之后，再来康康～</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213113.png" alt="image-20210726213113786" loading="lazy"></p><p>详细实现内容在树的章节实现！</p><h2 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h2><p>遍历是指找出所有元素节点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213124.png" alt="image-20210726213124384" loading="lazy"></p><h2 id="队列在操作系统中的应用"><a href="#队列在操作系统中的应用" class="headerlink" title="队列在操作系统中的应用"></a>队列在操作系统中的应用</h2><p><strong>CPU资源分配问题</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213132.png" alt="image-20210726213132774" loading="lazy"></p><p><strong>打印数据缓冲区</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726213144.png" alt="image-20210726213144535" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/posts/c56898db/"/>
      <url>/posts/c56898db/</url>
      
        <content type="html"><![CDATA[<h1 id="一、排序的基本概念"><a href="#一、排序的基本概念" class="headerlink" title="一、排序的基本概念"></a>一、排序的基本概念</h1><h2 id="1-排序算法的评价指标"><a href="#1-排序算法的评价指标" class="headerlink" title="1.排序算法的评价指标"></a>1.排序算法的评价指标</h2><ul><li>时间复杂度</li><li>空间复杂度</li><li>稳定性</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710105753.png" alt="image-20210626135434482" loading="lazy"></p><h2 id="2-排序算法的分类"><a href="#2-排序算法的分类" class="headerlink" title="2.排序算法的分类"></a>2.排序算法的分类</h2><ul><li>内部排序</li><li>外部排序</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710131801.png" alt="image-20210710131801614" loading="lazy"></p><h2 id="3-知识回顾与重要考点"><a href="#3-知识回顾与重要考点" class="headerlink" title="3.知识回顾与重要考点"></a>3.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710131822.png" alt="image-20210710131822797" loading="lazy"></p><h1 id="二、插入排序"><a href="#二、插入排序" class="headerlink" title="二、插入排序"></a>二、插入排序</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710143708.gif" alt="img" loading="lazy"></p><h2 id="1-直接插入排序"><a href="#1-直接插入排序" class="headerlink" title="1.直接插入排序"></a>1.直接插入排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//直接插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">//将各元素插入已排好序的序列中</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">//若A[i]关键字小于前驱</span>        <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//用temp暂存A[i]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">//检查所有前面已排好序的元素</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//所有大于temp的元素都向后挪位 </span>            <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>         <span class="token comment">//复制到插入位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-直接插入排序（带哨兵）"><a href="#2-直接插入排序（带哨兵）" class="headerlink" title="2.直接插入排序（带哨兵）"></a>2.直接插入排序（带哨兵）</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//直接插入排序（带哨兵）</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                       <span class="token comment">//依次将A[2]~A[n]插入到前面已排序序列</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                   <span class="token comment">//若A[1]关键码小于其前驱，将A[i]插入有序表</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//复制为哨兵，A[0]不存放元素</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token comment">//从后往前查找待插入位置</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">//向后挪位</span>            <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//复制到插入位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-折半插入排序"><a href="#3-折半插入排序" class="headerlink" title="3.折半插入排序"></a>3.折半插入排序</h2><blockquote><ul><li>当 low &gt; high 时折半查找停止，应将 [low, i - 1] 内的元素全部右移，并将 A[0] 复制到 low 所指位置</li><li>当 A[mid] &#x3D; A[0] 时，为了保证算法的“稳定性”，应继续在 mid 所指位置右边寻找插入位置</li></ul></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//折半插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token punctuation">,</span>low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>               <span class="token comment">//依次将a[2]~a[n]插入到前面的已排序序列</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//将a[i]暂存到a[0]</span>        low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>high<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment">//设置折半查找范围</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>            <span class="token comment">//折半查找（默认递增有序）</span>        <span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//取中间点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">//查找左半子表</span>            <span class="token punctuation">&#123;</span>                high <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                    <span class="token comment">//查找有半子表</span>            <span class="token punctuation">&#123;</span>                low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//找到位置后再移动</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//统一后移元素，空出插入位置</span>        <span class="token punctuation">&#125;</span>           a<span class="token punctuation">[</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//插入操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-知识回顾与重要考点"><a href="#4-知识回顾与重要考点" class="headerlink" title="4.知识回顾与重要考点"></a>4.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626135434.png" alt="image-20210626135434482" loading="lazy"></p><h2 id="5-测试代码"><a href="#5-测试代码" class="headerlink" title="5.测试代码"></a>5.测试代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接插入排序（带哨兵）</span><span class="token keyword">void</span> <span class="token function">InsertSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//折半插入排序</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">InsertSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InsertSort2</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstring</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstring</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//直接插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">//将各元素插入已排好序的序列中</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">//若A[i]关键字小于前驱</span>        <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//用temp暂存A[i]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment">//检查所有前面已排好序的元素</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//所有大于temp的元素都向后挪位 </span>            <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>         <span class="token comment">//复制到插入位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//直接插入排序（带哨兵）</span><span class="token keyword">void</span> <span class="token function">InsertSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                       <span class="token comment">//依次将A[2]~A[n]插入到前面已排序序列</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                   <span class="token comment">//若A[1]关键码小于其前驱，将A[i]插入有序表</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//复制为哨兵，A[0]不存放元素</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token comment">//从后往前查找待插入位置</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">//向后挪位</span>            <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//复制到插入位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//折半插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token punctuation">,</span>low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>               <span class="token comment">//依次将a[2]~a[n]插入到前面的已排序序列</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//将a[i]暂存到a[0]</span>        low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>high<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment">//设置折半查找范围</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>            <span class="token comment">//折半查找（默认递增有序）</span>        <span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//取中间点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">//查找左半子表</span>            <span class="token punctuation">&#123;</span>                high <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                    <span class="token comment">//查找有半子表</span>            <span class="token punctuation">&#123;</span>                low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//统一后移元素，空出插入位置</span>            <span class="token punctuation">&#125;</span>               a<span class="token punctuation">[</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//插入操作</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、希尔排序"><a href="#三、希尔排序" class="headerlink" title="三、希尔排序"></a>三、希尔排序</h1><blockquote><ul><li>希尔排序：先追求表中元素部分有序，再逐渐逼近全局有序</li><li>时间复杂度：和增量序列d,d2,d3…的选择有关，目前无法用数学手段证明确切的时间复杂度最坏时间复杂度为O（n^2），当n在某个范围内时，可达O（n^13）</li><li>适用性：仅适用于顺序表，不适用于链表</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710144127.gif" alt="img" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">Shellsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//希尔排序</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">Shellsort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstring</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//希尔排序</span><span class="token keyword">void</span> <span class="token function">Shellsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token comment">//a[0]只是暂存单元，不是哨兵，当j&lt;=0时，插入位置已到</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>d<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>d<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">=</span>d<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">//步长变化</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//需将a[i]插入有序增量子表</span>            <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//暂存在a[0]中</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span>d<span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">-=</span>d<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//记录后移，查找插入的位置</span>                <span class="token punctuation">&#125;</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//插入</span>            <span class="token punctuation">&#125;</span><span class="token comment">//if</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识回顾与重要考点</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626200257.png" alt="image-20210626200257887" loading="lazy"></p><h1 id="四、冒泡排序"><a href="#四、冒泡排序" class="headerlink" title="四、冒泡排序"></a>四、冒泡排序</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710144148.gif" alt="img" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//交换两个元素的值</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">//表示本趟冒泡是否发生交换的标志</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token comment">//一趟冒泡过程</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//若为逆序</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//交换</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment">//本趟遍历没有发生交换，说明表已经有序</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">BubbleSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识回顾与重要考点</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626204924.png" alt="image-20210626204924487" loading="lazy"></p><h1 id="五、快速排序"><a href="#五、快速排序" class="headerlink" title="五、快速排序"></a>五、快速排序</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710144206.gif" alt="img" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//用第一个元素将待排序序列划分成左右两个部分</span><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pivot<span class="token operator">=</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//第一个元素作为枢轴</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>           <span class="token comment">//用low、high搜索枢轴的最终位置</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> high<span class="token operator">--</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//比枢轴小的元素移到到左端</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> low<span class="token operator">++</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//比枢轴大的元素移到到右端</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>              <span class="token comment">//枢轴元素存放到最终位置</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span>                  <span class="token comment">//返回存放枢轴的最终位置</span><span class="token punctuation">&#125;</span><span class="token comment">//快速排序</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>          <span class="token comment">//递归跳出的条件</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivotpos <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//划分</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotpos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//划分左子表</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> pivotpos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//划分右子表</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-时间复杂度分析"><a href="#1-时间复杂度分析" class="headerlink" title="1.时间复杂度分析"></a>1.时间复杂度分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213801.png" alt="image-20210626213801297" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213618.png" alt="image-20210626213618878" loading="lazy"></p><h3 id="a-比较好的情况"><a href="#a-比较好的情况" class="headerlink" title="a.比较好的情况"></a>a.比较好的情况</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213630.png" alt="image-20210626213630164" loading="lazy"></p><h3 id="b-最坏的情况"><a href="#b-最坏的情况" class="headerlink" title="b.最坏的情况"></a>b.最坏的情况</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213722.png" alt="image-20210626213722500" loading="lazy"></p><h2 id="2-知识回顾与重要考点"><a href="#2-知识回顾与重要考点" class="headerlink" title="2.知识回顾与重要考点"></a>2.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210626213400.png" alt="image-20210626213400604" loading="lazy"></p><h1 id="六、简单选择排序"><a href="#六、简单选择排序" class="headerlink" title="六、简单选择排序"></a>六、简单选择排序</h1><blockquote><p>  选择排序：每一趟在待排序元素中选取关键字最小（或最大）的元素加入有序子序列</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710085021.gif" alt="img" loading="lazy"></p><h2 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//简单选择排序</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">SelectSort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstring</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印数组</span><span class="token keyword">void</span> <span class="token function">printstring</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//简单选择排序</span><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token comment">//一共进行n-1趟</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">//记录最小元素的位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">//在a[i...n-1]中选择最小的元素</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//更新最小元素的位置</span>            <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span>        <span class="token comment">//交换元素位置，共移动元素3次</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-算法性能分析"><a href="#2-算法性能分析" class="headerlink" title="2.算法性能分析"></a>2.算法性能分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210627202749.png" alt="image-20210627202749017" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210627202804.png" alt="image-20210627202804392" loading="lazy"></p><h2 id="3-知识回顾与重要考点-1"><a href="#3-知识回顾与重要考点-1" class="headerlink" title="3.知识回顾与重要考点"></a>3.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210627202827.png" alt="image-20210627202827888" loading="lazy"></p><h1 id="七、堆排序"><a href="#七、堆排序" class="headerlink" title="七、堆排序"></a>七、堆排序</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144534.png" alt="image-20210701144534674" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710144242.gif" alt="img" loading="lazy"></p><h2 id="1-什么是堆（Heap）"><a href="#1-什么是堆（Heap）" class="headerlink" title="1.什么是堆（Heap）"></a>1.什么是堆（Heap）</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144654.png" alt="image-20210701144654349" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144612.png" alt="image-20210701144612838" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144710.png" alt="image-20210701144710878" loading="lazy"></p><h2 id="2-建立大根堆"><a href="#2-建立大根堆" class="headerlink" title="2.建立大根堆"></a>2.建立大根堆</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701144859.png" alt="image-20210701144859918" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145012.png" alt="image-20210701145012182" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145040.png" alt="image-20210701145040913" loading="lazy"></p><h2 id="3-算法效率分析"><a href="#3-算法效率分析" class="headerlink" title="3.算法效率分析"></a>3.算法效率分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145147.png" alt="image-20210701145147467" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145203.png" alt="image-20210701145203061" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145213.png" alt="image-20210701145213798" loading="lazy"></p><blockquote><p>  稳定性：不稳定</p></blockquote><h2 id="4-代码测试"><a href="#4-代码测试" class="headerlink" title="4.代码测试"></a>4.代码测试</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//将以k为根的子树调整为大根堆</span><span class="token keyword">void</span> <span class="token function">HeadAdjust</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//a[0]暂存子树的根结点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">//沿着key较大的子结点向下筛选</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//取得key较大的子结点的下标</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">//筛选结果</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//将a[i]调整到双亲结点上</span>            k <span class="token operator">=</span> i<span class="token punctuation">;</span>              <span class="token comment">//修改k值，以便继续向下筛选</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//被筛选结点的值放入最终位置</span><span class="token punctuation">&#125;</span><span class="token comment">//建立大根堆</span><span class="token keyword">void</span> <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token comment">//从后往前调整所有非终端结点</span>    <span class="token punctuation">&#123;</span>        <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//堆排序的完整逻辑</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//建立初始的堆</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token comment">//n-1趟的交换和建堆过程</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//堆顶元素和堆底元素交换</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把剩余的待排序元素整理成堆</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">HeapSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-堆的插入"><a href="#5-堆的插入" class="headerlink" title="5.堆的插入"></a>5.堆的插入</h2><p>以小根堆为例：</p><p>对于小根堆，新元素放到表尾，与父节点对比，若新元素比父节点更小，则将二者互换。新元素就这样一路“上升”，直到无法继续上升为止</p><h2 id="6-堆的删除"><a href="#6-堆的删除" class="headerlink" title="6.堆的删除"></a>6.堆的删除</h2><p>以小根堆为例：</p><p>被删除的元素用堆底元素替代，然后让该元素不断“下坠”，直到无法下坠为止</p><h2 id="7-知识回顾与重要考点"><a href="#7-知识回顾与重要考点" class="headerlink" title="7.知识回顾与重要考点"></a>7.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701145313.png" alt="image-20210701145313000" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701151154.png" alt="image-20210701151154798" loading="lazy"></p><h1 id="八、归并排序"><a href="#八、归并排序" class="headerlink" title="八、归并排序"></a>八、归并排序</h1><h2 id="1-什么是归并排序"><a href="#1-什么是归并排序" class="headerlink" title="1.什么是归并排序"></a>1.什么是归并排序</h2><blockquote><p>  归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p><ul><li>把长度为n的输入序列分成两个长度为n&#x2F;2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710091212.gif" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701165158.png" alt="image-20210701165158900" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701165214.png" alt="image-20210701165214015" loading="lazy"></p><h2 id="2-算法效率分析"><a href="#2-算法效率分析" class="headerlink" title="2.算法效率分析"></a>2.算法效率分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701165325.png" alt="image-20210701165325656" loading="lazy"></p><h2 id="3-代码测试"><a href="#3-代码测试" class="headerlink" title="3.代码测试"></a>3.代码测试</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710092209.png" alt="image-20210710092209148" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a[low...mid]和a[mid+1...high]各自有序，将两个部分归并</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>low<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//将a中所有元素复制到b中</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//将最小值复制到a中</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>   a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>  a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment">//从中间划分</span>        <span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//对左半部分归并排序</span>        <span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对右半部分归并排序</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//归并</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-知识回顾与重要考点-1"><a href="#4-知识回顾与重要考点-1" class="headerlink" title="4.知识回顾与重要考点"></a>4.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210701165442.png" alt="image-20210701165442057" loading="lazy"></p><h1 id="九、基数排序"><a href="#九、基数排序" class="headerlink" title="九、基数排序"></a>九、基数排序</h1><h2 id="1-什么是基数排序"><a href="#1-什么是基数排序" class="headerlink" title="1.什么是基数排序"></a>1.什么是基数排序</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101349.gif" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101615.png" alt="image-20210710101615386" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101734.png" alt="image-20210710101734260" loading="lazy"></p><h2 id="2-算法效率分析-1"><a href="#2-算法效率分析-1" class="headerlink" title="2.算法效率分析"></a>2.算法效率分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101938.png" alt="image-20210710101938112" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710101944.png" alt="image-20210710101944832" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102011.png" alt="image-20210710102011950" loading="lazy"></p><h2 id="3-基数排序的应用"><a href="#3-基数排序的应用" class="headerlink" title="3.基数排序的应用"></a>3.基数排序的应用</h2><blockquote><p>  基数排序擅长解决的问题<br>  ①数据元素的关键字可以方便地拆分为d组，且d较小<br>  ②每组关键字的取值范围不大，即r较小<br>  ③数据元素个数n较大</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102041.png" alt="image-20210710102041125" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102128.png" alt="image-20210710102128216" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102149.png" alt="image-20210710102149345" loading="lazy"></p><h2 id="4-知识回顾与重要考点-2"><a href="#4-知识回顾与重要考点-2" class="headerlink" title="4.知识回顾与重要考点"></a>4.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710102215.png" alt="image-20210710102215220" loading="lazy"></p><h1 id="十、外部排序"><a href="#十、外部排序" class="headerlink" title="十、外部排序"></a>十、外部排序</h1><blockquote><p>  当所要排序的的数据量太多或者文件太大，无法直接在内存里排序，而需要依赖外部设备时，就会使用到外部排序。</p></blockquote><h2 id="1-外存与内存之间的数据交换"><a href="#1-外存与内存之间的数据交换" class="headerlink" title="1.外存与内存之间的数据交换"></a>1.外存与内存之间的数据交换</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132055.png" alt="image-20210710132055359" loading="lazy"></p><h2 id="2、算法描述"><a href="#2、算法描述" class="headerlink" title="2、算法描述"></a>2、算法描述</h2><p>  假设文件需要分成k块读入，需要从小到大进行排序。</p><ol><li>依次读入每个文件块，在内存中对当前文件块进行排序（应用恰当的内排序算法），此时，每块文件相当于一个由小到大排列的有序队列；</li><li>在内存中建立一个最小堆，读入每块文件的队列头；</li><li>弹出堆顶元素，如果元素来自第i块，则从第i块文件中补充一个元素到最小值堆。弹出的元素暂存至临时数组；</li><li>当临时数组存满时，将数组写至磁盘，并清空数组内容；</li><li>重复过程3、4，直至所有文件块读取完毕。</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132532.jpeg" alt="这里写图片描述" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132608.jpeg" alt="这里写图片描述" loading="lazy"></p><h2 id="3-影响外部排序效率的因素"><a href="#3-影响外部排序效率的因素" class="headerlink" title="3.影响外部排序效率的因素"></a>3.影响外部排序效率的因素</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132653.png" alt="image-20210710132653144" loading="lazy"></p><h2 id="4-优化思路"><a href="#4-优化思路" class="headerlink" title="4.优化思路"></a>4.优化思路</h2><h3 id="1-多路归并"><a href="#1-多路归并" class="headerlink" title="1.多路归并"></a>1.多路归并</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132838.png" alt="image-20210710132838415" loading="lazy"></p><h3 id="2-减少初始归并段数量"><a href="#2-减少初始归并段数量" class="headerlink" title="2.减少初始归并段数量"></a>2.减少初始归并段数量</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132938.png" alt="image-20210710132938509" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710132949.png" alt="image-20210710132949735" loading="lazy"></p><h2 id="5-知识回顾与重要考点"><a href="#5-知识回顾与重要考点" class="headerlink" title="5.知识回顾与重要考点"></a>5.知识回顾与重要考点</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710133141.png" alt="image-20210710133141478" loading="lazy"></p><h2 id="6-败者树优化多路平衡归并"><a href="#6-败者树优化多路平衡归并" class="headerlink" title="6.败者树优化多路平衡归并"></a>6.败者树优化多路平衡归并</h2><h3 id="1-多路平衡归并带来的问题"><a href="#1-多路平衡归并带来的问题" class="headerlink" title="1.多路平衡归并带来的问题"></a>1.多路平衡归并带来的问题</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710133857.png" alt="image-20210710133857696" loading="lazy"></p><h3 id="2-败者树的构建"><a href="#2-败者树的构建" class="headerlink" title="2.败者树的构建"></a>2.败者树的构建</h3><p>败者树——可视为一棵完全二叉树（多了一个头头）。k个叶结点分别是当前参加比较的元素，非叶子结点用来记忆左右子树中的“失败者”，而让胜者往上继续进行比较，一直到根结点。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710134049.png" alt="image-20210710134049287" loading="lazy"></p><h3 id="3-败者树的使用"><a href="#3-败者树的使用" class="headerlink" title="3.败者树的使用"></a>3.败者树的使用</h3><p>基于已经构建好的败者树，选出新的胜者只需进行3场比赛</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710135449.png" alt="image-20210710135448955" loading="lazy"></p><h3 id="4-败者树在多路平衡归并中的应用"><a href="#4-败者树在多路平衡归并中的应用" class="headerlink" title="4.败者树在多路平衡归并中的应用"></a>4.败者树在多路平衡归并中的应用</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710135622.png" alt="image-20210710135622129" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710135956.png" alt="image-20210710135956927" loading="lazy"></p><h3 id="5-败者树的实现思路"><a href="#5-败者树的实现思路" class="headerlink" title="5.败者树的实现思路"></a>5.败者树的实现思路</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140044.png" alt="image-20210710140044837" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140057.png" alt="image-20210710140057547" loading="lazy"></p><h3 id="6-知识回顾与重要考点"><a href="#6-知识回顾与重要考点" class="headerlink" title="6.知识回顾与重要考点"></a>6.知识回顾与重要考点</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140142.png" alt="image-20210710140142140" loading="lazy"></p><h2 id="7-置换选择排序"><a href="#7-置换选择排序" class="headerlink" title="7.置换选择排序"></a>7.置换选择排序</h2><h3 id="1-土办法构造初始归并段"><a href="#1-土办法构造初始归并段" class="headerlink" title="1.土办法构造初始归并段"></a>1.土办法构造初始归并段</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140511.png" alt="image-20210710140511296" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140530.png" alt="image-20210710140529938" loading="lazy"></p><h3 id="2-置换-选择排序"><a href="#2-置换-选择排序" class="headerlink" title="2.置换-选择排序"></a>2.置换-选择排序</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140614.png" alt="image-20210710140614559" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140643.png" alt="image-20210710140643706" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140657.png" alt="image-20210710140657231" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140805.png" alt="image-20210710140805214" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710140836.png" alt="image-20210710140836055" loading="lazy"></p><h3 id="3-知识回顾与重要考点-2"><a href="#3-知识回顾与重要考点-2" class="headerlink" title="3.知识回顾与重要考点"></a>3.知识回顾与重要考点</h3><p>设初始待排文件为FI，初始归并段输出文件为FO，内存工作区为WA,FO和WA的初始状态为空，WA可容纳ν个记录。置换-选择算法的步骤如下<br>1）从H输入w个记录到工作区WA<br>2）从WA中选出其中关键字取最小值的记录，记为 MINIMAX记录。<br>3）将 MINIMAX记录输出到FO中去。<br>4）若H不空，则从H输入下一个记录到WA中。<br>5）从WA中所有关键字比MINIMAX记录的关键字大的记录中选出最小关键字记录，作为新的MINIMAX记录。<br>6）重复3）<del>5），直至在WA中选不出新的 MINIMAX记录为止，由此得到一个初始归并段，输出一个归并段的结束标志到FO中去。<br>7）重复2）</del>6），直至WA为空。由此得到全部初始归并段。</p><h2 id="8-最佳归并树"><a href="#8-最佳归并树" class="headerlink" title="8.最佳归并树"></a>8.最佳归并树</h2><h3 id="1-归并树的神秘性质"><a href="#1-归并树的神秘性质" class="headerlink" title="1.归并树的神秘性质"></a>1.归并树的神秘性质</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141511.png" alt="image-20210710141511836" loading="lazy"></p><h3 id="2-构造2路归并的最佳归并树"><a href="#2-构造2路归并的最佳归并树" class="headerlink" title="2.构造2路归并的最佳归并树"></a>2.构造2路归并的最佳归并树</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141550.png" alt="image-20210710141550078" loading="lazy"></p><h3 id="3-多路归并"><a href="#3-多路归并" class="headerlink" title="3.多路归并"></a>3.多路归并</h3><h4 id="1-多路归并的情况"><a href="#1-多路归并的情况" class="headerlink" title="1.多路归并的情况"></a>1.多路归并的情况</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141627.png" alt="image-20210710141627266" loading="lazy"></p><h4 id="2-多路归并的最佳归并树"><a href="#2-多路归并的最佳归并树" class="headerlink" title="2.多路归并的最佳归并树"></a>2.多路归并的最佳归并树</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141813.png" alt="image-20210710141813206" loading="lazy"></p><h4 id="3-减少一个归并段"><a href="#3-减少一个归并段" class="headerlink" title="3.减少一个归并段"></a>3.减少一个归并段</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710141921.png" alt="image-20210710141921694" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142007.png" alt="image-20210710142007085" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142029.png" alt="image-20210710142029371" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142053.png" alt="image-20210710142053596" loading="lazy"></p><h4 id="4-添加虚段的数量"><a href="#4-添加虚段的数量" class="headerlink" title="4.添加虚段的数量"></a>4.添加虚段的数量</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142615.png" alt="image-20210710142614977" loading="lazy"></p><blockquote><ul><li>应用：进行8路归并，初始归并段是19，需要添加几个归并段？</li><li>k&#x3D;8</li><li>u&#x3D;(19-1)%(7-1)&#x3D;4；需补充(k-1)-u&#x3D;(8-1)-4&#x3D;3个长度为0的虚段</li><li>验证：n<del>0</del>&#x3D;(22-1)&#x2F;(8-1)&#x3D;3可以除得尽</li></ul></blockquote><h4 id="5-知识回顾与重要考点-1"><a href="#5-知识回顾与重要考点-1" class="headerlink" title="5.知识回顾与重要考点"></a>5.知识回顾与重要考点</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210710142752.png" alt="image-20210710142752868" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串</title>
      <link href="/posts/58d9577e/"/>
      <url>/posts/58d9577e/</url>
      
        <content type="html"><![CDATA[<h1 id="一、串"><a href="#一、串" class="headerlink" title="一、串"></a>一、串</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005353.png" alt="image-20210727005353732" loading="lazy"></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005406.png" alt="image-20210727005406740" loading="lazy"></p><h2 id="串V-S线性表"><a href="#串V-S线性表" class="headerlink" title="串V.S线性表"></a>串V.S线性表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005523.png" alt="image-20210727005523561" loading="lazy"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005607.png" alt="image-20210727005607107" loading="lazy"></p><h3 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005635.png" alt="image-20210727005635750" loading="lazy"></p><h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005701.png" alt="image-20210727005701467" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005742.png" alt="image-20210727005742561" loading="lazy"></p><h1 id="二、存储结构"><a href="#二、存储结构" class="headerlink" title="二、存储结构"></a>二、存储结构</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005758.png" alt="image-20210727005758794" loading="lazy"></p><h2 id="顺序存储与堆分配存储"><a href="#顺序存储与堆分配存储" class="headerlink" title="顺序存储与堆分配存储"></a>顺序存储与堆分配存储</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005855.png" alt="image-20210727005855765" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005924.png" alt="image-20210727005924608" loading="lazy"></p><p>方案二的字符串长度不可以超过255</p><h2 id="块链存储"><a href="#块链存储" class="headerlink" title="块链存储"></a>块链存储</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727005953.png" alt="image-20210727005953465" loading="lazy"></p><h2 id="基本操作的实现"><a href="#基本操作的实现" class="headerlink" title="基本操作的实现"></a>基本操作的实现</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010016.png" alt="image-20210727010016555" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010029.png" alt="image-20210727010029230" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010039.png" alt="image-20210727010038986" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010051.png" alt="image-20210727010051797" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010105.png" alt="image-20210727010105881" loading="lazy"></p><h1 id="三、模式匹配"><a href="#三、模式匹配" class="headerlink" title="三、模式匹配"></a>三、模式匹配</h1><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012517.jpg" alt="image-20200803220247955" loading="lazy"></p><h2 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h2><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012522.jpg" alt="image-20200803221038452" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012527.jpg" alt="image-20200803224601338" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012623.jpg" alt="image-20200803231428235" loading="lazy"></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>最好时间复杂度</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012632.jpg" alt="image-20200803231735244" loading="lazy"></p><p>最坏时间复杂度</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012636.jpg" alt="image-20200803232029485" loading="lazy"></p><p>思想总结</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012908.jpg" alt="image-20200803232154853" loading="lazy">四、KMP 算法</p><p>简单模式匹配的缺点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010646.png" alt="image-20210727010646197" loading="lazy"></p><p>改进思想</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010709.png" alt="image-20210727010709758" loading="lazy"></p><p>情况一</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010730.png" alt="image-20210727010730593" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010746.png" alt="image-20210727010746569" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010800.png" alt="image-20210727010759979" loading="lazy"></p><p>情况二</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012945.jpg" alt="image-20200804224917143" loading="lazy"></p><p>情况三：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010926.png" alt="image-20210727010926790" loading="lazy"></p><p>4这里有可能多比较一次：因为4和6已经不等，但是1和6相同，这里仍会期待1和6相同，再进行一次比较，所以这里它并不是最优的算法，但是相比于朴素模式匹配，它还是少对比了两次</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010937.png" alt="image-20210727010937811" loading="lazy"></p><p>同理j指向3时少对比1次</p><p>总结：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010955.png" alt="image-20210727010955129" loading="lazy"></p><h2 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011012.png" alt="image-20210727011012022" loading="lazy"></p><h3 id="求next数组"><a href="#求next数组" class="headerlink" title="求next数组"></a>求next数组</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011116.png" alt="image-20210727011116270" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011214.png" alt="image-20210727011214643" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011236.png" alt="image-20210727011236014" loading="lazy"></p><h3 id="代码实现求next数组"><a href="#代码实现求next数组" class="headerlink" title="代码实现求next数组"></a>代码实现求next数组</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011246.png" alt="image-20210727011246482" loading="lazy"></p><h2 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011258.png" alt="image-20210727011258409" loading="lazy"></p><h1 id="四、KMP-算法"><a href="#四、KMP-算法" class="headerlink" title="四、KMP 算法"></a>四、KMP 算法</h1><p>简单模式匹配的缺点</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010646.png" alt="image-20210727010646197" loading="lazy"></p><p>改进思想</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010709.png" alt="image-20210727010709758" loading="lazy"></p><p>情况一</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010730.png" alt="image-20210727010730593" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010746.png" alt="image-20210727010746569" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010800.png" alt="image-20210727010759979" loading="lazy"></p><p>情况二</p><p><img src="https://cdn.jsdelivr.net/gh/KimYangOfCat/MyPicStorage/2021-CSPostgraduate-408/20200810012945.jpg" alt="image-20200804224917143" loading="lazy"></p><p>情况三：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010926.png" alt="image-20210727010926790" loading="lazy"></p><p>4这里有可能多比较一次：因为4和6已经不等，但是1和6相同，这里仍会期待1和6相同，再进行一次比较，所以这里它并不是最优的算法，但是相比于朴素模式匹配，它还是少对比了两次</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010937.png" alt="image-20210727010937811" loading="lazy"></p><p>同理j指向3时少对比1次</p><p>总结：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727010955.png" alt="image-20210727010955129" loading="lazy"></p><h2 id="具体代码实现-1"><a href="#具体代码实现-1" class="headerlink" title="具体代码实现"></a>具体代码实现</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011012.png" alt="image-20210727011012022" loading="lazy"></p><h3 id="求next数组-1"><a href="#求next数组-1" class="headerlink" title="求next数组"></a>求next数组</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011116.png" alt="image-20210727011116270" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011214.png" alt="image-20210727011214643" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011236.png" alt="image-20210727011236014" loading="lazy"></p><h3 id="代码实现求next数组-1"><a href="#代码实现求next数组-1" class="headerlink" title="代码实现求next数组"></a>代码实现求next数组</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011246.png" alt="image-20210727011246482" loading="lazy"></p><h2 id="回顾总结-1"><a href="#回顾总结-1" class="headerlink" title="回顾总结"></a>回顾总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011258.png" alt="image-20210727011258409" loading="lazy"></p><h1 id="五、KMP-算法的优化"><a href="#五、KMP-算法的优化" class="headerlink" title="五、KMP 算法的优化"></a>五、KMP 算法的优化</h1><h2 id="KMP算法存在的问题"><a href="#KMP算法存在的问题" class="headerlink" title="KMP算法存在的问题"></a>KMP算法存在的问题</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011317.png" alt="image-20210727011317097" loading="lazy"></p><p>例子2：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011359.png" alt="image-20210727011359659" loading="lazy"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210727011418.png" alt="image-20210727011418148" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串 </tag>
            
            <tag> KMP </tag>
            
            <tag> 模式匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/posts/40f24371/"/>
      <url>/posts/40f24371/</url>
      
        <content type="html"><![CDATA[<h1 id="一、线性表"><a href="#一、线性表" class="headerlink" title="一、线性表"></a>一、线性表</h1><h2 id="线性表的基本概念"><a href="#线性表的基本概念" class="headerlink" title="线性表的基本概念"></a>线性表的基本概念</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165456.png" alt="image-20210726165456169" loading="lazy"><br>数据结构的三要素：逻辑结构、数据的运算、存储结构（物理结构)</p><h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><p>线性表是具有相同数据类型的n(n&gt;&#x3D;0)个元素的有限序列。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165542.png" alt="image-20210726165542066" loading="lazy"></p><h2 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210714142852.png" alt="image-20210714142852531" loading="lazy"></p><h2 id="什么时候要传入参数的引用“-amp-”？"><a href="#什么时候要传入参数的引用“-amp-”？" class="headerlink" title="什么时候要传入参数的引用“&amp;”？"></a>什么时候要传入参数的引用“&amp;”？</h2><p>一种是值类型，使用时会直接复制原值，修改参数不会影响原值</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165629.png" alt="image-20210726165629504" loading="lazy"></p><p>一种是引用类型，使用时操作的是原值，修改时直接修改原值！（C语言不支持这种引用类型！）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165653.png" alt="image-20210726165653031" loading="lazy"></p><h2 id="为什么要实现对数据结构的基本操作？"><a href="#为什么要实现对数据结构的基本操作？" class="headerlink" title="为什么要实现对数据结构的基本操作？"></a>为什么要实现对数据结构的基本操作？</h2><ol><li>团队合作编程，你定义的数据结构要让别人能够很方便的使用（封装）</li><li>将常用的操作&#x2F;运算封装称函数，避免重复工作，降低出错风险。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165707.png" alt="image-20210726165707503" loading="lazy"></p><p>注意⚠️：位序是用1开始计算的！！！</p><h1 id="二、顺序表"><a href="#二、顺序表" class="headerlink" title="二、顺序表"></a>二、顺序表</h1><h3 id="顺序表的基本概念"><a href="#顺序表的基本概念" class="headerlink" title="顺序表的基本概念"></a>顺序表的基本概念</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165751.png" alt="image-20210726165751315" loading="lazy"></p><h3 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165814.png" alt="image-20210726165814325" loading="lazy"></p><h3 id="顺序表的初始化"><a href="#顺序表的初始化" class="headerlink" title="顺序表的初始化"></a>顺序表的初始化</h3><h4 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165935.png" alt="image-20210726165934947" loading="lazy"></p><p>具体实现：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726165957.png" alt="image-20210726165957878" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//初始化(静态分配)</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//将所有元素的初始值默认设置为0</span>        <span class="token comment">//这一步其实可以省略，但是省略之后，有可能受到内存中"脏数据"的影响</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h5><ol><li>如果“数组”存满留怎么办？</li></ol><p>可以放弃治疗，顺序表长刚开始确定后就无法更改（存储空间是静态的）</p><ol start="2"><li>如果一开始就声明一个很大的内存空间呢？会存在什么问题？</li></ol><p>浪费，会造成大量的浪费。</p><h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170057.png" alt="image-20210726170057124" loading="lazy"></p><p>具体实现方式</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170149.png" alt="image-20210726170149840" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//初始化（动态方式）</span>bool <span class="token function">InitList</span><span class="token punctuation">(</span>SeqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//用 malloc 函数申请一片连续的存储空间</span>    L<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>InitSize<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token comment">//要细心呀，这里不小心写成了赋值语句，但是没有报错，找了半天错误！</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//(int *) 是指针的强制类型转换</span>    L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>MaxSize<span class="token operator">=</span>InitSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170235.png" alt="image-20210726170235236" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170253.png" alt="image-20210726170253436" loading="lazy"></p><h3 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>ListInsert(&amp;L,i,e):插入操作。在表L中的第i个位置上插入指定元素e。 </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170337.png" alt="image-20210726170337008" loading="lazy"></p><p>详细实现方式：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170413.png" alt="image-20210726170413544" loading="lazy"></p><p>优化之后：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170444.png" alt="image-20210726170444785" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断插入的位置是否合法，</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//判断表是否存满了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">>=</span>MaxSize<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//后面的元素后移</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">>=</span>i <span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入操作的时间复杂度分析"><a href="#插入操作的时间复杂度分析" class="headerlink" title="插入操作的时间复杂度分析"></a>插入操作的时间复杂度分析</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170529.png" alt="image-20210726170529928" loading="lazy"></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170624.png" alt="image-20210726170624021" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//删除</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断i的位置是否合法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//取出将要被删除的数</span>    e<span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将其后的数据前移</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//线性表长度减一</span>    L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除操作的时间复杂度分析"><a href="#删除操作的时间复杂度分析" class="headerlink" title="删除操作的时间复杂度分析"></a>删除操作的时间复杂度分析</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170650.png" alt="image-20210726170650571" loading="lazy"></p><h5 id="总结反思"><a href="#总结反思" class="headerlink" title="总结反思"></a>总结反思</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170800.png" alt="image-20210726170800756" loading="lazy"></p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><h5 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h5><p>GetElem(L,i):按位查找操作，获取表L中第i个位置的元素的值</p><h6 id="静态分配状态下的实现方式"><a href="#静态分配状态下的实现方式" class="headerlink" title="静态分配状态下的实现方式"></a>静态分配状态下的实现方式</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726170924.png" alt="image-20210726170924353" loading="lazy"></p><h6 id="动态分配状态下的实现方式"><a href="#动态分配状态下的实现方式" class="headerlink" title="动态分配状态下的实现方式"></a>动态分配状态下的实现方式</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171024.png" alt="image-20210726171023978" loading="lazy"></p><p>用指针加数组下标的方式取数据的时候，数组类型决定着取数据时取几个字节！！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//按位查找</span><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断是否越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="按位查找的时间复杂度分析"><a href="#按位查找的时间复杂度分析" class="headerlink" title="按位查找的时间复杂度分析"></a>按位查找的时间复杂度分析</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171108.png" alt="image-20210726171108725" loading="lazy"></p><h5 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171207.png" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//按值查找</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//循环出查找</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>e<span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//返回位序</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="结构类型的比较"><a href="#结构类型的比较" class="headerlink" title="结构类型的比较"></a>结构类型的比较</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171356.png" alt="image-20210726171356300" loading="lazy"></p><p>注意：考研初试中华，手写代码可以直接用“&#x3D;&#x3D;”，无论是ElemType是基本数据类型还是结构类型，手写代码主要考察学生是否理解算法思想，不会严格要求代码完全可运行</p><p>有的学校复试考《C语言程序设计》，那么。。。也许就要语法严格一些！</p><h6 id="按值查找的时间复杂度"><a href="#按值查找的时间复杂度" class="headerlink" title="按值查找的时间复杂度"></a>按值查找的时间复杂度</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171428.png" alt="image-20210726171428131" loading="lazy"></p><p>总结反思</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171447.png" alt="image-20210726171447192" loading="lazy"></p><h1 id="三、单链表"><a href="#三、单链表" class="headerlink" title="三、单链表"></a>三、单链表</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171938.png" alt="image-20210726171938045" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726171956.png" alt="image-20210726171956844" loading="lazy"></p><h2 id="什么是单链表？"><a href="#什么是单链表？" class="headerlink" title="什么是单链表？"></a>什么是单链表？</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726172046.png" alt="image-20210726172046492" loading="lazy"></p><h2 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726172308.png" alt="image-20210726172308710" loading="lazy"></p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726172356.png" alt="image-20210726172355951" loading="lazy"></p><p><img src="C:/Users/king/AppData/Roaming/Typora/typora-user-images/image-20210726173031900.png" alt="image-20210726173031900" loading="lazy"></p><p>注释：或者可以理解为指向头节点的指针既可以表示整个单链表也可以表示头节点，为了便于区分才建议使用 typedef 进行重命名，以方便区别其不同的含义</p><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><p><img src="C:/Users/king/AppData/Roaming/Typora/typora-user-images/image-20210726173037377.png" alt="image-20210726173037377" loading="lazy"></p><h2 id="单链表的基本操作"><a href="#单链表的基本操作" class="headerlink" title="单链表的基本操作"></a>单链表的基本操作</h2><h3 id="单链表的初始化"><a href="#单链表的初始化" class="headerlink" title="单链表的初始化"></a>单链表的初始化</h3><h4 id="不带头节点的单链表的初始化"><a href="#不带头节点的单链表的初始化" class="headerlink" title="不带头节点的单链表的初始化"></a>不带头节点的单链表的初始化</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173251.png" alt="image-20210726173251759" loading="lazy"></p><h4 id="带头节点的单链表的初始化"><a href="#带头节点的单链表的初始化" class="headerlink" title="带头节点的单链表的初始化"></a>带头节点的单链表的初始化</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173316.png" alt="image-20210726173316379" loading="lazy"></p><h4 id="两者区别是什么？"><a href="#两者区别是什么？" class="headerlink" title="两者区别是什么？"></a>两者区别是什么？</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173350.png" alt="image-20210726173350478" loading="lazy"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173409.png" alt="image-20210726173409650" loading="lazy"></p><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173426.png" alt="image-20210726173426154" loading="lazy"></p><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><h5 id="按位序插入（带头节点的单链表）"><a href="#按位序插入（带头节点的单链表）" class="headerlink" title="按位序插入（带头节点的单链表）"></a>按位序插入（带头节点的单链表）</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173553.png" alt="image-20210726173553880" loading="lazy"></p><h6 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h6><p>分析在表头插入</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173606.png" alt="image-20210726173606226" loading="lazy"></p><p>分析为什么不能颠倒</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173644.png" alt="image-20210726173627335" loading="lazy"></p><p>分析在表中插入</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173755.png" alt="image-20210726173755324" loading="lazy"></p><p>分析在表尾插入</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726173822.png" alt="image-20210726173814139" loading="lazy"></p><p>分析插入位置超出表长</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174511.png" alt="image-20210726174510989" loading="lazy"></p><h6 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174525.png" alt="image-20210726174524978" loading="lazy"></p><h5 id="按位插入（不带头节点）"><a href="#按位插入（不带头节点）" class="headerlink" title="按位插入（不带头节点）"></a>按位插入（不带头节点）</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174651.png" alt="image-20210726174651203" loading="lazy"></p><p>具体实现</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174722.png" alt="image-20210726174722358" loading="lazy"></p><p>结论：不带头节点的单链表，写代码更不方便，除非特别声明，默认推荐使用带头节点的实现方式，还有要注意在考试中带头、不带头都有可能考察，注意审题。</p><h6 id="指定节点的后插操作"><a href="#指定节点的后插操作" class="headerlink" title="指定节点的后插操作"></a>指定节点的后插操作</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174829.png" alt="image-20210726174829417" loading="lazy"></p><h6 id="指定节点的前插操作"><a href="#指定节点的前插操作" class="headerlink" title="指定节点的前插操作"></a>指定节点的前插操作</h6><p>通过传入头指针实现前插</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726174907.png" alt="image-20210726174907717" loading="lazy"></p><p>先进行后插，然后交换前后数据，以此实现前插</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175051.png" alt="image-20210726175051748" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175110.png" alt="image-20210726175109994" loading="lazy"></p><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><h5 id="带有头节点版本"><a href="#带有头节点版本" class="headerlink" title="带有头节点版本"></a>带有头节点版本</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175540.png" alt="image-20210726175540485" loading="lazy"></p><p>具体实现</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175558.png" alt="image-20210726175558302" loading="lazy"></p><h6 id="删除指定结点"><a href="#删除指定结点" class="headerlink" title="删除指定结点"></a>删除指定结点</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175752.png" alt="image-20210726175752937" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175620.png" alt="image-20210726175620098" loading="lazy"></p><p>如果P是最后一个节点，咋办？</p><p>只能从表头表头依次寻找前驱，时间复杂度O(n)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726175657.png" alt="image-20210726175657466" loading="lazy"></p><p>单链表的局限性：无法逆向检索！！</p><h6 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h6><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180212.png" alt="image-20210726180212442" loading="lazy"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180022.png" alt="image-20210726180022284" loading="lazy"></p><h4 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h4><h5 id="按位查找-带头节点"><a href="#按位查找-带头节点" class="headerlink" title="按位查找(带头节点)"></a>按位查找(带头节点)</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180425.png" alt="image-20210726180424982" loading="lazy"></p><h5 id="按值查找-带头节点"><a href="#按值查找-带头节点" class="headerlink" title="按值查找(带头节点)"></a>按值查找(带头节点)</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180601.png" alt="image-20210726180601573" loading="lazy"></p><h5 id="求表的长度-带头节点"><a href="#求表的长度-带头节点" class="headerlink" title="求表的长度(带头节点)"></a>求表的长度(带头节点)</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180633.png" alt="image-20210726180633120" loading="lazy"></p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180647.png" alt="image-20210726180647007" loading="lazy"></p><h2 id="单链表的建立方法"><a href="#单链表的建立方法" class="headerlink" title="单链表的建立方法"></a>单链表的建立方法</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180723.png" alt="image-20210726180722977" loading="lazy"></p><p>PS：找不到对象就娶一个数据元素吧！哈哈</p><h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><p>第一种方法：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180757.png" alt="image-20210726180756970" loading="lazy"></p><p>问题：时间复杂度太高！！可以用一个指针记录最后一个数据元素的位置来优化时间。</p><p>优化之后:</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180832.png" alt="image-20210726180831940" loading="lazy"></p><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180918.png" alt="image-20210726180918378" loading="lazy"></p><p>具体实现：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726180959.png" alt="image-20210726180959158" loading="lazy"></p><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726181011.png" alt="image-20210726181011287" loading="lazy"></p><h1 id="四、双链表"><a href="#四、双链表" class="headerlink" title="四、双链表"></a>四、双链表</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183619.png" alt="image-20210726183619952" loading="lazy"></p><h2 id="单链表VS双链表"><a href="#单链表VS双链表" class="headerlink" title="单链表VS双链表"></a>单链表VS双链表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183634.png" alt="image-20210726183634075" loading="lazy"></p><h2 id="双链表基本操作"><a href="#双链表基本操作" class="headerlink" title="双链表基本操作"></a>双链表基本操作</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183648.png" alt="image-20210726183648351" loading="lazy"></p><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183702.png" alt="image-20210726183702070" loading="lazy"></p><p>优化之后</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183719.png" alt="image-20210726183719251" loading="lazy"></p><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183736.png" alt="image-20210726183736686" loading="lazy"></p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183755.png" alt="image-20210726183755465" loading="lazy"></p><h2 id="总结反思-1"><a href="#总结反思-1" class="headerlink" title="总结反思"></a>总结反思</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183805.png" alt="image-20210726183805516" loading="lazy"></p><h1 id="五、循环链表"><a href="#五、循环链表" class="headerlink" title="五、循环链表"></a>五、循环链表</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183828.png" alt="image-20210726183828015" loading="lazy"></p><h2 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183837.png" alt="image-20210726183837306" loading="lazy"></p><p>具体实现：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183919.png" alt="image-20210726183919767" loading="lazy"></p><p>优势：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183938.png" alt="image-20210726183938049" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183945.png" alt="image-20210726183945708" loading="lazy"></p><h2 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726183959.png" alt="image-20210726183959302" loading="lazy"></p><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184008.png" alt="image-20210726184007969" loading="lazy"></p><h3 id="插入-3"><a href="#插入-3" class="headerlink" title="插入"></a>插入</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184017.png" alt="image-20210726184017781" loading="lazy"></p><h3 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h3><p><img src="C:/Users/king/AppData/Roaming/Typora/typora-user-images/image-20210726184031060.png" alt="image-20210726184031060" loading="lazy"></p><h2 id="总结反思-2"><a href="#总结反思-2" class="headerlink" title="总结反思"></a>总结反思</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184109.png" alt="image-20210726184109253" loading="lazy"></p><h1 id="六、静态链表"><a href="#六、静态链表" class="headerlink" title="六、静态链表"></a>六、静态链表</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184147.png" alt="image-20210726184147026" loading="lazy"></p><h2 id="什么是静态链表？"><a href="#什么是静态链表？" class="headerlink" title="什么是静态链表？"></a>什么是静态链表？</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184226.png" alt="image-20210726184225973" loading="lazy"></p><h2 id="定义一个静态链表"><a href="#定义一个静态链表" class="headerlink" title="定义一个静态链表"></a>定义一个静态链表</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184303.png" alt="image-20210726184303172" loading="lazy"></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2:"></a>方法2:</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184338.png" alt="image-20210726184338410" loading="lazy"></p><h3 id="验证方法2的定义方法"><a href="#验证方法2的定义方法" class="headerlink" title="验证方法2的定义方法"></a>验证方法2的定义方法</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184446.png" alt="image-20210726184446751" loading="lazy"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184539.jpeg" alt="image-20200620162512284" loading="lazy"></p><h3 id="总结反思-3"><a href="#总结反思-3" class="headerlink" title="总结反思"></a>总结反思</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184543.jpeg" alt="image-20200620162709709" loading="lazy"></p><h1 id="七、线性表章节复习反思"><a href="#七、线性表章节复习反思" class="headerlink" title="七、线性表章节复习反思"></a>七、线性表章节复习反思</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184720.png" alt="image-20210726184719982" loading="lazy"></p><h2 id="逻辑结构对比"><a href="#逻辑结构对比" class="headerlink" title="逻辑结构对比"></a>逻辑结构对比</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184743.png" alt="image-20210726184743873" loading="lazy"></p><h2 id="存储结构对比"><a href="#存储结构对比" class="headerlink" title="存储结构对比"></a>存储结构对比</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184758.png" alt="image-20210726184757954" loading="lazy"></p><h2 id="基本操作对比"><a href="#基本操作对比" class="headerlink" title="基本操作对比"></a>基本操作对比</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184809.png" alt="image-20210726184809121" loading="lazy"></p><h3 id="初始化-创建"><a href="#初始化-创建" class="headerlink" title="初始化(创建)"></a>初始化(创建)</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184828.png" alt="image-20210726184828780" loading="lazy"></p><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184903.png" loading="lazy"></p><h3 id="增加-x2F-删除"><a href="#增加-x2F-删除" class="headerlink" title="增加&#x2F;删除"></a>增加&#x2F;删除</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184923.png" alt="image-20210726184923124" loading="lazy"></p><h3 id="查找-2"><a href="#查找-2" class="headerlink" title="查找"></a>查找</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184934.png" alt="image-20210726184934771" loading="lazy"></p><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726184946.png" alt=" " loading="lazy"></p><p>具体使用时，需要根据具体场景去选择</p><h2 id="开放式答题的思路"><a href="#开放式答题的思路" class="headerlink" title="开放式答题的思路"></a>开放式答题的思路</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726185015.png" alt="image-20210726185015579" loading="lazy"> </p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 顺序表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构介绍</title>
      <link href="/posts/aa22783f/"/>
      <url>/posts/aa22783f/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据结构基本概念"><a href="#一、数据结构基本概念" class="headerlink" title="一、数据结构基本概念"></a>一、数据结构基本概念</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200509.png" alt="image-20210726200509343" loading="lazy"></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a>什么是数据？</h3><p>数据是<strong>信息的载体</strong>，是客观描述事物属性的数、字符及<strong>所有能输入到计算机中并被计算机程序识别和处理的符号</strong>的集合。数据是计算机程序加工的原料。</p><h3 id="数据元素、数据项"><a href="#数据元素、数据项" class="headerlink" title="数据元素、数据项"></a>数据元素、数据项</h3><p><strong>数据元素</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。</p><p>一个数据元素可由若干<strong>数据项</strong>组成，数据项是构成数据元素的不可分割的最小单位。</p><h3 id="数据结构、数据对象"><a href="#数据结构、数据对象" class="headerlink" title="数据结构、数据对象"></a>数据结构、数据对象</h3><p>结构——各个元素之间的关系</p><p><strong>数据结构</strong>是互相之间存在一个或多种<strong>特定关系</strong>的数据元素的集合。</p><p><strong>数据对象</strong>是具有<strong>相同性质</strong>的数据元素的集合，是一个数据的子集。</p><h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200527.png" alt="image-20210726200527173" loading="lazy"></p><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>即，数据元素之间的逻辑关系是什么？</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200541.png" alt="image-20210726200540987" loading="lazy"></p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200609.png" alt="image-20210726200609408" loading="lazy"></p><p>各个数据元素同属一个集合，别无其它关系</p><h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200618.png" alt="image-20210726200618276" loading="lazy"></p><p>数据元素之间是一对一的关系，除了第一个元素，所有元素都有唯一前驱，除了最后一个元素，所有元素都有唯一后继</p><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200636.png" alt="image-20210726200636442" loading="lazy"></p><p>数据元素之间是一对多的关系</p><h4 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200645.png" alt="image-20210726200645453" loading="lazy"></p><p>数据元素之间是多对多的关系</p><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><p>即，物理结构，如何用计算机表示数据元素的逻辑关系？</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200707.png" alt="image-20210726200707924" loading="lazy"></p><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200719.png" alt="image-20210726200719555" loading="lazy"></p><p><strong>把逻辑上相邻的元素存储在物理地址上也相邻的存储单元中</strong>，元素之间的关系由存储单元的领接关系来体现。</p><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200805.png" alt="image-20210726200805000" loading="lazy"></p><h4 id="索引存储"><a href="#索引存储" class="headerlink" title="索引存储"></a>索引存储</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200814.png" alt="image-20210726200814419" loading="lazy"></p><h4 id="散列存储"><a href="#散列存储" class="headerlink" title="散列存储"></a>散列存储</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200822.png" alt="image-20210726200822932" loading="lazy"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726200832.png" alt="image-20210726200832057" loading="lazy"></p><ol><li>若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺存储，则各个数据元素在物理上是可以离散的</li><li>数据的存储结构会影响存储空间的分配的方便程度</li><li>数据的存储机构会影响对数据运算的速度</li></ol><h3 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h3><p>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，正对运算的功能；运算的实现是针对存储结构的，指的是运算实现的具体操作步骤。</p><h2 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型是一个值的集合和定义在此集合的一组操作的总称。</p><ol><li>原子类型，其值不可再分的数据类型</li><li>结构类型，其值可以再分解为若干成分（分量）的数据类型</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201240.png" alt="image-20210726201240691" loading="lazy"></p><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>Abstract Data Type （ADT）是抽象数据组织及与之相关的操作。</p><p>ADT 是用数学化的语言定义数据的逻辑结构、定义运算。与其具体的实现无关（类似于定义类吗？可能）</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201255.png" alt="image-20210726201255574" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201308.png" alt="image-20210726201308420" loading="lazy"></p><p>在探讨一种数据结构时：</p><ol><li>定义逻辑结构（数据原元素之间的关系）</li><li>定义数据的运算（针对现实需求，应该对这种逻辑结构进行什么样的运算）</li><li>确定某种存储结构，实现数据结构，并实现一些对数据结构的基本运算</li></ol><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201324.png" alt="image-20210726201324448" loading="lazy"></p><h1 id="二、算法基本概念"><a href="#二、算法基本概念" class="headerlink" title="二、算法基本概念"></a>二、算法基本概念</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201355.png" alt="image-20210726201355477" loading="lazy"></p><h3 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h3><p>程序&#x3D;数据结构+算法</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201405.png" alt="image-20210726201405765" loading="lazy"></p><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ol><li><p>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</p><p> 注：算法必须是有穷的，二程序可以是无穷的。</p><p> <img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201458.png" alt="image-20210726201458768" loading="lazy"></p></li><li><p>确定性：算法每一条指令必须有确切的含义，对于相同的输入只能得出相同的输出</p></li><li><p>可行性：算法描述的操作都可以通过已经实现的基本运算执行有限次来实现。</p></li><li><p>输入：一个算法有0个或多个输入，这些输入取自某个特定对象的集合。</p></li><li><p>输出：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量。</p><p> 五个特性，缺一不可</p></li></ol><h3 id="“好”算法的特质"><a href="#“好”算法的特质" class="headerlink" title="“好”算法的特质"></a>“好”算法的特质</h3><ol><li>正确性：算法应能正确地解决求解问题。</li><li>可读性：算法应具有良好的可读性，帮助人们理解。</li><li>健壮性：输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li><li>高效率与底存储量需求：执行速度快，时间复杂度低。不费内存，空间复杂度低。</li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201634.png" alt="image-20210726201634464" loading="lazy"></p><h2 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201657.png" alt="image-20210726201657396" loading="lazy"></p><h3 id="如何评估算法时间开销？"><a href="#如何评估算法时间开销？" class="headerlink" title="如何评估算法时间开销？"></a>如何评估算法时间开销？</h3><p><strong>让算法先运行，事后统计运行时间？</strong></p><p>存在的问题？</p><ul><li>和机器性能有关，比如：超级计算机VS单片机</li><li>和编程语言有关，越高级的语言执行效率越低，没错，就是越低</li><li>和编译程序产生的机器指令质量有关</li><li>有些算法是不能事后统计的，比如，导弹控制算法。</li></ul><p>评价一个算法优劣时，需要排除与算法本身无关的外界因素，能否事先估计？</p><h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><ul><li>最坏时间复杂度：最坏情况下算法的时间复杂度</li><li>平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间</li><li>最好时间复杂度：最好情况下算法的时间复杂度</li></ul><p>事前预估算法时间开销T(n)与问题规模n的关系（T 表示 time）</p><p>如何计算T，例子：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201717.png" alt="image-20210726201717301" loading="lazy"></p><h4 id="问题1-是否可以忽略表达式某些部分？"><a href="#问题1-是否可以忽略表达式某些部分？" class="headerlink" title="问题1:是否可以忽略表达式某些部分？"></a>问题1:是否可以忽略表达式某些部分？</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201727.png" alt="image-20210726201727765" loading="lazy"></p><ol><li><p>加法规则：多项相加，只保留最高阶的项，且系数变为1</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201751.png" alt="image-20210726201751782" loading="lazy"></p></li><li><p>乘法规则：多项相乘，都保留</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201812.png" alt="image-20210726201812765" loading="lazy"></p></li></ol><p>算法时间复杂度阶数顺序</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201823.png" alt="image-20200617000121744" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201931.png" alt="image-20210726201931069" loading="lazy"></p><h4 id="如果有好几千行代码，需要一行一行数？"><a href="#如果有好几千行代码，需要一行一行数？" class="headerlink" title="如果有好几千行代码，需要一行一行数？"></a>如果有好几千行代码，需要一行一行数？</h4><ol><li>顺序执行的代码只会影响常数项，可以忽略</li><li>只需要挑循环中的一个基本操作，分析它的执行次数和n的关系就好</li><li>如果有多层嵌套循环，只需要关注最深层的循环循环了几次</li></ol><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726201948.png" alt="image-20210726201948853" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202012.png" alt="image-20210726202012483" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202053.png" alt="image-20210726202053679" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202104.png" alt="image-20210726202104892" loading="lazy"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202344.png" alt="image-20210726202344903" loading="lazy"></p><p>算法的性能问题只有在n很大时才会暴露出来。</p><h3 id="算法空间复杂度"><a href="#算法空间复杂度" class="headerlink" title="算法空间复杂度"></a>算法空间复杂度</h3><h4 id="原地工作算法"><a href="#原地工作算法" class="headerlink" title="原地工作算法"></a>原地工作算法</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202415.png" alt="image-20210726202414955" loading="lazy"></p><p>分析空间复杂度时，只需关注与问题规模相关的变量就好（讲人话，就是，看程序中的变量就好）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202426.png" alt="image-20210726202426514" loading="lazy"></p><p>加法法则</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202443.png" alt="image-20210726202443429" loading="lazy"></p><h4 id="函数递归调用带来的内存开销"><a href="#函数递归调用带来的内存开销" class="headerlink" title="函数递归调用带来的内存开销"></a>函数递归调用带来的内存开销</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202555.png" alt="image-20210726202555477" loading="lazy"></p><p>在这种情况下，空间复杂度等于递归调用的深度。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202614.png" alt="image-20210726202614295" loading="lazy"></p><p>递归调用的过程中，每一次开辟的内存空间也可以不一致，如上例。</p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210726202626.png" alt="image-20210726202626115" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zigbee单播通信</title>
      <link href="/posts/b142e803/"/>
      <url>/posts/b142e803/</url>
      
        <content type="html"><![CDATA[<h1 id="一、单播通信理论"><a href="#一、单播通信理论" class="headerlink" title="一、单播通信理论"></a>一、单播通信理论</h1><p>（1）Zigbee网络通信方式有4种：单播，广播，组播，绑定(MAC)。</p><p>（2）单播通信的特点:在Zigbee网络里，模块之间要进行通信，发射模块要明确知道接收模块的网络地址。</p><p>（3）Zigbee模块的地址特点:模块在加入网络的时候，父节点随机分配网络地址给子节点。但是协调器模块在)网络里的地址永远都是0x00。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085917.png" alt="image-20210528085917105" loading="lazy"></p><p><strong>单播发送数据需要明确的信息</strong>：<br>    (1)目标地址<br>    (2)目标端点与簇<br>    (3)要发送的数据大小</p><p><strong>应用任务层数据发送函数</strong></p><p>该函数在GenericApp.c里的GenericApp_SendTheMessage函数里：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">AF_DataRequest</span><span class="token punctuation">(</span>              <span class="token operator">&amp;</span>GenericApp_DstAddr<span class="token punctuation">,</span> <span class="token comment">//目标的网络地址指针</span>              <span class="token operator">&amp;</span>GenericApp_epDesc<span class="token punctuation">,</span><span class="token comment">//端点描述符指针</span>              GENERICAPP_CLUSTERID<span class="token punctuation">,</span><span class="token comment">//目标簇</span>              <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token function">osal_strlen</span><span class="token punctuation">(</span> theMessageData <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//发送数据的大小</span>              <span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>theMessageData<span class="token punctuation">,</span><span class="token comment">//发送数据缓冲区的地址</span>              <span class="token operator">&amp;</span>GenericApp_TransID<span class="token punctuation">,</span><span class="token comment">//这是个全局变量，用来保存发送的次数</span>              AF_DISCV_ROUTE<span class="token punctuation">,</span> AF_DEFAULT_RADIUS <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送路径，don't care</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529101718.png" alt="image-20210529101711143" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528090054.png" alt="image-20210528090054641" loading="lazy"></p><p><strong>网络地址结构体</strong></p><p>网络地址结构体就是定义在GenericApp.c前面的一个结构体变量，该类型为afAddrType_t，系统已经默认定义了一个网络地址结构体变量GenericApp_DstAddr，我们可以在GenericApp_Init()函数中，对网络地址结构体变量的成员进行赋值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//网络地址结构体:</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>      <span class="token keyword">union</span>     <span class="token punctuation">&#123;</span>            uint16      shortAddr<span class="token punctuation">;</span><span class="token comment">//网络地址</span>            ZLongAddr_t extAddr<span class="token punctuation">;</span> <span class="token comment">//MAC地址</span>     <span class="token punctuation">&#125;</span> addr<span class="token punctuation">;</span>     <span class="token class-name">afAddrMode_t</span> addrMode<span class="token punctuation">;</span><span class="token comment">//通信模式</span>     byte endPoint<span class="token punctuation">;</span> <span class="token comment">//指定的端点</span>     uint16 panId<span class="token punctuation">;</span>  <span class="token comment">//don't care</span><span class="token punctuation">&#125;</span> <span class="token class-name">afAddrType_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//通信模式枚举类型:</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">&#123;</span>        afAddrNotPresent <span class="token operator">=</span> AddrNotPresent<span class="token punctuation">,</span><span class="token comment">//当前不确定</span>        afAddr16Bit      <span class="token operator">=</span> Addr16Bit<span class="token punctuation">,</span><span class="token comment">//单播通信模式</span>        afAddr64Bit      <span class="token operator">=</span> Addr64Bit<span class="token punctuation">,</span><span class="token comment">//MAC通信模式</span>        afAddrGroup      <span class="token operator">=</span> AddrGroup<span class="token punctuation">,</span><span class="token comment">//组播通信模式</span>        afAddrBroadcast  <span class="token operator">=</span> AddrBroadcast<span class="token comment">//广播通信模式</span><span class="token punctuation">&#125;</span> <span class="token class-name">afAddrMode_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529102118.png" alt="image-20210529102118365" loading="lazy"></p><h1 id="二、端点与簇"><a href="#二、端点与簇" class="headerlink" title="二、端点与簇"></a>二、端点与簇</h1><h2 id="1-端点"><a href="#1-端点" class="headerlink" title="1.端点"></a>1.端点</h2><p>(1)通常发送的数据要明确该数据是给接收模块的哪个任务层用的，而这个就是用端点来指定的</p><p>(2)端点是一个字节的编号，通常为定义在GenericApp.h中的一个宏。端点必须要与任务层绑定，而这个就是用端点描述符来实现的。</p><p>(3)端点描述符是一个结构体变量，该变量定义在GenericApp.c开头，我们也可以定义新的端点描述符。该结构体的类型为 endPointDesc_t，系统也默认定义了一个端点描述符GenericApp_epDesc。</p><p>(4)我们可以在 GenericApp_Init()函数中，把新的端点描述符变量赋值，使新的端点与某个任务层绑定。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//端点结构体类型:</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>       byte endPoint<span class="token punctuation">;</span><span class="token comment">//端点的值</span>       byte <span class="token operator">*</span>task_id<span class="token punctuation">;</span>  <span class="token comment">//与端点绑定的任务层ID</span>       SimpleDescriptionFormat_t <span class="token operator">*</span>simpleDesc<span class="token punctuation">;</span><span class="token comment">//端点的描述信息,don’t care</span>       <span class="token class-name">afNetworkLatencyReq_t</span> latencyReq<span class="token punctuation">;</span><span class="token comment">//don’t care</span><span class="token punctuation">&#125;</span> <span class="token class-name">endPointDesc_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-簇"><a href="#2-簇" class="headerlink" title="2.簇"></a>2.簇</h2><p>(1)在接收模块中，每个任务层可以对不同种类的数据采取不同的处理方式，这里的数据种类就是簇(CLUSTER)</p><p>(2)在发送模块中，簇是定义在GenericApp.h中的一个宏，我们也可以定义新的簇。</p><p>(3) 系统也默认定义了一个簇 GenericApp_CLUSTERID，在GenericApp.h中</p><h1 id="三、-应用任务层数据发送接收API"><a href="#三、-应用任务层数据发送接收API" class="headerlink" title="三、 应用任务层数据发送接收API"></a>三、 应用任务层数据发送接收API</h1><p>(1)该函数为GenericApp.c中的void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210529115258.png" alt="image-20210529115258491" loading="lazy"></p><p>(2)在switch语句中可以定义对不同的簇采用不同的方式处理数据</p><p>(3)该函数中的pkt-&gt;cmd.Data就是接收数据的首地址</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528090956.png" alt="image-20210528090956245" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> 单播通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zigbee无线通信与网络组建</title>
      <link href="/posts/121b6cd5/"/>
      <url>/posts/121b6cd5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-无线通信理论"><a href="#一、-无线通信理论" class="headerlink" title="一、 无线通信理论"></a>一、 无线通信理论</h1><p>Zigbee无线通信，需要高频的载波来提供发射频率，Zigbee模块之间要可以正常通信，接收模块和发送模块的频率要一致。</p><p>​    Zigbee有27个载波可以进行通信，载波又叫做信道。这些载波的频率落在某些频率区段，我们把这些区段叫做频段。</p><p>​        2.4G频段                        16个信道<br>​        915M频段     896M频段   11个信道</p><p>​    但TI的所有支持Zigbee底层协议的芯片只能在2.4G频段的16个信道里进行通信。即11<del>26信道(0</del>10信道在915M和896M的频段内)</p><p><strong>网络地址</strong>：<br>    在Zigbee无线局域网里，每一个模块都有一个在该网络里唯一的2个字节的地址，这个地址我们叫做网络地址(或者叫做网络短地址)。</p><p><strong>PANID</strong>：<br>    这也是一个2个字节的编号，用来区分不用的Zigbee无线局域网，我们称为个域网ID。两个模块之间要进行通信，PANID一定要一样。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528084644.png" alt="image-20210528084643979" loading="lazy"></p><p><strong>信道与PANID的设置</strong>：<br>    在Tools文件组里的f8wConfig.cfg文件中<br>    (1)设置信道<br>        -DDEFAULT_CHANLIST&#x3D;0x00000800  &#x2F;&#x2F; 11 - 0x0B<br>    (2)设置PANID<br>        -DZDAPP_CONFIG_PAN_ID&#x3D;0x1234<br>注意:如果把PANID设置为0xFFFF,则意味着该模块不受PANID的限制</p><h1 id="二、-网络组建理论"><a href="#二、-网络组建理论" class="headerlink" title="二、 网络组建理论"></a>二、 网络组建理论</h1><p>在Zigbee无线局域网里，节点(无线模块)按照在网络里的功能可以划分为：协调器、路由器、终端这三种角色。<br>    它们的硬件可以是一模一样的，之所以在网络里表现出不同的功能，是因为它们下载了不同功能版本的程序，在同一个网络里担当了不同的角色功能。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528084808.png" alt="image-20210528084807987" loading="lazy"></p><p>​    下载了路由器和终端代码的模块，它们上电后的第一件事情去寻找网络，请求加入。然而网络不会无缘无故产生，是由下载了协调器代码的模块创建的。<br>​    下载了协调器代码的模块上电后的第一件事就是创建网络。<br>     任何一个网络里，第一个节点一定是该网络的协调器，<strong>有且只能有一个协调器</strong>。</p><p>​    如果有一个协调器创建了一个网络ID是0x1234，还有一个协调器也创建了一个网络ID为0x1234，此时后面创建的网络ID加一，即为0x1235。</p><p>​    任何一个Zigbee模块要加入到某个网络，一定要一个处于该网络里的节点作为介绍人，并且这个介绍人不能是终端节点(即路由器或者协调器)。在加入网络以后，介绍人节点和被介绍加入的节点互为父子关系。    介绍人是被介绍人的父节点，被介绍人是介绍人的、子节点。有多个可作为介绍人资格的节点，会选择信号强度高的节点作为介绍人。</p><p>​    协调器在创建完网络后，在网络里的功能与路由器没有任何区别，只不过协调器的网络地址比较特殊只能是0x0000，而其他加入的节点的网络地址是动态分配的。<br>​    终端节点与其他模块的通信必须要通过它的父节点，而路由器(协调器)之间通信可以直接通信的。<br>   因此，<strong>路由器在网络里充当的是拓扑扩展的中转站的功能</strong>。</p><h1 id="三、Zigbee三种网络架构"><a href="#三、Zigbee三种网络架构" class="headerlink" title="三、Zigbee三种网络架构"></a>三、Zigbee三种网络架构</h1><h2 id="1-星形拓扑"><a href="#1-星形拓扑" class="headerlink" title="1.星形拓扑"></a>1.星形拓扑</h2><p>​    星形拓扑是最简单的一种拓扑形式，他包含一个Co-ordinator（协调者） 节点和一系列的 End Device（终端）节点。每一个End Device 节点只能和 Co-ordinator 节点进行通讯。如果需要在两个 End Device 节点之间进行通讯必须通过Co-ordinator 节点进行信息的转发。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085042.png" alt="image-20210528085042404" loading="lazy"></p><h2 id="2-树形拓扑"><a href="#2-树形拓扑" class="headerlink" title="2.树形拓扑"></a>2.树形拓扑</h2><p>​    树形拓扑包括一个Co-ordinator（协调者）以及一系列的 Router（路由器） 和 End Device（终端）节点。Co-ordinator 连接一系列的 Router 和 End Device， 他的子节点的 Router也可以连接一系列的 Router 和End Device. 这样可以重复多个层级。树形拓扑的结构如下图所示：       </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085105.png" alt="image-20210528085105782" loading="lazy"></p><h2 id="3-Mesh拓扑（网状拓扑）"><a href="#3-Mesh拓扑（网状拓扑）" class="headerlink" title="3.Mesh拓扑（网状拓扑）"></a>3.Mesh拓扑（网状拓扑）</h2><p>​    Mesh拓扑（网状拓扑） 包含一个Co-ordinator和一系列的Router 和End Device。这种网络拓扑形式和树形拓扑相同；请参考上面所提到的树形网络拓扑。但是，网状网络拓扑具有更加灵活的信息路由规则，在可能的情况下，路由节点之间可以直接的通讯。这种路由机制使得信息的通讯变得更有效率，而且意味这一旦一个路由路径出现了问题，信息可以自动的沿着其他的路由路径进行传输。 网状拓扑的示意图如下所示：       </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085155.png" alt="image-20210528085155248" loading="lazy"></p><h2 id="4-三种网络架构对比"><a href="#4-三种网络架构对比" class="headerlink" title="4.三种网络架构对比"></a>4.三种网络架构对比</h2><p>​        MESH 网状网络拓扑结构的网络具有强大的功能，网络可以通过“多级跳”的方式来通信；该拓扑结构还可以组成极为复杂的网络；网络还具备自组织、自愈功能；<br>​        星型和族树型网络适合点多多点、距离相对较近的应用。<br>​       我们可以在 “nwk_globals.h” 文件中159行进行修改网络结构，默认为网状拓扑结构。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210528085251.png" alt="image-20210528085251909" loading="lazy"></p><p>​    我们可以在GenericApp.c文件中的GenericApp_ProcessEvent函数中的switch语句的 case ZDO_STATE_CHANGE中修改代码内容，让模块在不同的网络状态下亮不同的灯。</p><p>​    注意:下载了协调器的代码的模块，创建了网络之后就是协调器状态，而终端和路由器要加入了网络才是对应的状态。终端和路由器要加入网络的条件是，信道和PANID要一致。</p>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> 自动组网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zigbee驱动DHT11温湿度传感器</title>
      <link href="/posts/5f805b8b/"/>
      <url>/posts/5f805b8b/</url>
      
        <content type="html"><![CDATA[<h1 id="一、DHT11传感器概述"><a href="#一、DHT11传感器概述" class="headerlink" title="一、DHT11传感器概述"></a>一、DHT11传感器概述</h1><h2 id="DHT11传感器概述"><a href="#DHT11传感器概述" class="headerlink" title="DHT11传感器概述"></a>DHT11传感器概述</h2><p>​      DHT11数字温湿度传感器是一款含有已校准数字信号输出的温湿度复合传感器。 它应用专用的数字模块采集技术和温湿度传感技术， 确保产品具有极高的可靠性与卓越的长期稳定性。<br>​    传感器包括一个电阻式感湿元件和一个NTC测温元件，并与一个高性能8位单片机相连接    。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130316.png" alt="image-20210527152514400" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130321.png" alt="image-20210527152050788" loading="lazy"></p><p>DHT11传感器体积小，功耗极低，信号传输距离可达20米以上。具有品质卓越、超快响应、抗干扰能力强、性价比极高等优点。<br>    产品为 4 针单排引脚封:</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130324.png" alt="image-20210527152113012" loading="lazy"></p><p>DHT11与MCU连接图:</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130328.png" alt="image-20210527152127031" loading="lazy"></p><h1 id="二、DHT11通信协议分析"><a href="#二、DHT11通信协议分析" class="headerlink" title="二、DHT11通信协议分析"></a>二、DHT11通信协议分析</h1><h2 id="1-DHT11数据传输协议"><a href="#1-DHT11数据传输协议" class="headerlink" title="1. DHT11数据传输协议"></a>1. DHT11数据传输协议</h2><p>​       DHT11通过DATA线与MCU实现半双工通讯。每次通讯时间4ms左右,数据分小数部分和整数部分,具体格式在下面说明(当前小数部分用于以后扩展,现读出为零)。<br>操作流程如下:一次完整的数据传输为40bit,高位先出。<br>数据格式:<br>​    40bits &#x3D; 8bit湿度整数数据+8bit湿度小数数据+8bit温度整数数据+8bit温度小数数据 +8bit校验和 </p><p>​    数据传送正确时，校验和数据 “ 8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据” 所得结果的末8位。<br>​     即:<br>​    校验和数据  &#x3D;（ 8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据）% 256。</p><h2 id="2-DHT11数据通讯过程"><a href="#2-DHT11数据通讯过程" class="headerlink" title="2. DHT11数据通讯过程"></a>2. DHT11数据通讯过程</h2><p>​    (1)总线空闲状态为高电平,主机把总线拉低18毫秒，向DHT11发送开始信号。</p><p>​      (2)DHT11接收到主机的开始信号后,等待主机开始信号结束,然后发送80us低电平响应信号。</p><p>​      (3)主机发送开始信号结束后,延时等待20-40us后, 读取DHT11的响应信号,主机发送开始信号后,可以切换到输入模式,或者输出高电平均可, 总线由上拉电阻拉高。</p><p>​      (4) DHT11发送响应信号后,再把总线拉高80us,准备发送数据。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130333.png" alt="image-20210527152256797" loading="lazy"></p><p>  (1)DHT11总共会发送40bits的数据,而每一bit数据都以50us低电平时隙开始。</p><p>​       (2)50us的低电平时隙结束后，接下来的高电平的长短决定了该数据位是0还是1。</p><p>​       (3)高电平时长在26~28us左右表示0，在70us左右表示1，格式见下面图示。</p><p>​       (4)如果读取响应信号一直为高电平,则表示DHT11没有响应,请检查线路是否连接正常.当最后一bit数据传送完毕后，DHT11拉低总线50us,随后总线由上拉电阻拉高进入空闲状态。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130336.png" alt="image-20210527152323798" loading="lazy"></p><p> 整个通讯过程如图所示：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130341.png" alt="image-20210527152342588" loading="lazy"></p><h2 id="3-微秒级延时函数"><a href="#3-微秒级延时函数" class="headerlink" title="3.微秒级延时函数"></a>3.微秒级延时函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token expression">“OnBoard<span class="token punctuation">.</span>h”</span></span><span class="token function">MicroWait</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="三、实例演示"><a href="#三、实例演示" class="headerlink" title="三、实例演示"></a>三、实例演示</h1><h2 id="dht11-h"><a href="#dht11-h" class="headerlink" title="dht11.h"></a><strong>dht11.h</strong></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__DHT11_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__DHT11_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temperature<span class="token punctuation">,</span>humidity<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">Start_DHT11</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dht11-c"><a href="#dht11-c" class="headerlink" title="dht11.c"></a><strong>dht11.c</strong></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dht11.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"OnBoard.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATA</span>  <span class="token expression">P0_4</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> temperature<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>humidity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DATA_IO_input_Cfg</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//设置为上拉输入模式</span><span class="token punctuation">&#123;</span>    P0SEL <span class="token operator">&amp;=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>   <span class="token comment">// 1110 1111 把P04设置为普通IO模式</span>    P0DIR <span class="token operator">&amp;=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>   <span class="token comment">// 1110 1111 把P04设置为输入模式</span>    P0INP <span class="token operator">&amp;=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>   <span class="token comment">// 1110 1111 把P04设置为上下拉模式</span>    P2INP <span class="token operator">&amp;=</span> <span class="token number">0xDF</span><span class="token punctuation">;</span>   <span class="token comment">// 1101 1111 把P0组设置为上拉模式</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DATA_IO_output_Cfg</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//设置为输出模式</span><span class="token punctuation">&#123;</span>    P0SEL <span class="token operator">&amp;=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>   <span class="token comment">// 1110 1111 把P04设置为普通IO模式</span>    P0DIR <span class="token operator">|=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>   <span class="token comment">// 0001 0000 把P04设置为输出模式</span><span class="token comment">//    P0INP |= 0x10;   // 0001 0000 把P04设置为三态模式</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每个bit都是从50us的低电平开始</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MicroWait</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时30us</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      tmp <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把该bit设置为1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*@Start_DHT11 : 采集一次温湿度数据@retval : 如果成功，把温湿度的值保存到全局变量，并返回1          如果失败，返回0*/</span><span class="token keyword">int</span> <span class="token function">Start_DHT11</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//开始采集数据</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">DATA_IO_output_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为输出模式</span>  DATA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//发送开始信号</span>  <span class="token function">MicroWait</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时至少18ms</span>  DATA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//拉高20~40us</span>  <span class="token function">MicroWait</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DATA_IO_input_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为输入模式</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等DHT11回响应信号</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>DATA <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等DHT11把总线拉高，准备接收数据</span>  buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Read_Byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span> <span class="token operator">==</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    humidity <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    temperature <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> DHT11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zigbee串口通信</title>
      <link href="/posts/d1180c9/"/>
      <url>/posts/d1180c9/</url>
      
        <content type="html"><![CDATA[<h1 id="一、串口通信原理"><a href="#一、串口通信原理" class="headerlink" title="一、串口通信原理"></a>一、串口通信原理</h1><h2 id="1-什么是UART"><a href="#1-什么是UART" class="headerlink" title="1.什么是UART"></a>1.什么是UART</h2><p>​      UART : Universal Asynchronous  Receiver&#x2F;Transmitter  通用异步收发器<br>​    一种常用也是最简单的串行数据传输协议。数据线只需要两根就可以实现全双工。<br>​    Tx:发送数据线<br>​    Rx:接收数据线<br>​        A                B<br>​        Tx &lt;———–&gt; Rx<br>​        Rx &lt;———–&gt; Tx<br>​        GND&lt;———–&gt; GND</p><h2 id="2-上位机与下位机"><a href="#2-上位机与下位机" class="headerlink" title="2.上位机与下位机"></a>2.上位机与下位机</h2><p>​         模块之间的通信,根据其在系统中的功能与作用可分为上位机 与 下位机。</p><p>上位机：<br>    把处理性能强的计算机称为上位机。数据的统一处理都在上位机完成。</p><p>下位机：<br>    把数据采集和发送的终端，处理性能单一的计算机，称为下位机。</p><p>一般一个上位机会对应多个下位机，这种模式可以使数据处理的更加全面，同时也大大降低成本。</p><h2 id="3-UART数据帧"><a href="#3-UART数据帧" class="headerlink" title="3.UART数据帧"></a>3.UART数据帧</h2><p>UART protocol  串口协议<br>    串口发送和接收数据是以帧为单位，Frame</p><pre><code>1帧(Frame) = 1start bit(起始位) + 5~9bits数据位 + 0/1bit校验位 + stop bits(0.5,1,1.5)停止位起始位：一个周期的低电平数据位：5~9bits数据位，具体是多少bits，需要双方协商，并且传送先传送最低位(LSB)校验位：    0bit：没有校验    1bit：有校验        奇校验：数据位+校验位的这一段数据里的1的个数是奇数。        偶校验：数据位+校验位的这一段数据里的1的个数是偶数。停止位：高电平        1个停止位            Baudrate(波特率):传输速率，即没一个秒传输了多少个bit位    4800    9600    115200bps: bits per second</code></pre><h1 id="二、串口配置"><a href="#二、串口配置" class="headerlink" title="二、串口配置"></a>二、串口配置</h1><h2 id="1-串口初始化相关的结构体halUARTCfg-t"><a href="#1-串口初始化相关的结构体halUARTCfg-t" class="headerlink" title="1.    串口初始化相关的结构体halUARTCfg_t"></a>1.    串口初始化相关的结构体halUARTCfg_t</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>  bool                configured<span class="token punctuation">;</span><span class="token comment">//是否设置串口</span>  uint8               baudRate<span class="token punctuation">;</span> <span class="token comment">//波特率设置</span>  bool                flowControl<span class="token punctuation">;</span><span class="token comment">//控制流设置</span>  uint16              flowControlThreshold<span class="token punctuation">;</span><span class="token comment">//RX缓存安全字节数(了解)</span>  uint8               idleTimeout<span class="token punctuation">;</span><span class="token comment">//RX来数据超时时间(了解)</span>  <span class="token class-name">halUARTBufControl_t</span> rx<span class="token punctuation">;</span><span class="token comment">//接收数据长度</span>  <span class="token class-name">halUARTBufControl_t</span> tx<span class="token punctuation">;</span><span class="token comment">//发送数据长度</span>  bool                intEnable<span class="token punctuation">;</span><span class="token comment">//中断使能</span>  uint32              rxChRvdTime<span class="token punctuation">;</span><span class="token comment">//接收数据时间</span>  <span class="token class-name">halUARTCBack_t</span>      callBackFunc<span class="token punctuation">;</span><span class="token comment">//回调函数</span><span class="token punctuation">&#125;</span><span class="token class-name">halUARTCfg_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-串口初始化示例"><a href="#2-串口初始化示例" class="headerlink" title="2. 串口初始化示例"></a>2. 串口初始化示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InitUart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">halUARTCfg_t</span>   uartConfig<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>configured           <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  <span class="token comment">//</span>uartConfig<span class="token punctuation">.</span>baudRate             <span class="token operator">=</span> HAL_UART_BR_38400<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControl          <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControlThreshold <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> uartConfig<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>tx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>idleTimeout          <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    uartConfig<span class="token punctuation">.</span>intEnable            <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                uartConfig<span class="token punctuation">.</span>callBackFunc         <span class="token operator">=</span> SerialApp_CallBack<span class="token punctuation">;</span>   <span class="token function">HalUARTOpen</span> <span class="token punctuation">(</span>SERIAL_APP_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-串口实现"><a href="#3-串口实现" class="headerlink" title="3.串口实现"></a>3.串口实现</h2><p>​        串口的读操作函数为HalUARTRead()，主要功能是读取上位机通过串口发送至设备节点的数据。</p><p>​    uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)<br>​    @port：串口端口的设置，可以设置为串口0或串口1；<br>​    @buf：数据缓冲区；<br>​    @len：数据长度。<br>​    返回值:实际成功读取的字节数</p><p>串口的<strong>读</strong>操作函数为**HalUARTRead()**，主要功能是读取上位机通过串口发送至设备节点的数据。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">HalUARTRead</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 <span class="token operator">*</span>buf<span class="token punctuation">,</span> uint16 len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTReadISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAL_UART_USB</span></span>  <span class="token keyword">return</span> <span class="token function">HalUARTRx</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  串口的<strong>写</strong>操作函数为**HalUARTWrite()**，主要功能是实现向上位机或其他设备通过串口发送数据。<br>    uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)<br>    @port：串口端口的设置，可以设置为串口0或串口1；<br>    @buf：数据缓冲区；<br>    @len：数据长度。<br>    返回值:实际成功发送的字节数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 <span class="token operator">*</span>buf<span class="token punctuation">,</span> uint16 len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_DMA <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteDMA</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_0<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>HAL_UART_ISR <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> HAL_UART_PORT_1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">HalUARTWriteISR</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAL_UART_USB</span></span>  <span class="token function">HalUARTTx</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、程序设计"><a href="#三、程序设计" class="headerlink" title="三、程序设计"></a>三、程序设计</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SerialApp_CallBack</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 event<span class="token punctuation">)</span>   <span class="token comment">//接收数据会触发</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">HalUARTRead</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED0<span class="token punctuation">,</span>LED_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED1<span class="token punctuation">,</span>LED_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span><span class="token string">"byebye"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED0<span class="token punctuation">,</span>LED_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">led_ctrl</span><span class="token punctuation">(</span>LED1<span class="token punctuation">,</span>LED_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InitUart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">halUARTCfg_t</span>   uartConfig<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>configured           <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>baudRate             <span class="token operator">=</span> HAL_UART_BR_9600<span class="token punctuation">;</span> <span class="token comment">//设置波特率</span>uartConfig<span class="token punctuation">.</span>flowControl          <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>uartConfig<span class="token punctuation">.</span>flowControlThreshold <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> uartConfig<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>tx<span class="token punctuation">.</span>maxBufSize        <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  uartConfig<span class="token punctuation">.</span>idleTimeout          <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    uartConfig<span class="token punctuation">.</span>intEnable            <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                uartConfig<span class="token punctuation">.</span>callBackFunc         <span class="token operator">=</span> SerialApp_CallBack<span class="token punctuation">;</span>  <span class="token comment">//设置回调函数 </span><span class="token function">HalUARTOpen</span> <span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> GENERICAPP_MY_EVT1 <span class="token punctuation">)</span><span class="token comment">//事件</span>  <span class="token punctuation">&#123;</span><span class="token comment">//事件要做的事</span>    P1_0 <span class="token operator">=</span> <span class="token operator">!</span>P1_0<span class="token punctuation">;</span>    P1_1 <span class="token operator">=</span> <span class="token operator">!</span>P1_1<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"hello,are you ok?\r\n"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Start_DHT11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//读取dht11数据</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sprintf</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token string">"temperature:%d,humidity:%d\r\n"</span><span class="token punctuation">,</span>temperature<span class="token punctuation">,</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span>HAL_UART_PORT_0<span class="token punctuation">,</span><span class="token string">"error\r\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>events <span class="token operator">^</span> GENERICAPP_MY_EVT1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> 串口通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zstack协议栈</title>
      <link href="/posts/3fbe36e5/"/>
      <url>/posts/3fbe36e5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Zstack协议栈概述"><a href="#一、Zstack协议栈概述" class="headerlink" title="一、Zstack协议栈概述"></a>一、Zstack协议栈概述</h1><h2 id="什么是Zstack协议栈"><a href="#什么是Zstack协议栈" class="headerlink" title="什么是Zstack协议栈"></a>什么是Zstack协议栈</h2><p>为了使Zigbee的开发更加简单高效，TI公司推出了基于cc2530芯片的协议栈Z-STACK.协议栈的实质就是能实现各个功能的实例框架代码，我们想要实现自己的功能程序，只需要在协议栈的基础上修改或添加即可。</p><ul><li>​    Z-STACK的发展</li><li>​    由0.01版本 到 1.5.1a..</li><li>​    mesh: 之前的升级版本</li><li>​    HA:  家庭自动化(智能家居)</li><li>​    SE:  智能能源</li></ul><p>​    ….他们的区别是应用部分不同(初学者建议用早期的版本)</p><h1 id="二、Zstack协议栈结构"><a href="#二、Zstack协议栈结构" class="headerlink" title="二、Zstack协议栈结构"></a>二、Zstack协议栈结构</h1><p>​      Z-Stack协议栈符合ZigBee协议，由物理层、MAC层、网络层和应用层组成，由于Z-Stack协议栈是一个半开源的协议栈，MAC层和网络层的部分源代码是非开源的，因此我们学习的开源部分，主要包括main函数、APP层、ZDO层、NWK层和HAL层。</p><h2 id="1-工程目录结构"><a href="#1-工程目录结构" class="headerlink" title="1.工程目录结构"></a>1.工程目录结构</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130146.png" alt="image-20210526141312372" loading="lazy"></p><p><strong>APP</strong>： 应用层目录， 这是用户创建各种不同工程的区域， 在这个目录中包含了应用层的内容和这个项目的主要内容， 在协议栈里面一般是以操作系统的任务实现的。<br><strong>HAL</strong>： 硬件层目录， 包含有与硬件相关的配置和驱动及操作函数。<br><strong>MAC</strong>： MAC 层目录， 包含了 MAC 层的参数配置文件及其 MAC 的 LIB 库的函数接口文件。<br><strong>MT</strong>： 监控调试层， 主要用于调试目的， 即实现通过串口调试各层， 与各层进行直接交互。<br><strong>NWK</strong>： 网络层目录， 含网络层配置参数文件及网络层库的函数接口文件， APS 层库的函数接口。<br><strong>OSAL</strong>： 协议栈的操作系统。<br><strong>Profile</strong>： AF 层目录， 包含 AF 层处理函数文件。<br><strong>Security</strong>： 安全层目录， 安全层处理函数接口文件， 比如加密函数等。<br><strong>Services</strong>： 地址处理函数目录， 包括着地址模式的定义及地址处理函数。<br><strong>Tools</strong>： 工程配置目录， 包括空间划分及 ZStack 相关配置信息。<br><strong>ZDO</strong>： ZDO 目录。<br><strong>ZMac</strong>： MAC 层目录， 包括 MAC 层参数配置及 MAC 层 LIB 库函数回调处理函数。<br><strong>ZMain</strong>： 主函数目录， 包括入口函数 main（ ） 及硬件配置文件。<br><strong>Output</strong>： 输出文件目录， 这个 EW8051 IDE 自动生成的。    </p><h2 id="2-main函数解析"><a href="#2-main函数解析" class="headerlink" title="2.main函数解析"></a>2.main函数解析</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 关闭所有中断*/</span><span class="token function">osal_int_disable</span><span class="token punctuation">(</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 初始化硬件设备*/</span><span class="token function">HAL_BOARD_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*电源检测*/</span><span class="token function">zmain_vdd_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化I/O*/</span><span class="token function">InitBoard</span><span class="token punctuation">(</span> OB_COLD <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化硬件抽象层HAL驱动*/</span><span class="token function">HalDriverInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化NV*/</span><span class="token function">osal_nv_init</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化 MAC*/</span><span class="token function">ZMacInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*确定64位IEEE地址*/</span><span class="token function">zmain_ext_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化NV向量*/</span><span class="token function">zgInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NONWK</span></span><span class="token comment">/* AF层初始化/afInit();#endif/*初始化任务*/</span><span class="token function">osal_init_system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*开启中断*/</span><span class="token function">osal_int_enable</span><span class="token punctuation">(</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*硬件I/O初始化完毕*/</span><span class="token function">InitBoard</span><span class="token punctuation">(</span> OB_READY <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">zmain_dev_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 如果定义了LCD，初始化LCD */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LCD_SUPPORTED</span></span><span class="token function">zmain_lcd_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">WDT_IN_PM1</span></span><span class="token comment">/* 如果定义了看门狗，看门狗使能 */</span><span class="token function">WatchDogEnable</span><span class="token punctuation">(</span> WDTIMX <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*操作系统运行*/</span><span class="token function">osal_start_system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>osal_int_disable()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint8 <span class="token function">osal_int_disable</span><span class="token punctuation">(</span> uint8 interrupt_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*判断ID是否为中断ID*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> interrupt_id <span class="token operator">==</span> INTS_ALL <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*关掉所有中断*/</span><span class="token function">HAL_DISABLE_INTERRUPTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*中断关闭成功，返回SUCCESS */</span><span class="token keyword">return</span> <span class="token punctuation">(</span> SUCCESS <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">/*如果ID与INST_ALL不同，返回INVALID_INTERRUPT_ID*/</span><span class="token keyword">return</span> <span class="token punctuation">(</span> INVALID_INTERRUPT_ID <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-APP层解析"><a href="#3-APP层解析" class="headerlink" title="3.APP层解析"></a>3.APP层解析</h2><p>OSAL_SampleApp.c中包含osalInitTasks()与taskArr[]。</p><p><strong>osalInitTasks()函数主要功能是为任务分配空间</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">osalInitTasks</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uint8 taskID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tasksEvents <span class="token operator">=</span> <span class="token punctuation">(</span>uint16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">osal_mem_alloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> uint16 <span class="token punctuation">)</span> <span class="token operator">*</span> tasksCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">osal_memset</span><span class="token punctuation">(</span> tasksEvents<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span> uint16 <span class="token punctuation">)</span> <span class="token operator">*</span> tasksCnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">macTaskInit</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">nwk_init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Hal_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span> MT_TASK <span class="token punctuation">)</span></span></span>    <span class="token function">MT_TaskInit</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">APS_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FRAGMENTATION <span class="token punctuation">)</span></span></span>    <span class="token function">APSF_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">ZDApp_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FREQ_AGILITY <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_PANID_CONFLICT <span class="token punctuation">)</span></span></span>    <span class="token function">ZDNwkMgr_Init</span><span class="token punctuation">(</span> taskID<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">SampleApp_Init</span><span class="token punctuation">(</span> taskID <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130152.png" alt="image-20210526142358533" loading="lazy"></p><p><strong>OSAL_SampleApp.c</strong></p><p><strong>tasksArr中存放了事件处理回调函数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> pTaskEventHandlerFn tasksArr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    macEventLoop<span class="token punctuation">,</span>    nwk_event_loop<span class="token punctuation">,</span>    Hal_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span> MT_TASK <span class="token punctuation">)</span></span></span>    MT_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    APS_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FRAGMENTATION <span class="token punctuation">)</span></span></span>    APSF_ProcessEvent<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    ZDApp_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_FREQ_AGILITY <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span> <span class="token punctuation">(</span> ZIGBEE_PANID_CONFLICT <span class="token punctuation">)</span></span></span>    ZDNwkMgr_event_loop<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    SampleApp_ProcessEvent<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130157.png" alt="image-20210526142515869" loading="lazy"></p><p><strong>Z-Stack协议栈的APP层主要功能是实现用户定义的事件，APP层由5个文件组成</strong>    </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130201.png" alt="image-20210526142553502" loading="lazy"></p><blockquote><p>  SamplApp.c文件主要有两个功能：<br>      (1)对应用层用户定义的任务<br>      (2)进行初始化；调用事件处理函数。</p></blockquote><ul><li>用户任务初始化函数SampleApp_Init()</li><li>任务处理函数SampleApp_ProcessEvent()</li><li>按键处理事件SampleApp_HandleKeys()</li><li>数据发送函数SampleApp_SendFlashMessage()</li><li>数据发送函数SampleApp_SendPeriodicMessage()</li><li>数据接收函数SampleApp_MessageMSGCB()</li></ul><p><strong>SampleApp_Init()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SampleApp_Init</span><span class="token punctuation">(</span> uint8 task_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SampleApp_TaskID <span class="token operator">=</span> task_id<span class="token punctuation">;</span>    SampleApp_NwkState <span class="token operator">=</span> DEV_INIT<span class="token punctuation">;</span>    SampleApp_TransID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> BUILD_ALL_DEVICES <span class="token punctuation">)</span></span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">readCoordinatorJumper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        zgDeviceLogicalType <span class="token operator">=</span> ZG_DEVICETYPE_COORDINATOR<span class="token punctuation">;</span>    <span class="token keyword">else</span>        zgDeviceLogicalType <span class="token operator">=</span> ZG_DEVICETYPE_ROUTER<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> HOLD_AUTO_START <span class="token punctuation">)</span></span></span>    <span class="token function">ZDOInitDevice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token comment">/*SampleApp_Periodic_DstAddr地址模式初始化为广播地址*/</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>addrMode <span class="token operator">=</span>    <span class="token punctuation">(</span><span class="token class-name">afAddrMode_t</span><span class="token punctuation">)</span>AddrBroadcast<span class="token punctuation">;</span>    <span class="token comment">/* SampleApp_Periodic_DstAddr端点初始化*/</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>    SampleApp_Periodic_DstAddr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>shortAddr <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>addrMode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">afAddrMode_t</span><span class="token punctuation">)</span>afAddrGroup<span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>    SampleApp_Flash_DstAddr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>shortAddr <span class="token operator">=</span> SAMPLEAPP_FLASH_GROUP<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130206.png" alt="image-20210526143651898" loading="lazy"></p><p><strong>SampleApp_Init()</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SampleApp_epDesc<span class="token punctuation">.</span>endPoint <span class="token operator">=</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>task_id <span class="token operator">=</span> <span class="token operator">&amp;</span>SampleApp_TaskID<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>simpleDesc<span class="token operator">=</span> <span class="token punctuation">(</span>SimpleDescriptionFormat_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>SampleApp_SimpleDesc<span class="token punctuation">;</span>SampleApp_epDesc<span class="token punctuation">.</span>latencyReq <span class="token operator">=</span> noLatencyReqs<span class="token punctuation">;</span><span class="token function">afRegister</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>SampleApp_epDesc <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">RegisterForKeys</span><span class="token punctuation">(</span> SampleApp_TaskID <span class="token punctuation">)</span><span class="token punctuation">;</span>SampleApp_Group<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">;</span><span class="token function">osal_memcpy</span><span class="token punctuation">(</span> SampleApp_Group<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"Group 1"</span><span class="token punctuation">,</span> <span class="token number">7</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">aps_AddGroup</span><span class="token punctuation">(</span> SAMPLEAPP_ENDPOINT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SampleApp_Group <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span> LCD_SUPPORTED <span class="token punctuation">)</span></span></span><span class="token function">HalLcdWriteString</span><span class="token punctuation">(</span> <span class="token string">"SampleApp"</span><span class="token punctuation">,</span> HAL_LCD_LINE_1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130210.png" alt="image-20210526143749526" loading="lazy"></p><p><strong>SampleApp_ProcessEvent()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130215.png" alt="image-20210526143838169" loading="lazy"></p><p><strong>SampleApp_ProcessEvent()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130219.png" alt="image-20210526143903337" loading="lazy"></p><p><strong>SampleApp_HandleKeys()</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130223.png" alt="image-20210526143922288" loading="lazy"></p><p><strong>SampleApp_MessageMSGCB()</strong></p><p>SampleApp_MessageMSGCB()函数主要实现数据接收功能，数据的接收通过判断簇ID来<br>与发送端发送的数据进行匹配。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130227.png" alt="image-20210526144842589" loading="lazy"></p><p><strong>SampleApp_SendPeriodicMessage()</strong></p><p>SampleApp_SendPeriodicMessage()函数主要功能是实现周期性数据的发送，通过调用<br>AF_DataRequest()函数进行数据的发送。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130231.png" alt="image-20210526144912513" loading="lazy"></p><p><strong>SampleApp.h</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130234.png" alt="image-20210526144937850" loading="lazy"></p><h2 id="4-ZDO层解析"><a href="#4-ZDO层解析" class="headerlink" title="4.ZDO层解析"></a>4.ZDO层解析</h2><p><strong>目录结构</strong></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130239.png" alt="image-20210526145815215" loading="lazy"></p><p>ZDApp_Init()函数：初始化ZDO网络设备短地址；获得64位IEEE地址信息；ZDO层初始化；网络设备启动。</p><h2 id="5-NWK层解析"><a href="#5-NWK层解析" class="headerlink" title="5.NWK层解析"></a>5.NWK层解析</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h3><p><img src="https://raw.githubusercontent.com/Editblog/PicGo/main/img/20210527185136.png" alt="image-20210527185136679" loading="lazy"></p><h3 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a><strong>网络拓扑结构</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*星型网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_STAR</span>         <span class="token expression"><span class="token number">0</span></span></span><span class="token comment">/*树型网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_TREE</span>         <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/*网状网络*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NWK_MODE_MESH</span>         <span class="token expression"><span class="token number">2</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络参数设置"><a href="#网络参数设置" class="headerlink" title="网络参数设置"></a><strong>网络参数设置</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*协议栈模式参数*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NETWORK_SPECIFIC</span>      <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOME_CONTROLS</span>         <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIGBEEPRO_PROFILE</span>    <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GENERIC_STAR</span>          <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GENERIC_TREE</span>          <span class="token expression"><span class="token number">4</span></span></span><span class="token comment">/*信道设置*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_868MHZ</span>     <span class="token expression"><span class="token number">0x00000001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_915MHZ</span>     <span class="token expression"><span class="token number">0x000007FE</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHANNELS_24GHZ</span>      <span class="token expression"><span class="token number">0x07FFF800</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-HAL层解析"><a href="#6-HAL层解析" class="headerlink" title="6.HAL层解析"></a>6.HAL层解析</h2><p><img src="https://raw.githubusercontent.com/Editblog/PicGo/main/img/20210527185224.png" alt="20210527184135.png" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">HAL目录Common：实现了硬件初始化函数<span class="token function">Hal_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、硬件抽象层驱动初始化<span class="token function">HalDriverInit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>函数和硬件抽象层事件处理函数<span class="token function">Hal_ProcessEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；Include：中主要包含了硬件资源的定义与函数声明；Target：主要为LED等硬件资源进行配置、实现硬件资源的实现函数；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Hal_Init()函数主要为硬件抽象层注册任务ID</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Hal_Init</span><span class="token punctuation">(</span> uint8 task_id <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 注册任务 ID */</span>Hal_TaskID <span class="token operator">=</span> task_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HalDriverInit()函数主要实现硬件资源的初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HalDriverInit</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*定时器初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_TIMER<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_TIMER <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalTimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*ADC初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_ADC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_ADC <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalAdcInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*DMA初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_DMA<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_DMA <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalDmaInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*Flash初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_FLASH<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_FLASH <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalFlashInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*AES初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_AES<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_AES <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalAesInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*LCD初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_LCD<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LCD <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLcdInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*LED初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_LED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LED <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLedInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*UART初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_UART<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_UART <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalUARTInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*KEY按键初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_KEY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_KEY <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalKeyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/*SPI初始化*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_SPI<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_SPI <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalSpiInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HHal_ProcessEvent()函数由APP层OSAL_SampleApp.c文件调用，主要实现硬件抽象层的各种事件处理，比如系统消息事件、LED闪烁事件、按键事件和睡眠模式事件。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint16 <span class="token function">Hal_ProcessEvent</span><span class="token punctuation">(</span> uint8 task_id<span class="token punctuation">,</span> uint16 events <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint8 <span class="token operator">*</span>msgPtr<span class="token punctuation">;</span><span class="token comment">/*系统消息事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> SYS_EVENT_MSG <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>msgPtr <span class="token operator">=</span> <span class="token function">osal_msg_receive</span><span class="token punctuation">(</span>Hal_TaskID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>msgPtr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">osal_msg_deallocate</span><span class="token punctuation">(</span> msgPtr <span class="token punctuation">)</span><span class="token punctuation">;</span>msgPtr <span class="token operator">=</span> <span class="token function">osal_msg_receive</span><span class="token punctuation">(</span> Hal_TaskID <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> events <span class="token operator">^</span> SYS_EVENT_MSG<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*LED闪烁事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> HAL_LED_BLINK_EVENT <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">defined</span> <span class="token punctuation">(</span>BLINK_LEDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_LED <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token function">HalLedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* BLINK_LEDS &amp;&amp; HAL_LED */</span></span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_LED_BLINK_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*按键事件*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> HAL_KEY_EVENT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>defined HAL_KEY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>HAL_KEY <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span><span class="token comment">/* Check for keys */</span><span class="token function">HalKeyPoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Hal_KeyIntEnable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">osal_start_timerEx</span><span class="token punctuation">(</span> Hal_TaskID<span class="token punctuation">,</span> HAL_KEY_EVENT<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_KEY_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*睡眠模式*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">POWER_SAVING</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span> events <span class="token operator">&amp;</span> HAL_SLEEP_TIMER_EVENT <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">halRestoreSleepLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> events <span class="token operator">^</span> HAL_SLEEP_TIMER_EVENT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    HTarget hal_board_cfg.h文件中为硬件资源LED等进行配置，在官方的协议栈中定义了3个LED，分别接CC2530的P1_0、P1_1和P1_4引脚。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* LED1配置 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_SBIT</span>         <span class="token expression">P1_0</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_DDR</span>          <span class="token expression">P1DIR</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HAL_BOARD_CC2530EB_REV17</span></span>  <span class="token comment">/* LED2配置 */</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_SBIT</span>         <span class="token expression">P1_1</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_DDR</span>          <span class="token expression">P1DIR</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED2_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span>   <span class="token comment">/* LED3配置 */</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_BV</span>           <span class="token expression"><span class="token function">BV</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_SBIT</span>         <span class="token expression">P1_4</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_DDR</span>          <span class="token expression">P1DIR</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED3_POLARITY</span>     <span class="token expression">ACTIVE_HIGH</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制LED开关状态。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_BOARD_CC2530EB_REV17<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_PA_LNA<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span> <span class="token punctuation">(</span>HAL_PA_LNA_CC2590<span class="token punctuation">)</span></span></span><span class="token comment">/*打开LED*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED1_SBIT <span class="token operator">=</span> <span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED2_SBIT <span class="token operator">=</span> <span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">st</span><span class="token punctuation">(</span> LED3_SBIT <span class="token operator">=</span> <span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_OFF_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">HAL_TURN_OFF_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token comment">/*关闭LED*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED1_SBIT <span class="token operator">=</span> <span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED2_SBIT <span class="token operator">=</span> <span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">st</span><span class="token punctuation">(</span> LED3_SBIT <span class="token operator">=</span> <span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TURN_ON_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">HAL_TURN_ON_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token comment">/*LED状态改变*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED1_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED1_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED1_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED2_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED2_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED2_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">st</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>LED3_SBIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> LED3_SBIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> LED3_SBIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_TOGGLE_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token function">HAL_TOGGLE_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED1</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED1_POLARITY</span> <span class="token punctuation">(</span>LED1_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED2</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED2_POLARITY</span> <span class="token punctuation">(</span>LED2_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED3</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span><span class="token function">LED3_POLARITY</span> <span class="token punctuation">(</span>LED3_SBIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_STATE_LED4</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token function">HAL_STATE_LED1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在Drives文件中定义了硬件资源的驱动函数文件</p><ul><li><strong>LED</strong>：在hal_led.c文件中实现，为LED提供驱动函数；</li><li><strong>ADC</strong>：在hal_adc.c文件中实现，为ADC提供驱动函数；</li><li><strong>KEY</strong>：在hal_key.c文件中实现，为按键提供驱动函数；</li><li><strong>LCD</strong>：在hal_LCD.c文件中实现，为LCD提供驱动函数；</li><li><strong>定时器</strong>：在hal_timer.c文件中实现，为定时器提供驱动函数；</li><li><strong>串口</strong>：在hal_uart.c文件中实现，为串口提供驱动函数；</li><li><strong>DMA</strong>：在hal_dma.c文件中实现，为DMA提供驱动函数；</li><li><strong>flash</strong>：在hal_flash.c文件中实现，为flash提供驱动函数。</li></ul><p>APP应用层调用LED设置函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">HalLedSet</span><span class="token punctuation">(</span>uint8 leds<span class="token punctuation">,</span>uint8 mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">HalLedBlink</span><span class="token punctuation">(</span>uint8 leds<span class="token punctuation">,</span>uint8 numBlink<span class="token punctuation">,</span>uint8 percend<span class="token punctuation">,</span>uint16 period<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20210527185047.png" alt="image-20210527185047722" loading="lazy"></p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> 协议栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee的GPIO与外部中断原理</title>
      <link href="/posts/4adf1e22/"/>
      <url>/posts/4adf1e22/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-cc2530最小系统"><a href="#一、-cc2530最小系统" class="headerlink" title="一、 cc2530最小系统"></a>一、 cc2530最小系统</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130053.png" alt="image-20210525142548926" loading="lazy"></p><h1 id="二、GPIO概述"><a href="#二、GPIO概述" class="headerlink" title="二、GPIO概述"></a>二、GPIO概述</h1><p> <img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130107.png" alt="image-20210525143732557" loading="lazy"></p><h1 id="三、IO口的输入输出配置"><a href="#三、IO口的输入输出配置" class="headerlink" title="三、IO口的输入输出配置"></a>三、IO口的输入输出配置</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130112.png" alt="image-20210525143800845" loading="lazy"></p><p> <strong>上拉输入</strong>：有上拉电阻</p><p>​                按键未按下时端口接高电平，即高电平 1  状态—3.3v</p><p>​                按键按下时端口接低电平，即低电平 0 状态——-0</p><p> <strong>下拉输入</strong>：有下拉电阻</p><p>​                 按键未按下时端口接低电平，即低电平 0 状态—0v</p><p>​                 按键按下时端口接高电平，即高电平 1 状态——3.3v</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130119.png" alt="image-20210525143939066" loading="lazy"></p><h1 id="四、外部中断"><a href="#四、外部中断" class="headerlink" title="四、外部中断"></a>四、外部中断</h1><h2 id="1-什么是外部中断"><a href="#1-什么是外部中断" class="headerlink" title="1.什么是外部中断"></a>1.什么是外部中断</h2><p>外部中断是单片机实时地处理外部事件的一种内部机制。当某种外部事件发生时，单片机的中断系统将迫使CPU暂停正在执行的程序，转而去进行中断事件的处理；中断处理完毕后．又返回被中断的程序处，继续执行下去。</p><h2 id="2-外部中断的作用"><a href="#2-外部中断的作用" class="headerlink" title="2.外部中断的作用"></a>2.外部中断的作用</h2><h3 id="1-实时处理功能"><a href="#1-实时处理功能" class="headerlink" title="(1)实时处理功能"></a>(1)实时处理功能</h3><p>在实时控制中，现场的各种参数、信息均随时问和现场而变化。这些外界变量可根据要求随时向CPU发出中断申请．请求CPU及时处珲中断请求，如中断条件</p><h3 id="2-故障处理功能"><a href="#2-故障处理功能" class="headerlink" title="(2)故障处理功能"></a>(2)故障处理功能</h3><p>针对难以预料的情况或故障，如掉电、存储出错、运算溢出等，可通过中断系统由故障源向CPU发出中断请求，再由CPU转到相应的故障处理程序进行处理。</p><h2 id="3-cc2530的外部中断原理"><a href="#3-cc2530的外部中断原理" class="headerlink" title="3.cc2530的外部中断原理"></a>3.cc2530的外部中断原理</h2><p> CC2530 有 21 个数字 I&#x2F;O 引脚，可以配置为通用数字 I&#x2F;O 或外设 I&#x2F;O 信号，配置为连接到 ADC、定时器或 USART 外设。这些 I&#x2F;O 口的用途可以通过一系列寄存器配置，由用户软件加以实现。</p><p>​    I&#x2F;O 端口具备如下重要特性：</p><ul><li>​        21 个数字 I&#x2F;O 引脚</li><li>​        可以配置为通用 I&#x2F;O 或外部设备 I&#x2F;O</li><li>​        输入口具备上拉或下拉能力</li><li>​        具有外部中断能力</li></ul><p>​     21 个 I&#x2F;O 引脚都可以用作于外部中断源输入口。因此如果需要外部设备可以产生中断。外部中断功能也可以从睡眠模式唤醒设备。</p><p>​    通用 I&#x2F;O 引脚设置为输入后，可以用于产生中断。中断可以设置在外部信号的上升或下降沿触发。 P0、 P1 或 P2 端口都有中断使能位，对位于 IENl-2 寄存器内的端口所有的位都是公共的，如下：</p><ul><li><p>IENI.P0IE： P0 中断使能</p></li><li><p>IEN2.PIIE： P1 中断使能</p></li><li><p>IEN2.P2IE： P2 中断使能</p></li></ul><p>除了这些公共中断使能之外，每个端口的位都有位于 SFR 寄存器 P0IEN、P1IEN 和 P2IEN 的单独的中断使能。即使配置为外设 I&#x2F;O 或通用输出的 I&#x2F;O 引脚使能时都有中断产生。 </p><p>当中断条件发生在 I&#x2F;O 引脚之一上面，P0-P2 中断标志寄存器 P0IFG、P1IFG或 P2IFG 中相应的中断状态标志将设置为 1。不管引脚是否设置了它的中断使能位，中断状态标志都被设置。当中断已经执行，中断状态标志被清除，该标志写入 0。这个标志必须在清除 CPU 端口中断标志（ PxIF）之前被清除。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130124.png" alt="image-20210525164054625" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130128.png" alt="image-20210525164314863" loading="lazy"></p><p>用于中断的 SFR 寄存器描述在下一节。寄存器总结如下：</p><ul><li>P0IEN: P0 中断使能</li><li>P1IEN： P1 中断使能</li><li>P2IEN： P2 中断使能</li><li>PICTL： P0、 P1 和 P2 触发沿设置</li><li>P0FG： P0 中断标志</li><li>P1IFG： P1 中断标志</li><li>P2IFG： P2 中断标志</li></ul><h2 id="4-外部中断配置步骤"><a href="#4-外部中断配置步骤" class="headerlink" title="4.外部中断配置步骤"></a>4.外部中断配置步骤</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215130134.png" alt="image-20210525170345047" loading="lazy"></p><p>(1)初始化IO口工作在普通IO模式，上拉输入状态</p><p>(2)首先打开IO口组中断允许位&#x3D;&#x3D;&#x3D;&gt;PxIE</p><ul><li>​    P0IE  是 IEN1(0xB8)的第5位</li><li>​    P1IE  是 IEN2(0x9A)的第4位</li><li>​    P2IE  是 IEN2(0X9A)的第1位</li></ul><p>(3)打开组内对应的具体某IO口中断&#x3D;&#x3D;&#x3D;&#x3D;&gt;PxIEN</p><p>(4)设置是上升沿还是下降沿触发&#x3D;&#x3D;&#x3D;&gt;PICTL(0,代表上升沿触发；1，代表下降沿触发)</p><p>(5)打开CPU总中断 EA&#x3D;1;    </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//(1)初始化IO口工作在普通IO模式，上拉输入状态</span>    <span class="token function">key_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//(2)首先打开IO口组中断允许位===>PxIE</span>    IEN2 <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">//0001 0000 0x10</span>    <span class="token comment">//(3)打开组内对应的具体某IO口中断====>PxIEN</span>    P1IEN <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0100 0x40</span>    <span class="token comment">//(4)设置是上升沿还是下降沿触发===>PICTL(0,代表上升沿触发；1，代表下降沿触发)</span>    PICTL <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0010 0x02 设置为下降沿触发</span>    <span class="token comment">//(5)打开CPU总中断 EA=1;</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-外部中断服务程序示例"><a href="#5-外部中断服务程序示例" class="headerlink" title="5.外部中断服务程序示例"></a>5.外部中断服务程序示例</h2><p><strong>led_key.c</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led_key.h"</span></span><span class="token comment">/*@led init：对LED进行初始化@retval:none @note:LED对应的引脚是P10和P11，初始化为普通IO，输出模式*/</span><span class="token keyword">void</span> <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P1SEL <span class="token operator">&amp;=</span> <span class="token number">0xfc</span><span class="token punctuation">;</span>  <span class="token comment">//1111 1100  把P1_0和P1_1设置为通IO模式</span>    P1DIR <span class="token operator">|=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0011  把P1_0和P1_1设置为输出模式</span>    P1_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    P1_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*@led ctr1：对LED的状态进行控的函数@led num：指定对哪一盏LED等进行控制，可选择为LEDO,LED1@led state：指定LED的状态，可选择为 LED ON, LED OFF @retval：none*/</span><span class="token keyword">void</span> <span class="token function">led_ctrl</span><span class="token punctuation">(</span><span class="token keyword">int</span> led_num<span class="token punctuation">,</span><span class="token keyword">int</span> led_state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>led_num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> LED0<span class="token operator">:</span>        P1_0 <span class="token operator">=</span> led_state<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> LED1<span class="token operator">:</span>        P1_1 <span class="token operator">=</span> led_state<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*@key init：按键的初始化函数@retval none @note：按键应的引是P12，应初始化为普通IO，上拉输入模式*/</span><span class="token keyword">void</span> <span class="token function">key_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P1SEL <span class="token operator">&amp;=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span>   <span class="token comment">// 1111 1011 把P12设置为普通IO模式</span>    P1DIR <span class="token operator">&amp;=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span>   <span class="token comment">// 1111 1011 把P12设置为输入模式</span>    P1INP <span class="token operator">&amp;=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span>   <span class="token comment">// 1111 1011 把P12设置为上下拉模式</span>    P2INP <span class="token operator">&amp;=</span> <span class="token number">0xBF</span><span class="token punctuation">;</span>   <span class="token comment">// 1011 1111 把P1组设置为上拉模式</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">key_status</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> P1_2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*@exti_init：中断初始化函数@retval none @note：none*/</span><span class="token keyword">void</span> <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//(1)初始化IO口工作在普通IO模式，上拉输入状态</span>    <span class="token function">key_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//(2)首先打开IO口组中断允许位===>PxIE</span>    IEN2 <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">//0001 0000 0x10</span>    <span class="token comment">//(3)打开组内对应的具体某IO口中断====>PxIEN</span>    P1IEN <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0100 0x40</span>    <span class="token comment">//(4)设置是上升沿还是下降沿触发===>PICTL(0,代表上升沿触发；1，代表下降沿触发)</span>    PICTL <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//0000 0010 0x02 设置为下降沿触发</span>    <span class="token comment">//(5)打开CPU总中断 EA=1;</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">587</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">optimize<span class="token operator">=</span>none       </span><span class="token comment">//不进行编译优化</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vector<span class="token operator">=</span>P1INT_VECTOR </span><span class="token comment">//P1组引发中断,vector中断矢量表,下面这段代码必须放在这个地方</span></span>__interrupt <span class="token keyword">void</span> <span class="token function">exint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//P1组</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>P1IFG <span class="token operator">&amp;</span> <span class="token number">0X04</span><span class="token punctuation">)</span><span class="token comment">//0000 0100</span>      <span class="token punctuation">&#123;</span><span class="token comment">//确定是P1_2产生了外部中断</span>             <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按键消抖</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>P1_2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>        <span class="token comment">//中断要做的事情</span>                P1_0 <span class="token operator">=</span> <span class="token operator">!</span>P1_0<span class="token punctuation">;</span>                P1_1 <span class="token operator">=</span> <span class="token operator">!</span>P1_1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      P1IFG <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//把中断状态标志位清0</span>      P1IF <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//组中断标志位清0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>led_key.h</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__LED_KEY_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LED_KEY_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token keyword">enum</span> <span class="token class-name">LED_NUM</span><span class="token punctuation">&#123;</span>LED0<span class="token punctuation">,</span>LED1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">LED_STATE</span><span class="token punctuation">&#123;</span>LED_OFF<span class="token punctuation">,</span>LED_ON<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">KEY_STATUS</span><span class="token punctuation">&#123;</span>KEY_DOWN<span class="token punctuation">,</span>KEY_UP<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">led_ctrl</span><span class="token punctuation">(</span><span class="token keyword">int</span> led_num<span class="token punctuation">,</span><span class="token keyword">int</span> led_state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">key_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">key_status</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>main.c</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led_key.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GPIO </tag>
            
            <tag> ZigBee </tag>
            
            <tag> cc2530 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IAR软件安装</title>
      <link href="/posts/55cac7e0/"/>
      <url>/posts/55cac7e0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Zigbee概述"><a href="#一、Zigbee概述" class="headerlink" title="一、Zigbee概述"></a>一、Zigbee概述</h1><h2 id="1-什么是Zigbee"><a href="#1-什么是Zigbee" class="headerlink" title="1.什么是Zigbee"></a>1.什么是Zigbee</h2><p>ZigBee是一种近距离、低复杂度的双向无线通信系统，主要用于距离短、功耗低、传输速率不高的电子设备之间进行数据传输，且具有低功耗、低成本、大容量、时延短、可靠性高以及网络拓扑结构灵活的特点。</p><p>Zigbee本质就是无线设备之间的一种通信方式，类似于人和人之间用普通话交流，普通话就是一种通信方式。Zigbee，Zigbee通信方式，Zigbee协议说的都是一回事。</p><p>Zigbee的主要作用是用来构建无线局域网。         </p><h2 id="2-各通信方式的比较"><a href="#2-各通信方式的比较" class="headerlink" title="2.各通信方式的比较"></a>2.各通信方式的比较</h2><p>蓝牙：功耗比较低，组建网络节点数少(7~8个)</p><p>WIFI：通信速率比较大，功耗大，等等</p><p>Zigbee：<br>    优点：可以组建大规模的网络，功耗低(TI cc2530正常工作电流8mA,最低工作电流只有几uA)<br>    缺点：通信速率比较小( 250KBPS)</p><p><strong>注意</strong>：Zigbee只是完成数据通信的工作，要实现具体的使用的功能系统，一般会把Zigbee模块连接到计算机(处理器)，计算机通过编好的程序来对整个系统进行监控。</p><h2 id="3-相关概念"><a href="#3-相关概念" class="headerlink" title="3.相关概念"></a>3.相关概念</h2><p>Zigbee联盟：制定Zigbee协议的协会组织(美国)</p><p>TI(德州仪器)：一个Zigbee芯片厂商，主要把Zigbee协议用于推广和实际应用。除了TI，还有ember,飞思卡尔等等</p><p>Zstack：TI公司推出Zigbee软件上支持的协议栈。实质就是一堆示例代码。</p><p>cc2530：TI公司推出的支持Zigbee底层协议的一种芯片(8051单片机内核)</p><p>​                                cc2530F256  TI  58J</p><p>IAR：写Zigbee程序的一个软件，集成开发工具，编辑器，编译器，下载器，仿真器。</p><h2 id="4-Zigbee网络体系结构"><a href="#4-Zigbee网络体系结构" class="headerlink" title="4.Zigbee网络体系结构"></a>4.Zigbee网络体系结构</h2><p>​    ZigBee协议基础为IEEE 802.15.4，ZigBee联盟在IEEE 802.15.4基础之上重新定义了网络层和应用层。Zigbee使用全球免费频段进行通讯，能够在三个不同的频段上通讯。全球通用的频段是 2.400GHz-2.484GHz，欧洲采用的频段是 868.0 MHz-868.66MHz，美国采用的频段是 902MHz-928MHz。传输速率分别为 250kbps 20kbps 和 40kbps。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125426.png" alt="image-20210524144248153" loading="lazy"></p><h1 id="二-IAR软件的安装使用"><a href="#二-IAR软件的安装使用" class="headerlink" title="二.IAR软件的安装使用"></a>二.IAR软件的安装使用</h1><h2 id="1-IAR软件的安装与注册"><a href="#1-IAR软件的安装与注册" class="headerlink" title="1.IAR软件的安装与注册"></a>1.IAR软件的安装与注册</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125452.png" alt="image-20210524144514258" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125457.png" alt="image-20210524144603942" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125500.png" alt="image-20210524144617238" loading="lazy"></p><h2 id="2-IAR工程建立"><a href="#2-IAR工程建立" class="headerlink" title="2.IAR工程建立"></a>2.IAR工程建立</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125507.png" alt="image-20210524160638596" loading="lazy"></p><p>(1)先创建一个工作空间</p><p>​     File–&gt;new–&gt;workspace</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125507.png" alt="image-20210524160439296" loading="lazy"><br>(2)创建一个工程</p><p>​    Project–&gt;Create New Project–&gt;Empty project–&gt;0K–&gt;保存到指定目录</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125528.png" alt="image-20210524160521787" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125533.png" alt="image-20210524160541970" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125539.png" alt="image-20210524160725839" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125542.png" alt="image-20210524160739328" loading="lazy"></p><p>(3)新建一个文件–&gt;保存为.c文件</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125548.png" alt="image-20210524161451809" loading="lazy"></p><p>(4)把.c文件添加进工程</p><p>​    右击”工程名-Debug”–&gt;Add</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125557.png" alt="image-20210524161527552" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125601.png" alt="image-20210524161540404" loading="lazy"></p><p>(5)编译：保存工作空间到已创建的工程文件夹中</p><h2 id="3-选项配置"><a href="#3-选项配置" class="headerlink" title="3.选项配置"></a>3.选项配置</h2><p>  “工程名-Debug”–&gt;options    </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125605.png" alt="image-20210524161841240" loading="lazy">    (1)General Options–&gt;Device 选择Texas Instruments cc2530F256<br>    <img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125609.png" alt="image-20210524161944984" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125616.png" alt="image-20210524162035248" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125620.png" alt="image-20210524162143659" loading="lazy"></p><p>​    (2)Linker–&gt;Output–&gt;Override default勾上，Allow C-SPY-specific extra output file 勾上</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125624.png" alt="image-20210524162850892" loading="lazy"><br>    (3)Debugger–&gt;Driver–&gt;选择Texas Instrments</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125630.png" alt="image-20210524163015925" loading="lazy"></p><h1 id="三、驱动安装"><a href="#三、驱动安装" class="headerlink" title="三、驱动安装"></a>三、驱动安装</h1><p>在设备管理器里，未安装驱动显示的是SmartRF04EB，装好驱动后，显示的则是CC2430DB</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125634.png" alt="20210524163315.png" loading="lazy"></p><blockquote><p>  哈希值错误解决办法<br>  1.Windows键+ R，输入shutdown.exe &#x2F;r &#x2F;o &#x2F;f &#x2F;t 00 ，系统会重新启动一个“选择一个选项”<br>  2从“选择一个选项”屏幕上，选择“疑难解答” ，选择从“疑难解答”屏幕“高级选项” ，选择从“高级选项”屏幕“Windows启动设置” ，点击“重新启动”按钮，系统将重新启动，以“高级启动选项”屏幕 ；重启<br>  3.这会重启之后就跳出来安全模式等列表了<br>  4.选择倒数第三个，禁用强制驱动程序签名，对应哪个数字就按那个数字。<br>  5.重启，按照一般方法驱动就可以成功安装了</p></blockquote><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125638.png" alt="image-20210524164934779" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125642.png" alt="image-20210524164954508" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125646.png" alt="image-20210524165131848" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125702.png" alt="image-20210524165200626" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125659.png" alt="image-20210524165209775" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125709.png" alt="20210524165248.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125715.png" alt="image-20210524165314844" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125911.jpeg" alt="IMG_20210524_164615" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125836.jpeg" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125901.png" alt="image-20210524213027330" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125854.png" alt="image-20210524213040881" loading="lazy"></p><h1 id="四、编译与仿真"><a href="#四、编译与仿真" class="headerlink" title="四、编译与仿真"></a>四、编译与仿真</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125752.png" alt="image-20210524165506833" loading="lazy"></p><h1 id="五、生成Hex文件设置"><a href="#五、生成Hex文件设置" class="headerlink" title="五、生成Hex文件设置"></a>五、生成Hex文件设置</h1><p>“工程名-Debug”–&gt;options ，Linker–&gt;Extra Output–&gt;Genetare extra outputfile 勾上，Override defualt勾上–&gt;命名为.hex文件，output format :intel-extended–&gt;OK</p><p>​    再次编译后就会在 Debug&#x2F;Exe目录中生成.hex文件</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125749.png" alt="image-20210524170747455" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125743.png" alt="image-20210524171410614" loading="lazy"></p><h1 id="六、ZigBee核心控制器"><a href="#六、ZigBee核心控制器" class="headerlink" title="六、ZigBee核心控制器"></a>六、ZigBee核心控制器</h1><p>无线通信采用Ti Zigbee方案。Zigbee节点采用Ti(德州仪器)公司 CC2530，GEC-CC2530有21个数字输入&#x2F;输出引脚，可以配置为通用数字I&#x2F;O或外设I&#x2F;O信号，外设I&#x2F;O可连接到ADC、定时器或USART等。</p><p>其中21个I&#x2F;O 引脚分成3 个端口(端口0、端口1 和端口2，表示为P0、P1 和P2),其中，P0和P1 每组有8个IO引脚，而P2组仅有5 个引脚实物如图。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220215125737.png" alt="image-20210524213506210" loading="lazy"></p><h1 id="七、代码烧录测试"><a href="#七、代码烧录测试" class="headerlink" title="七、代码烧录测试"></a>七、代码烧录测试</h1><p>LED闪烁</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iocc2530.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> uchar<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  uint<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED0</span> <span class="token expression">P1_0                </span><span class="token comment">//定义P1.0口为LED0控制端</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1</span> <span class="token expression">P1_1                </span><span class="token comment">//定义P1.0口为LED1控制端</span></span><span class="token comment">//点亮两盏LED灯</span><span class="token keyword">void</span> <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P1DIR <span class="token operator">|=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>    LED0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LED1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span>uint msec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     uint i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>msec<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">535</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                      <span class="token punctuation">&#123;</span>        LED1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  LED0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               LED1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   LED0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ZigBee </category>
          
          <category> 课程设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee </tag>
            
            <tag> IAR软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派驱动57步进电机</title>
      <link href="/posts/7da4ed6c/"/>
      <url>/posts/7da4ed6c/</url>
      
        <content type="html"><![CDATA[<h1 id="一、57步进电机参数"><a href="#一、57步进电机参数" class="headerlink" title="一、57步进电机参数"></a>一、57步进电机参数</h1><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103121.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103210.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103221.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103159.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103226.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103231.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20211222103152.png" alt="img" loading="lazy"></p><h1 id="二、树莓派利用python控制57步进电机"><a href="#二、树莓派利用python控制57步进电机" class="headerlink" title="二、树莓派利用python控制57步进电机"></a>二、树莓派利用python控制57步进电机</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">import</span> time<span class="token comment"># w1,w2,w3,w4,w5,w6 = 0,1,0,0,0,0,0   细分400，电流3.5A，电压24V</span>IN1 <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># 接PUL-</span>IN2 <span class="token operator">=</span> <span class="token number">21</span>  <span class="token comment"># 接PUL+</span>IN3 <span class="token operator">=</span> <span class="token number">12</span>  <span class="token comment"># 接DIR-</span>IN4 <span class="token operator">=</span> <span class="token number">16</span>  <span class="token comment"># 接DIR+</span><span class="token keyword">def</span> <span class="token function">setStep</span><span class="token punctuation">(</span>w1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> w3<span class="token punctuation">,</span> w4<span class="token punctuation">)</span><span class="token punctuation">:</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> w2<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN3<span class="token punctuation">,</span> w3<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN4<span class="token punctuation">,</span> w4<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 正转</span><span class="token comment"># 控制电机旋转的快慢和圈数 delay越小转得越快，1600为一圈</span><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token comment"># 控制电机一直旋转</span><span class="token keyword">def</span> <span class="token function">yizhi</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token comment"># 反转</span><span class="token comment"># 控制电机旋转的快慢和圈数 delay越小转得越快，1600为一圈</span><span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token comment"># 初始化树莓派引脚，设置树莓派的引脚为输出状态</span><span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    GPIO<span class="token punctuation">.</span>setwarnings<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN3<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN4<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span class="token comment"># 带异常处理</span><span class="token comment"># 控制电机正转一圈</span><span class="token keyword">def</span> <span class="token function">hhh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    setup<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>         forward<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">,</span><span class="token number">1600</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>  <span class="token comment"># When 'Ctrl+C' is pressed, the child function destroy() will be  executed.</span>         destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 带异常处理</span><span class="token comment"># 控制电机一直旋转</span><span class="token keyword">def</span> <span class="token function">zzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    setup<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>         yizhi<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>  <span class="token comment"># When 'Ctrl+C' is pressed, the child function destroy() will be  executed.</span>         destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 检测正转和反转</span><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        i<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"1、正转\t2、反转\t3、退出\n请输入数字： "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入脉冲个数（1600个脉冲为一圈）："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            forward<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请等待3秒..."</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stop..."</span><span class="token punctuation">)</span>            stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>            a<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入脉冲个数（1600个脉冲为一圈）："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            backward<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token comment"># 发射脉冲时间间隔0.0001（单位秒）   脉冲个数a 如果编码器的设置是8细分 那么1600冲就转360度</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请等待3秒..."</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stop..."</span><span class="token punctuation">)</span>            stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># stop</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token comment"># 清除树莓派引脚状态赋值            </span><span class="token keyword">def</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 释放数据</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token comment"># Program start from here</span>   setup<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">try</span><span class="token punctuation">:</span>        loop<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>  <span class="token comment"># When 'Ctrl+C' is pressed, the child function destroy() will be  executed.</span>        destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 57步进电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序（龙哥）</title>
      <link href="/posts/c56898db/"/>
      <url>/posts/c56898db/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-为什么要排序"><a href="#1-为什么要排序" class="headerlink" title="1.为什么要排序"></a>1.为什么要排序</h2><p>查找是计算机应用中必不可少并且使用频率很高的一个操作。在一个排序表中查找一个元素，要比在一个无序表中查找效率高得多。所以为了提高查找效率，节省CPU时间，需要排序。</p><h2 id="2-什么是排序"><a href="#2-什么是排序" class="headerlink" title="2.什么是排序"></a>2.什么是排序</h2><p>所谓排序，就是整理表中的数据几素，使之按儿素的关键字递增&#x2F;递减的顺序排列。</p><h2 id="3-排序的稳定性"><a href="#3-排序的稳定性" class="headerlink" title="3.排序的稳定性"></a>3.排序的稳定性</h2><p>当待排序元素的关键字不相同时，排序的结果是唯一的。如果待排序的表中，有多个关键字相间的元素：经过排序后这些共有相同关键字的元素之间的相对次序保持不变，则称这种排序方法是稳定的；反之，若具有相同关键字的元素之间的相对次序发生变化，则称这种的方法是不稳定的。</p><h2 id="4-排序稳定性的意义"><a href="#4-排序稳定性的意义" class="headerlink" title="4.排序稳定性的意义"></a>4.排序稳定性的意义</h2><p>什么时候需要稳定的排序方法？什么时候不需要呢？<br>考虑一下这种情况：<br>原序列按关键字Ki排列，现在要求按关键字Km排列，期望：在结果序列中，关键字Km相同的记录按原关键字Ki排列！！<br>“主关键字相同，按原次关键字排列”</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210121201807023.png" alt="image-20210121201807023" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210121201826774.png" alt="image-20210121201826774" loading="lazy"></p><h2 id="5-排序方法分类"><a href="#5-排序方法分类" class="headerlink" title="5.排序方法分类"></a>5.排序方法分类</h2><h3 id="1-分类方法一"><a href="#1-分类方法一" class="headerlink" title="(1)分类方法一"></a>(1)分类方法一</h3><p>我们根据待排序的数据元素是否全部在内存中，我们把排序方法，分为两类：<br>内排序：整个排序元素都在内存中处理，不涉及内、外存的数据交换。<br>外排序：待排序元素有一部分不在内存（如：内存装不下）</p><p><img src="D:/Desktop/image-20210121200637084.png" alt="image-20210121200637084" loading="lazy"></p><h3 id="2-分类方法二"><a href="#2-分类方法二" class="headerlink" title="(2)分类方法二"></a>(2)分类方法二</h3><ul><li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li><li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127183540.png" alt="img" loading="lazy"></p><h2 id="6-排序算法性能评估"><a href="#6-排序算法性能评估" class="headerlink" title="6.排序算法性能评估"></a>6.排序算法性能评估</h2><p>（1）算法的时间复杂度<br>            评估一下算法 <strong>运行时间</strong><br>            T（n）&#x3D;O（f（n））</p><p>（2）算法的空间复杂度<br>            评估一下算法 <strong>所用空间</strong><br>            s（n）&#x3D;O（f（n））</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127183628.png" alt="img" loading="lazy"></p><h2 id="7-相关概念总结"><a href="#7-相关概念总结" class="headerlink" title="7.相关概念总结"></a>7.相关概念总结</h2><ul><li><strong>稳定</strong>：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面。</li><li><strong>不稳定</strong>：如果a原本在b的前面，而a&#x3D;b，排序之后 a 可能会出现在 b 的后面。</li><li><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li><li><strong>空间复杂度：</strong>是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</li></ul><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127183925.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127184114.png" alt="img" loading="lazy"></p><h3 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h3><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</p><p>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；</p><p>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序</p><p>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</p><p>关于稳定性</p><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><p>名词解释：</p><ul><li>n：数据规模</li><li>k：”桶”的个数</li><li>In-place：占用常数内存，不占用额外内存</li><li>Out-place：占用额外内存</li><li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li></ul><h1 id="二、直接插入排序"><a href="#二、直接插入排序" class="headerlink" title="二、直接插入排序"></a>二、直接插入排序</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>（基本思想）每次将一个待排序的元素，按其关键字大小插入到已经排好序的子表中的适当位置，直到全部元素插入完成为止。<br>                直接插入排序&lt;&lt;&lt;<br>                折半插入排序<br>                希尔排序|</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210122183206813.png" alt="image-20210122183206813" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210122183231936.png" alt="image-20210122183231936" loading="lazy"></p><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015225645277-1151100000.gif" alt="img" loading="lazy"></p><h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2.基本思路"></a>2.基本思路</h2><h3 id="step1：找插入位置"><a href="#step1：找插入位置" class="headerlink" title="step1：找插入位置"></a>step1：找插入位置</h3><p>​            从第一个元素开始，找到第一个比待插入元素大的元素，<br>​                “插入位置”I    </p><h3 id="step2：插入操作"><a href="#step2：插入操作" class="headerlink" title="step2：插入操作"></a>step2：插入操作</h3><p>​            从最后面，一个一个元素往后挪</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210122183653824.png" alt="image-20210122183653824" loading="lazy"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#define N 10&#x2F;*    insert:把元素x,插入到升序数组a[]中去            a[0] a[1] ... a[n-1]    @a:数组名    @n:原有序表的元素个数，0,...,n-1    @x:待插入元素    返回值：        无返回*&#x2F;void insert(int a[], int n, int x)&#123;    int i,j,k;    &#x2F;&#x2F;step1:找插入位置    for(i &#x3D; 0;i &lt; n; i++)    &#123;        if(a[i] &gt; x)        &#123;            break;        &#125;    &#125;    &#x2F;&#x2F;i就是插入位置    &#x2F;&#x2F;step: 插入操作(先挪后插入)    for(j &#x3D; n-1; j &gt;&#x3D; i;j--)    &#123;        a[j+1] &#x3D; a[j];    &#125;    a[i] &#x3D; x;&#125;&#x2F;&#x2F;给数组a[n]进行 直接插入排序void insertSort(int a[], int n)&#123;    int i;    for(i &#x3D; 1; i &lt; n; i++)    &#123;        insert(a, i, a[i]);    &#125;&#125;int main()&#123;    int a[N];    int i;    for(i &#x3D; 0;i &lt; N; i++)    &#123;        scanf(&quot;%d&quot;,&amp;a[i]);    &#125;    insertSort(a, N);    for(i &#x3D; 0;i &lt; N; i++)    &#123;        printf(&quot;%d &quot;,a[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-直接插入改进"><a href="#3-直接插入改进" class="headerlink" title="3.直接插入改进"></a>3.直接插入改进</h2><p>“边比较边挪位置”<br>从最后面的元素，一个一个与待插入元素x比较</p><p>[ai] &gt; x &#x3D;&gt; 把[ai]往后挪</p><p>​    a[i+1]-a[i]<br>直到a[i] &lt;&#x3D; x此时i+1就是插入位置。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123090733160.png" alt="image-20210123090733160" loading="lazy"></p><h3 id="（1）龙哥改进版"><a href="#（1）龙哥改进版" class="headerlink" title="（1）龙哥改进版"></a>（1）龙哥改进版</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token comment">/*    insert:把元素x,插入到升序数组a[]中去            a[0] a[1] ... a[n-1]    @a:数组名    @n:原有序表的元素个数，0,...,n-1    @x:待插入元素    返回值：        无返回*/</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token comment">//debug</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;34m%d\033[0m\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//高亮打印 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">//k+1就是插入位置</span>            <span class="token comment">//debug</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[1;34m%d\033[0m "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//高亮打印 </span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//给数组a[n]进行 直接插入排序</span><span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">insertSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）改进版集成"><a href="#（2）改进版集成" class="headerlink" title="（2）改进版集成"></a>（2）改进版集成</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#define N 5void InsertSot(int a[] , int n)&#123;int i,j;for(i&#x3D;1;i&lt;n;i++)&#123;for(j&#x3D;i-1;j&gt;&#x3D;0 &amp;&amp; a[j]&gt;a[i];j--)&#123;a[j+1] &#x3D; a[j];&#125;a[j+1] &#x3D; a[i];&#125;&#125;int main()&#123;int a[N]&#x3D;&#123;0&#125;;int i;for(i&#x3D;0;i&lt;N;i++)&#123;scanf(&quot;%d&quot;,&amp;a[i]);&#125;InsertSot(a,N);for(i&#x3D;0;i&lt;N;i++)&#123;printf(&quot;%d&quot;,a[i]);&#125;printf(&quot;\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）课外集成版"><a href="#（3）课外集成版" class="headerlink" title="（3）课外集成版"></a>（3）课外集成版</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*插入排序是把一个记录插入到已排序的有序序列中，使整个序列在插入该记录后仍然有序。插入排序中较简单的种方法是直接插入排序，其插入位置的确定方法是将待插入的记录与有序区中的各记录自右向左依次比较其关键字值的大小。*&#x2F;&#x2F;*基本有序，记录数少*&#x2F;&#x2F;*基本思想： 每一步将一个待排序的元素，按其排序码的大小，插入到前面已经排好序 的一组元素的合适位置上去，直到元素全部插完为止。直接插入排序； 当插入第i(i&gt;&#x3D;1)个元素时，前面的array[0],array[1],…,array[i-1]已经 排好序，此时用array[i]的排序码与array[i-1],array[i-2],…的排序码顺序 进行比较，找到插入位置即将array[i]插入，原来位置上的元素顺序后移元素集合越接近有序，直接插入排序算法的时间效率越高 最优情况下：时间效率为O(n) 最差情况下：时间复杂度为O(n^2) 空间复杂度：O(1)，它是一种稳定的排序算法*&#x2F;#include &lt;stdio.h&gt;void InsertSort(int k[], int n)&#123;int i, j, temp;for( i&#x3D;1; i &lt; n; i++ )&#123;if( k[i] &lt; k[i-1] )&#123;temp &#x3D; k[i];for( j&#x3D;i-1; k[j] &gt; temp; j-- )&#123;k[j+1] &#x3D; k[j];&#125;k[j+1] &#x3D; temp;&#125;&#125;&#125;int main()&#123;int i, a[10] &#x3D; &#123;5, 2, 6, 0, 3, 9, 1, 7, 4, 8&#125;;InsertSort(a, 10);printf(&quot;排序后的结果是：&quot;);for( i&#x3D;0; i &lt; 10; i++ )&#123;printf(&quot;%d&quot;, a[i]);&#125;printf(&quot;\n\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-直接插入排序的性能分析"><a href="#4-直接插入排序的性能分析" class="headerlink" title="4.直接插入排序的性能分析"></a>4.直接插入排序的性能分析</h2><h3 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="(1)时间复杂度"></a>(1)时间复杂度</h3><h4 id="a-最坏情况"><a href="#a-最坏情况" class="headerlink" title="a.最坏情况"></a>a.最坏情况</h4><p>​            每次来的都是“最小元素”            “反序”</p><p>​            O(n^2^)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123094724749.png" alt="image-20210123094724749" loading="lazy"></p><h4 id="b-最好情况"><a href="#b-最好情况" class="headerlink" title="b.最好情况"></a>b.最好情况</h4><p>​            每次来的都是”最大元素”        正序</p><p>​            O(n)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123094916432.png" alt="image-20210123094916432" loading="lazy"></p><h4 id="c-平均情况"><a href="#c-平均情况" class="headerlink" title="c.平均情况"></a>c.平均情况</h4><p>​                O(n^2^)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123095227821.png" alt="image-20210123095227821" loading="lazy"></p><h3 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="(2)空间复杂度"></a>(2)空间复杂度</h3><p>​            O(1)</p><h2 id="5-直接插入排序稳定性分析"><a href="#5-直接插入排序稳定性分析" class="headerlink" title="5.直接插入排序稳定性分析"></a>5.直接插入排序稳定性分析</h2><p>直接插入排序    是    稳定的。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123095704143.png" alt="image-20210123095703913" loading="lazy"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>1.插入排序在对几乎已经排好序的数据操作时，效率高，可以达到线性排序的效率。O（n）</p><p>但</p><p>2.插入排序一般来说是低效的，因为插入排序每次只能将数据移动一个位置。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>插入排序由于O( n2 )的复杂度，在数组较大的时候不适用。但是，在数据比较少的时候，是一个不错的选择，一般做为快速排序的扩充。例如，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序。又如，在JDK 7 java.util.Arrays所用的sort方法的实现中，当待排数组长度小于47时，会使用插入排序。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123095753674.png" alt="image-20210123095753674" loading="lazy"></p><h1 id="三、折半插入排序"><a href="#三、折半插入排序" class="headerlink" title="三、折半插入排序"></a>三、折半插入排序</h1><h2 id="1-什么是折半插入排序"><a href="#1-什么是折半插入排序" class="headerlink" title="1.什么是折半插入排序"></a>1.什么是折半插入排序</h2><p>（Binary Insertion Sort）折半插入排序又称二分插入排序，是插入排序的一种。<br>折半插入排序是对直接插入排序的一种改进。<br>        改进？<br>    （直接插入排序）线性查找     —&gt;    折半查找</p><p>​        减少比较次数</p><p>基本思路：<br>        每次插入操作，采用折半查找的方式，查找插入位置，</p><p>​        然后再插入元素（先挪后插入）。</p><h2 id="2-算法思路"><a href="#2-算法思路" class="headerlink" title="2.算法思路"></a>2.算法思路</h2><h3 id="step-1：找插入位置（Insertion-Position）"><a href="#step-1：找插入位置（Insertion-Position）" class="headerlink" title="step 1：找插入位置（Insertion Position）"></a>step 1：找插入位置（Insertion Position）</h3><p>待查找范围的下标    [low，high]<br>每次跟中间元素PK mid&#x3D;（low+hiqh）&#x2F;  2</p><p>根据PK结果，调整待查找范围（改变low or high）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123104037173.png" alt="image-20210123104037173" loading="lazy"></p><p>如此重复，直到查找不成功（1ow&gt;high了）或 查找到？</p><h4 id="1-查找不成功"><a href="#1-查找不成功" class="headerlink" title="(1)查找不成功"></a>(1)查找不成功</h4><p>（原有序表中没有待插入的元素）时，插入位置的确定</p><p>​    Insertion Position &#x3D; high + 1 (low)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123104103657.png" alt="image-20210123104103657" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123104624817.png" alt="image-20210123104624817" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123105046439.png" alt="image-20210123105046439" loading="lazy"></p><h4 id="2-查找成功"><a href="#2-查找成功" class="headerlink" title="(2)查找成功"></a>(2)查找成功</h4><p>（原有序表中有待插入的元素）时，插入位置的确定</p><p>靠后的插入位置，更优化（后续挪动次数会少一些）</p><p>low &#x3D; mid+1，when x &#x3D;&#x3D; a[mid]</p><p>…</p><p>&#x3D;&gt;    查找不成功</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123105259464.png" alt="image-20210123105259464" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123105909395.png" alt="image-20210123105909395" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123105810213.png" alt="image-20210123105810213" loading="lazy"></p><h3 id="step-2：插入操作"><a href="#step-2：插入操作" class="headerlink" title="step 2：插入操作"></a>step 2：插入操作</h3><h4 id="1-先挪元素"><a href="#1-先挪元素" class="headerlink" title="(1)先挪元素"></a>(1)先挪元素</h4><p>​        [last，—&gt; Insertion Position]<br>​                        high+1</p><h4 id="2-插入操作"><a href="#2-插入操作" class="headerlink" title="(2)插入操作"></a>(2)插入操作</h4><p>x-&gt;[Insertion Position]</p><p>​    x-&gt;a[high +1]</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#define N 5&#x2F;*BinInsert:一次折半插入@a:有序表，数组名@n:有序表的元素个数a[0] a[1] ... a[n-1]@x：待插入元素返回值：无 *&#x2F;void BinInsert(int a[], int n,int x)&#123;int i; int low &#x3D; 0;&#x2F;&#x2F;查找范围，最左边元素的下标int high &#x3D; n-1;&#x2F;&#x2F;查找范围，最右边元素的下标int mid;&#x2F;&#x2F;查找范围中间元素的下标&#x2F;&#x2F;step 1：用二分法找插入位置while(low &lt;&#x3D; high)&#123;mid &#x3D; (low + high)&#x2F;2;if(x &gt;&#x3D; a[mid])&#123;low &#x3D; mid + 1;&#125;else&#x2F;&#x2F;x &lt; a[mid] &#123;high &#x3D; mid - 1;&#125;&#125;&#x2F;&#x2F;high+1 就是x的插入位置 &#x2F;&#x2F;step2: 插入操作(先挪后插入) for(i &#x3D; n - 1; i &gt;&#x3D; high+1; i--)&#123;a[i+1] &#x3D; a[i];&#125;a[high+1] &#x3D; x;&#125; void insertSort(int a[] , int n)&#123;int i,j;for(i &#x3D; 1; i &lt; n; i++)&#123;BinInsert(a,i,a[i]);&#125;&#125;int main()&#123;int a[N]&#x3D;&#123;0&#125;;int i;for(i&#x3D;0;i&lt;N;i++)&#123;scanf(&quot;%d&quot;,&amp;a[i]);&#125;insertSort(a,N);for(i&#x3D;0;i&lt;N;i++)&#123;printf(&quot;%d&quot;,a[i]);&#125;printf(&quot;\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-折半插入排序的性能分析"><a href="#3-折半插入排序的性能分析" class="headerlink" title="3.折半插入排序的性能分析"></a>3.折半插入排序的性能分析</h2><h4 id="1-时间复杂度-1"><a href="#1-时间复杂度-1" class="headerlink" title="(1)时间复杂度"></a>(1)时间复杂度</h4><p>一次BinInsert的时间T&#x3D;Ts +Tm</p><p>其中 Ts 为一次二分查找的时间</p><p>二分查找插入位置时，都是“查找不成功（查找最坏）”的情况</p><p>so，每次查找比较次数为：1og2N </p><p>​            Ts&#x3D;t1*log2N </p><p>​            Tm为一次移动元素的时间<br>根据插入位置，每次插入移动元素的个数，分为：<br>最好情况：移动一个<br>最坏情况：移动n个<br>平均情况：移动（n&#x2F;2）</p><p>所以，我们根据移动元素的情形，把折半插入排序的时间复杂度分为三种情况：<br>最好情况：</p><p>​                O(nlog<del>2</del>N)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123113926334.png" alt="image-20210123112952294" loading="lazy"></p><p>最坏情况：</p><p>​                O( n^2^)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123113826430.png" alt="image-20210123113826430" loading="lazy"></p><p>平均情况：</p><p>​                O( n^2^)</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123113926334.png" alt="image-20210123113926334" loading="lazy"></p><h4 id="2-空间复杂度-1"><a href="#2-空间复杂度-1" class="headerlink" title="(2)空间复杂度"></a>(2)空间复杂度</h4><p>​                    O(1)</p><h2 id="4-折半插入排序稳定性分析"><a href="#4-折半插入排序稳定性分析" class="headerlink" title="4.折半插入排序稳定性分析"></a>4.折半插入排序稳定性分析</h2><p>折半插入排序    是    稳定的。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123134417341.png" alt="image-20210123134417341" loading="lazy"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123135701205.png" alt="image-20210123135701205" loading="lazy"></p><p>折半插入排序相比直接插入排序只优化了查找插入位置的比较次数，移动元素的次数并没有解决。所以：<br>（1）当数据元素比较多（N值比较大）or<br>（2）移动元素的代价    小于    关键字比较时</p><p>​        采用折半插入排序比较有优势。</p><h1 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a>四、希尔排序</h1><h2 id="1-什么是希尔排序"><a href="#1-什么是希尔排序" class="headerlink" title="1.什么是希尔排序"></a>1.什么是希尔排序</h2><p>希尔排序，是由Donald shel1于1959年提出的一种排序算法。又称“缩小增量排序”，是插入排序的一种。<br>基本思想：<br>（1）把待排序列，分成多个间隔为h的子序例，</p><p>​        然后对每个子序列进行直接插入排序；</p><p>​        重复（1）多次，每次间隔h不同（并且越来越小），</p><p>​        最后一次选取间隔h&#x3D;1，完成排序。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210124115913.gif" alt="img" loading="lazy"></p><h2 id="2-算法思路-1"><a href="#2-算法思路-1" class="headerlink" title="2.算法思路"></a>2.算法思路</h2><p>h-sorting<br>        增量h排序 &#x2F; “间隔h排序”</p><p>h-sorted&#x2F;h-ordered<br>        增量h有序 &#x2F; ”间隔h有序”</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123140816426.png" alt="image-20210123140816426" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123141319425.png" alt="image-20210123141319425" loading="lazy"></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#define N 5&#x2F;*    h_sorting：一次增量h排序     @a:进行增量h排序的原始序列，数组名     @n:原有序表的元素个数，    a[0] a[1] ,..., a[n-1]     @h:增量h&#x2F;间隔h     返回值：        无返回*&#x2F;void h_sorting(int a[], int n, int h)&#123;int i,j;int x;for(i &#x3D; h; i &lt; n; i++)&#123;x &#x3D; a[i];for(j &#x3D; i - h; j &gt;&#x3D; 0 &amp;&amp; a[j] &gt; x; j &#x3D; j-h)&#123;a[j+h] &#x3D; a[j];&#125;a[j+h] &#x3D; x;&#125; &#125; &#x2F;&#x2F;对数组a，进行一个shell排序 void shell_sort(int a[], int n)&#123;int i;&#x2F;&#x2F;增量序列 int h[] &#x3D; &#123;8,4,2,1&#125;; for(i &#x3D; 0; i &lt; 4; i++)&#123;h_sorting(a, n, h[i]);&#125;&#125;int main()&#123;int i;    int a[N];    for(i &#x3D; 0; i &lt; N; i++)    &#123;    scanf(&quot;%d&quot;,&amp;a[i]);&#125;shell_sort(a, N);for(i &#x3D; 0; i &lt; N; i++)    &#123;    printf(&quot;%d\t&quot;,a[i]);&#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-希尔插入排序的性能分析"><a href="#3-希尔插入排序的性能分析" class="headerlink" title="3.希尔插入排序的性能分析"></a>3.希尔插入排序的性能分析</h2><p>关于希尔排序的几个基本认知：<br>（1）ht-Orderd序列，在后面的hi-sorting后，将仍然保持它的排序性；【定理】<br>（2）在h-sorting时，采用插入排序被证实比其他排序方法效率更高；<br>（3）不同的增量序列，对希尔排序的性能影响比较大。</p><h4 id="1-时间复杂度-2"><a href="#1-时间复杂度-2" class="headerlink" title="(1)时间复杂度"></a>(1)时间复杂度</h4><p>一般认为，希尔排序的时间复杂度为：<br>            平均&#x2F;最坏情况下                        最好的情况下（本身就是有序的）<br>            O（n^r^），1&lt;r&lt;2                            O（nlog<del>2</del>n）</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123144403182.png" alt="image-20210123144403182" loading="lazy"></p><h4 id="2-空间复杂度-2"><a href="#2-空间复杂度-2" class="headerlink" title="(2)空间复杂度"></a>(2)空间复杂度</h4><p>​                        O（1）</p><h2 id="4-希尔排序稳定性分析"><a href="#4-希尔排序稳定性分析" class="headerlink" title="4.希尔排序稳定性分析"></a>4.希尔排序稳定性分析</h2><p>​                                希尔排序是一种    不稳定    的排序方法。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123144513092.png" alt="image-20210123144513092" loading="lazy"></p><h2 id="5-总结-1"><a href="#5-总结-1" class="headerlink" title="5.总结"></a>5.总结</h2><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><p>Shell排序虽然快，但是毕竟是插入排序，其数量级并没有后起之秀–快速排序O(n㏒n)快。在大量数据面前，Shell排序不是一个好的算法。但是，中小型规模的数据完全可以使用它。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123144621673.png" alt="image-20210123144621673" loading="lazy"></p><h1 id="五、冒泡排序"><a href="#五、冒泡排序" class="headerlink" title="五、冒泡排序"></a>五、冒泡排序</h1><h2 id="1-什么是冒泡排序"><a href="#1-什么是冒泡排序" class="headerlink" title="1.什么是冒泡排序"></a>1.什么是冒泡排序</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123153036871.png" alt="image-20210123153036871" loading="lazy"></p><p>冒泡排序（BubbleSort），是一种简单的排序算法。</p><p>它“从头到尾”重复遍历要排序的数列，一次比较两个元素，如果他们的顺序是错的，就把他们交换过来。</p><p>遍历数列的工作要重复进行，直到没有元素需要交换，此时排序完成。</p><p>“相邻元素两两比较，如果顺序是错的，就交换他们”</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/849589-20171015223238449-2146169197.gif" alt="img" loading="lazy"></p><h2 id="2-算法思路-2"><a href="#2-算法思路-2" class="headerlink" title="2.算法思路"></a>2.算法思路</h2><p>（1）比较第一个和第二个元素。如果第一个比第二个大，就交换他们两个</p><p>（2）比较第二个和第三个元素。如果第二个比第三个大，就交换他们两个</p><p>……</p><p>（n）比较第n-1个和第n个元素。如果第n-1个比第n个大，就交换他们两个</p><p>​        上面过程实际上是对每一对相邻元素作同样的比较交换工作，</p><p>​        从第一对到最后一对，这一趟做完后，最大的元素会在最后的位置上。</p><p>​        “一趟冒泡”：把一个最大的元素归位。</p><p>上面冒泡”过程，重复N-1（最多N-1）趟，所有元素都会归位。</p><p>“N-1趟冒泡”：排序完成。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123145949207.png" alt="image-20210123145949207" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123150038094.png" alt="image-20210123150038094" loading="lazy"></p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token comment">//冒泡排序</span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//第t趟冒泡 [0, N-1] </span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//[0, n-1-t] 第t趟冒泡，待排序区的下标</span><span class="token comment">//一趟冒泡</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bubble_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码改进"><a href="#代码改进" class="headerlink" title="代码改进"></a>代码改进</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123151525102.png" alt="image-20210123151525102" loading="lazy"></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#define N 5&#x2F;&#x2F;冒泡排序void bubble_sort(int a[], int n)&#123;int i;int t &#x3D; 0;&#x2F;&#x2F;第t趟冒泡 [0, N-1] int temp;int exchange &#x3D; 0;&#x2F;&#x2F;标记，是否有元素进行交换&#x2F;&#x2F;1 表示有元素进行交换&#x2F;&#x2F;0 表示没有元素进行交换 for(t &#x3D; 0; t &lt; n - 1; t++)&#123;&#x2F;&#x2F;[0, n-1-t] 第t趟冒泡，待排序区的下标&#x2F;&#x2F;一趟冒泡for(i &#x3D; 0; i &lt; n-1-t; i++)&#123;if(a[i] &gt; a[i+1])&#123;temp &#x3D; a[i];a[i] &#x3D; a[i+1];a[i+1] &#x3D; temp;exchange &#x3D; 1; &#125;&#125; if(exchange &#x3D;&#x3D; 0)&#x2F;&#x2F;刚刚那趟冒泡过程，没有发生元素交换，&#123;break;&#125; &#125;&#125; int main()&#123;int i;    int a[N];    for(i &#x3D; 0; i &lt; N; i++)    &#123;    scanf(&quot;%d&quot;,&amp;a[i]);&#125;bubble_sort(a, N);for(i &#x3D; 0; i &lt; N; i++)    &#123;    printf(&quot;%d\t&quot;,a[i]);&#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="另外的版本"><a href="#另外的版本" class="headerlink" title="另外的版本"></a>另外的版本</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*优化过的正宗版本的冒泡排序*&#x2F;&#x2F;*用flag模拟布尔类型，如果遍历一遍后没有元素位置的交换就不再进行再次遍历排序*&#x2F;#include &lt;stdio.h&gt;void BubbleSort(int k[], int n)&#123;int i, j, temp, count1&#x3D;0, count2&#x3D;0, flag;flag &#x3D; 1;for( i&#x3D;0; i &lt; n-1 &amp;&amp; flag; i++ )&#123;for( j&#x3D;n-1; j &gt; i; j-- )&#123;count1++;flag &#x3D; 0;if( k[j-1] &gt; k[j] )&#123;count2++;temp &#x3D; k[j-1];k[j-1] &#x3D; k[j];k[j] &#x3D; temp;flag &#x3D; 1;&#125;&#125;&#125;printf(&quot;总共进行了%d次比较，进行了%d次移动！&quot;, count1, count2);&#125;int main()&#123;int i, a[10] &#x3D; &#123;5, 2, 6, 0, 3, 9, 1, 7, 4, 8&#125;;BubbleSort(a, 10);printf(&quot;排序后的结果是：&quot;);for( i&#x3D;0; i &lt; 10; i++ )&#123;printf(&quot;%d&quot;, a[i]);&#125;printf(&quot;\n\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-冒泡排序的性能分析"><a href="#3-冒泡排序的性能分析" class="headerlink" title="3.冒泡排序的性能分析"></a>3.冒泡排序的性能分析</h2><h4 id="1-时间复杂度-3"><a href="#1-时间复杂度-3" class="headerlink" title="(1)时间复杂度"></a>(1)时间复杂度</h4><h5 id="a-最好情况"><a href="#a-最好情况" class="headerlink" title="a.最好情况"></a>a.最好情况</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123152217350.png" alt="image-20210123152052135" loading="lazy"></p><h5 id="b-最坏情况"><a href="#b-最坏情况" class="headerlink" title="b.最坏情况"></a>b.最坏情况</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123152217350.png" alt="image-20210123152217350" loading="lazy"></p><h5 id="c-平均情况-1"><a href="#c-平均情况-1" class="headerlink" title="c.平均情况"></a>c.平均情况</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123152314489.png" alt="image-20210123152314489" loading="lazy"></p><h4 id="2-空间复杂度-3"><a href="#2-空间复杂度-3" class="headerlink" title="(2)空间复杂度"></a>(2)空间复杂度</h4><p>​                            O（1）</p><h2 id="4-冒泡排序稳定性分析"><a href="#4-冒泡排序稳定性分析" class="headerlink" title="4.冒泡排序稳定性分析"></a>4.冒泡排序稳定性分析</h2><p>​        冒泡排序是一种    <strong>稳定的</strong>    排序方法。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123152717358.png" alt="image-20210123152717358" loading="lazy"></p><h2 id="5-总结-2"><a href="#5-总结-2" class="headerlink" title="5.总结"></a>5.总结</h2><p>简言之，冒泡排序除开它迷人的名字和导致了某些有趣的理论问题这一事实之外，似乎没有什么值得推荐的。—Knuth《计算机程序设计艺术》</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123152651749.png" alt="image-20210123152651749" loading="lazy"></p><h3 id="1-什么时候最快"><a href="#1-什么时候最快" class="headerlink" title="(1)什么时候最快"></a>(1)什么时候最快</h3><p>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊）。</p><h3 id="2-什么时候最慢"><a href="#2-什么时候最慢" class="headerlink" title="(2) 什么时候最慢"></a>(2) 什么时候最慢</h3><p>当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。</p><h3 id="3-适用场景"><a href="#3-适用场景" class="headerlink" title="(3)适用场景"></a>(3)适用场景</h3><p>冒泡排序思路简单，代码也简单，特别适合小数据的排序。但是，由于算法复杂度较高，在数据量大的时候不适合使用。</p><h1 id="六、快速排序"><a href="#六、快速排序" class="headerlink" title="六、快速排序"></a>六、快速排序</h1><h2 id="1-什么是快速排序"><a href="#1-什么是快速排序" class="headerlink" title="1.什么是快速排序"></a>1.什么是快速排序</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123155510747.png" alt="image-20210123155510747" loading="lazy"></p><p>快速排序（英语：QuickSort）是一种高效的排序算法，最早由英国计算机科学家Tony Hoare于1959年发明。<br>快速排序不断重复的一个操作是：选取一个基准值（pivot），然后把原序列划分（partition）为两部分，一部分小于基准值，另外一部分大于等于基准值，所以快速排序又称划分交换排序（partition-exchange sort）。</p><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230936371-1413523412.gif" alt="img" loading="lazy"></p><h2 id="2-算法思路-3"><a href="#2-算法思路-3" class="headerlink" title="2.算法思路"></a>2.算法思路</h2><p>快速排序采用分治算法（divide-and-conquer），它是这样工作的：<br>（1）从待排序的数列中选择一个基准元素（pivot），然后（2）把剩余元素划分（“分割”）为两个子数列：<br>小于基准元素值的子序列S1和<br>大于等于基准元素值的子序列s2<br>（3）子序列S1和s2按同样的方法递归执行（1）和（2），直到序列中的元素个数为0或1。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123160026835.png" alt="image-20210123160026835" loading="lazy"></p><p>具体的算法步骤：Qsort（A[ ]，left，right）</p><p>关键：把序列分割成两部分：“小”基准值“大”</p><p>（1）（在待排序数列中）选择一个元素作为基准值pivot</p><p>（2）把基准值与区间最后一个元素交换</p><p>（3）设置两个索i，j : i从区间第一个元素开始，而 j 从区间倒数第二个开始（倒数第一个是pivot）</p><p>（4）i往右找下一个比pivot大（&gt;&#x3D;）的元素，</p><p>​        while（A[i]&lt;pivot）i++；</p><p>j往左找下一个比pivot小的元素</p><p>​        while（j&gt;&#x3D;0&amp;&amp;A[j]&gt;&#x3D;pivot）j–；</p><p>（5）ifi&lt;j则交换A[i]与A[j]的位置</p><p>​        重复（4），（5）直到i&gt;&#x3D;j</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123165053504.png" alt="image-20210123165053504" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123163826922.png" alt="image-20210123163826922" loading="lazy"></p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span>p<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ElemType t<span class="token punctuation">;</span> t <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>s<span class="token punctuation">;</span><span class="token operator">*</span>s <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*QSort：把数列A[1eft]...A[right]进行快速的排序@A：数组名@left：待排序数列最左边元素的下标@right：待排序数列最右边元素的下标返回值：无。*/</span><span class="token keyword">void</span> <span class="token function">QSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ElemType pivot <span class="token operator">=</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//1.选取一个基准值</span><span class="token comment">//2.把基准值元素与 最后一个元素交换</span><span class="token comment">//3.设置两个索引 i,j;</span><span class="token comment">//i从第一个元素开始往右遍历</span><span class="token comment">//j从倒数第二个元素开始往左遍历</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//4.”两头点蜡“ </span><span class="token comment">//i从左->右，找下一个比pivot大（>=）的元素</span><span class="token keyword">while</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//j从右->左，找下一个比pivot小的元素 </span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//交换：把大的元素放在序列的右边</span><span class="token comment">//把小的元素放在序列的左边</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token comment">//i >= j</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//6.i 指向的位置就是pivot的位置</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//S1: A[left] ... A[i-1]</span><span class="token function">QSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//S2:A[i+1] ... A[right] </span><span class="token function">QSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">QSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-三数中值分割法"><a href="#3-三数中值分割法" class="headerlink" title="3.三数中值分割法"></a>3.三数中值分割法</h2><h3 id="快排-pivot-选择策略"><a href="#快排-pivot-选择策略" class="headerlink" title="快排 pivot 选择策略"></a>快排 pivot 选择策略</h3><p>1.每次固定选择序列中的第一个or最后一个元素作为pivo如果输入序列是随机的，那么这种策略是可以接受的但是如果输入是预排序的或反序的，那么这种策略下的分割是非常糟糕的，因为所有的元素不是被划入s1就是被划入S2</p><p>预排序的输入（或具有一大预排序数据的输入）是相当常见的，因此这种策略绝对是糟糕的主意</p><p>2.般来说这种策略非常安全，除非随机数生成器有问题，因为随机的 pivot 不可能总是产生劣质的要割方面，随机数的生成一般是昂贵的，所以这种策略根本减少了算法其余的平均运行时间</p><p>3.三数中值分割法（ Median-of- Three Partitioning）<br>pivot的最好的选择是数列的中值</p><p>不幸的是，这很难算出。所以中值只能估计，中值的估计量可以通过随机选取三个元素，并用它们的中值作为 pivot而得到事实上，随机性并没有多大帮助，因此一般的做法是使用左端、右端、和中心位置上三个元素的中值作为pivot</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/image-20210123194012123.png" alt="image-20210123194012123" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/%E4%B8%89%E5%80%BC.png" alt="image-20210123205843034" loading="lazy"></p><p><img src="C:\Users\king\AppData\Roaming\Typora\typora-user-images\image-20210124112644914.png" alt="image-20210124112644914" loading="lazy"></p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#define N 5typedef int ElemType;void swap(ElemType *p,ElemType *s)&#123;ElemType t; t &#x3D; *p;*p &#x3D; *s;*s &#x3D; t;&#125;&#x2F;*QSort：把数列A[1eft]...A[right]进行快速的排序@A：数组名@left：待排序数列最左边元素的下标@right：待排序数列最右边元素的下标返回值：无。*&#x2F;void QSort(ElemType A[], int left, int right)&#123;if(left &gt;&#x3D; right)&#123;return ;&#125;ElemType pivot; &#x2F;&#x2F;&#x3D; A[right]; &#x2F;&#x2F;1.选取一个基准值&#x2F;&#x2F;2.把基准值元素与 最后一个元素交换&#x2F;&#x2F; 采用“三数分割法”int center &#x3D; (left + right)&#x2F;2;if(A[left] &gt; A[center])&#123;swap(&amp;A[left], &amp;A[center]);&#125;if(A[left] &gt; A[right])&#123;swap(&amp;A[left], &amp;A[right]);&#125;if(A[center] &gt; A[right])&#123;swap(&amp;A[center], &amp;A[right]);&#125; &#x2F;&#x2F; A[left] &lt;&#x3D; A[center] &lt;&#x3D; A[right]pivot &#x3D; A[center];swap(&amp;A[center], &amp;A[right-1]);&#x2F;&#x2F;left....right-1&#x2F;&#x2F; pivot:A[right - 1]&#x2F;&#x2F;3.设置两个索引 i,j;&#x2F;&#x2F;i从第一个元素开始往右遍历&#x2F;&#x2F;j从倒数第二个元素开始往左遍历int i &#x3D; left;int j &#x3D; right - 1;for(; i &lt; j ; )&#123;&#x2F;&#x2F;4.”两头点蜡“ &#x2F;&#x2F;i从左-&gt;右，找下一个比pivot大（&gt;&#x3D;）的元素while(A[++i] &lt; pivot);&#x2F;&#x2F;j从右-&gt;左，找下一个比pivot小的元素 while(A[--j] &gt; pivot);if(i &lt; j)&#123;&#x2F;&#x2F;交换：把大的元素放在序列的右边&#x2F;&#x2F;把小的元素放在序列的左边swap(&amp;A[i], &amp;A[j]); &#125; else&#x2F;&#x2F;i &gt;&#x3D; j&#123;break;&#125;&#125; &#x2F;&#x2F;6.i 指向的位置就是pivot的位置swap(&amp;A[i], &amp;A[right-1]);&#x2F;&#x2F;S1: A[left] ... A[i-1]QSort(A, left, i-1);&#x2F;&#x2F;S2:A[i+1] ... A[right] QSort(A, i+1, right);&#125;void QuickSort(ElemType A[], int n)&#123;QSort(A, 0, n-1);&#125;int main()&#123;int i;    int a[N];    for(i &#x3D; 0; i &lt; N; i++)    &#123;    scanf(&quot;%d&quot;,&amp;a[i]);&#125;QuickSort(a, N);for(i &#x3D; 0; i &lt; N; i++)    &#123;    printf(&quot;%d\t&quot;,a[i]);&#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-快速排序的性能分析"><a href="#4-快速排序的性能分析" class="headerlink" title="4.快速排序的性能分析"></a>4.快速排序的性能分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210124113036.png" alt="image-20210124113036589" loading="lazy"></p><h4 id="1-时间复杂度-4"><a href="#1-时间复杂度-4" class="headerlink" title="(1)时间复杂度"></a>(1)时间复杂度</h4><h5 id="a-最坏情况-1"><a href="#a-最坏情况-1" class="headerlink" title="a.最坏情况"></a>a.最坏情况</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210124113157.png" alt="image-20210124113156762" loading="lazy"></p><h5 id="b-最好情况-1"><a href="#b-最好情况-1" class="headerlink" title="b.最好情况"></a>b.最好情况</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210124113251.png" alt="image-20210124113250865" loading="lazy"></p><h5 id="c-平均情况-2"><a href="#c-平均情况-2" class="headerlink" title="c.平均情况"></a>c.平均情况</h5><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210124113557.png" alt="image-20210124113556982" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210124113438.png" alt="image-20210124113437532" loading="lazy"></p><h4 id="2-空间复杂度-4"><a href="#2-空间复杂度-4" class="headerlink" title="(2)空间复杂度"></a>(2)空间复杂度</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210124114022.png" alt="image-20210124114022789" loading="lazy"></p><h2 id="5-快速排序稳定性分析"><a href="#5-快速排序稳定性分析" class="headerlink" title="5.快速排序稳定性分析"></a>5.快速排序稳定性分析</h2><p>快速排序是    不稳定    的。</p><h2 id="6-总结-1"><a href="#6-总结-1" class="headerlink" title="6.总结"></a>6.总结</h2><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><p>快速排序在大多数情况下都是适用的，尤其在数据量大的时候性能优越性更加明显。但是在必要的时候，需要考虑下优化以提高其在最坏情况下的性能。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210124114240.png" alt="image-20210124114240345" loading="lazy"></p><p>关于快速排序对于很小的数组（&lt;&#x3D;20），快速排序不如插入排序好不仅如此；因为快速排序是递归，所以这样的情形还经常发生。<br>通常的解决方法是对于小的数组不递归地使用快速排序，而代之以如插入排序这样对小数组有效的排序算法。<br>所以一般在实现快速排序算法（如：c&#x2F;c++标准库中）时，定义一个递归的截止范围（ cutoff range），当序列元素个数小于这个范围时，使用直接插入排序。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define cutoff 10&#x2F;&#x2F;数组长度小于10用插入排序，大于10使用快速排序&#x2F;*对于小的数组不递归地使用快速排序，而代之以如插入排序这样对小数组有效的排序算法。*&#x2F;void QSort(ElemType A[], int left, int right)&#123;if(right - left &lt; cutoff)&#123;insertsort(A+left, right-left+1);&#125;else    &#123;        ElemType pivot; &#x2F;&#x2F;&#x3D; A[right];         &#x2F;&#x2F;1.选取一个基准值        &#x2F;&#x2F;2.把基准值元素与 最后一个元素交换        &#x2F;&#x2F; 采用“三数分割法”        int center &#x3D; (left + right)&#x2F;2;        if(A[left] &gt; A[center])        &#123;            swap(&amp;A[left], &amp;A[center]);        &#125;        if(A[left] &gt; A[right])        &#123;            swap(&amp;A[left], &amp;A[right]);        &#125;        if(A[center] &gt; A[right])        &#123;            swap(&amp;A[center], &amp;A[right]);        &#125;         &#x2F;&#x2F; A[left] &lt;&#x3D; A[center] &lt;&#x3D; A[right]        pivot &#x3D; A[center];        swap(&amp;A[center], &amp;A[right-1]);&#x2F;&#x2F;left....right-1        &#x2F;&#x2F; pivot:A[right - 1]        &#x2F;&#x2F;3.设置两个索引 i,j;        &#x2F;&#x2F;i从第一个元素开始往右遍历        &#x2F;&#x2F;j从倒数第二个元素开始往左遍历        int i &#x3D; left;        int j &#x3D; right - 1;        for(; i &lt; j ; )        &#123;            &#x2F;&#x2F;4.”两头点蜡“             &#x2F;&#x2F;i从左-&gt;右，找下一个比pivot大（&gt;&#x3D;）的元素            while(A[++i] &lt; pivot);            &#x2F;&#x2F;j从右-&gt;左，找下一个比pivot小的元素             while(A[--j] &gt; pivot);            if(i &lt; j)            &#123;                &#x2F;&#x2F;交换：把大的元素放在序列的右边                &#x2F;&#x2F;把小的元素放在序列的左边                swap(&amp;A[i], &amp;A[j]);             &#125;             else&#x2F;&#x2F;i &gt;&#x3D; j            &#123;                break;            &#125;        &#125;         &#x2F;&#x2F;6.i 指向的位置就是pivot的位置        swap(&amp;A[i], &amp;A[right-1]);        &#x2F;&#x2F;S1: A[left] ... A[i-1]        QSort(A, left, i-1);        &#x2F;&#x2F;S2:A[i+1] ... A[right]         QSort(A, i+1, right);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七-选择排序"><a href="#七-选择排序" class="headerlink" title="七.选择排序"></a>七.选择排序</h1><h2 id="1-什么是选择排序"><a href="#1-什么是选择排序" class="headerlink" title="1.什么是选择排序"></a>1.什么是选择排序</h2><p>选择排序（ Selection Sort）是一种简单直观的排序算法.</p><p>它的工作原理如下：</p><p>在未排序序列中（ unsorted list，无序区）中找到最小（大）元素，和序列中的第一个元素交换位置；（这个操作会使最小元素归位）</p><p>然后，再从剩余的未排序元素中继续寻找最小（大）元素，重复上面的操作。</p><p>直到所有元素归位，排序完成</p><p>基本思想：</p><p>选择+交换</p><p>选择排序又分为：</p><p>直接选择排序（简单选择排序）</p><p>堆排序</p><h2 id="2-算法思路-4"><a href="#2-算法思路-4" class="headerlink" title="2.算法思路"></a>2.算法思路</h2><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015224719590-1433219824.gif" alt="img" loading="lazy"></p><p>（1）从待排序数列（无序区）中，选择一个关键字最小的元素；</p><p>（2）如果最小元素不是待排序数列的第一个元素，则交换他们；“一次选择交换”；</p><p>（3）从余下的N-1个元素中，选择最小的，重复（1）（2）步骤，直到排序完成。</p><p>整个序列：</p><p>​                经过N-1次的选择交换，排序完成</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125181916.png" alt="image-20210125181909128" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125181934.png" alt="image-20210125181934226" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125182149.png" alt="image-20210125182149469" loading="lazy"></p><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#define N 5void swap(int *p,int *s)&#123;int t; t &#x3D; *p;*p &#x3D; *s;*s &#x3D; t;&#125;&#x2F;*selection sort：直接选择排序@a：待排序数组名@n：待排序元素个数返回值：无*&#x2F;void selection_sort(int a[], int n)&#123;int i;int t;&#x2F;&#x2F;选择的次数t [0,n-1]int min;&#x2F;&#x2F;指向每次选择区域最小元素&#x2F;&#x2F;第t趟选择， 选择区域下标[t, n-1]for(t &#x3D; 0; t &lt; n-1; t++)&#123;min &#x3D; t;for(i &#x3D; t+1; i &lt; n; i++)&#123;if(a[i] &lt; a[min])&#123;min &#x3D; i;&#125;&#125;if(t !&#x3D; min)&#123;swap(&amp;a[t], &amp;a[min]);&#125;&#125;&#125;int main()&#123;int i;    int a[N];    for(i &#x3D; 0; i &lt; N; i++)    &#123;    scanf(&quot;%d&quot;,&amp;a[i]);&#125;selection_sort(a, N);for(i &#x3D; 0; i &lt; N; i++)    &#123;    printf(&quot;%d\t&quot;,a[i]);&#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-选择排序的性能分析"><a href="#3-选择排序的性能分析" class="headerlink" title="3.选择排序的性能分析"></a>3.选择排序的性能分析</h2><h3 id="1-时间复杂度-5"><a href="#1-时间复杂度-5" class="headerlink" title="(1)时间复杂度"></a>(1)时间复杂度</h3><p>比较次数o（n^2^）</p><p>交换次数    0次    最好情况</p><p>​                n-1次    最坏情况</p><p>​                0&lt;，&lt;n-1    平均情况</p><p>然而，无论元素的初始排列如何，所需进行的关键字比较次数相同均为：n（n-1）&#x2F;2</p><p>选择排序时间复杂度（最好、最坏、平均）为：O（n^2^）</p><h3 id="2-空间复杂度-5"><a href="#2-空间复杂度-5" class="headerlink" title="(2)空间复杂度"></a>(2)空间复杂度</h3><p>​                        O（1）</p><h2 id="4-选择排序稳定性分析"><a href="#4-选择排序稳定性分析" class="headerlink" title="4.选择排序稳定性分析"></a>4.选择排序稳定性分析</h2><p>​            选择排序是一种    不稳定    的排序方法</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125184549.png" alt="image-20210125184549734" loading="lazy"></p><h2 id="5-总结-3"><a href="#5-总结-3" class="headerlink" title="5.总结"></a>5.总结</h2><p>原地操作几乎是选择排序的唯一优点，当空间复杂度要求较高时，可以考虑选择排序；实际适用的场合非常罕见</p><h4 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h4><p>选择排序实现也比较简单，并且由于在各种情况下复杂度波动小，因此一般是优于冒泡排序的。在所有的完全交换排序中，选择排序也是比较不错的一种算法。但是，由于固有的O(n2)复杂度，选择排序在海量数据面前显得力不从心。因此，它适用于简单数据排序。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125184641.png" alt="image-20210125184641554" loading="lazy"></p><h1 id="八-堆排序"><a href="#八-堆排序" class="headerlink" title="八.堆排序"></a>八.堆排序</h1><h2 id="1-什么是堆排序"><a href="#1-什么是堆排序" class="headerlink" title="1.什么是堆排序"></a>1.什么是堆排序<img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125185210.png" alt="image-20210125185210617" loading="lazy"></h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125185245.png" alt="image-20210125185245626" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125185505.png" alt="image-20210125185505834" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125185611.png" alt="image-20210125185611798" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125185754.png" alt="image-20210125185754290" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125185900.png" alt="image-20210125185900117" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125213436.gif" alt="img" loading="lazy"></p><h2 id="2-算法思路-5"><a href="#2-算法思路-5" class="headerlink" title="2.算法思路"></a>2.算法思路</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125190056.png" alt="image-20210125190056471" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125190209.png" alt="image-20210125190209046" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125190310.png" alt="image-20210125190310315" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125190536.png" alt="image-20210125190535982" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125190717.png" alt="image-20210125190717479" loading="lazy"></p><h3 id="1-空穴上滤"><a href="#1-空穴上滤" class="headerlink" title="(1)空穴上滤"></a>(1)空穴上滤</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125190913.png" alt="image-20210125190913360" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125191021.png" alt="image-20210125191021772" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125191142.png" alt="image-20210125191141869" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125191409.png" alt="image-20210125191409441" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125191513.png" alt="image-20210125191513160" loading="lazy"></p><h3 id="2-空穴下滤"><a href="#2-空穴下滤" class="headerlink" title="(2)空穴下滤"></a>(2)空穴下滤</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125191730.png" alt="image-20210125191730431" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125191831.png" alt="image-20210125191831299" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125192025.png" alt="image-20210125192025440" loading="lazy"></p><h3 id="3-代码实现关键"><a href="#3-代码实现关键" class="headerlink" title="(3)代码实现关键"></a>(3)代码实现关键</h3><h4 id="a-数据类型的实现"><a href="#a-数据类型的实现" class="headerlink" title="a.数据类型的实现"></a>a.数据类型的实现</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125192545.png" alt="image-20210125192545763" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125193137.png" alt="image-20210125193137702" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125193310.png" alt="image-20210125193310248" loading="lazy"></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;&#x2F;&#x2F;无穷小 #define VERY_SMALL -1&#x2F;&#x2F;堆中结点的数据类型 typedef int ElemType;typedef struct Heapstruct&#123;int Capacity;&#x2F;&#x2F;堆中的最大容量int size;&#x2F;&#x2F;堆中实际的结点数，最后那个结点的编号（下标）ElemType *Elements;&#125;HeapStruct;&#x2F;*Init Heap：分配一个堆的结构体@n：指定堆中最大容量返回值：返回分配到的堆的结构体的指针*&#x2F;HeapStruct* Init_Heap(int n)&#123;Heapstruct *H&#x3D; malloc(sizeof(*H));H-&gt;Capacity &#x3D; n;H-&gt;size &#x3D; 0;H-&gt;Elements &#x3D; malloc(sizeof(ElemType)*(n+1));H-&gt;Elements[0] &#x3D; VERY_SMALL;  &#x2F;&#x2F;??return H;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-Insert操作的实现"><a href="#b-Insert操作的实现" class="headerlink" title="b.Insert操作的实现"></a>b.Insert操作的实现</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125194713.png" alt="image-20210125194713377" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125195104.png" alt="image-20210125195104011" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*Insert MinHeap：最小堆的插入操作@H：指向最小堆结构体指针@X：待插入元素返回值：无返回值。*/</span><span class="token keyword">void</span> <span class="token function">Insert_MinHeap</span><span class="token punctuation">(</span>Heapstruct <span class="token operator">*</span>H<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//指向空穴结点的下标</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token operator">++</span>H<span class="token operator">-></span>size<span class="token punctuation">;</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-Delete-Min操作的实现"><a href="#c-Delete-Min操作的实现" class="headerlink" title="c.Delete_Min操作的实现"></a>c.Delete_Min操作的实现</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125200153.png" alt="image-20210125200153750" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125200823.png" alt="image-20210125200823587" loading="lazy"></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*Delete_Min：删除最小堆的最小值并调整使其仍然为最小堆@H：指向要删除最小值的最小堆返回值：返回删除的最小值*&#x2F;ElemType Delete_Min(Heapstruct *H)&#123;ElemType min &#x3D; H-&gt;Elements[1];ElemType last &#x3D; H-&gt;Elements[H-&gt;size--];int i;&#x2F;&#x2F;指向空穴结点的下标int child;&#x2F;&#x2F;指向空穴的较小孩子结点for(i &#x3D; 1; 2*i &lt;&#x3D; H-&gt;size; i &#x3D; child)&#123;child &#x3D; 2*i;&#x2F;&#x2F;如果有右孩子 并且 右孩子小于左孩子,child++ if(child + 1 &lt;&#x3D; H-&gt;size &amp;&amp; H-&gt;Elements[child + 1] &lt; H-&gt;Elements[child])&#123;child++;&#125;&#x2F;&#x2F;将孩子结点与最后一个结点比较，如果小于最后一个结点&#x2F;&#x2F;将孩子结点的值给父结点，此时孩子结点为新的空穴结点 if(H-&gt;Elements[child] &lt; last)&#123;H-&gt;Elements[i] &#x3D; H-&gt;Elements[child];&#125;else&#x2F;&#x2F;last比最小的孩子结点还要小 &#123;break;&#125;&#125; H-&gt;Elements[i] &#x3D; last;return min;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d-堆排序代码实现"><a href="#d-堆排序代码实现" class="headerlink" title="d.堆排序代码实现"></a>d.堆排序代码实现</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125204832.png" alt="image-20210125204832101" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token comment">//无穷小 </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERY_SMALL</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span></span></span><span class="token comment">//堆中结点的数据类型 </span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Heapstruct</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> Capacity<span class="token punctuation">;</span><span class="token comment">//堆中的最大容量</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment">//堆中实际的结点数，最后那个结点的编号（下标）</span>ElemType <span class="token operator">*</span>Elements<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>HeapStruct<span class="token punctuation">;</span><span class="token comment">/*Init Heap：分配一个堆的结构体@n：指定堆中最大容量返回值：返回分配到的堆的结构体的指针*/</span>HeapStruct<span class="token operator">*</span> <span class="token function">Init_Heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>HeapStruct <span class="token operator">*</span>H<span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>H<span class="token operator">-></span>Capacity <span class="token operator">=</span> n<span class="token punctuation">;</span>H<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>H<span class="token operator">-></span>Elements <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>H<span class="token operator">-></span>Elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> VERY_SMALL<span class="token punctuation">;</span>  <span class="token comment">//??</span><span class="token keyword">return</span> H<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*Insert MinHeap：最小堆的插入操作@H：指向最小堆结构体指针@X：待插入元素返回值：无返回值。*/</span><span class="token keyword">void</span> <span class="token function">Insert_MinHeap</span><span class="token punctuation">(</span>HeapStruct <span class="token operator">*</span>H<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//指向空穴结点的下标</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token operator">++</span>H<span class="token operator">-></span>size<span class="token punctuation">;</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*Delete_Min：删除最小堆的最小值并调整使其仍然为最小堆@H：指向要删除最小值的最小堆返回值：返回删除的最小值*/</span>ElemType <span class="token function">Delete_Min</span><span class="token punctuation">(</span>HeapStruct <span class="token operator">*</span>H<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ElemType min <span class="token operator">=</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ElemType last <span class="token operator">=</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>H<span class="token operator">-></span>size<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//指向空穴结点的下标</span><span class="token keyword">int</span> child<span class="token punctuation">;</span><span class="token comment">//指向空穴的较小孩子结点</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">&lt;=</span> H<span class="token operator">-></span>size<span class="token punctuation">;</span> i <span class="token operator">=</span> child<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>child <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span><span class="token comment">//如果有右孩子 并且 右孩子小于左孩子,child++ </span><span class="token keyword">if</span><span class="token punctuation">(</span>child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> H<span class="token operator">-></span>size <span class="token operator">&amp;&amp;</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>child<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将孩子结点与最后一个结点比较，如果小于最后一个结点</span><span class="token comment">//将孩子结点的值给父结点，此时孩子结点为新的空穴结点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token comment">//last比最小的孩子结点还要小 </span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> H<span class="token operator">-></span>Elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> last<span class="token punctuation">;</span><span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*heap sort：堆排序@a：待排序数组@n：元素个数返回值：无*/</span><span class="token keyword">void</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//初始化一个堆结构体</span>HeapStruct <span class="token operator">*</span>H <span class="token operator">=</span> <span class="token function">Init_Heap</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//堆排序的步骤：</span><span class="token comment">//（1）建立堆</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Insert_MinHeap</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//(2)删除最小值</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Delete_Min</span><span class="token punctuation">(</span>H<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">free</span><span class="token punctuation">(</span>H<span class="token operator">-></span>Elements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>H<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">heap_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="e-堆排序In-place版本实现"><a href="#e-堆排序In-place版本实现" class="headerlink" title="e.堆排序In-place版本实现"></a>e.堆排序In-place版本实现</h4><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125205332.png" alt="image-20210125205332729" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125205641.png" alt="image-20210125205641584" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125210209.png" alt="image-20210125210004430" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125210413.png" alt="image-20210125210413532" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125211217.png" alt="image-20210125210611015" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125211206.png" alt="image-20210125211206046" loading="lazy"></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define N 5#define Parent(i) (((i) - 1)&#x2F;2)#define Lchild(i) (2*(i) + 1)#define Rchild(i) (Lchild(i) + 1)&#x2F;&#x2F;堆中结点的数据类型 typedef int ElemType;void swap(int *p,int *s)&#123;int t; t &#x3D; *p;*p &#x3D; *s;*s &#x3D; t;&#125;&#x2F;*PercDown：实现编号为i的结点下滤操作（最大堆）@A：数组名@i：下滤结点编号（数组下标）@n：数组A的有效元素个数（堆中结点数目）数组下标从开始，A[0]，A[1],A[2],...A[n-1]返回值:无*&#x2F;void PercDown(ElemType A[], int i, int n)&#123;int child;&#x2F;&#x2F;指向空穴结点的较大孩子结点ElemType tmp;&#x2F;&#x2F;保存空穴结点的元素值for(tmp &#x3D; A[i]; Lchild(i) &lt; n; i &#x3D; child)&#123;child &#x3D; Lchild(i);if(child + 1 &lt; n &amp;&amp; A[child + 1] &gt; A[child])&#123;child++;&#125;if(A[child] &gt; tmp)&#123;A[i] &#x3D; A[child];&#125;else&#x2F;&#x2F;tmp&gt;&#x3D; A[child]&#123;break;&#125;&#125;A[i] &#x3D; tmp;&#125;void heap_sort_v2(ElemType A[], int n)&#123;int i;&#x2F;&#x2F;下滤结点下标&#x2F;&#x2F;1. build max heap&#x2F;&#x2F;逐个下滤 &#x2F;&#x2F;建立最大堆for(i &#x3D; Parent(n-1); i &gt;&#x3D; 0; i--)&#123;PercDown( A, i, n);&#125; &#x2F;&#x2F;2.Delete_MAXfor(i &#x3D; n-1; i &gt; 0; i--)&#123;swap(&amp;A[0], &amp;A[i]);PercDown( A, 0, i);&#125;&#125;int main()&#123;int i;    int a[N];    for(i &#x3D; 0; i &lt; N; i++)    &#123;    scanf(&quot;%d&quot;,&amp;a[i]);&#125;heap_sort_v2(a, N);for(i &#x3D; 0; i &lt; N; i++)    &#123;    printf(&quot;%d\t&quot;,a[i]);&#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-堆排序的性能分析"><a href="#3-堆排序的性能分析" class="headerlink" title="3.堆排序的性能分析"></a>3.堆排序的性能分析</h2><h3 id="1-时间复杂度-6"><a href="#1-时间复杂度-6" class="headerlink" title="(1)时间复杂度"></a>(1)时间复杂度</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125213026.png" alt="image-20210125213026686" loading="lazy"></p><h3 id="2-空间复杂度-6"><a href="#2-空间复杂度-6" class="headerlink" title="(2)空间复杂度"></a>(2)空间复杂度</h3><p>​                    O（1）</p><h2 id="4-堆排序稳定性分析"><a href="#4-堆排序稳定性分析" class="headerlink" title="4.堆排序稳定性分析"></a>4.堆排序稳定性分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125213250.png" alt="image-20210125213250651" loading="lazy"></p><h2 id="5-总结-4"><a href="#5-总结-4" class="headerlink" title="5.总结"></a>5.总结</h2><h3 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h3><p>堆排序在建立堆和调整堆的过程中会产生比较大的开销，在元素少的时候并不适用。但是，在元素比较多的情况下，还是不错的一个选择。尤其是在解决诸如“前n大的数”一类问题时，几乎是首选算法。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210125213328.png" alt="image-20210125213328663" loading="lazy"></p><h1 id="九-归并排序"><a href="#九-归并排序" class="headerlink" title="九.归并排序"></a>九.归并排序</h1><h2 id="1-什么是归并排序"><a href="#1-什么是归并排序" class="headerlink" title="1.什么是归并排序"></a>1.什么是归并排序</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210126193204.gif" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210126194241.png" alt="image-20210126194241579" loading="lazy"></p><h2 id="2-算法思路-6"><a href="#2-算法思路-6" class="headerlink" title="2.算法思路"></a>2.算法思路</h2><ul><li>把长度为n的输入序列分成两个长度为n&#x2F;2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210126194456.png" alt="image-20210126194456817" loading="lazy"></p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/1557906108-5066-20161218163120151-452283750.png" alt="img" loading="lazy"></p><p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。<strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。</p><p><strong>合并相邻有序子序列</strong></p><p>再来看看<strong>治</strong>阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127185921.png" alt="img" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127185935.png" alt="img" loading="lazy"></p><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define N 5typedef int ElemType;&#x2F;*Merge：对两个有序表S[Lpos].. S[Rpos-1]S[Rpos].. S[RightEnd]进行归并操作@s：数组@Lpos：左边有序表开始元素的下标@Rpos：右边有序表开始元素的下标@RightEnd：右边有序表最后元素的下标@Aux：辅助数组返回值：无*&#x2F;void Merge(ElemType s[], int Lpos, int Rpos, int RightEnd,ElemType Aux[])&#123;int LeftEnd &#x3D; Rpos - 1;int Num &#x3D; RightEnd - Lpos + 1;&#x2F;&#x2F;要归并的总共的元素个数 int C_pos &#x3D; Lpos;&#x2F;&#x2F;辅助数组的起始下标while(Lpos &lt;&#x3D; LeftEnd &amp;&amp; Rpos &lt;&#x3D; RightEnd)&#123;if(s[Lpos] &lt;&#x3D; s[Rpos])&#123;Aux[C_pos++] &#x3D; s[Lpos++];&#125; else&#123;Aux[C_pos++] &#x3D; s[Rpos++];&#125;&#125;&#x2F;&#x2F;右边那个序列先到末尾while(Lpos &lt;&#x3D; LeftEnd)&#123;Aux[C_pos++] &#x3D; s[Lpos++];&#125; while(Rpos &lt;&#x3D; RightEnd)&#123;Aux[C_pos++] &#x3D; s[Rpos++];&#125; int i&#x3D;0;&#x2F;&#x2F;拷贝次数for(i &#x3D; 0; i &lt; Num; RightEnd--,i++)&#123;s[RightEnd] &#x3D; Aux[RightEnd];&#125; &#125;&#x2F;*MSort：对数列进行归并排序@s：要进行归并排序的数组@Left：归并排序最左边元素的下标@Right：归并排序最右边元素的下标@Aux：辅助数组返回值：无。*&#x2F;void Msort(ElemType s[], int Left, int Right, ElemType Aux[])&#123;if(Left &lt; Right)&#123;&#x2F;&#x2F;1.分割int mid &#x3D; (Left + Right) &#x2F; 2;&#x2F;&#x2F;A: Left ... mid&#x2F;&#x2F;B: mid+1 ... Rught&#x2F;&#x2F;2.对A进行归并排序Msort(s, Left, mid, Aux);&#x2F;&#x2F;3.对B进行归并排序Msort(s, mid+1, Right, Aux);&#x2F;&#x2F;4.对A和B进行归并操作Merge(s, Left, mid+1, Right, Aux); &#125;&#125;void Merge_Sort(ElemType A[], int n)&#123;ElemType *Aux &#x3D; malloc(sizeof(ElemType) *n);Msort(A, 0, n-1, Aux);free(Aux);&#125;int main()&#123;int i;    int a[N];    for(i &#x3D; 0; i &lt; N; i++)    &#123;    scanf(&quot;%d&quot;,&amp;a[i]);&#125;Merge_Sort(a, N);for(i &#x3D; 0; i &lt; N; i++)    &#123;    printf(&quot;%d\t&quot;,a[i]);&#125;printf(&quot;\n&quot;);     return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-归并排序的性能分析"><a href="#3-归并排序的性能分析" class="headerlink" title="3.归并排序的性能分析"></a>3.归并排序的性能分析</h2><h3 id="1-时间复杂度-7"><a href="#1-时间复杂度-7" class="headerlink" title="(1)时间复杂度"></a>(1)时间复杂度</h3><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127181648.png" alt="image-20210127181641062" loading="lazy"></p><h3 id="2-空间复杂度-7"><a href="#2-空间复杂度-7" class="headerlink" title="(2)空间复杂度"></a>(2)空间复杂度</h3><p>​                    O（n）</p><h2 id="4-归并排序稳定性分析"><a href="#4-归并排序稳定性分析" class="headerlink" title="4.归并排序稳定性分析"></a>4.归并排序稳定性分析</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127181751.png" alt="image-20210127181751056" loading="lazy"></p><h2 id="5-总结-5"><a href="#5-总结-5" class="headerlink" title="5.总结"></a>5.总结</h2><h3 id="适用场景-5"><a href="#适用场景-5" class="headerlink" title="适用场景"></a>适用场景</h3><p>归并排序在数据量比较大的时候也有较为出色的表现（效率上），但是，其空间复杂度O(n)使得在数据量特别大的时候（例如，1千万数据）几乎不可接受。而且，考虑到有的机器内存本身就比较小，因此，采用归并排序一定要注意。</p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/master/img/20210127181853.png" alt="image-20210127181852807" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266使用方法</title>
      <link href="/posts/b2fc5f68/"/>
      <url>/posts/b2fc5f68/</url>
      
        <content type="html"><![CDATA[<h1 id="一、ESP8266连线方式"><a href="#一、ESP8266连线方式" class="headerlink" title="一、ESP8266连线方式"></a>一、ESP8266连线方式</h1><h2 id="1、ESP8266引脚定义"><a href="#1、ESP8266引脚定义" class="headerlink" title="1、ESP8266引脚定义"></a>1、ESP8266引脚定义</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220216220231.png" alt="image-20200613150457590" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220216220236.png" alt="81028683567b087f56647b7b5bbfd99e_20200228114215425" loading="lazy"></p><h2 id="2、ESP8266通过串口连接电脑"><a href="#2、ESP8266通过串口连接电脑" class="headerlink" title="2、ESP8266通过串口连接电脑"></a>2、ESP8266通过串口连接电脑</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220216220240.png" alt="image-20200613150508621" loading="lazy"></p><h2 id="3、ESP8266烧录连线图"><a href="#3、ESP8266烧录连线图" class="headerlink" title="3、ESP8266烧录连线图"></a>3、ESP8266烧录连线图</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220216220245.png" alt="SouthEast" loading="lazy"></p><h2 id="4、ESP8266连接单片机"><a href="#4、ESP8266连接单片机" class="headerlink" title="4、ESP8266连接单片机"></a>4、ESP8266连接单片机</h2><p><img src="https://raw.githubusercontent.com/wushuai2000/PicGo/main/img/20220216220249.png" alt="image-20200613150508621" loading="lazy"></p><h1 id="二、ESP8266的三种模式"><a href="#二、ESP8266的三种模式" class="headerlink" title="二、ESP8266的三种模式"></a>二、ESP8266的三种模式</h1><h2 id="1、Station-模式："><a href="#1、Station-模式：" class="headerlink" title="1、Station 模式："></a>1、Station 模式：</h2><p>ESP8266 模块通过路由器连接互联网，手机或电脑通过互联网实现对设备的远程控制。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">AT<span class="token operator">+</span>CWMODE<span class="token operator">=</span><span class="token number">1</span>                     <span class="token comment">//1是Station模式</span>AT<span class="token operator">+</span>RST                     <span class="token comment">//重新启动wifi模块</span>AT<span class="token operator">+</span>CWJAP<span class="token operator">=</span><span class="token string">"所要连接的局域网WIFI名称"</span><span class="token punctuation">,</span><span class="token string">"WiFi密码"</span>          <span class="token comment">//连接WiFi</span>AT<span class="token operator">+</span>CIPMUX<span class="token operator">=</span><span class="token number">1</span>                   <span class="token comment">//开启多连接模式，允许多个客户端接入 </span>AT<span class="token operator">+</span>CIPSERVER<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5000</span>                <span class="token comment">//启动TCP/IP 实现基于网络//控制，我自己设置服务器的端口号为5000，可以设置其他端口号</span>AT<span class="token operator">+</span>CIPSTO<span class="token operator">=</span><span class="token number">0</span>                <span class="token comment">//服务永远不超时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是手机需要验证模块自身的IP地址和端口号才能连接成功，因为自己只知道设置的端口号，不确定模块自身IP地址，所以需要查询模块IP,就要用下边的命令来查询模块自身的IP地址。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">AT<span class="token operator">+</span>CIFSR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>串口助手会返回模块的IP地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">+</span>CIFSR<span class="token operator">:</span>STAIP<span class="token punctuation">,</span><span class="token string">"192.168.0.105"</span><span class="token operator">+</span>CIFSR<span class="token operator">:</span>STAMAC<span class="token punctuation">,</span><span class="token string">"5c:cf:7f:03:22:46"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不同模块不同模式下的IP地址是不确定的，所以在操作时候要多次查询模块的IP地址，以防止模块IP地址发生变化，同时在验证IP和端口号前，手机连接的WIFI和模块连接的WiFi相同。</p><h2 id="2、AP-模式："><a href="#2、AP-模式：" class="headerlink" title="2、AP 模式："></a>2、AP 模式：</h2><p>ESP8266 模块作为热点，手机或电脑直接与模块连接，实现局域网无线控制。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">AT<span class="token operator">+</span>CWMODE<span class="token operator">=</span><span class="token number">2</span>                     <span class="token comment">//2是AP模式</span>AT<span class="token operator">+</span>RST                     <span class="token comment">//重新启动wifi模块</span>AT<span class="token operator">+</span>CWSAP<span class="token operator">=</span><span class="token string">"WIFI名称"</span><span class="token punctuation">,</span><span class="token string">"WIFI密码"</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span>          <span class="token comment">//AP模式设置模块WIFI名称及密码和加密方式，0代表开放，不需要密码</span>AT<span class="token operator">+</span>CIPMUX<span class="token operator">=</span><span class="token number">1</span>                   <span class="token comment">//设置多客户端连接</span>AT<span class="token operator">+</span>CIPSERVER<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5000</span>                <span class="token comment">//设置服务器的端口号为5000</span>AT<span class="token operator">+</span>CIPSTO<span class="token operator">=</span><span class="token number">0</span>                <span class="token comment">//服务不超时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、STA-AP-模式："><a href="#3、STA-AP-模式：" class="headerlink" title="3、STA+AP 模式："></a>3、STA+AP 模式：</h2><p>两种模式的共存模式，即可以通过互联网控制可实现无缝切换，方便操作。ESP8266有几种不同的使用方式，适用于不同水平的开发工作者。</p><h1 id="三、ESP8266基础网络通信"><a href="#三、ESP8266基础网络通信" class="headerlink" title="三、ESP8266基础网络通信"></a>三、ESP8266基础网络通信</h1><h2 id="1、TCP服务器（AP-模式-热点）"><a href="#1、TCP服务器（AP-模式-热点）" class="headerlink" title="1、TCP服务器（AP 模式    热点）"></a>1、TCP服务器（AP 模式    热点）</h2><p>使用环境：手机或电脑连接ESP8266的AP热点，正确填写服务器参数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//RST引脚复位，复位IO拉低电平，延时500ms，拉高电平，收到ok则复位成功</span>AT<span class="token operator">+</span>CWMODE<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//准备设置AP模式，收到ok则设置成功</span>AT<span class="token operator">+</span>CIPAP<span class="token operator">=</span><span class="token string">"192.168.10.1"</span>；<span class="token comment">//设置AP热点IP，收到ok则设置成功</span>AT<span class="token operator">+</span>CWSAP<span class="token operator">=</span><span class="token string">"ESP8266-AP"</span><span class="token punctuation">,</span><span class="token string">"123456789"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//设置AP参数，WiFi名称，密码，加密方式，收到ok则设置成功</span>AT<span class="token operator">+</span>CIPMODE<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//关闭透传,收到ok则设置成功</span>AT<span class="token operator">+</span>CIPMUX<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//开启多路连接,收到ok则设置成功</span>AT<span class="token operator">+</span>CIPSERVER<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5050</span><span class="token punctuation">;</span><span class="token comment">//开启AP服务器,收到ok则设置成功,端口号5050</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、TCP客户端（AP-模式-热点）"><a href="#2、TCP客户端（AP-模式-热点）" class="headerlink" title="2、TCP客户端（AP 模式    热点）"></a>2、TCP客户端（AP 模式    热点）</h2><p>使用环境：手机或电脑连接ESP8266的AP热点，正确配置服务器参数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//RST引脚复位，复位IO拉低电平，延时500ms，拉高电平，收到ok则复位成功</span>AT<span class="token operator">+</span>CWMODE<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//准备设置AP模式，收到ok则设置成功</span>AT<span class="token operator">+</span>CIPAP<span class="token operator">=</span><span class="token string">"192.168.10.1"</span>；<span class="token comment">//设置AP热点IP，收到ok则设置成功</span>AT<span class="token operator">+</span>CWSAP<span class="token operator">=</span><span class="token string">"ESP8266-AP"</span><span class="token punctuation">,</span><span class="token string">"123456789"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//设置AP参数，WiFi名称，密码，信道，加密方式，收到ok则设置成功</span>AT<span class="token operator">+</span>CIPMODE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//开启透传,收到ok则设置成功</span>AT<span class="token operator">+</span>CIPMUX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//关闭多路连接,收到ok则设置成功</span>AT<span class="token operator">+</span>CIPSTART<span class="token operator">=</span><span class="token string">"TCP"</span><span class="token punctuation">,</span><span class="token string">"192.168.10.2"</span><span class="token punctuation">,</span><span class="token number">5050</span><span class="token punctuation">;</span><span class="token comment">//协议，服务器IP或是域名，端口</span><span class="token comment">//如果接受到CONNECT表示连接成功</span><span class="token comment">//如果接受到CLOSED表示服务器未开启</span><span class="token comment">//如果接受到ALREADY CONNECTED已经建立连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、UDP模式（AP-模式-热点）"><a href="#3、UDP模式（AP-模式-热点）" class="headerlink" title="3、UDP模式（AP 模式    热点）"></a>3、UDP模式（AP 模式    热点）</h2><p>使用环境：手机或电脑连接ESP8266的AP热点，正确配置服务器参数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;RST引脚复位，复位IO拉低电平，延时500ms，拉高电平，收到ok则复位成功AT+CWMODE&#x3D;2;&#x2F;&#x2F;准备设置AP模式，收到ok则设置成功AT+CIPAP&#x3D;&quot;192.168.10.1&quot;；&#x2F;&#x2F;设置AP热点IP，收到ok则设置成功AT+CWSAP&#x3D;&quot;ESP8266-AP-UPD&quot;,&quot;123456789&quot;,4,4;&#x2F;&#x2F;设置AP参数，WiFi名称，密码，信道，加密方式，收到ok则设置成功AT+CIPMODE&#x3D;1;&#x2F;&#x2F;开启透传,收到ok则设置成功AT+CIPMUX&#x3D;0;&#x2F;&#x2F;关闭多路连接,收到ok则设置成功AT+CIPSTART&#x3D;&quot;UDP&quot;,&quot;192.168.10.2&quot;,5050,5050;&#x2F;&#x2F;协议，服务器IP或是域名，端口&#x2F;&#x2F;如果接受到CONNECT表示连接成功&#x2F;&#x2F;如果接受到CLOSED表示服务器未开启&#x2F;&#x2F;如果接受到ALREADY CONNECTED已经建立连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、TCP服务器（station模式-必须接路由器）"><a href="#4、TCP服务器（station模式-必须接路由器）" class="headerlink" title="4、TCP服务器（station模式     必须接路由器）"></a>4、TCP服务器（station模式     必须接路由器）</h2><p>使用环境：ESP8266与电脑（手机）在同一个局域网内</p><h3 id="（1）WIFI与密码在代码中"><a href="#（1）WIFI与密码在代码中" class="headerlink" title="（1）WIFI与密码在代码中"></a>（1）WIFI与密码在代码中</h3><p>上电后自动连接固定的WIFI</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">mode&#x3D;0；&#x2F;&#x2F;代码写死在代码中&#x2F;&#x2F;RST引脚复位，复位IO拉低电平，延时500ms，拉高电平，收到ready则复位成功AT+CWMODE&#x3D;1;&#x2F;&#x2F;准备设置station模式，收到ok则设置成功AT+CWAUTOCONN&#x3D;0;&#x2F;&#x2F;上电不自动连接AP，默认上电自动连接路由器AT+CWJAP&#x3D;&quot;king&quot;,&quot;12344321&quot;;&#x2F;&#x2F;连接路由器AT+CIFSR;&#x2F;&#x2F;查询本地 IP 地址,ESP8266的地址AT+CIPMODE&#x3D;0;&#x2F;&#x2F;关闭透传,收到ok则设置成功AT+CIPMUX&#x3D;1;&#x2F;&#x2F;开启多路连接,收到ok则设置成功AT+CIPSERVER&#x3D;1,5050;&#x2F;&#x2F;开启服务器,打开ESP8266的5050端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）手机APP配网"><a href="#（2）手机APP配网" class="headerlink" title="（2）手机APP配网"></a>（2）手机APP配网</h3><p>上电后自动连接WIFI，按住KEY2后重启，等待APP配网，不按住KEY2自动连接上次连接的WIFI</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//RST引脚复位，复位IO拉低电平，延时500ms，拉高电平，收到ready则复位成功</span>AT<span class="token operator">+</span>CWMODE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//准备设置station模式，收到ok则设置成功</span>AT<span class="token operator">+</span>CWAUTOCONN<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//上电不自动连接AP，默认上电自动连接路由器</span><span class="token comment">/*********************/</span>AT<span class="token operator">+</span>CWAUTOCONN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//打开自动连接</span>AT<span class="token operator">+</span>CWSTARTSMART<span class="token punctuation">;</span><span class="token comment">//开启Smartconfig</span><span class="token comment">//获取到SSID和password后将尝试自动连接AP</span>AT<span class="token operator">+</span>CWSTOPSMART；<span class="token comment">//关闭Smartconfig</span><span class="token comment">//等待WiFi连接成功，提示WIFI CONNECTED</span><span class="token comment">//WIFI GOT IP</span><span class="token comment">/*********************/</span>AT<span class="token operator">+</span>CIFSR<span class="token punctuation">;</span><span class="token comment">//查询本地 IP 地址,ESP8266的地址</span>AT<span class="token operator">+</span>CIPMODE<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//关闭透传,收到ok则设置成功</span>AT<span class="token operator">+</span>CIPMUX<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//开启多路连接,收到ok则设置成功</span>AT<span class="token operator">+</span>CIPSERVER<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5050</span><span class="token punctuation">;</span><span class="token comment">//开启服务器,打开ESP8266的5050端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、TCP客户端（station模式-必须接路由器）"><a href="#5、TCP客户端（station模式-必须接路由器）" class="headerlink" title="5、TCP客户端（station模式     必须接路由器）"></a>5、TCP客户端（station模式     必须接路由器）</h2><p>使用环境：ESP8266与电脑（手机）在同一个局域网内</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;RST引脚复位，复位IO拉低电平，延时500ms，拉高电平，收到ready则复位成功AT+CWMODE&#x3D;1;&#x2F;&#x2F;准备设置station模式，收到ok则设置成功AT+CWAUTOCONN&#x3D;0;&#x2F;&#x2F;上电不自动连接路由器，默认上电自动连接路由器AT+CWJAP&#x3D;&quot;king&quot;,&quot;12344321&quot;;&#x2F;&#x2F;连接路由器AT+CIFSR;&#x2F;&#x2F;查询本地 IP 地址,ESP8266的地址AT+CIPMODE&#x3D;1;&#x2F;&#x2F;开启透传,收到ok则设置成功AT+CIPMUX&#x3D;0;&#x2F;&#x2F;关闭多路连接,收到ok则设置成功AT+CIPSTART&#x3D;&quot;TCP&quot;,&quot;192.168.43.210&quot;,5050;&#x2F;&#x2F;协议，服务器IP或是域名，端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、UDP客户端（station模式-必须接路由器）"><a href="#6、UDP客户端（station模式-必须接路由器）" class="headerlink" title="6、UDP客户端（station模式     必须接路由器）"></a>6、UDP客户端（station模式     必须接路由器）</h2><p>使用环境：ESP8266与电脑（手机）在同一个局域网内</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;RST引脚复位，复位IO拉低电平，延时500ms，拉高电平，收到ready则复位成功AT+CWMODE&#x3D;1;&#x2F;&#x2F;准备设置station模式，收到ok则设置成功AT+CWAUTOCONN&#x3D;0;&#x2F;&#x2F;上电不自动连接路由器，默认上电自动连接路由器AT+CWJAP&#x3D;&quot;nice&quot;,&quot;12344321&quot;;&#x2F;&#x2F;连接路由器AT+CIFSR;&#x2F;&#x2F;查询本地 IP 地址,ESP8266的地址AT+CIPMODE&#x3D;1;&#x2F;&#x2F;开启透传,收到ok则设置成功AT+CIPMUX&#x3D;0;&#x2F;&#x2F;关闭多路连接,收到ok则设置成功AT+CIPSTART&#x3D;&quot;UDP&quot;,&quot;192.168.43.210&quot;,5050,5050;&#x2F;&#x2F;协议，服务器IP或是域名，服务器端口，本地端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、一般物联网的远程控制的通信方案"><a href="#四、一般物联网的远程控制的通信方案" class="headerlink" title="四、一般物联网的远程控制的通信方案"></a>四、一般物联网的远程控制的通信方案</h1><p>1、要实现远程控制就必须得租用一个服务器，可以租用云服务器，比如阿里云的ECS</p><p>2、手机与服务器建立tcp长连接</p><p>3、esp8266与服务器建立tcp长连接</p><p>4、手机发送数据到云服务器，使用json数据的网络通信，云服务器接收到手机发的数据后，继续把手机发送过来数据转发给esp8266</p><p>5、esp8266发送数据到云服务器，云服务器接收到esp8266发过来的数据后，继续把数据推送给手机app</p><p>6、如上所述方式，实现手机+esp8266的双向通信的远程控制。</p><p>以小米智能台灯为例：</p><p>有一台自己的服务器:小米云服务器<br>终端设备:小米台灯  自身带有wifi，作为tcp客户端可以连接小米云服务器<br>手机APP  该APP作为tcp 客户端能够连接小米云服务器<br>通信过程概述：小米智能台灯和app同时接入小米云服务器，用户在app上选择要执行的功能，如开灯，则当用户触发按键时，app会向小米云服务器发送该消息，小米云服务器会对这条消息进行转发（或者在服务器中做解析处理），解析知道了用户想要执行开灯动作，则有小米云服务器向小米智能台灯发送开灯指令，电亮台灯，即app和小米智能台灯之间的通信，由小米云服务器来中转完成，app、小米智能台灯与小米云服务器之间均为tcp长连接通信。</p><h1 id="五、OneNet云服务器-HTTP协议"><a href="#五、OneNet云服务器-HTTP协议" class="headerlink" title="五、OneNet云服务器 HTTP协议"></a>五、OneNet云服务器 HTTP协议</h1><h2 id="1、ESP8266-开关控制"><a href="#1、ESP8266-开关控制" class="headerlink" title="1、ESP8266  开关控制"></a>1、ESP8266  开关控制</h2><p>OneNet网站：<a href="https://open.iot.10086.cn/">https://open.iot.10086.cn/</a></p><p>开发者中心——–&gt;多协议接入———-&gt;HTTP——–&gt;添加产品</p><p>进入创建的产品——&gt;设备列表———&gt;添加设备</p><p>进入数据流模板——–&gt;添加数据流模板</p><p>进入应用管理———–&gt;添加应用—–&gt;编辑应用</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;RST引脚复位，复位IO拉低电平，延时500ms，拉高电平，收到ready则复位成功AT+CWMODE&#x3D;1;&#x2F;&#x2F;准备设置station模式，收到ok则设置成功AT+CWAUTOCONN&#x3D;0;&#x2F;&#x2F;上电不自动连接路由器，默认上电自动连接路由器AT+CWJAP&#x3D;&quot;nice&quot;,&quot;12344321&quot;;&#x2F;&#x2F;连接路由器AT+CIFSR;&#x2F;&#x2F;查询本地 IP 地址,ESP8266的地址AT+CIPMODE&#x3D;1;&#x2F;&#x2F;开启透传,收到ok则设置成功AT+CIPMUX&#x3D;0;&#x2F;&#x2F;关闭多路连接,收到ok则设置成功AT+CIPSTART&#x3D;&quot;TCP&quot;,&quot;183.230.40.33&quot;,80;&#x2F;&#x2F;OneNet服务器IP地址，端口号，固定不变AT+CIPSEND;&#x2F;&#x2F;进入透传指令&#x2F;*********获取状态报文***********&#x2F;GET &#x2F;devices&#x2F;608231432&#x2F;datapoints HTTP&#x2F;1.1&#x2F;&#x2F;设备IDapi-key:0sjroaCBwqV9Vnz3qjRptlMkLV8&#x3D;&#x2F;&#x2F;Master-APIkeyHost:api.heclouds.com&#x2F;*********报文后面需要接两个换行符，表示发送完毕************&#x2F;&#x2F;*********返回报文************&#x2F;HTTP&#x2F;1.1 200 OKDate: Fri, 03 Jul 2020 08:38:22 GMTContent-Type: application&#x2F;jsonContent-Length: 137Connection: keep-aliveServer: Apache-Coyote&#x2F;1.1Pragma: no-cache&#123;&quot;errno&quot;:0,&quot;data&quot;:&#123;&quot;count&quot;:1,&quot;datastreams&quot;:[&#123;&quot;datapoints&quot;:[&#123;&quot;at&quot;:&quot;2020-07-03 16:27:20.000&quot;,&quot;value&quot;:0&#125;],&quot;id&quot;:&quot;switch_1&quot;&#125;]&#125;,&quot;error&quot;:&quot;succ&quot;&#125;&#x2F;*********************&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、数据上传"><a href="#2、数据上传" class="headerlink" title="2、数据上传"></a>2、数据上传</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*********POST报文***********&#x2F;POST &#x2F;devices&#x2F;608297654&#x2F;datapoints?type&#x3D;3 HTTP&#x2F;1.1api-key:0sjroaCBwqV9Vnz3qjRptlMkLV8&#x3D;Host:api.heclouds.comContent-Length:32&#x2F;&#x2F;后面接两个回车换行&#123;&quot;temp_data&quot;:43,&quot;humi_data&quot;:132&#125;&#x2F;*********************&#x2F;&#x2F;*********返回报文***********&#x2F;HTTP&#x2F;1.1 200 OKDate: Sat, 04 Jul 2020 04:17:06 GMTContent-Type: application&#x2F;jsonContent-Length: 26Connection: keep-aliveServer: Apache-Coyote&#x2F;1.1Pragma: no-cache&#123;&quot;errno&quot;:0,&quot;error&quot;:&quot;succ&quot;&#125;AT+CIPCLOSE&#x2F;*********************&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、阿里智能生活平台-云智能APP"><a href="#六、阿里智能生活平台-云智能APP" class="headerlink" title="六、阿里智能生活平台 云智能APP"></a>六、阿里智能生活平台 云智能APP</h1><h2 id="MQTT介绍"><a href="#MQTT介绍" class="headerlink" title="MQTT介绍"></a>MQTT介绍</h2><p><img src="F:\学习\学习笔记\单片机\笔记图片\MQTT报文.jpg" alt="image-20200704131847716" loading="lazy"></p><p><img src="F:\学习\学习笔记\单片机\笔记图片\MQTT服务等级.JPG" alt="image-20200704131847716" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/***************************************************************************/</span><span class="token punctuation">&#123;</span>  <span class="token string">"ProductKey"</span><span class="token operator">:</span> <span class="token string">"a125Pav0yBM"</span><span class="token punctuation">,</span>  <span class="token string">"DeviceName"</span><span class="token operator">:</span> <span class="token string">"D001"</span><span class="token punctuation">,</span>  <span class="token string">"DeviceSecret"</span><span class="token operator">:</span> <span class="token string">"c13e04cc8e7e93ed441f2435893bbfd1"</span><span class="token punctuation">&#125;</span><span class="token comment">/***************************************************************************/</span>阿里云服务器IP地址（华东<span class="token number">2</span>） <span class="token operator">:</span>  <span class="token operator">*</span><span class="token punctuation">.</span>iot<span class="token operator">-</span>as<span class="token operator">-</span>mqtt<span class="token punctuation">.</span>cn<span class="token operator">-</span>shanghai<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com    <span class="token operator">*</span>表示自己账号的ProductKey注意替换阿里云服务器端口号（华东<span class="token number">2</span>） <span class="token operator">:</span>  <span class="token number">1883</span>a125Pav0yBM<span class="token punctuation">.</span>iot<span class="token operator">-</span>as<span class="token operator">-</span>mqtt<span class="token punctuation">.</span>cn<span class="token operator">-</span>shanghai<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com <span class="token comment">/***************************************************************************/</span>hmacsha1加密在线计算网站：http<span class="token operator">:</span><span class="token comment">//encode.chahuo.com/</span>客户端ID ：  <span class="token operator">*</span><span class="token operator">|</span>securemode<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>signmethod<span class="token operator">=</span>hmacsha1<span class="token operator">|</span>   <span class="token operator">*</span>设备名称              注意替换 用户名   ：  <span class="token operator">*</span><span class="token operator">&amp;</span>#             <span class="token operator">*</span>设备名称 #ProductKey  注意替换                 密码：  用DeviceSecret做为秘钥对clientId<span class="token operator">*</span>deviceName<span class="token operator">*</span>productKey#进行hmacsha1加密后的结果<span class="token operator">*</span>设备名称 #ProductKey  注意替换<span class="token comment">/***************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-CONNECT-——–-16进制"><a href="#1-CONNECT-——–-16进制" class="headerlink" title="1.CONNECT ——– 16进制"></a>1.CONNECT ——– 16进制</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/***************************************************************************/</span>固定报头：<span class="token number">10</span> 负载可变报头：<span class="token number">00</span> <span class="token number">04</span> <span class="token number">4</span>D <span class="token number">51</span> <span class="token number">54</span> <span class="token number">54</span> <span class="token number">04</span> C2 <span class="token number">00</span> <span class="token number">64</span> CONNECT <span class="token operator">=</span> 固定报头 <span class="token operator">+</span> 可变报头 <span class="token operator">+</span> 客户端ID <span class="token operator">+</span> 用户名 <span class="token operator">+</span> 密码<span class="token number">10</span> <span class="token number">6</span>E <span class="token number">00</span> <span class="token number">04</span> <span class="token number">4</span>D <span class="token number">51</span> <span class="token number">54</span> <span class="token number">54</span> <span class="token number">04</span> C2 <span class="token number">00</span> <span class="token number">64</span> <span class="token number">00</span> <span class="token number">26</span> <span class="token number">44</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">31</span> <span class="token number">7</span>C <span class="token number">73</span> <span class="token number">65</span> <span class="token number">63</span> <span class="token number">75</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">6</span>D <span class="token number">6F</span> <span class="token number">64</span> <span class="token number">65</span> <span class="token number">3</span>D <span class="token number">33</span> <span class="token number">2</span>C <span class="token number">73</span> <span class="token number">69</span> <span class="token number">67</span> <span class="token number">6</span>E <span class="token number">6</span>D <span class="token number">65</span> <span class="token number">74</span> <span class="token number">68</span> <span class="token number">6F</span> <span class="token number">64</span> <span class="token number">3</span>D <span class="token number">68</span> <span class="token number">6</span>D <span class="token number">61</span> <span class="token number">63</span> <span class="token number">73</span> <span class="token number">68</span> <span class="token number">61</span> <span class="token number">31</span> <span class="token number">7</span>C <span class="token number">00</span> <span class="token number">10</span> <span class="token number">44</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">31</span> <span class="token number">26</span> <span class="token number">61</span> <span class="token number">31</span> <span class="token number">32</span> <span class="token number">35</span> <span class="token number">50</span> <span class="token number">61</span> <span class="token number">76</span> <span class="token number">30</span> <span class="token number">79</span> <span class="token number">42</span> <span class="token number">4</span>D <span class="token number">00</span> <span class="token number">28</span> <span class="token number">61</span> <span class="token number">33</span> <span class="token number">38</span> <span class="token number">31</span> <span class="token number">64</span> <span class="token number">30</span> <span class="token number">39</span> <span class="token number">38</span> <span class="token number">34</span> <span class="token number">61</span> <span class="token number">61</span> <span class="token number">33</span> <span class="token number">36</span> <span class="token number">64</span> <span class="token number">38</span> <span class="token number">65</span> <span class="token number">33</span> <span class="token number">35</span> <span class="token number">61</span> <span class="token number">34</span> <span class="token number">32</span> <span class="token number">30</span> <span class="token number">32</span> <span class="token number">64</span> <span class="token number">38</span> <span class="token number">64</span> <span class="token number">63</span> <span class="token number">33</span> <span class="token number">32</span> <span class="token number">35</span> <span class="token number">36</span> <span class="token number">62</span> <span class="token number">37</span> <span class="token number">38</span> <span class="token number">37</span> <span class="token number">31</span> <span class="token number">66</span> <span class="token number">37</span> <span class="token number">33</span> <span class="token number">63</span><span class="token comment">/***************************************************************************/</span>客户端ID ：D001<span class="token operator">|</span>securemode<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>signmethod<span class="token operator">=</span>hmacsha1<span class="token operator">|</span><span class="token number">44</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">31</span> <span class="token number">7</span>C <span class="token number">73</span> <span class="token number">65</span> <span class="token number">63</span> <span class="token number">75</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">6</span>D <span class="token number">6F</span> <span class="token number">64</span> <span class="token number">65</span> <span class="token number">3</span>D <span class="token number">33</span> <span class="token number">2</span>C <span class="token number">73</span> <span class="token number">69</span> <span class="token number">67</span> <span class="token number">6</span>E <span class="token number">6</span>D <span class="token number">65</span> <span class="token number">74</span> <span class="token number">68</span> <span class="token number">6F</span> <span class="token number">64</span> <span class="token number">3</span>D <span class="token number">68</span> <span class="token number">6</span>D <span class="token number">61</span> <span class="token number">63</span> <span class="token number">73</span> <span class="token number">68</span> <span class="token number">61</span> <span class="token number">31</span> <span class="token number">7</span>C      用户名   ：D001<span class="token operator">&amp;</span>a125Pav0yBM<span class="token number">44</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">31</span> <span class="token number">26</span> <span class="token number">61</span> <span class="token number">31</span> <span class="token number">32</span> <span class="token number">35</span> <span class="token number">50</span> <span class="token number">61</span> <span class="token number">76</span> <span class="token number">30</span> <span class="token number">79</span> <span class="token number">42</span> <span class="token number">4</span>D密码： a381d0984aa36d8e35a4202d8dc3256b7871f73c<span class="token number">61</span> <span class="token number">33</span> <span class="token number">38</span> <span class="token number">31</span> <span class="token number">64</span> <span class="token number">30</span> <span class="token number">39</span> <span class="token number">38</span> <span class="token number">34</span> <span class="token number">61</span> <span class="token number">61</span> <span class="token number">33</span> <span class="token number">36</span> <span class="token number">64</span> <span class="token number">38</span> <span class="token number">65</span> <span class="token number">33</span> <span class="token number">35</span> <span class="token number">61</span> <span class="token number">34</span> <span class="token number">32</span> <span class="token number">30</span> <span class="token number">32</span> <span class="token number">64</span> <span class="token number">38</span> <span class="token number">64</span> <span class="token number">63</span> <span class="token number">33</span> <span class="token number">32</span> <span class="token number">35</span> <span class="token number">36</span> <span class="token number">62</span> <span class="token number">37</span> <span class="token number">38</span> <span class="token number">37</span> <span class="token number">31</span> <span class="token number">66</span> <span class="token number">37</span> <span class="token number">33</span> <span class="token number">63</span>    远程服务器地址：a125Pav0yBM<span class="token punctuation">.</span>iot<span class="token operator">-</span>as<span class="token operator">-</span>mqtt<span class="token punctuation">.</span>cn<span class="token operator">-</span>shanghai<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">1883</span><span class="token comment">/***************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-DISCONNECT-——–-16进制"><a href="#14-DISCONNECT-——–-16进制" class="headerlink" title="14.DISCONNECT ——– 16进制"></a>14.DISCONNECT ——– 16进制</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">E0 <span class="token number">00</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-PING-——–-16进制"><a href="#12-PING-——–-16进制" class="headerlink" title="12.PING ——– 16进制"></a>12.PING ——– 16进制</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">C0 <span class="token number">00</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-SUBSCRIBE-——–-16进制"><a href="#8-SUBSCRIBE-——–-16进制" class="headerlink" title="8.SUBSCRIBE ——– 16进制"></a>8.SUBSCRIBE ——– 16进制</h2><p>按照报文标识符来区分是谁发送的数据</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//订阅</span><span class="token comment">//82 ?? 00 0A + 主题（00 0A 为报文标识符）--->有效载荷 + 00</span><span class="token operator">/</span>sys<span class="token operator">/</span>a125Pav0yBM<span class="token operator">/</span>D001<span class="token operator">/</span>thing<span class="token operator">/</span>service<span class="token operator">/</span>property<span class="token operator">/</span>set<span class="token number">2F</span> <span class="token number">73</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">2F</span> <span class="token number">61</span> <span class="token number">31</span> <span class="token number">32</span> <span class="token number">35</span> <span class="token number">50</span> <span class="token number">61</span> <span class="token number">76</span> <span class="token number">30</span> <span class="token number">79</span> <span class="token number">42</span> <span class="token number">4</span>D <span class="token number">2F</span> <span class="token number">44</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">31</span> <span class="token number">2F</span> <span class="token number">74</span> <span class="token number">68</span> <span class="token number">69</span> <span class="token number">6</span>E <span class="token number">67</span> <span class="token number">2F</span> <span class="token number">73</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">76</span> <span class="token number">69</span> <span class="token number">63</span> <span class="token number">65</span> <span class="token number">2F</span> <span class="token number">70</span> <span class="token number">72</span> <span class="token number">6F</span> <span class="token number">70</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">74</span> <span class="token number">79</span> <span class="token number">2F</span> <span class="token number">73</span> <span class="token number">65</span> <span class="token number">74</span><span class="token comment">//订阅报文 等级0----->    </span><span class="token number">82</span> <span class="token number">35</span> <span class="token number">00</span> <span class="token number">0</span>A <span class="token number">00</span> <span class="token number">30</span> <span class="token number">2F</span> <span class="token number">73</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">2F</span> <span class="token number">61</span> <span class="token number">31</span> <span class="token number">32</span> <span class="token number">35</span> <span class="token number">50</span> <span class="token number">61</span> <span class="token number">76</span> <span class="token number">30</span> <span class="token number">79</span> <span class="token number">42</span> <span class="token number">4</span>D <span class="token number">2F</span> <span class="token number">44</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">31</span> <span class="token number">2F</span> <span class="token number">74</span> <span class="token number">68</span> <span class="token number">69</span> <span class="token number">6</span>E <span class="token number">67</span> <span class="token number">2F</span> <span class="token number">73</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">76</span> <span class="token number">69</span> <span class="token number">63</span> <span class="token number">65</span> <span class="token number">2F</span> <span class="token number">70</span> <span class="token number">72</span> <span class="token number">6F</span> <span class="token number">70</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">74</span> <span class="token number">79</span> <span class="token number">2F</span> <span class="token number">73</span> <span class="token number">65</span> <span class="token number">74</span> <span class="token number">00</span><span class="token comment">//响应------></span><span class="token number">90</span> <span class="token number">03</span> <span class="token number">00</span> <span class="token number">0</span>A <span class="token number">01</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">-</span> Failure 失败<span class="token punctuation">)</span>固定报头<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">+</span> 剩余长度 <span class="token operator">+</span> 可变报头<span class="token punctuation">(</span>报文标识符<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-SUBSCRIBE-等级1-——-16进制"><a href="#8-SUBSCRIBE-等级1-——-16进制" class="headerlink" title="8.SUBSCRIBE 等级1 ——- 16进制"></a>8.SUBSCRIBE 等级1 ——- 16进制</h2><p>按照报文标识符来区分是谁发送的数据</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;订阅&#x2F;&#x2F;82 ?? 00 0A（00 0A 为报文标识符） + 主题---&gt;有效载荷 + 01&#x2F;sys&#x2F;a125Pav0yBM&#x2F;D001&#x2F;thing&#x2F;service&#x2F;property&#x2F;set2F 73 79 73 2F 61 31 32 35 50 61 76 30 79 42 4D 2F 44 30 30 31 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74&#x2F;&#x2F;订阅报文 等级0-----&gt;    82 35 00 0A 00 30 2F 73 79 73 2F 61 31 32 35 50 61 76 30 79 42 4D 2F 44 30 30 31 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74 01&#x2F;&#x2F;响应------&gt;90 03 00 0A 01(0x80 - Failure 失败)固定报头(90) + 剩余长度 + 可变报头(报文标识符)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-UNSUBSCRIBE-——-16进制"><a href="#10-UNSUBSCRIBE-——-16进制" class="headerlink" title="10.UNSUBSCRIBE ——- 16进制"></a>10.UNSUBSCRIBE ——- 16进制</h2><p>改变报头和负载——&gt;A2 负载，去除等级，负载应该减一</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">A2 34 00 0A 00 30 2F 73 79 73 2F 61 31 32 35 50 61 76 30 79 42 4D 2F 44 30 30 31 2F 74 68 69 6E 67 2F 73 65 72 76 69 63 65 2F 70 72 6F 70 65 72 74 79 2F 73 65 74<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-发布-等级0-——-16进制"><a href="#3-发布-等级0-——-16进制" class="headerlink" title="3.发布 等级0 ——- 16进制"></a>3.发布 等级0 ——- 16进制</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">------&gt;开关&lt;--------&#x2F;&#x2F;030 95 01 00 2F 2F 73 79 73 2F 61 31 32 35 50 61 76 30 79 42 4D 2F 44 30 30 31 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 74 68 6F 64 22 3A 22 74 68 69 6E 67 2E 65 76 65 6E 74 2E 70 72 6F 70 65 72 74 79 2E 70 6F 73 74 22 2C 22 69 64 22 3A 22 30 30 30 30 30 30 30 30 31 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 50 6F 77 65 72 53 77 69 74 63 68 22 3A 30 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D &#x2F;&#x2F;130 95 01 00 2F 2F 73 79 73 2F 61 31 32 35 50 61 76 30 79 42 4D 2F 44 30 30 31 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 74 68 6F 64 22 3A 22 74 68 69 6E 67 2E 65 76 65 6E 74 2E 70 72 6F 70 65 72 74 79 2E 70 6F 73 74 22 2C 22 69 64 22 3A 22 30 30 30 30 30 30 30 30 31 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 50 6F 77 65 72 53 77 69 74 63 68 22 3A 31 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D固定报头 + 负载 + 发布主题 + 数据 &#x2F;&#x2F;发布主题&#x2F;sys&#x2F;a125Pav0yBM&#x2F;D001&#x2F;thing&#x2F;event&#x2F;property&#x2F;post&#x2F;&#x2F;数据&#123;&quot;method&quot;:&quot;thing.event.property.post&quot;,&quot;id&quot;:&quot;000000001&quot;,&quot;params&quot;:&#123;&quot;PowerSwitch&quot;:0&#125;,&quot;version&quot;:&quot;1.0.0&quot;&#125;------&gt;温湿度&lt;--------30 B5 01 00 2F 2F 73 79 73 2F 61 31 32 35 50 61 76 30 79 42 4D 2F 44 30 30 31 2F 74 68 69 6E 67 2F 65 76 65 6E 74 2F 70 72 6F 70 65 72 74 79 2F 70 6F 73 74 7B 22 6D 65 74 68 6F 64 22 3A 22 74 68 69 6E 67 2E 65 76 65 6E 74 2E 70 72 6F 70 65 72 74 79 2E 70 6F 73 74 22 2C 22 69 64 22 3A 22 30 30 30 30 30 30 30 30 31 22 2C 22 70 61 72 61 6D 73 22 3A 7B 22 43 75 72 72 65 6E 74 48 75 6D 69 64 69 74 79 22 3A 33 32 2C 22 43 75 72 72 65 6E 74 54 65 6D 70 65 72 61 74 75 72 65 22 3A 32 35 2E 36 35 7D 2C 22 76 65 72 73 69 6F 6E 22 3A 22 31 2E 30 2E 30 22 7D固定报头 + 负载 + 发布主题 + 数据 &#x2F;&#x2F;发布主题&#x2F;sys&#x2F;a125Pav0yBM&#x2F;D001&#x2F;thing&#x2F;event&#x2F;property&#x2F;post&#x2F;&#x2F;数据  &#123;&quot;method&quot;:&quot;thing.event.property.post&quot;,&quot;id&quot;:&quot;000000001&quot;,&quot;params&quot;:&#123;&quot;CurrentHumidity&quot;:32,&quot;CurrentTemperature&quot;:25.65&#125;,&quot;version&quot;:&quot;1.0.0&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ESP系列 </category>
          
          <category> 硬件基础模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
            <tag> GPIO </tag>
            
            <tag> MQTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派GPIO模块使用基础</title>
      <link href="/posts/dd95cd02/"/>
      <url>/posts/dd95cd02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-RPi-GPIO-模块使用基础"><a href="#1-RPi-GPIO-模块使用基础" class="headerlink" title="1.RPi.GPIO 模块使用基础"></a>1.RPi.GPIO 模块使用基础</h1><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><p>导入 RPi.GPIO 模块：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过该操作，您可以将模块名称映射为 GPIO，以便接下来您其它脚本进行使用。</p><p>导入模块并检查它是否导入成功，可以尝试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">except</span> RuntimeError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"导入 RPi.GPIO 时出现错误！这可能由于没有超级用户权限造成的。您可以使用 'sudo' 来运行您的脚本。"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="针脚编号"><a href="#针脚编号" class="headerlink" title="针脚编号"></a>针脚编号</h4><p>目前有两种方式可以通过 RPi.GPIO 对 Raspberry Pi 上的 IO 针脚进行编号。</p><p>第一种方式是使用 BOARD 编号系统。该方式参考 Raspberry Pi 主板上 P1 接线柱的针脚编号。使用该方式的优点是无需考虑主板的修订版本，您硬件始终都是可用的状态。您将无需从新连接线路和更改您的代码。</p><p>第二种方式是使用 BCM 编号。这是一种较低层的工作方式 – 该方式参考 Broadcom SOC 的通道编号。使用过程中，您始终要保证主板上的针脚与图表上标注的通道编号相对应。您的脚本可能在 Raspberry Pi 主板进行修订版本更新时无法工作。</p><p>指定您所使用的方式（必须指定）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BOARD<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h4><p>可能您的 Raspberry Pi 的 GPIO 上同时有多个脚本&#x2F;循环。因此，如果 RPi.GPIO 检测到某个针脚被设置为其它用途而非默认的状态（默认为输入），您会在尝试配置某脚本时得到警告消息。</p><p>禁用该警告消息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setwarnings<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置通道"><a href="#配置通道" class="headerlink" title="配置通道"></a>配置通道</h4><p>您需要为每个用于输入或输出的针脚配置通道。</p><p>配置为输入的通道：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>IN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（通道编号是基于您所使用的编号系统所指定的（BOARD 或 BCM）。）</p><p>更多关于输入通道的进阶信息可以在<a href="https://shumeipai.nxez.com/2016/09/28/rpi-gpio-module-inputs.html">这里</a>找到。</p><p>配置为输出的通道：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（通道编号是基于您所使用的编号系统所指定的（BOARD 或 BCM）。）</p><p>您还可以指定输出通道的初始值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">,</span> initial <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>读取 GPIO 针脚的值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（通道编号是基于您所使用的编号系统所指定的（BOARD 或 BCM）。）这将返回 0 &#x2F; GPIO.LOW &#x2F; False 或者 1 &#x2F; GPIO.HIGH &#x2F; True。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>设置 GPIO 针脚的输出状态：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（通道编号是基于您所使用的编号系统所指定的（BOARD 或 BCM）。）</p><p>状态可以为 0 &#x2F; GPIO.LOW &#x2F; False 或者 1 &#x2F; GPIO.HIGH &#x2F; True。</p><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><p>在任何程序结束后，请养成清理用过的资源的好习惯。使用 RPi.GPIO 也同样需要这样。恢复所有使用过的通道状态为输入，您可以避免由于短路意外损坏您的 Raspberry Pi 针脚。注意，该操作仅会清理您的脚本使用过的 GPIO 通道。</p><p>在您的脚本结束后进行清理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Raspberry-Pi-修订版本和-RPi-GPIO-版本"><a href="#Raspberry-Pi-修订版本和-RPi-GPIO-版本" class="headerlink" title="Raspberry Pi 修订版本和 RPi.GPIO 版本"></a>Raspberry Pi 修订版本和 RPi.GPIO 版本</h4><p>检测 Raspberry Pi 主板的修订版本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>RPI_REVISION<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检测 RPi.GPIO 的版本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>VERSION<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-使用-RPi-GPIO-模块的输出（Output）功能"><a href="#2-使用-RPi-GPIO-模块的输出（Output）功能" class="headerlink" title="2.使用 RPi.GPIO 模块的输出（Output）功能"></a>2.使用 RPi.GPIO 模块的输出（Output）功能</h1><p>1、首先对 RPi.GPIO 进行设置（根据<a href="https://shumeipai.nxez.com/2016/09/28/rpi-gpio-module-basics.html">这里</a>的描述）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIOGPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、设置某个输出针脚状态为高电平：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span><span class="token comment"># 或者</span>GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 或者</span>GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、设置某个输出针脚状态为低电平：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>LOW<span class="token punctuation">)</span><span class="token comment"># 或者</span>GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 或者</span>GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span>`<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、程序结束后进行清理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，您可以读取使用 input() 函数设置的输出通道的当前状态。例如对输出进行切换：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token keyword">not</span> GPIO<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-使用-RPI-GPIO-模块的脉宽调制（PWM）功能"><a href="#3-使用-RPI-GPIO-模块的脉宽调制（PWM）功能" class="headerlink" title="3.使用 RPI.GPIO 模块的脉宽调制（PWM）功能"></a>3.使用 RPI.GPIO 模块的脉宽调制（PWM）功能</h1><p>脉宽调制(PWM)是指用微处理器的数字输出来对模拟电路进行控制，是一种对模拟信号电平进行数字编码的方法。在树莓派上，可以通过对GPIO的编程来实现PWM。</p><p>创建一个 PWM 实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p  <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> frequency<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启用 PWM：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>start<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>   <span class="token comment"># dc 代表占空比（范围：0.0 &lt;= dc >= 100.0）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改频率：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>ChangeFrequency<span class="token punctuation">(</span>freq<span class="token punctuation">)</span>   <span class="token comment"># freq 为设置的新频率，单位为 Hz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改占空比：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>  <span class="token comment"># 范围：0.0 &lt;= dc >= 100.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止 PWM：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，如果实例中的变量“p”超出范围，也会导致 PWM 停止。</p><p>以下为使 LED 每两秒钟闪烁一次的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIOGPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BOARD<span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>p <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'点击回车停止：'</span><span class="token punctuation">)</span>   <span class="token comment"># 在 Python 2 中需要使用raw_input</span>p<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为使 LED 在亮&#x2F;暗之间切换的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIOGPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BOARD<span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>p <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 通道为 12 频率为 50Hz</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">for</span> dc <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">for</span> dc  <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>exceptKeyboardInterrupt<span class="token punctuation">:</span><span class="token keyword">pass</span>p<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> RPi.GPIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派控制直流电机</title>
      <link href="/posts/f27d64d3/"/>
      <url>/posts/f27d64d3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-直流电机"><a href="#1-直流电机" class="headerlink" title="1.直流电机"></a>1.直流电机</h1><p>直流电机是一种将直流电能转换为机械能的装置，被广泛的用于驱动各种设备，如电风扇、遥控小车、电动车窗等，非常适合作为机器人的行走机构，您可以很容易的在网上购买到，价格也不是很贵。<br> 　　小型直流电机的的电压范围通常是1.5V~30V，使用两根导线连接到直流电源上就能让电机转动起来，电压越高转得就越快。每个直流电机都有一个推荐电压，超出推荐电压太多容易导致电机被烧毁，而供电电压太低则转不起来。通过交换两根连接在电机上的导线顺序（实际上是改变电源的正负极），可以改变电机的转向。前面章节我们说过，直流电机属于高功耗元件，不可以直接使用树莓派进行驱动，因此我们需要使用一个外部电源。<br> 　　小型直流电机通常输出很高的转速和较低的扭矩，在作为机器人的驱动装置时，一般需要连接一个变速器，将其转换为低转速、高扭矩，使之有足够的力量驱动机器人。图7.1是典型的带变速器的小型直流电机，建议变速器和电机一起购买。</p><p><img src="E:\大三上\树莓派学习\笔记\6.用树莓派控制直流电机（L298N）.assets\13532817-f31f5406bfcace7b.png" alt="img" loading="lazy"></p><h1 id="2-双H桥直流电机驱动模块（L298N）"><a href="#2-双H桥直流电机驱动模块（L298N）" class="headerlink" title="2.双H桥直流电机驱动模块（L298N）"></a>2.双H桥直流电机驱动模块（L298N）</h1><p>H桥（H-Bridge）是控制直流电机的常用电路，因其电路形状酷似字母H而得名，可以控制直流电机的转速和方向，典型的H桥芯片有L293D、L298N等，以下我们以L298N为例进行介绍。实际使用的时候，为提高芯片的安全性、可靠性和方便性，我们一般会给芯片外接一些保护电路，并把输入输出引脚引接到排针上，从而形成一个功能模块。图7.2是一款典型的L298N双H桥直流电机驱动模块，可以很容易从网上购买到，价格也便宜。该模块的主要特点如下：</p><p><img src="E:\大三上\树莓派学习\笔记\6.用树莓派控制直流电机（L298N）.assets\13532817-d33ac6916eb9f32c.png" alt="img" loading="lazy"></p><ul><li>采用L298N双桥直流电机驱动芯片</li><li>工作电压范围5V35V，如果需要从模块内取电，则供电范围为7V35V</li><li>峰值输出电流2A</li><li>每个通道有一个使能输入端</li><li>可以驱动两个直流电机或者一个四线步进电机</li></ul><p> 　L298N双H桥直流电机驱动模块的引脚可以归纳成电源、控制和输出等三大类，下面是各类引脚的功能说明。</p><ul><li><strong>电压类引脚</strong></li></ul><p> 　+12V输入：L298N芯片的电源正极，模块上标称+12V，但实际范围可以是5V35V，如果需从模块内取电，则其范围为7V35V。<br> 　　GND：L298N芯片的电源地，使用的时候应该把树莓派的GND接到这里，即两者需要共地。<br> 　　+5V输出：L298N芯片输出的5V电源，可以给外部设备供电，使用的时候需要用跳线把5V输出使能端短接起来。</p><ul><li><strong>控制类引脚</strong></li></ul><p> 　ENA、ENB：A、B通道的使能端，高电平有效，可以用PWM来实现调速。使用时，可以接到树莓派的GPIO上，实现用程序进行控制。<br> 　　IN1、IN2、IN3、IN4：IN1、IN2为A通道的控制输入，IN3、IN4为B通道的控制输入。</p><ul><li><strong>输出类引脚</strong></li></ul><p> 　OUT1、OUT2、OUT3、OUT4：OUT1、OUT2由A通道输出，OUT3、OUT4由B通道输出，可以用于连接直流电机等设备。</p><p> 　控制直流电机的转向和转速实际是通过给控制类引脚设置不同的值来实现的，表7.1是使用通道A的控制直流电机的真值表，通道B与此类似。</p><p><img src="https://upload-images.jianshu.io/upload_images/13532817-d724bfe24fac8005.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/421/format/webp" alt="img" loading="lazy"></p><p>通道A的控制直流电机的真值表</p><blockquote><p><strong>提示：</strong></p><p>您购买到的L298N双H桥直流电机驱动模块可能与本章介绍的存在一定的差异，但这一类功能模块大同小异，请跟商家索要相应的技术资料了解更多的使用细节。</p></blockquote><h1 id="3-让直流电机动起来"><a href="#3-让直流电机动起来" class="headerlink" title="3. 让直流电机动起来"></a>3. 让直流电机动起来</h1><p> 　下面进入实战环节，我们将用树莓派通过L298N双H桥直流电机驱动模块控制一个电机的转向和转速。为了能让读者更好的理解，我们首先演示如何控制电机的转向，然后再进一步介绍如何控制电机转速。</p><h2 id="3-1-实验电路"><a href="#3-1-实验电路" class="headerlink" title="3.1 实验电路"></a>3.1 实验电路</h2><p> 　图7.3所示的是树莓派、L298N双H桥直流电机驱动模块和电机间连接的电路图，最终实物连线图如图7.4所示。我们使用树莓派的GPIO13、GPIO19和GPIO26等3个引脚，分别连接到L298N双H桥直流电机驱动模块的ENA、IN1和IN2，通过输入表7.1所示的不同电平组合就可以实现对电机的操纵。控制电机的转向和转速都是使用该电路，向ENA输入不同占空比的PWM脉冲信号就可以控制电机的转速。</p><p><img src="https://upload-images.jianshu.io/upload_images/13532817-ac38b15a79d6272d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/436/format/webp" alt="img" loading="lazy"></p><p>图 7.3 小型直流电机控制电路图</p><p><img src="https://upload-images.jianshu.io/upload_images/13532817-e41c49bbc602d114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/756/format/webp" alt="img" loading="lazy"></p><p> 　尽管L298N双H桥直流电机驱动模块能驱动两个直流电机，但我们只演示如何驱动一个。驱动两个电机使用的是相同的技术，如果在您的项目中需要用到两个，也可以很容易地扩展它。</p><h2 id="3-2-程序思路"><a href="#3-2-程序思路" class="headerlink" title="3.2 程序思路"></a>3.2 程序思路</h2><p> 　控制电机转向和转速可以使用同一个电路，但程序思路上我们分两个程序来演示，具体思路如下：</p><ul><li><strong>控制电机转向思路</strong></li></ul><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">BEGIN</span>      引入<span class="token constant">GPIO</span>库      将连接<span class="token constant">ENA</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    将连接<span class="token constant">IN1</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    将连接<span class="token constant">IN2</span>的<span class="token constant">GPIO</span>引脚设置为输出模式        <span class="token constant">DO</span> <span class="token constant">FOREVER</span>          将<span class="token constant">IN1</span>设置为<span class="token number">0</span>，<span class="token constant">IN2</span>设置为<span class="token number">1</span>，将电机设置为正向转动          将<span class="token constant">ENA</span>设置为<span class="token number">1</span>，驱动<span class="token constant">A</span>通道电机转动          等待<span class="token number">5</span>秒          将<span class="token constant">ENA</span>设置为<span class="token number">0</span>，停止电机转动          等待<span class="token number">2</span>秒          将<span class="token constant">IN1</span>设置为<span class="token number">1</span>，<span class="token constant">IN2</span>设置为<span class="token number">0</span>，将电机设置为反向转动          将<span class="token constant">ENA</span>设置为<span class="token number">1</span>，驱动<span class="token constant">A</span>通道电机转动          等待<span class="token number">5</span>秒          将<span class="token constant">ENA</span>设置为<span class="token number">0</span>，停止电机转动          等待<span class="token number">2</span>秒    <span class="token constant">ENDO</span>      停止<span class="token constant">PWM</span>      清理释放<span class="token constant">GPIO</span>资源  <span class="token keyword">END</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>提示：</strong></p><p>除了采用将ENA置0的方法来让电机停止转动，将IN1和IN2同时设置为0或1也可以让电机停止下来。</p></blockquote><ul><li><strong>控制电机转速思路</strong></li></ul><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">BEGIN</span>      引入<span class="token constant">GPIO</span>库      将连接<span class="token constant">ENA</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    将连接<span class="token constant">IN1</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    将连接<span class="token constant">IN2</span>的<span class="token constant">GPIO</span>引脚设置为输出模式    设置<span class="token constant">ENA</span>输入一定频率的<span class="token constant">PWM</span>脉冲信号，创建<span class="token constant">PWM</span>对象      开始向<span class="token constant">ENA</span>输入占空比为<span class="token number">0</span>的<span class="token constant">PWM</span>脉冲信号          <span class="token constant">DO</span> <span class="token constant">FOREVER</span>          将<span class="token constant">IN1</span>设置为<span class="token number">0</span>，<span class="token constant">IN2</span>设置为<span class="token number">1</span>，将电机设置为正向转动          将<span class="token constant">ENA</span>设置为<span class="token number">1</span>，驱动<span class="token constant">A</span>通道电机转动                  speed <span class="token operator">=</span> <span class="token number">0</span>        <span class="token constant">DOWHILE</span> speed <span class="token operator">&lt;</span> <span class="token number">100</span>              将输入<span class="token constant">ENA</span>的<span class="token constant">PWM</span>脉冲信号的占空比修改为speed            speed <span class="token operator">+=</span> <span class="token number">5</span>            等待<span class="token number">1</span>秒        <span class="token constant">ENDDO</span>        将<span class="token constant">IN1</span>设置为<span class="token number">1</span>，<span class="token constant">IN2</span>设置为<span class="token number">0</span>，将电机设置为反向转动          将<span class="token constant">ENA</span>设置为<span class="token number">1</span>，驱动<span class="token constant">A</span>通道电机转动                  speed <span class="token operator">=</span> <span class="token number">0</span>        <span class="token constant">DOWHILE</span> speed <span class="token operator">&lt;</span> <span class="token number">100</span>              将输入<span class="token constant">ENA</span>的<span class="token constant">PWM</span>脉冲信号的占空比修改为speed            speed <span class="token operator">+=</span> <span class="token number">5</span>            等待<span class="token number">1</span>秒        <span class="token constant">ENDDO</span>    <span class="token constant">ENDO</span>          停止<span class="token constant">PWM</span>      清理释放<span class="token constant">GPIO</span>资源  <span class="token keyword">END</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 　电机的转向控制和转速控制的程序思路的最大区别在于ENA输入信号的不同。控制电机转向的程序思路只是简单的通过将ENA设置为1或0来启动和停止电机。对于电机转速控制，ENA输入的PWM脉冲信号，通过改变PWM脉冲信号的占空比来改变电机转速，占空比越大速度就越快，占空比为100%时相当于输入1（高电平），占空比为0%时相当于输入0（低电平）。</p><h2 id="3-3-程序代码"><a href="#3-3-程序代码" class="headerlink" title="3.3 程序代码"></a>3.3 程序代码</h2><p> 　以下是直流电机转向和转速控制程序，程序的详细说明见注释。</p><ul><li><strong>控制电机转向程序</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO         <span class="token comment"># 引入GPIO模块</span><span class="token keyword">import</span> time                     <span class="token comment"># 引入time模块</span>ENA <span class="token operator">=</span> <span class="token number">13</span>                        <span class="token comment"># 设置GPIO13连接ENA</span>IN1 <span class="token operator">=</span> <span class="token number">19</span>                        <span class="token comment"># 设置GPIO19连接IN1</span>IN2 <span class="token operator">=</span> <span class="token number">26</span>                        <span class="token comment"># 设置GPIO26连接IN2</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化</span>        GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>          <span class="token comment"># 使用BCM编号方式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>       <span class="token comment"># 将连接ENA的GPIO引脚设置为输出模式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>       <span class="token comment"># 将连接IN1的GPIO引脚设置为输出模式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>       <span class="token comment"># 将连接IN2的GPIO引脚设置为输出模式</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 驱动电机正向旋转5秒</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># 将IN1设置为0</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 将IN2设置为1</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 将ENA设置为1，启动A通道电机</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>               <span class="token comment"># 等待电机转动5秒</span>            <span class="token comment"># 电机停止2秒</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># 将ENA设置为0</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token comment"># 等待电机停止2秒</span>            <span class="token comment"># 驱动电机反向旋转5秒</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 将IN1设置为1</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># 将IN2设置为0</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 将ENA设置为1，启动A通道电机</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>               <span class="token comment"># 等待电机转动5秒</span>            <span class="token comment"># 电机停止2秒</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># 将ENA设置为0</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token comment"># 等待电机停止2秒</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        pwm<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 停止PWM</span>        GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 清理释放GPIO资源，将GPIO复位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 　运行这个程序后，您将看到直流电机反复的正向转动5秒后，停止两秒，再反向转动5秒后，停止2秒。</p><ul><li><strong>控制电机转速程序</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO         <span class="token comment"># 引入GPIO模块</span><span class="token keyword">import</span> time                     <span class="token comment"># 引入time模块</span>ENA <span class="token operator">=</span> <span class="token number">13</span>                        <span class="token comment"># 设置GPIO13连接ENA</span>IN1 <span class="token operator">=</span> <span class="token number">19</span>                        <span class="token comment"># 设置GPIO19连接IN1</span>IN2 <span class="token operator">=</span> <span class="token number">26</span>                        <span class="token comment"># 设置GPIO26连接IN2</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化</span>        GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>              <span class="token comment"># 使用BCM编号方式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>           <span class="token comment"># 将ENA对应的GPIO引脚设置为输出模式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>           <span class="token comment"># 将IN1对应的GPIO引脚设置为输出模式</span>        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>           <span class="token comment"># 将IN2对应的GPIO引脚设置为输出模式</span>        freq <span class="token operator">=</span> <span class="token number">500</span>        speed <span class="token operator">=</span> <span class="token number">0</span>        pwm <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>ENA<span class="token punctuation">,</span> freq<span class="token punctuation">)</span>           <span class="token comment"># 设置向ENA输入PWM脉冲信号，频率为freq并创建PWM对象</span>        pwm<span class="token punctuation">.</span>start<span class="token punctuation">(</span>speed<span class="token punctuation">)</span>                    <span class="token comment"># 以speed的初始占空比开始向ENA输入PWM脉冲信号</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 将电机设置为正向转动</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>         <span class="token comment"># 将IN1设置为0</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token comment"># 将IN2设置为1</span>            <span class="token comment"># 通过改变PWM占空比，让电机转速不断加快</span>            <span class="token keyword">for</span> speed <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>speed<span class="token punctuation">)</span>  <span class="token comment"># 改变PWM占空比</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 将电机设置为反向转动</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token comment"># 将IN1设置为1</span>            GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>         <span class="token comment"># 将IN2设置为0</span>            <span class="token comment"># 通过改变PWM占空比，让电机转速不断加快</span>            <span class="token keyword">for</span> speed <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>speed<span class="token punctuation">)</span>  <span class="token comment"># 改变PWM占空比</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        pwm<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment"># 停止PWM</span>        GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 清理释放GPIO资源，将GPIO复位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 　运行这个程序后，您将看到直流电机首先正向转动，转动速度不断增加，在达到最大转速后，直流电机短暂停止转动，然后反向转动，转动速度不断增加，如此反复运动。</p><h1 id="4-本章小结"><a href="#4-本章小结" class="headerlink" title="4 .本章小结"></a>4 .本章小结</h1><p> 　本章首先介绍了直流电机的基本知识，然后介绍了L298N双H桥直流电机驱动模块的相关基础知识，最后介绍了使用树莓派和L298N双H桥直流电机驱动模块来控制一个直流电机的转向和转速的电路、思路和程序等知识。</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 直流电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派常用模块</title>
      <link href="/posts/e45d4a36/"/>
      <url>/posts/e45d4a36/</url>
      
        <content type="html"><![CDATA[<h1 id="1-PWM"><a href="#1-PWM" class="headerlink" title="1.PWM"></a>1.PWM</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO                 <span class="token comment"># 引入GPIO模块</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    LedPin <span class="token operator">=</span> <span class="token number">19</span>    freq <span class="token operator">=</span> <span class="token number">100</span>                          <span class="token comment"># 存放PWM频率变量，这里初始值为100，可以根据实际需要修改</span>    dc <span class="token operator">=</span> <span class="token number">0</span>                              <span class="token comment"># 存放PWM占空比变量，这里初始值为0，可以根据实际需要修改</span>    GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>              <span class="token comment"># 使用BCM编号方式</span>    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>LedPin<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>        <span class="token comment"># 将GPIO19设置为输出模式</span>    pwm <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>LedPin<span class="token punctuation">,</span> freq<span class="token punctuation">)</span>        <span class="token comment"># 创建PWM对象，并指定初始频率</span>    pwm<span class="token punctuation">.</span>start<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>                       <span class="token comment"># 启动PWM，并指定初始占空比</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        freq <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Please input the frequency of PWM(1-2000Hz): "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 等待输入新PWM频率</span>        pwm<span class="token punctuation">.</span>ChangeFrequency<span class="token punctuation">(</span>freq<span class="token punctuation">)</span>       <span class="token comment"># 改变PWM频率</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            dc <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Please input the duty cycle(0-100): "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 等待输入新PWM占空比</span>            pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>     <span class="token comment"># 改变PWM占空比</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        pwm<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 停止PWM</span>        GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 清理释放GPIO资源，将GPIO复位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> PWM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派运行实例</title>
      <link href="/posts/2cd3bcd8/"/>
      <url>/posts/2cd3bcd8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、树莓派引脚定义"><a href="#一、树莓派引脚定义" class="headerlink" title="一、树莓派引脚定义"></a>一、树莓派引脚定义</h1><p>学习如何用树莓派驱动LED灯时需要先了解树莓派管脚GPIO的编码方式，树莓派的管脚编码方式与51单片机的管脚编码有些不一样，在树莓派的GPIO上分为<strong>两种编码方式</strong>，分别为<strong>BCM</strong>和<strong>wiringPi编码</strong>，不同的编码方式在编写程序驱动GPIO时稍有区别，具体编码如下：</p><p><img src="https://i.loli.net/2020/12/19/EQvngLhCGaoP7Dk.png" alt="image-20201027185041036" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/BhRGtWprT3yYZ6m.png" alt="image-20201027193659980" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/bqijf82TmUxknwG.png" alt="image-20201027193715459" loading="lazy"></p><h1 id="二、蜂鸣器响"><a href="#二、蜂鸣器响" class="headerlink" title="二、蜂鸣器响"></a>二、蜂鸣器响</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO                <span class="token comment"># 引入GPIO模块</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep                     <span class="token comment"># 引入time模块</span>GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>            <span class="token comment"># 使用BCM编号方式</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span>GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>            <span class="token comment"># 将GPIO19设置为输出模式</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                                     <span class="token comment"># 无限循环  </span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span>GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span>   <span class="token comment"># 将GPIO19设置为高电平，点亮LED  </span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                    <span class="token comment"># 等待1秒钟 </span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span>GPIO<span class="token punctuation">.</span>LOW<span class="token punctuation">)</span>  <span class="token comment"># 将GPIO19设置为低电平，熄灭LED </span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                              <span class="token comment"># 等待0.5秒钟 </span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                      <span class="token comment"># 按下任意键退出</span>GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment"># 清理释放GPIO资源，将GPIO复位 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> RPi.GPIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装OpenCV</title>
      <link href="/posts/bbf58368/"/>
      <url>/posts/bbf58368/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装所需要的库和依赖"><a href="#一、安装所需要的库和依赖" class="headerlink" title="一、安装所需要的库和依赖"></a>一、安装所需要的库和依赖</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo pip3 install numpysudo apt<span class="token operator">-</span>get install build<span class="token operator">-</span>essential git cmake pkg<span class="token operator">-</span>config <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libjpeg8<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libtiff5<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libjasper<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libpng12<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libavcodec<span class="token operator">-</span>dev libavformat<span class="token operator">-</span>dev libswscale<span class="token operator">-</span>dev libv4l<span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libgtk2<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>dev <span class="token operator">-</span>ysudo apt<span class="token operator">-</span>get install libatlas<span class="token operator">-</span>base<span class="token operator">-</span>dev gfortran <span class="token operator">-</span>y    sudo pip3 install opencv<span class="token operator">-</span>python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、测试安装环境"><a href="#二、测试安装环境" class="headerlink" title="二、测试安装环境"></a>二、测试安装环境</h1><blockquote><p>在终端输入 ：python3<br>然后 ：import cv2<br>如果安装成功，则import不会有问题<br>下面就可以输出OpenCv的版本号<br>使用 ：print(cv2.version)<br>退出python用： exit()</p></blockquote><p><img src="https://i.loli.net/2020/12/07/nPGjdg2J8tHpO9U.png" alt="image-20201026180316710" loading="lazy"></p><h1 id="三、简单应用"><a href="#三、简单应用" class="headerlink" title="三、简单应用"></a>三、简单应用</h1><blockquote><p>使用OpenCv库读取usb摄像头，实时显示并拍照</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npcap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># get a frame</span> ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># show a frame</span> cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"capture"</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>   <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#退出并拍照</span>  cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"takephoto2.jpg"</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"take Photo Ok"</span><span class="token punctuation">)</span>  <span class="token keyword">break</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/07/rD73QjcCfSavMEK.png" alt="image-20201026175921758" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派环境搭建</title>
      <link href="/posts/f0a343d3/"/>
      <url>/posts/f0a343d3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-修改启动参数"><a href="#一、-修改启动参数" class="headerlink" title="一、 修改启动参数"></a>一、 修改启动参数</h1><h2 id="1、打开22号ssh端口"><a href="#1、打开22号ssh端口" class="headerlink" title="1、打开22号ssh端口"></a>1、打开22号ssh端口</h2><blockquote><p>在boot目录建立ssh空文件，不需要任何后缀名</p></blockquote><p><img src="https://i.loli.net/2020/12/19/lPsBZFKAov4OJ8f.png" alt="image-20201025213600034" loading="lazy"></p><h2 id="2、配置WIFI"><a href="#2、配置WIFI" class="headerlink" title="2、配置WIFI"></a>2、配置WIFI</h2><blockquote><p>在boot目录建立wpa_supplicant.conf内容如下（WiFi账号密码改为自己的）：</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">country<span class="token operator">=</span>CNctrl_interface<span class="token operator">=</span>DIR<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>wpa_supplicant GROUP<span class="token operator">=</span>netdevupdate_config<span class="token operator">=</span><span class="token number">1</span>network<span class="token operator">=</span><span class="token punctuation">&#123;</span>ssid<span class="token operator">=</span><span class="token string">"hw1311"</span>psk<span class="token operator">=</span><span class="token string">"13111311"</span>key_mgmt<span class="token operator">=</span>WPA<span class="token operator">-</span>PSKpriority<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、连接树莓派"><a href="#二、连接树莓派" class="headerlink" title="二、连接树莓派"></a>二、连接树莓派</h1><h2 id="1、通过ssh连接树莓派"><a href="#1、通过ssh连接树莓派" class="headerlink" title="1、通过ssh连接树莓派"></a>1、通过ssh连接树莓派</h2><blockquote><p>打开命令行，输入<strong>ssh <a href="mailto:&#112;&#105;&#x40;&#114;&#x61;&#x73;&#x70;&#x62;&#101;&#x72;&#114;&#x79;&#112;&#105;&#x2e;&#108;&#x6f;&#99;&#97;&#108;">&#112;&#105;&#x40;&#114;&#x61;&#x73;&#x70;&#x62;&#101;&#x72;&#114;&#x79;&#112;&#105;&#x2e;&#108;&#x6f;&#99;&#97;&#108;</a></strong></p></blockquote><p>若出现报错，上传用户文件夹.ssh文件夹里面文件，再次登录</p><p><img src="https://i.loli.net/2020/12/19/kjeKxhu3dTJLWX7.png" alt="image-20201025214255208" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/H948WAqePTOS5Xz.png" alt="image-20201025214311586" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/s5GjY6rdTXlA3Mv.png" alt="image-20201025214715729" loading="lazy"></p><h2 id="2、通过VNC远程访问"><a href="#2、通过VNC远程访问" class="headerlink" title="2、通过VNC远程访问"></a>2、通过VNC远程访问</h2><blockquote><p>电脑安装VNC：<a href="https://www.realvnc.com/en/connect/download/viewer/">https://www.realvnc.com/en/connect/download/viewer/</a></p></blockquote><p>树莓派并不需要你为她配备单独的显示器、键盘和鼠标，你可以设置VNC或SSH，通过你平时常用的电脑来远程访问树莓派。</p><p>Raspbian系统安装后默认带有VNC和SSH软件包（除非你在官网选择下载的是最小安装包），你只需要把VNC和SSH服务打开就可以了。</p><blockquote><p>咱们的默认账户是：pi</p><p>pi账户的默认密码是：raspberry</p></blockquote><ul><li>启用VNC和SSH服务</li></ul><p>还是打开LX终端，在命令提示符后键入如下命令，然后按回车键：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo raspi<span class="token operator">-</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你将打开树莓派的软件配置工具。</p><p><img src="https://i.loli.net/2020/12/19/JrnbRuW8HZKGsYN.png" alt="image-20201025215441969" loading="lazy"></p><p>使用上下方向键选择 5 Interfacing Option，按回车键进入接口配置。</p><p><img src="https://i.loli.net/2020/12/19/blXH72SDTVa8hf6.png" alt="image-20201025215527917" loading="lazy"></p><p>在这里你可以看到 P2 SSH 和 P3 VNC，二者的启用方法相同，下面以VNC为例介绍启用操作步骤。</p><p>使用上下方向键选择P3 VNC，按回车键进入 VNC配置。</p><p><img src="https://i.loli.net/2020/12/19/gJ8ryzdkRmDIGFQ.png" alt="image-20201025215610796" loading="lazy"></p><p>使用左右方向键选择&lt;是&gt;，按回车键，系统提示VNC服务已启动。</p><p><img src="https://i.loli.net/2020/12/19/BFvbxi2kCTuGI3h.png" alt="image-20201025215654238" loading="lazy"></p><p>按回车键&lt;确定&gt;，回到配置工具主界面，通过 Tab 键选中右下角的<Finish>，按回车即可完成VNC服务的打开。</p><p><img src="https://i.loli.net/2020/12/19/3NoiLP4rf1sdej9.png" alt="image-20201025215755506" loading="lazy"></p><p>最后不要忘了要查看树莓派的IP地址，在终端里输入 ifconfig 命令，按回车键后你将看到树莓派的IP地址。</p><p><img src="https://i.loli.net/2020/12/19/6i1UGRwHQmV5hat.png" alt="image-20201025215842212" loading="lazy"></p><ul><li><strong>使用VNC远程访问树莓派</strong></li></ul><p><img src="https://i.loli.net/2020/12/19/iL1wpTntHNrKW7l.png" alt="image-20201025220051910" loading="lazy"></p><ul><li>出现这种情况</li></ul><p><img src="https://i.loli.net/2020/12/19/GdgwDtUqFHE3vkA.png" alt="image-20201025220702840" loading="lazy"></p><p>解决办法：changing the resolution to the highest（更改更高的分辨率即可），ssh下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo raspi<span class="token operator">-</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/19/c1rXkOH4fb8DnTo.png" alt="image-20201025220819826" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/l9ImB2wUfSYhZka.png" alt="image-20201025220837492" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/19/PfXCFtdZLO4Q1KA.png" alt="image-20201025220953102" loading="lazy"></p><p>重新用VNC连接</p><p><img src="https://i.loli.net/2020/12/19/7pesuBPzoYtwClH.png" alt="image-20201025221123776" loading="lazy"></p><h1 id="三、树莓派初始设置"><a href="#三、树莓派初始设置" class="headerlink" title="三、树莓派初始设置"></a>三、树莓派初始设置</h1><p>初次进入Raspbian，系统会自动弹出欢迎界面（Welcome to Raspberry Pi），也就是树莓派的初始设置引导程序，点击右下角的【Next】按钮，开始进行初始配置。<img src="https://i.loli.net/2020/12/19/o4tMXjGy7FJ96Uu.png" alt="image-20201025221315270" loading="lazy"></p><ul><li><strong>设置国家、语言和时区</strong></li></ul><p>你可以依次选择China、Chinese和Shanghai，选择完成后点击【Next】按钮。<img src="https://i.loli.net/2020/12/19/7NtsBGhuiDaV3RC.png" alt="image-20201025221357198" loading="lazy"></p><ul><li><strong>设置账户密码</strong></li></ul><p>Raspbian默认用户名为“pi”（不带引号），默认密码为“raspberry”（不带引号），为了安全起见，系统强烈建议你修改密码为一个只有你自己知道的密码，当然你千万不要把自己设置的密码忘了。录入完新的密码，点击【Next】按钮。<img src="https://i.loli.net/2020/12/19/yJPsmZejUxNvtgM.png" alt="image-20201025221437477" loading="lazy"></p><ul><li><strong>设置WiFI网络</strong></li></ul><p>选择你的WiFi热点，然后点击【Next】按钮，在接下来弹出的窗口中输入你的WiFi密码，随后点击【Next】按钮。<img src="https://i.loli.net/2020/12/19/5IuRtLXfzCBnNxc.png" alt="image-20201025221547544" loading="lazy"></p><ul><li><strong>软件升级</strong></li></ul><p>WiFi连接成功后，系统会提示你进行软件升级，你可以点击【Next】按钮进行升级，也可以点击【Skip】按钮跳过升级。升级需要较长时间，因此本文先跳过升级，日后再通过包管理工具来升级。<img src="https://i.loli.net/2020/12/19/fAXplQIqGTh86MH.png" alt="image-20201025221627595" loading="lazy"></p><ul><li><strong>重新启动</strong></li></ul><p>最后就是完成了上述全部设置，系统提示设置完成，点击【Restart】按钮重新启动系统。<img src="https://i.loli.net/2020/12/19/Q7yKu8Mibc4A1En.png" alt="image-20201025221654070" loading="lazy"></p><h1 id="四、配置静态IP"><a href="#四、配置静态IP" class="headerlink" title="四、配置静态IP"></a>四、配置静态IP</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//设置静态IP  加在文件后面</span>sudo nano <span class="token operator">/</span>etc<span class="token operator">/</span>dhcpcd<span class="token punctuation">.</span>conf    interface wlan0<span class="token keyword">static</span> ip_address<span class="token operator">=</span><span class="token number">172.16</span><span class="token number">.47</span><span class="token number">.86</span><span class="token operator">/</span><span class="token number">24</span><span class="token keyword">static</span> routers<span class="token operator">=</span><span class="token number">172.16</span><span class="token number">.47</span><span class="token number">.1</span><span class="token keyword">static</span> domain_name_servers<span class="token operator">=</span><span class="token number">218.196</span><span class="token number">.40</span><span class="token number">.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、换源"><a href="#五、换源" class="headerlink" title="五、换源"></a>五、换源</h1><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/</a></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"># 编辑 `<span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list` 文件，删除原文件所有内容，用以下内容取代：deb http<span class="token operator">:</span><span class="token comment">//mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi</span>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token comment">//mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi</span># 编辑 `<span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list<span class="token punctuation">.</span>d<span class="token operator">/</span>raspi<span class="token punctuation">.</span>list` 文件，删除原文件所有内容，用以下内容取代：deb http<span class="token operator">:</span><span class="token comment">//mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 镜像烧录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派开机自动发送IP地址到邮箱</title>
      <link href="/posts/3daa603a/"/>
      <url>/posts/3daa603a/</url>
      
        <content type="html"><![CDATA[<h1 id="1-编写开机获取IP地址的python程序"><a href="#1-编写开机获取IP地址的python程序" class="headerlink" title="1.编写开机获取IP地址的python程序"></a>1.编写开机获取IP地址的python程序</h1><blockquote><p>获取指定网卡的IP地址：ifconfig wlan0 | grep inet | grep -o -E ([0-9]+.){3}[0-9]+ | head -n 1</p><p>获取IP地址： hostname -I</p></blockquote><p><img src="https://i.loli.net/2020/12/17/8rsoDSpbYzmUANe.png" alt="image-20200725142149402" loading="lazy"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>image <span class="token keyword">import</span> MIMEImage<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> time<span class="token keyword">import</span> traceback<span class="token comment">#延时15秒，使系统准备完毕（连上网络）</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment">#获取指定网卡 wlan0 的ip地址</span>cont <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>getoutput<span class="token punctuation">(</span><span class="token string">"ifconfig wlan0 | grep inet | grep -o -E \([0-9]+\.\)&#123;3&#125;[0-9]+ | head -n 1"</span><span class="token punctuation">)</span>localtime <span class="token operator">=</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#将时间和IP地址写入日志文件中</span>log <span class="token operator">=</span> cont<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>localtime<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"launlog.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token comment"># 发送邮件服务器</span>smtpserver <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span><span class="token comment">#代发邮件的邮箱和用于登录的认证码(在QQ邮箱的设置中获取)</span>sender <span class="token operator">=</span> <span class="token string">"xxxxxxxxxx@qq.com"</span>aucode <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span><span class="token comment">#接收邮件的IP地址</span>receiver <span class="token operator">=</span> <span class="token string">"xxxxxxxxxx@qq.com"</span>message <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token string">'related'</span><span class="token punctuation">)</span>message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'RaspberryPi'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>message<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'树莓派'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>subject <span class="token operator">=</span> <span class="token string">'树莓派'</span>message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>ipContent <span class="token operator">=</span> <span class="token string">"无线网络IP:"</span><span class="token operator">+</span>contcontent <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>ipContent<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>message<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>smtpserver<span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender<span class="token punctuation">,</span>aucode<span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException<span class="token punctuation">:</span><span class="token comment">#将异常信息写入日志文件中</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"launlog.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-编写开机启动脚本"><a href="#2-编写开机启动脚本" class="headerlink" title="2.编写开机启动脚本"></a>2.编写开机启动脚本</h1><blockquote><p>wuxian.sh</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash### BEGIN INIT INFO<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Provides<span class="token operator">:</span>          scriptname</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Required<span class="token operator">-</span>Start<span class="token operator">:</span>    $remote_fs $network</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Required<span class="token operator">-</span>Stop<span class="token operator">:</span>     $remote_fs $network</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Default<span class="token operator">-</span>Start<span class="token operator">:</span>     <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Default<span class="token operator">-</span>Stop<span class="token operator">:</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">6</span> <span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Short<span class="token operator">-</span>Description<span class="token operator">:</span> Start daemon at boot time</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Description<span class="token operator">:</span>       Enable service provided by daemon<span class="token punctuation">.</span></span></span>### END INIT INFO<span class="token function">do_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    python3 <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>py    echo <span class="token string">" start"</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token function">do_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   echo <span class="token string">"stop "</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token function">do_restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo <span class="token string">"restart"</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token function">do_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo <span class="token string">"status"</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token function">do_fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo <span class="token string">"fallback"</span> <span class="token operator">>></span> <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>Desktop<span class="token operator">/</span>wuxian<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token string">"$1"</span> instart<span class="token punctuation">)</span> do_start    <span class="token punctuation">;</span><span class="token punctuation">;</span>stop<span class="token punctuation">)</span> do_stop    <span class="token punctuation">;</span><span class="token punctuation">;</span>restart<span class="token punctuation">)</span> do_restart    <span class="token punctuation">;</span><span class="token punctuation">;</span>status<span class="token punctuation">)</span> do_status    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">)</span> do_fallback    <span class="token punctuation">;</span><span class="token punctuation">;</span>esacexit <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3、系统配置"><a href="#3、系统配置" class="headerlink" title="3、系统配置"></a>3、系统配置</h1><blockquote><p>（1）将 wuxian.sh 放置 &#x2F;etc&#x2F;init.d&#x2F; 文件夹中<br>（2）在 &#x2F;etc&#x2F;rc5.d&#x2F; 文件夹下创建一个wuxian.sh的软连接<br>（3）在终端中输入ln -s &#x2F;etc&#x2F;init.d&#x2F;wuxian.sh .&#x2F;S01wuxian.sh</p></blockquote><p>注意：</p><p>a.此时 wuxian.py 在 &#x2F;home&#x2F;pi&#x2F;Desktop&#x2F; 中</p><p>b.wuxian.sh在&#x2F;etc&#x2F;init.d&#x2F;中</p><p>c.软连接S01wuxian.sh在&#x2F;etc&#x2F;rc5.d&#x2F;中</p><p>d.有线网络的IP地址获取将Python脚本里面的<strong>wlan0</strong>改成<strong>eth0</strong>就行</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派镜像烧录</title>
      <link href="/posts/9bd7a689/"/>
      <url>/posts/9bd7a689/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装balenaEtcher烧录工具"><a href="#一、安装balenaEtcher烧录工具" class="headerlink" title="一、安装balenaEtcher烧录工具"></a>一、安装balenaEtcher烧录工具</h1><blockquote><p>下载链接：<a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></p></blockquote><p><img src="https://i.loli.net/2020/12/07/1mEjuCDOehxBPFf.png" alt="image-20201025210635969" loading="lazy"></p><h1 id="二、烧录镜像文件"><a href="#二、烧录镜像文件" class="headerlink" title="二、烧录镜像文件"></a>二、烧录镜像文件</h1><p><img src="https://i.loli.net/2020/12/07/4UDTdklvrIpz6hL.png" alt="image-20201025210732316" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/07/BzS7h2TEVXikadP.png" alt="image-20201025210823494" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/07/aRISFlDgMHO9pEj.png" alt="image-20201025210848755" loading="lazy"></p><p><img src="https://i.loli.net/2020/12/07/b3D8ART2KmVvFUZ.png" alt="image-20201025212943590" loading="lazy"></p><h1 id="三、烧录镜像成功"><a href="#三、烧录镜像成功" class="headerlink" title="三、烧录镜像成功"></a>三、烧录镜像成功</h1><p><img src="https://i.loli.net/2020/12/07/hayiYcSG3TRHPfD.png" alt="image-20201025213002398" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 镜像烧录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript深入了解基本类型和引用类型的值</title>
      <link href="/posts/c9ad4580/"/>
      <url>/posts/c9ad4580/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-深入了解基本类型和引用类型的值"><a href="#JavaScript-深入了解基本类型和引用类型的值" class="headerlink" title="JavaScript 深入了解基本类型和引用类型的值"></a>JavaScript 深入了解基本类型和引用类型的值</h1><p>一个变量可以存放两种类型的值，基本类型的值（primitive values）和引用类型的值（reference values）。</p><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p><hr><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>JavaScript 中共有 6 种基本数据类型：Undefined、Null、Boolean、Number、String、Symbol (new in ES 6) ！</p><p><strong>约定：</strong>基本数据类型与原始数据类型等意。</p><p><strong>基本数据类型的值是按值访问的。</strong></p><ul><li><p>基本类型的值是不可变的</p>  <pre class="line-numbers language-none"><code class="language-none">var str &#x3D; &quot;123hello321&quot;;str.toUpperCase();     &#x2F;&#x2F; 123HELLO321console.log(str);      &#x2F;&#x2F; 123hello321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>基本类型的比较是它们的值的比较</p>  <pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 1;var b &#x3D; true;console.log(a &#x3D;&#x3D; b);    &#x2F;&#x2F; trueconsole.log(a &#x3D;&#x3D;&#x3D; b);   &#x2F;&#x2F; false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  上面 a 和 b 的数据类型不同，但是也可以进行值的比较，这是因为在比较之前，自动进行了数据类型的 隐式转换。</p><ul><li>&#x3D;&#x3D; : 只进行值的比较</li><li>&#x3D;&#x3D;&#x3D; : 不仅进行值得比较，还要进行数据类型的比较</li></ul></li><li><p>基本类型的变量是存放在栈内存（Stack）里的</p>  <pre class="line-numbers language-none"><code class="language-none">var a,b;a &#x3D; &quot;zyj&quot;;b &#x3D; a;console.log(a);   &#x2F;&#x2F; zyjconsole.log(b);   &#x2F;&#x2F; zyja &#x3D; &quot;呵呵&quot;;       &#x2F;&#x2F; 改变 a 的值，并不影响 b 的值console.log(a);   &#x2F;&#x2F; 呵呵console.log(b);   &#x2F;&#x2F; zyj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>图解如下：栈内存中包括了变量的标识符和变量的值</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/3834493100-57c3ff4a5dac7_articlex.png" alt="img" loading="lazy"></p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>除过上面的 6 种基本数据类型外，剩下的就是引用类型了，统称为 Object 类型。细分的话，有：Object 类型、Array 类型、Date 类型、RegExp 类型、Function 类型 等。</p><p><strong>引用类型的值是按引用访问的。</strong></p><ul><li><p>引用类型的值是可变的</p>  <pre class="line-numbers language-none"><code class="language-none">var obj &#x3D; &#123;name:&quot;zyj&quot;&#125;;   &#x2F;&#x2F; 创建一个对象obj.name &#x3D; &quot;percy&quot;;       &#x2F;&#x2F; 改变 name 属性的值obj.age &#x3D; 21;             &#x2F;&#x2F; 添加 age 属性obj.giveMeAll &#x3D; function()&#123;  return this.name + &quot; : &quot; + this.age;&#125;;                        &#x2F;&#x2F; 添加 giveMeAll 方法obj.giveMeAll();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引用类型的比较是引用的比较</p>  <pre class="line-numbers language-none"><code class="language-none">var obj1 &#x3D; &#123;&#125;;    &#x2F;&#x2F; 新建一个空对象 obj1var obj2 &#x3D; &#123;&#125;;    &#x2F;&#x2F; 新建一个空对象 obj2console.log(obj1 &#x3D;&#x3D; obj2);    &#x2F;&#x2F; falseconsole.log(obj1 &#x3D;&#x3D;&#x3D; obj2);   &#x2F;&#x2F; false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  因为 obj1 和 obj2 分别引用的是存放在堆内存中的2个不同的对象，故变量 obj1 和 obj2 的值（引用地址）也是不一样的！</p></li><li><p>引用类型的值是保存在堆内存（Heap）中的对象（Object）</p><p>  与其他编程语言不同，JavaScript 不能直接操作对象的内存空间（堆内存）。</p>  <pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#123;name:&quot;percy&quot;&#125;;var b;b &#x3D; a;a.name &#x3D; &quot;zyj&quot;;console.log(b.name);    &#x2F;&#x2F; zyjb.age &#x3D; 22;console.log(a.age);     &#x2F;&#x2F; 22var c &#x3D; &#123;  name: &quot;zyj&quot;,  age: 22&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>图解如下：</p><ul><li>栈内存中保存了变量标识符和指向堆内存中该对象的指针</li><li>堆内存中保存了对象的内容</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/3309698956-57c41a89cddc7_articlex.png" alt="图片描述" loading="lazy"></p><h3 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h3><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a>：经常用来检测一个变量是不是最基本的数据类型</p>  <pre class="line-numbers language-none"><code class="language-none">var a;typeof a;    &#x2F;&#x2F; undefineda &#x3D; null;typeof a;    &#x2F;&#x2F; objecta &#x3D; true;typeof a;    &#x2F;&#x2F; booleana &#x3D; 666;typeof a;    &#x2F;&#x2F; number a &#x3D; &quot;hello&quot;;typeof a;    &#x2F;&#x2F; stringa &#x3D; Symbol();typeof a;    &#x2F;&#x2F; symbola &#x3D; function()&#123;&#125;typeof a;    &#x2F;&#x2F; functiona &#x3D; [];typeof a;    &#x2F;&#x2F; objecta &#x3D; &#123;&#125;;typeof a;    &#x2F;&#x2F; objecta &#x3D; &#x2F;aaa&#x2F;g;typeof a;    &#x2F;&#x2F; object   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof</a>：用来判断某个构造函数的 prototype 属性所指向的对象是否存在于另外一个要检测对象的原型链上</p><p>  简单说就是判断一个引用类型的变量具体是不是某种类型的对象</p>  <pre class="line-numbers language-none"><code class="language-none">(&#123;&#125;) instanceof Object              &#x2F;&#x2F; true([]) instanceof Array               &#x2F;&#x2F; true(&#x2F;aa&#x2F;g) instanceof RegExp           &#x2F;&#x2F; true(function()&#123;&#125;) instanceof Function  &#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>原文地址：<a href="https://segmentfault.com/a/1190000006752076">https://segmentfault.com/a/1190000006752076</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基本类型、引用类型、简单赋值、对象引用</title>
      <link href="/posts/1351a4af/"/>
      <url>/posts/1351a4af/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基本类型-引用类型-简单赋值-对象引用"><a href="#JavaScript-基本类型-引用类型-简单赋值-对象引用" class="headerlink" title="JavaScript 基本类型 引用类型 简单赋值 对象引用"></a>JavaScript 基本类型 引用类型 简单赋值 对象引用</h1><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>ECMAScirpt 变量有两种不同的数据类型：<code>基本类型，引用类型</code>。也有其他的叫法，比如<code>原始类型和对象类型</code>，<code>拥有方法的类型和不能拥有方法的类型</code>，还可以分为<code>可变类型和不可变类型</code>，其实这些叫法都是依据这两种的<code>类型特点</code>来命名的，大家爱叫啥就叫啥吧 o(╯□╰)o 。</p><h2 id="1-基本类型"><a href="#1-基本类型" class="headerlink" title="1.基本类型"></a>1.基本类型</h2><p>基本的数据类型有：undefined，boolean，number，string，null。基本类型的访问是按值访问的，就是说你可以操作保存在变量中的实际的值。基本类型有以下几个特点：</p><p><strong>1.基本类型的值是不可变得：</strong></p><p>任何方法都无法改变一个基本类型的值，比如一个字符串：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var name = 'jozo';name.toUpperCase(); // 输出 'JOZO'console.log(name); // 输出  'jozo'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会发现原始的name并未发生改变，而是调用了toUpperCase()方法后返回的是一个新的字符串。<br>再来看个：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var person = 'jozo';person.age = 22;person.method = function()&#123;//...&#125;;console.log(person.age); // undefinedconsole.log(person.method); // undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面代码可知，我们不能给基本类型添加属性和方法，再次说明基本类型时不可变得；</p><p><strong>2.基本类型的比较是值的比较：</strong></p><p>只有在它们的值相等的时候它们才相等。<br>但你可能会这样：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var a = 1;var b = true;console.log(a == b);//true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它们不是相等吗？其实这是<code>类型转换</code>和 <code>==</code> 运算符的知识了，也就是说在用&#x3D;&#x3D;比较两个不同类型的变量时会进行一些类型转换。像上面的比较先会把true转换为数字1再和数字1进行比较，结果就是true了。 这是当比较的两个值的类型不同的时候&#x3D;&#x3D;运算符会进行类型转换，但是当两个值的类型相同的时候，即使是&#x3D;&#x3D;也相当于是&#x3D;&#x3D;&#x3D;。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var a = 'jozo';var b = 'jozo';console.log(a === b);//true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3.基本类型的变量是存放在栈区的（栈区指内存里的栈内存）</strong></p><p>假如有以下几个基本类型的变量：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var name = 'jozo';var city = 'guangzhou';var age = 22;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么它的存储结构如下图：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/1480902711-55608eac1ef9b_articlex.png" alt="clipboard.png" loading="lazy"></p><p>栈区包括了 变量的标识符和变量的值。</p><h2 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="2.引用类型"></a>2.引用类型</h2><p>引用类型会比较好玩有趣一些。</p><p>javascript中除了上面的基本类型<code>(number,string,boolean,null,undefined)</code>之外就是引用类型了，也可以说是就是对象了。对象是属性和方法的集合。也就是说引用类型可以拥有属性和方法，属性又可以包含基本类型和引用类型。来看看引用类型的一些特性：</p><p><strong>1.引用类型的值是可变的</strong></p><p>我们可为为引用类型添加属性和方法，也可以删除其属性和方法，如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var person = &#123;&#125;;//创建个控对象 --引用类型person.name = 'jozo';person.age = 22;person.sayName = function()&#123;console.log(person.name);&#125; person.sayName();// 'jozo'delete person.name; //删除person对象的name属性person.sayName(); // undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码说明引用类型可以拥有属性和方法，并且是可以动态改变的。</p><p><strong>2.引用类型的值是同时保存在栈内存和堆内存中的对象</strong></p><p>javascript和其他语言不同，其不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间，那我们操作啥呢？ 实际上，是操作对象的引用，所以引用类型的值是按引用访问的。<br>准确地说，引用类型的存储需要内存的栈区和堆区（堆区是指内存里的堆内存）共同完成，栈区内存保存变量标识符和指向堆内存中该对象的指针，也可以说是该对象在堆内存的地址。<br>假如有以下几个对象：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var person1 = &#123;name:'jozo'&#125;;var person2 = &#123;name:'xiaom'&#125;;var person3 = &#123;name:'xiaoq'&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则这三个对象的在内存中保存的情况如下图：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/1303646121-5560990755326_articlex.png" alt="clipboard.png" loading="lazy"></p><p><strong>3.引用类型的比较是引用的比较</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var person1 = '&#123;&#125;';var person2 = '&#123;&#125;';console.log(person1 == person2); // true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面讲基本类型的比较的时候提到了当两个比较值的类型相同的时候，相当于是用 &#x3D;&#x3D;&#x3D; ，所以输出是true了。再看看：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">var person1 = &#123;&#125;;var person2 = &#123;&#125;;console.log(person1 == person2); // false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可能你已经看出破绽了，上面比较的是两个字符串，而下面比较的是两个对象，为什么长的一模一样的对象就不相等了呢？</p><p>别忘了，引用类型时按引用访问的，换句话说就是比较两个对象的堆内存中的地址是否相同，那很明显，person1和person2在堆内存中地址是不同的：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/3278409663-55609d5ead9bd_articlex.png" alt="img" loading="lazy"></p><p>所以这两个是完全不同的对象，所以返回false;</p><h2 id="3-简单赋值"><a href="#3-简单赋值" class="headerlink" title="3.简单赋值"></a>3.简单赋值</h2><p>在从一个变量向另一个变量赋值基本类型时，会在该变量上创建一个新值，然后再把该值复制到为新变量分配的位置上：</p><pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 10;var b &#x3D; a;a ++ ;console.log(a); &#x2F;&#x2F; 11console.log(b); &#x2F;&#x2F; 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，a中保存的值为 10 ，当使用 a 来初始化 b 时，b 中保存的值也为10，但b中的10与a中的是完全独立的，该值只是a中的值的一个副本，此后，这两个变量可以参加任何操作而相互不受影响。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/2267925907-556199deeed58_articlex.png" alt="clipboard.png" loading="lazy"></p><p>也就是说基本类型在赋值操作后，两个变量是相互不受影响的。</p><h2 id="4-对象引用"><a href="#4-对象引用" class="headerlink" title="4.对象引用"></a>4.对象引用</h2><p>当从一个变量向另一个变量赋值引用类型的值时，同样也会将存储在变量中的对象的值复制一份放到为新变量分配的空间中。前面讲引用类型的时候提到，保存在变量中的是对象在堆内存中的地址，所以，与简单赋值不同，这个值的副本实际上是一个指针，而这个指针指向存储在堆内存的一个对象。那么赋值操作后，两个变量都保存了同一个对象地址，则这两个变量指向了同一个对象。因此，改变其中任何一个变量，都会相互影响：</p><pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#123;&#125;; &#x2F;&#x2F; a保存了一个空对象的实例var b &#x3D; a;  &#x2F;&#x2F; a和b都指向了这个空对象a.name &#x3D; &#39;jozo&#39;;console.log(a.name); &#x2F;&#x2F; &#39;jozo&#39;console.log(b.name); &#x2F;&#x2F; &#39;jozo&#39;b.age &#x3D; 22;console.log(b.age);&#x2F;&#x2F; 22console.log(a.age);&#x2F;&#x2F; 22console.log(a &#x3D;&#x3D; b);&#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它们的关系如下图：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/2052038946-55619ed80a85e_articlex.png" alt="img" loading="lazy"></p><p>因此，引用类型的赋值其实是对象保存在栈区地址指针的赋值，因此两个变量指向同一个对象，任何的操作都会相互影响。</p><blockquote><p>原文链接：<a href="https://segmentfault.com/a/1190000002789651">https://segmentfault.com/a/1190000002789651</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML状态消息</title>
      <link href="/posts/c473cc2a/"/>
      <url>/posts/c473cc2a/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-状态消息"><a href="#HTTP-状态消息" class="headerlink" title="HTTP 状态消息"></a>HTTP 状态消息</h1><hr><p>当浏览器从 web 服务器请求服务时，可能会发生错误。</p><p>以下列举了有可能会返回的一系列 HTTP 状态消息：</p><hr><h2 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h2><table><thead><tr><th align="left">消息：</th><th align="left">描述：</th></tr></thead><tbody><tr><td align="left">100 Continue</td><td align="left">服务器仅接收到部分请求，如果服务器没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td align="left">101 Switching Protocols</td><td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr><tr><td align="left">103 Checkpoint</td><td align="left">用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td></tr></tbody></table><h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h2><table><thead><tr><th align="left">消息：</th><th align="left">描述：</th></tr></thead><tbody><tr><td align="left">200 OK</td><td align="left">请求成功（这是对HTTP请求成功的标准应答。）</td></tr><tr><td align="left">201 Created</td><td align="left">请求被创建完成，同时新的资源被创建。</td></tr><tr><td align="left">202 Accepted</td><td align="left">供处理的请求已被接受，但是处理未完成。</td></tr><tr><td align="left">203 Non-Authoritative Information</td><td align="left">请求已经被成功处理，但是一些应答头可能不正确，因为使用的是其他文档的拷贝。</td></tr><tr><td align="left">204 No Content</td><td align="left">请求已经被成功处理，但是没有返回新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td align="left">205 Reset Content</td><td align="left">请求已经被成功处理，但是没有返回新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td align="left">206 Partial Content</td><td align="left">客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr></tbody></table><h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h2><table><thead><tr><th align="left">消息：</th><th align="left">描述：</th></tr></thead><tbody><tr><td align="left">300 Multiple Choices</td><td align="left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td align="left">301 Moved Permanently</td><td align="left">所请求的页面已经转移至新的 URL 。</td></tr><tr><td align="left">302 Found</td><td align="left">所请求的页面已经临时转移至新的 URL 。</td></tr><tr><td align="left">303 See Other</td><td align="left">所请求的页面可在别的 URL 下被找到。</td></tr><tr><td align="left">304 Not Modified</td><td align="left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td align="left">305 Use Proxy</td><td align="left">客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td align="left">306 Switch Proxy</td><td align="left"><em>目前已不再使用，但是代码依然被保留。</em></td></tr><tr><td align="left">307 Temporary Redirect</td><td align="left">被请求的页面已经临时移至新的 URL 。</td></tr><tr><td align="left">308 Resume Incomplete</td><td align="left">用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td></tr></tbody></table><h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h2><table><thead><tr><th align="left">消息：</th><th align="left">描述：</th></tr></thead><tbody><tr><td align="left">400 Bad Request</td><td align="left">因为语法错误，服务器未能理解请求。</td></tr><tr><td align="left">401 Unauthorized</td><td align="left">合法请求，但对被请求页面的访问被禁止。因为被请求的页面需要身份验证，客户端没有提供或者身份验证失败。</td></tr><tr><td align="left">402 Payment Required</td><td align="left"><em>此代码尚无法使用。</em></td></tr><tr><td align="left">403 Forbidden</td><td align="left">合法请求，但对被请求页面的访问被禁止。</td></tr><tr><td align="left">404 Not Found</td><td align="left">服务器无法找到被请求的页面。</td></tr><tr><td align="left">405 Method Not Allowed</td><td align="left">请求中指定的方法不被允许。</td></tr><tr><td align="left">406 Not Acceptable</td><td align="left">服务器生成的响应无法被客户端所接受。</td></tr><tr><td align="left">407 Proxy Authentication Required</td><td align="left">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td align="left">408 Request Timeout</td><td align="left">请求超出了服务器的等待时间。</td></tr><tr><td align="left">409 Conflict</td><td align="left">由于冲突，请求无法被完成。</td></tr><tr><td align="left">410 Gone</td><td align="left">被请求的页面不可用。</td></tr><tr><td align="left">411 Length Required</td><td align="left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td align="left">412 Precondition Failed</td><td align="left">请求中的前提条件被服务器评估为失败。</td></tr><tr><td align="left">413 Request Entity Too Large</td><td align="left">由于所请求的实体太大，服务器不会接受请求。</td></tr><tr><td align="left">414 Request-URI Too Long</td><td align="left">由于 URL 太长，服务器不会接受请求。当 POST 请求被转换为带有很长的查询信息的 GET 请求时，就会发生这种情况。</td></tr><tr><td align="left">415 Unsupported Media Type</td><td align="left">由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td align="left">416 Requested Range Not Satisfiable</td><td align="left">客户端请求部分文档，但是服务器不能提供被请求的部分。</td></tr><tr><td align="left">417 Expectation Failed</td><td align="left">服务器不能满足客户在请求中指定的请求头。</td></tr></tbody></table><h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h2><table><thead><tr><th align="left">消息：</th><th align="left">描述：</th></tr></thead><tbody><tr><td align="left">500 Internal Server Error</td><td align="left">请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td align="left">501 Not Implemented</td><td align="left">请求未完成。服务器不支持所请求的功能，或者服务器无法完成请求。</td></tr><tr><td align="left">502 Bad Gateway</td><td align="left">请求未完成。服务器充当网关或者代理的角色时，从上游服务器收到一个无效的响应。</td></tr><tr><td align="left">503 Service Unavailable</td><td align="left">服务器当前不可用（过载或者当机）。</td></tr><tr><td align="left">504 Gateway Timeout</td><td align="left">网关超时。服务器充当网关或者代理的角色时，未能从上游服务器收到一个及时的响应。</td></tr><tr><td align="left">505 HTTP Version Not Supported</td><td align="left">服务器不支持请求中指明的HTTP协议版本。</td></tr><tr><td align="left">511 Network Authentication Required</td><td align="left">用户需要提供身份验证来获取网络访问入口。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML入门与实战</title>
      <link href="/posts/a0c9f462/"/>
      <url>/posts/a0c9f462/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-Web基础"><a href="#第一章-Web基础" class="headerlink" title="第一章 Web基础"></a>第一章 Web基础</h1><ul><li>浏览器：渲染网页展示</li></ul><h2 id="1、常见浏览器"><a href="#1、常见浏览器" class="headerlink" title="1、常见浏览器"></a>1、常见浏览器</h2><ul><li>IE、Edge</li><li>Google Chrome</li><li>Mozilla Firefox</li><li>Safari</li><li>Opera</li></ul><h2 id="2、浏览器内核"><a href="#2、浏览器内核" class="headerlink" title="2、浏览器内核"></a>2、浏览器内核</h2><ul><li><p>浏览器内核可以分成两部分：渲染引擎（Layout engineer 或者 Rendering Engine）和 JS 引擎。</p></li><li><p>渲染引擎负责取得网页的内容（HTML、XML、图像等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后输出至显示器或打印机。</p></li><li><p>JS引擎则是解析JavaScript语言，执行JavaScript语言来实现网页的动态效果。</p>  <pre class="line-numbers language-none"><code class="language-none">Trident（IE内核）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>IE、Edge、360</p></li><li><p>大多多核浏览器的兼容内核</p>  <pre class="line-numbers language-none"><code class="language-none">Gecko（firefox内核）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>代码开源，可开发程度高</p></li><li><p>打开速度慢、升级频繁</p>  <pre class="line-numbers language-none"><code class="language-none">webkit（Safari内核）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>早期chrome使用webkit内核，现在改为blink</p>  <pre class="line-numbers language-none"><code class="language-none">chromium&#x2F;Blink（chrome内核）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>blink实际上是webkit的分支</p>  <pre class="line-numbers language-none"><code class="language-none">Presto（opera内核）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>presto是opera早期内核，现在已经换为谷歌的blink内核。</p>  <pre class="line-numbers language-none"><code class="language-none">移动端的浏览器内核<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>移动端的浏览器内核说的是系统内置浏览器的内核。</p><p>ios平台主要是webkit，Android 4.4之前的内核是webkit，后面切换到了chromium，Windows Phone 8的内核是Trident。</p><h2 id="3、web标准"><a href="#3、web标准" class="headerlink" title="3、web标准"></a>3、web标准</h2><p>Web标准是由W3C和其他标准化组织制定的一系列标准的集合。主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><p>结构标准：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。</p><p>样式标准：表现用于设置网页元素的板式、颜色、大小等外观样式，主要指的是CSS。</p><p>行为标准：行为是指网页模型的定义以及交互的编写，主要包括DOM和ECMAScript两个部分。</p><p>理想状态的源码：.html、.css、.js 。</p><h1 id="第二章-HTML入门"><a href="#第二章-HTML入门" class="headerlink" title="第二章  HTML入门"></a>第二章  HTML入门</h1><h2 id="1、HTML初识"><a href="#1、HTML初识" class="headerlink" title="1、HTML初识"></a>1、HTML初识</h2><ul><li>HTML（英文Hyper Text Markup Language的缩写），中文译名为“超文本标签语言”，主要是通过对HTML标签对网页中的文本、图片、声音等内容进行描述。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>加粗文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、骨架格式"><a href="#2、骨架格式" class="headerlink" title="2、骨架格式"></a>2、骨架格式</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、标签"><a href="#3、标签" class="headerlink" title="3、标签"></a>3、标签</h2><h3 id="（1）必要的标签"><a href="#（1）必要的标签" class="headerlink" title="（1）必要的标签"></a>（1）必要的标签</h3><ul><li>html标签：作为所有html中标签的一个根节点</li><li>head标签：用于存放title、meta、base、style、script、link，head标签中必须设置的标签是title</li><li>title标签：页面标题</li><li>body标签：页面主体部分</li></ul><h3 id="（2）标签分类"><a href="#（2）标签分类" class="headerlink" title="（2）标签分类"></a>（2）标签分类</h3><ul><li><p>在HTML页面中，带有&lt;&gt;符号的元素被称为标签或元素。</p></li><li><p>1、双标签：该语法中&lt;标签名&gt;表示该标签的作用开始，一般称为开始标签；&lt;&#x2F;标签名&gt;表示该标签的作用结束，一般称为结束标签。</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>2、单标签：单标签也称空标签，是指一个标签符号即可完整地描述某个功能的标签。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span><span class="token punctuation">/></span></span>比如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="（3）标签嵌套和并列关系"><a href="#（3）标签嵌套和并列关系" class="headerlink" title="（3）标签嵌套和并列关系"></a>（3）标签嵌套和并列关系</h3><ul><li>嵌套关系：html嵌套head，head嵌套title</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>并列关系：比如head和body</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>下列哪个标签是错误的？</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>XD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、开发工具：快速生成标签、骨架"><a href="#4、开发工具：快速生成标签、骨架" class="headerlink" title="4、开发工具：快速生成标签、骨架"></a>4、开发工具：快速生成标签、骨架</h2><ul><li>Dreamweaver</li><li>sublime</li><li>WebStorm</li><li>HBuilder</li><li>VSCode</li></ul><h2 id="5、doctype文档类型"><a href="#5、doctype文档类型" class="headerlink" title="5、doctype文档类型"></a>5、doctype文档类型</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这句话告诉我们所使用的html版本，html 5的版本</li><li>位于文档的最前面，用于向浏览器说明当前文档使用哪种HTML或XHTML标准规范，必须在开头使用该标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</li></ul><h2 id="6、字符集简介"><a href="#6、字符集简介" class="headerlink" title="6、字符集简介"></a>6、字符集简介</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>utf-8是目前最常用的字符集编码方式，还有gbk和gb2312等较常用。</li><li>GB2312简单中文，包含6763个汉字</li><li>GBK包含全部中文字符，是GB2312的扩展，兼容GB2312</li><li>UTF-8包含全世界所有国家需要用到的字符</li></ul><h1 id="第三章-HTML标签"><a href="#第三章-HTML标签" class="headerlink" title="第三章 HTML标签"></a>第三章 HTML标签</h1><h2 id="1、标签的语义化"><a href="#1、标签的语义化" class="headerlink" title="1、标签的语义化"></a>1、标签的语义化</h2><ul><li>标签语义化即标签的含义。</li><li>语义化标签</li></ul><pre class="line-numbers language-none"><code class="language-none">1、方便代码的阅读和维护2、同时让浏览器方便解析3、搜索引擎优化核心：合适的地方给一个合理的标签。语义良好：去掉CSS后，网页结构依然组织有序，并且有良好的可读性。原则：先确定语义的HTML，再选合适的CSS。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、排版标签"><a href="#2、排版标签" class="headerlink" title="2、排版标签"></a>2、排版标签</h2><ul><li>排版标签主要和CSS搭配使用，显示网页结构的标签，是网页布局最常用的标签。</li></ul><h3 id="（1）标题标签"><a href="#（1）标题标签" class="headerlink" title="（1）标题标签"></a>（1）标题标签</h3><ul><li>单词缩写head，头部、标题</li><li>HTML提供了6个等级的标题：&lt; h1 &gt;到&lt; h6 &gt;</li><li>语义：作为标题使用，并且依据重要性递减</li><li>最小到6级标题，数字再大无效</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题标签测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>二级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>三级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>四级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>五级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>六级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）段落标签"><a href="#（2）段落标签" class="headerlink" title="（2）段落标签"></a>（2）段落标签</h3><ul><li>单词缩写：paragraph</li><li>就像写文章一样的，对内容分段</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一段文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</li></ul><h3 id="（3）水平线标签"><a href="#（3）水平线标签" class="headerlink" title="（3）水平线标签"></a>（3）水平线标签</h3><ul><li>单词缩写：horizontal 横线</li><li>在网页中用水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以通过标签完成。</li><li>单标签</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在网页中显示默认样式的水平线。</li></ul><h3 id="（4）换行标签"><a href="#（4）换行标签" class="headerlink" title="（4）换行标签"></a>（4）换行标签</h3><ul><li>单词缩写：break 打断，换行</li><li>在HTML中，一个段落中的文字会从左到右依次排列，知道浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签。</li><li>单标签</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（5）div-span标签"><a href="#（5）div-span标签" class="headerlink" title="（5）div span标签"></a>（5）div span标签</h3><ul><li>div就是division的缩写</li><li>span 跨度，跨距；范围</li><li>div和span是没有语义的，是网页布局主要的两个盒子</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 这是头部 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>今日价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、文本格式化标签"><a href="#3、文本格式化标签" class="headerlink" title="3、文本格式化标签"></a>3、文本格式化标签</h2><ul><li>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊方式显示。</li><li>表格中的标签不带内左右不带空格，因为CSDN不加空格显示不出来</li></ul><table><thead><tr><th align="center">标签</th><th align="center">显示效果</th></tr></thead><tbody><tr><td align="center">&lt; b &gt;&lt; &#x2F;b &gt;，&lt; strong &gt;&lt; &#x2F;strong &gt;</td><td align="center">文字以粗体方式显示（XHTML推荐使用strong）</td></tr><tr><td align="center">&lt; i &gt;&lt; &#x2F;i &gt;，&lt; em &gt;&lt; &#x2F;em&gt;</td><td align="center">文字以斜体方式显示（XHTML推荐使用em）</td></tr><tr><td align="center">&lt; s &gt;&lt; &#x2F;s &gt;，&lt; del &gt;&lt; &#x2F;del &gt;</td><td align="center">文字以加删除线方式显示（XHTML推荐使用del ）</td></tr><tr><td align="center">&lt; u &gt;&lt; &#x2F;u &gt;，&lt; ins &gt;&lt; &#x2F;ins &gt;</td><td align="center">文字以加下划线方式显示（XHTML推荐使用ins）</td></tr></tbody></table><ul><li>四列的后者语义更强烈</li></ul><h2 id="4、标签属性"><a href="#4、标签属性" class="headerlink" title="4、标签属性"></a>4、标签属性</h2><ul><li>属性就是特性，使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置，其基本语法如下：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token attr-name">属性1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值1<span class="token punctuation">"</span></span> <span class="token attr-name">属性2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均用空格分开。</li><li>任何标签的属性都有默认值，省略该属性则取默认值。</li><li>采取 键值对 的格式 key&#x3D;“value”</li><li>比如 水平线长度（宽）width为400，颜色为红色</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5、图像标签"><a href="#5、图像标签" class="headerlink" title="5、图像标签"></a>5、图像标签</h2><ul><li>单词缩写：image 图像</li><li>图像标签的语法如下：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图像URL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>图像标签的属性</li></ul><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th>描述</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">URL</td><td>图像的路径</td></tr><tr><td align="center">alt</td><td align="center">文本</td><td>图像不能显示时的替换文本</td></tr><tr><td align="center">title</td><td align="center">文本</td><td>鼠标悬停时显示的内容</td></tr><tr><td align="center">width</td><td align="center">像素（XHTML不支持%页面百分比）</td><td>设置图像的宽度</td></tr><tr><td align="center">alt</td><td align="center">像素（XHTML不支持%页面百分比）</td><td>设置图像的高度</td></tr><tr><td align="center">border</td><td align="center">数字</td><td>设置图像边框的宽度</td></tr></tbody></table><h2 id="6、链接标签"><a href="#6、链接标签" class="headerlink" title="6、链接标签"></a>6、链接标签</h2><ul><li>单词缩写：anchor 锚</li><li>创建超链接，需要用链接标签环绕被链接的对象即可，语法如下：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。Hypertext Reference的缩写</p></li><li><p>target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p></li><li><p>注意：</p><p>  （1）外部链接 需要添加 http:&#x2F;&#x2F;<br>  （2）内部链接 直接链接内部页面名称即可，比如 &lt; a href&#x3D;“index.hrml”&gt;首页&lt; &#x2F;a&gt;<br>  （3）如果当时没有确定链接目标时，通常将链接标签的href属性值定义为#，表示该链接暂时为一个空链接。<br>  （4）不仅可以创建文本超链接，在网页中的各种元素，如图像、表格、音频、视频等都可以添加超链接。</p></li></ul><h2 id="7、锚点定位"><a href="#7、锚点定位" class="headerlink" title="7、锚点定位"></a>7、锚点定位</h2><ul><li>通过创建锚点链接，用户能快速定位到目标内容；比如CSDN博客的目录。</li><li>创建锚点链接分两步：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">1、使用以下语句创建链接文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#id名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>2、使用相应的id名标注跳转目标的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8、base标签"><a href="#8、base标签" class="headerlink" title="8、base标签"></a>8、base标签</h2><ul><li>base可以设置整体链接的打开状态</li><li>比如把链接都设置为新窗口打开</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="9、特殊字符"><a href="#9、特殊字符" class="headerlink" title="9、特殊字符"></a>9、特殊字符</h2><ul><li>HTML为这些特殊字符准备了专门的替代代码，可以用于CSDN博文。</li><li>字符的代码中，&amp;后没有空格，在CSDN博文中不加就被当特殊字符转义了</li></ul><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td></td><td>空格</td><td>&amp; nbsp;</td></tr><tr><td>&lt;</td><td>小于号</td><td>&amp; lt;</td></tr><tr><td>&gt;</td><td>小于号</td><td>&amp; gt;</td></tr><tr><td>&amp;</td><td>小于号</td><td>&amp; amp;</td></tr><tr><td>￥</td><td>人名币</td><td>&amp; yen;</td></tr><tr><td>©</td><td>版权</td><td>&amp; copy;</td></tr><tr><td>®</td><td>注册商标</td><td>&amp; reg;</td></tr><tr><td>°</td><td>摄氏度</td><td>&amp; deg;</td></tr><tr><td>±</td><td>正负号</td><td>&amp; plusmn;</td></tr><tr><td>×</td><td>乘号</td><td>&amp; times;</td></tr><tr><td>÷</td><td>除号</td><td>&amp; divide;</td></tr><tr><td>²</td><td>平方（上标2）</td><td>&amp; sup2;</td></tr><tr><td>³</td><td>立方（上标3）</td><td>&amp; sup3;</td></tr></tbody></table><h2 id="10、注释标签"><a href="#10、注释标签" class="headerlink" title="10、注释标签"></a>10、注释标签</h2><ul><li>如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。语法如下：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 注释语句 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注释内容不会显示在浏览器窗口中，但是作为HTML文档的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</li></ul><h2 id="11、路径"><a href="#11、路径" class="headerlink" title="11、路径"></a>11、路径</h2><ul><li><p>路径可以分为：相对路径和绝对路径</p></li><li><p>相对路径：</p><p>  （1）图像文件和HTML文件位于同一文件夹：只需要输入图像文件的名称即可。<br>  （2）图像文件位于HTML文件的下一级文件夹：输入文件夹和文件名，之间用&#x2F;分开。<br>  （3）图像文件位于HTML文件的上一级文件夹：在文件名之前加“…&#x2F;”，如果是上两级，则需要使用“…&#x2F;…&#x2F;”，以此类推。</p></li><li><p>绝对路径：完整的地址信息。</p></li></ul><h2 id="12、列表标签"><a href="#12、列表标签" class="headerlink" title="12、列表标签"></a>12、列表标签</h2><ul><li>容器内装载着文字或者图表的一种形式，叫列表。</li><li>列表最大的特点是整齐、有序。</li><li>列表分为无序列表、有序列表和自定义列表。</li></ul><h3 id="1-无序列表-ul"><a href="#1-无序列表-ul" class="headerlink" title="(1)无序列表 ul"></a>(1)无序列表 ul</h3><ul><li>无序列表的各个列表项之间没有顺序级别之分，是并列的。基本语法如下：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>···<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意事项：</li></ul><blockquote><p>&lt; ul&gt;&lt; &#x2F;ul&gt;中只能嵌套&lt; li&gt;&lt; &#x2F;li&gt;，直接在无序列表标签中输入其他标签或者文字的做法是不允许的。<br>&lt; li&gt;与&lt; &#x2F;li&gt;之间相当于一个容器，可以容纳所有元素。<br>无序列表会带有自己的样式属性。</p></blockquote><h3 id="2-有序列表-ol"><a href="#2-有序列表-ol" class="headerlink" title="(2)有序列表 ol"></a>(2)有序列表 ol</h3><ul><li>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>···<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-自定义列表"><a href="#3-自定义列表" class="headerlink" title="(3)自定义列表"></a>(3)自定义列表</h3><ul><li>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>···<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
